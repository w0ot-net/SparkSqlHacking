package org.apache.spark.sql.catalyst.parser;

import java.util.ArrayList;
import java.util.List;
import org.antlr.v4.runtime.FailedPredicateException;
import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.RuleContext;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

public class SqlBaseParser extends Parser {
   protected static final DFA[] _decisionToDFA;
   protected static final PredictionContextCache _sharedContextCache;
   public static final int SEMICOLON = 1;
   public static final int LEFT_PAREN = 2;
   public static final int RIGHT_PAREN = 3;
   public static final int COMMA = 4;
   public static final int DOT = 5;
   public static final int LEFT_BRACKET = 6;
   public static final int RIGHT_BRACKET = 7;
   public static final int BANG = 8;
   public static final int ADD = 9;
   public static final int AFTER = 10;
   public static final int AGGREGATE = 11;
   public static final int ALL = 12;
   public static final int ALTER = 13;
   public static final int ALWAYS = 14;
   public static final int ANALYZE = 15;
   public static final int AND = 16;
   public static final int ANTI = 17;
   public static final int ANY = 18;
   public static final int ANY_VALUE = 19;
   public static final int ARCHIVE = 20;
   public static final int ARRAY = 21;
   public static final int AS = 22;
   public static final int ASC = 23;
   public static final int AT = 24;
   public static final int ATOMIC = 25;
   public static final int AUTHORIZATION = 26;
   public static final int BEGIN = 27;
   public static final int BETWEEN = 28;
   public static final int BIGINT = 29;
   public static final int BINARY = 30;
   public static final int BINDING = 31;
   public static final int BOOLEAN = 32;
   public static final int BOTH = 33;
   public static final int BUCKET = 34;
   public static final int BUCKETS = 35;
   public static final int BY = 36;
   public static final int BYTE = 37;
   public static final int CACHE = 38;
   public static final int CALL = 39;
   public static final int CALLED = 40;
   public static final int CASCADE = 41;
   public static final int CASE = 42;
   public static final int CAST = 43;
   public static final int CATALOG = 44;
   public static final int CATALOGS = 45;
   public static final int CHANGE = 46;
   public static final int CHAR = 47;
   public static final int CHARACTER = 48;
   public static final int CHECK = 49;
   public static final int CLEAR = 50;
   public static final int CLUSTER = 51;
   public static final int CLUSTERED = 52;
   public static final int CODEGEN = 53;
   public static final int COLLATE = 54;
   public static final int COLLATION = 55;
   public static final int COLLECTION = 56;
   public static final int COLUMN = 57;
   public static final int COLUMNS = 58;
   public static final int COMMENT = 59;
   public static final int COMMIT = 60;
   public static final int COMPACT = 61;
   public static final int COMPACTIONS = 62;
   public static final int COMPENSATION = 63;
   public static final int COMPUTE = 64;
   public static final int CONCATENATE = 65;
   public static final int CONDITION = 66;
   public static final int CONSTRAINT = 67;
   public static final int CONTAINS = 68;
   public static final int CONTINUE = 69;
   public static final int COST = 70;
   public static final int CREATE = 71;
   public static final int CROSS = 72;
   public static final int CUBE = 73;
   public static final int CURRENT = 74;
   public static final int CURRENT_DATE = 75;
   public static final int CURRENT_TIME = 76;
   public static final int CURRENT_TIMESTAMP = 77;
   public static final int CURRENT_USER = 78;
   public static final int DAY = 79;
   public static final int DAYS = 80;
   public static final int DAYOFYEAR = 81;
   public static final int DATA = 82;
   public static final int DATE = 83;
   public static final int DATABASE = 84;
   public static final int DATABASES = 85;
   public static final int DATEADD = 86;
   public static final int DATE_ADD = 87;
   public static final int DATEDIFF = 88;
   public static final int DATE_DIFF = 89;
   public static final int DBPROPERTIES = 90;
   public static final int DEC = 91;
   public static final int DECIMAL = 92;
   public static final int DECLARE = 93;
   public static final int DEFAULT = 94;
   public static final int DEFINED = 95;
   public static final int DEFINER = 96;
   public static final int DELETE = 97;
   public static final int DELIMITED = 98;
   public static final int DESC = 99;
   public static final int DESCRIBE = 100;
   public static final int DETERMINISTIC = 101;
   public static final int DFS = 102;
   public static final int DIRECTORIES = 103;
   public static final int DIRECTORY = 104;
   public static final int DISTINCT = 105;
   public static final int DISTRIBUTE = 106;
   public static final int DIV = 107;
   public static final int DO = 108;
   public static final int DOUBLE = 109;
   public static final int DROP = 110;
   public static final int ELSE = 111;
   public static final int ELSEIF = 112;
   public static final int END = 113;
   public static final int ESCAPE = 114;
   public static final int ESCAPED = 115;
   public static final int EVOLUTION = 116;
   public static final int EXCEPT = 117;
   public static final int EXCHANGE = 118;
   public static final int EXCLUDE = 119;
   public static final int EXISTS = 120;
   public static final int EXIT = 121;
   public static final int EXPLAIN = 122;
   public static final int EXPORT = 123;
   public static final int EXTEND = 124;
   public static final int EXTENDED = 125;
   public static final int EXTERNAL = 126;
   public static final int EXTRACT = 127;
   public static final int FALSE = 128;
   public static final int FETCH = 129;
   public static final int FIELDS = 130;
   public static final int FILTER = 131;
   public static final int FILEFORMAT = 132;
   public static final int FIRST = 133;
   public static final int FLOAT = 134;
   public static final int FOLLOWING = 135;
   public static final int FOR = 136;
   public static final int FOREIGN = 137;
   public static final int FORMAT = 138;
   public static final int FORMATTED = 139;
   public static final int FOUND = 140;
   public static final int FROM = 141;
   public static final int FULL = 142;
   public static final int FUNCTION = 143;
   public static final int FUNCTIONS = 144;
   public static final int GENERATED = 145;
   public static final int GLOBAL = 146;
   public static final int GRANT = 147;
   public static final int GROUP = 148;
   public static final int GROUPING = 149;
   public static final int HANDLER = 150;
   public static final int HAVING = 151;
   public static final int BINARY_HEX = 152;
   public static final int HOUR = 153;
   public static final int HOURS = 154;
   public static final int IDENTIFIER_KW = 155;
   public static final int IDENTITY = 156;
   public static final int IF = 157;
   public static final int IGNORE = 158;
   public static final int IMMEDIATE = 159;
   public static final int IMPORT = 160;
   public static final int IN = 161;
   public static final int INCLUDE = 162;
   public static final int INCREMENT = 163;
   public static final int INDEX = 164;
   public static final int INDEXES = 165;
   public static final int INNER = 166;
   public static final int INPATH = 167;
   public static final int INPUT = 168;
   public static final int INPUTFORMAT = 169;
   public static final int INSERT = 170;
   public static final int INTERSECT = 171;
   public static final int INTERVAL = 172;
   public static final int INT = 173;
   public static final int INTEGER = 174;
   public static final int INTO = 175;
   public static final int INVOKER = 176;
   public static final int IS = 177;
   public static final int ITEMS = 178;
   public static final int ITERATE = 179;
   public static final int JOIN = 180;
   public static final int JSON = 181;
   public static final int KEYS = 182;
   public static final int LANGUAGE = 183;
   public static final int LAST = 184;
   public static final int LATERAL = 185;
   public static final int LAZY = 186;
   public static final int LEADING = 187;
   public static final int LEAVE = 188;
   public static final int LEFT = 189;
   public static final int LIKE = 190;
   public static final int ILIKE = 191;
   public static final int LIMIT = 192;
   public static final int LINES = 193;
   public static final int LIST = 194;
   public static final int LOAD = 195;
   public static final int LOCAL = 196;
   public static final int LOCATION = 197;
   public static final int LOCK = 198;
   public static final int LOCKS = 199;
   public static final int LOGICAL = 200;
   public static final int LONG = 201;
   public static final int LOOP = 202;
   public static final int MACRO = 203;
   public static final int MAP = 204;
   public static final int MATCHED = 205;
   public static final int MERGE = 206;
   public static final int MICROSECOND = 207;
   public static final int MICROSECONDS = 208;
   public static final int MILLISECOND = 209;
   public static final int MILLISECONDS = 210;
   public static final int MINUTE = 211;
   public static final int MINUTES = 212;
   public static final int MODIFIES = 213;
   public static final int MONTH = 214;
   public static final int MONTHS = 215;
   public static final int MSCK = 216;
   public static final int NAME = 217;
   public static final int NAMESPACE = 218;
   public static final int NAMESPACES = 219;
   public static final int NANOSECOND = 220;
   public static final int NANOSECONDS = 221;
   public static final int NATURAL = 222;
   public static final int NO = 223;
   public static final int NONE = 224;
   public static final int NOT = 225;
   public static final int NULL = 226;
   public static final int NULLS = 227;
   public static final int NUMERIC = 228;
   public static final int OF = 229;
   public static final int OFFSET = 230;
   public static final int ON = 231;
   public static final int ONLY = 232;
   public static final int OPTION = 233;
   public static final int OPTIONS = 234;
   public static final int OR = 235;
   public static final int ORDER = 236;
   public static final int OUT = 237;
   public static final int OUTER = 238;
   public static final int OUTPUTFORMAT = 239;
   public static final int OVER = 240;
   public static final int OVERLAPS = 241;
   public static final int OVERLAY = 242;
   public static final int OVERWRITE = 243;
   public static final int PARTITION = 244;
   public static final int PARTITIONED = 245;
   public static final int PARTITIONS = 246;
   public static final int PERCENTLIT = 247;
   public static final int PIVOT = 248;
   public static final int PLACING = 249;
   public static final int POSITION = 250;
   public static final int PRECEDING = 251;
   public static final int PRIMARY = 252;
   public static final int PRINCIPALS = 253;
   public static final int PROPERTIES = 254;
   public static final int PURGE = 255;
   public static final int QUARTER = 256;
   public static final int QUERY = 257;
   public static final int RANGE = 258;
   public static final int READS = 259;
   public static final int REAL = 260;
   public static final int RECORDREADER = 261;
   public static final int RECORDWRITER = 262;
   public static final int RECOVER = 263;
   public static final int RECURSIVE = 264;
   public static final int REDUCE = 265;
   public static final int REFERENCES = 266;
   public static final int REFRESH = 267;
   public static final int RENAME = 268;
   public static final int REPAIR = 269;
   public static final int REPEAT = 270;
   public static final int REPEATABLE = 271;
   public static final int REPLACE = 272;
   public static final int RESET = 273;
   public static final int RESPECT = 274;
   public static final int RESTRICT = 275;
   public static final int RETURN = 276;
   public static final int RETURNS = 277;
   public static final int REVOKE = 278;
   public static final int RIGHT = 279;
   public static final int RLIKE = 280;
   public static final int ROLE = 281;
   public static final int ROLES = 282;
   public static final int ROLLBACK = 283;
   public static final int ROLLUP = 284;
   public static final int ROW = 285;
   public static final int ROWS = 286;
   public static final int SECOND = 287;
   public static final int SECONDS = 288;
   public static final int SCHEMA = 289;
   public static final int SCHEMAS = 290;
   public static final int SECURITY = 291;
   public static final int SELECT = 292;
   public static final int SEMI = 293;
   public static final int SEPARATED = 294;
   public static final int SERDE = 295;
   public static final int SERDEPROPERTIES = 296;
   public static final int SESSION_USER = 297;
   public static final int SET = 298;
   public static final int SETMINUS = 299;
   public static final int SETS = 300;
   public static final int SHORT = 301;
   public static final int SHOW = 302;
   public static final int SINGLE = 303;
   public static final int SKEWED = 304;
   public static final int SMALLINT = 305;
   public static final int SOME = 306;
   public static final int SORT = 307;
   public static final int SORTED = 308;
   public static final int SOURCE = 309;
   public static final int SPECIFIC = 310;
   public static final int SQL = 311;
   public static final int SQLEXCEPTION = 312;
   public static final int SQLSTATE = 313;
   public static final int START = 314;
   public static final int STATISTICS = 315;
   public static final int STORED = 316;
   public static final int STRATIFY = 317;
   public static final int STRING = 318;
   public static final int STRUCT = 319;
   public static final int SUBSTR = 320;
   public static final int SUBSTRING = 321;
   public static final int SYNC = 322;
   public static final int SYSTEM_TIME = 323;
   public static final int SYSTEM_VERSION = 324;
   public static final int TABLE = 325;
   public static final int TABLES = 326;
   public static final int TABLESAMPLE = 327;
   public static final int TARGET = 328;
   public static final int TBLPROPERTIES = 329;
   public static final int TEMPORARY = 330;
   public static final int TERMINATED = 331;
   public static final int THEN = 332;
   public static final int TIME = 333;
   public static final int TIMEDIFF = 334;
   public static final int TIMESTAMP = 335;
   public static final int TIMESTAMP_LTZ = 336;
   public static final int TIMESTAMP_NTZ = 337;
   public static final int TIMESTAMPADD = 338;
   public static final int TIMESTAMPDIFF = 339;
   public static final int TINYINT = 340;
   public static final int TO = 341;
   public static final int EXECUTE = 342;
   public static final int TOUCH = 343;
   public static final int TRAILING = 344;
   public static final int TRANSACTION = 345;
   public static final int TRANSACTIONS = 346;
   public static final int TRANSFORM = 347;
   public static final int TRIM = 348;
   public static final int TRUE = 349;
   public static final int TRUNCATE = 350;
   public static final int TRY_CAST = 351;
   public static final int TYPE = 352;
   public static final int UNARCHIVE = 353;
   public static final int UNBOUNDED = 354;
   public static final int UNCACHE = 355;
   public static final int UNION = 356;
   public static final int UNIQUE = 357;
   public static final int UNKNOWN = 358;
   public static final int UNLOCK = 359;
   public static final int UNPIVOT = 360;
   public static final int UNSET = 361;
   public static final int UNTIL = 362;
   public static final int UPDATE = 363;
   public static final int USE = 364;
   public static final int USER = 365;
   public static final int USING = 366;
   public static final int VALUE = 367;
   public static final int VALUES = 368;
   public static final int VARCHAR = 369;
   public static final int VAR = 370;
   public static final int VARIABLE = 371;
   public static final int VARIANT = 372;
   public static final int VERSION = 373;
   public static final int VIEW = 374;
   public static final int VIEWS = 375;
   public static final int VOID = 376;
   public static final int WEEK = 377;
   public static final int WEEKS = 378;
   public static final int WHEN = 379;
   public static final int WHERE = 380;
   public static final int WHILE = 381;
   public static final int WINDOW = 382;
   public static final int WITH = 383;
   public static final int WITHIN = 384;
   public static final int YEAR = 385;
   public static final int YEARS = 386;
   public static final int ZONE = 387;
   public static final int EQ = 388;
   public static final int NSEQ = 389;
   public static final int NEQ = 390;
   public static final int NEQJ = 391;
   public static final int LT = 392;
   public static final int LTE = 393;
   public static final int GT = 394;
   public static final int GTE = 395;
   public static final int SHIFT_LEFT = 396;
   public static final int SHIFT_RIGHT = 397;
   public static final int SHIFT_RIGHT_UNSIGNED = 398;
   public static final int PLUS = 399;
   public static final int MINUS = 400;
   public static final int ASTERISK = 401;
   public static final int SLASH = 402;
   public static final int PERCENT = 403;
   public static final int TILDE = 404;
   public static final int AMPERSAND = 405;
   public static final int PIPE = 406;
   public static final int CONCAT_PIPE = 407;
   public static final int OPERATOR_PIPE = 408;
   public static final int HAT = 409;
   public static final int COLON = 410;
   public static final int DOUBLE_COLON = 411;
   public static final int ARROW = 412;
   public static final int FAT_ARROW = 413;
   public static final int HENT_START = 414;
   public static final int HENT_END = 415;
   public static final int QUESTION = 416;
   public static final int STRING_LITERAL = 417;
   public static final int DOUBLEQUOTED_STRING = 418;
   public static final int BIGINT_LITERAL = 419;
   public static final int SMALLINT_LITERAL = 420;
   public static final int TINYINT_LITERAL = 421;
   public static final int INTEGER_VALUE = 422;
   public static final int EXPONENT_VALUE = 423;
   public static final int DECIMAL_VALUE = 424;
   public static final int FLOAT_LITERAL = 425;
   public static final int DOUBLE_LITERAL = 426;
   public static final int BIGDECIMAL_LITERAL = 427;
   public static final int IDENTIFIER = 428;
   public static final int BACKQUOTED_IDENTIFIER = 429;
   public static final int SIMPLE_COMMENT = 430;
   public static final int BRACKETED_COMMENT = 431;
   public static final int WS = 432;
   public static final int UNRECOGNIZED = 433;
   public static final int RULE_compoundOrSingleStatement = 0;
   public static final int RULE_singleCompoundStatement = 1;
   public static final int RULE_beginEndCompoundBlock = 2;
   public static final int RULE_compoundBody = 3;
   public static final int RULE_compoundStatement = 4;
   public static final int RULE_setStatementInsideSqlScript = 5;
   public static final int RULE_sqlStateValue = 6;
   public static final int RULE_declareConditionStatement = 7;
   public static final int RULE_conditionValue = 8;
   public static final int RULE_conditionValues = 9;
   public static final int RULE_declareHandlerStatement = 10;
   public static final int RULE_whileStatement = 11;
   public static final int RULE_ifElseStatement = 12;
   public static final int RULE_repeatStatement = 13;
   public static final int RULE_leaveStatement = 14;
   public static final int RULE_iterateStatement = 15;
   public static final int RULE_caseStatement = 16;
   public static final int RULE_loopStatement = 17;
   public static final int RULE_forStatement = 18;
   public static final int RULE_singleStatement = 19;
   public static final int RULE_beginLabel = 20;
   public static final int RULE_endLabel = 21;
   public static final int RULE_singleExpression = 22;
   public static final int RULE_singleTableIdentifier = 23;
   public static final int RULE_singleMultipartIdentifier = 24;
   public static final int RULE_singleFunctionIdentifier = 25;
   public static final int RULE_singleDataType = 26;
   public static final int RULE_singleTableSchema = 27;
   public static final int RULE_singleRoutineParamList = 28;
   public static final int RULE_statement = 29;
   public static final int RULE_setResetStatement = 30;
   public static final int RULE_executeImmediate = 31;
   public static final int RULE_executeImmediateUsing = 32;
   public static final int RULE_executeImmediateQueryParam = 33;
   public static final int RULE_executeImmediateArgument = 34;
   public static final int RULE_executeImmediateArgumentSeq = 35;
   public static final int RULE_timezone = 36;
   public static final int RULE_configKey = 37;
   public static final int RULE_configValue = 38;
   public static final int RULE_unsupportedHiveNativeCommands = 39;
   public static final int RULE_createTableHeader = 40;
   public static final int RULE_replaceTableHeader = 41;
   public static final int RULE_clusterBySpec = 42;
   public static final int RULE_bucketSpec = 43;
   public static final int RULE_skewSpec = 44;
   public static final int RULE_locationSpec = 45;
   public static final int RULE_schemaBinding = 46;
   public static final int RULE_commentSpec = 47;
   public static final int RULE_singleQuery = 48;
   public static final int RULE_query = 49;
   public static final int RULE_insertInto = 50;
   public static final int RULE_partitionSpecLocation = 51;
   public static final int RULE_partitionSpec = 52;
   public static final int RULE_partitionVal = 53;
   public static final int RULE_namespace = 54;
   public static final int RULE_namespaces = 55;
   public static final int RULE_variable = 56;
   public static final int RULE_describeFuncName = 57;
   public static final int RULE_describeColName = 58;
   public static final int RULE_ctes = 59;
   public static final int RULE_namedQuery = 60;
   public static final int RULE_tableProvider = 61;
   public static final int RULE_createTableClauses = 62;
   public static final int RULE_propertyList = 63;
   public static final int RULE_property = 64;
   public static final int RULE_propertyKey = 65;
   public static final int RULE_propertyValue = 66;
   public static final int RULE_expressionPropertyList = 67;
   public static final int RULE_expressionProperty = 68;
   public static final int RULE_constantList = 69;
   public static final int RULE_nestedConstantList = 70;
   public static final int RULE_createFileFormat = 71;
   public static final int RULE_fileFormat = 72;
   public static final int RULE_storageHandler = 73;
   public static final int RULE_resource = 74;
   public static final int RULE_dmlStatementNoWith = 75;
   public static final int RULE_identifierReference = 76;
   public static final int RULE_catalogIdentifierReference = 77;
   public static final int RULE_queryOrganization = 78;
   public static final int RULE_multiInsertQueryBody = 79;
   public static final int RULE_queryTerm = 80;
   public static final int RULE_queryPrimary = 81;
   public static final int RULE_sortItem = 82;
   public static final int RULE_fromStatement = 83;
   public static final int RULE_fromStatementBody = 84;
   public static final int RULE_querySpecification = 85;
   public static final int RULE_transformClause = 86;
   public static final int RULE_selectClause = 87;
   public static final int RULE_setClause = 88;
   public static final int RULE_matchedClause = 89;
   public static final int RULE_notMatchedClause = 90;
   public static final int RULE_notMatchedBySourceClause = 91;
   public static final int RULE_matchedAction = 92;
   public static final int RULE_notMatchedAction = 93;
   public static final int RULE_notMatchedBySourceAction = 94;
   public static final int RULE_exceptClause = 95;
   public static final int RULE_assignmentList = 96;
   public static final int RULE_assignment = 97;
   public static final int RULE_whereClause = 98;
   public static final int RULE_havingClause = 99;
   public static final int RULE_hint = 100;
   public static final int RULE_hintStatement = 101;
   public static final int RULE_fromClause = 102;
   public static final int RULE_temporalClause = 103;
   public static final int RULE_aggregationClause = 104;
   public static final int RULE_groupByClause = 105;
   public static final int RULE_groupingAnalytics = 106;
   public static final int RULE_groupingElement = 107;
   public static final int RULE_groupingSet = 108;
   public static final int RULE_pivotClause = 109;
   public static final int RULE_pivotColumn = 110;
   public static final int RULE_pivotValue = 111;
   public static final int RULE_unpivotClause = 112;
   public static final int RULE_unpivotNullClause = 113;
   public static final int RULE_unpivotOperator = 114;
   public static final int RULE_unpivotSingleValueColumnClause = 115;
   public static final int RULE_unpivotMultiValueColumnClause = 116;
   public static final int RULE_unpivotColumnSet = 117;
   public static final int RULE_unpivotValueColumn = 118;
   public static final int RULE_unpivotNameColumn = 119;
   public static final int RULE_unpivotColumnAndAlias = 120;
   public static final int RULE_unpivotColumn = 121;
   public static final int RULE_unpivotAlias = 122;
   public static final int RULE_lateralView = 123;
   public static final int RULE_setQuantifier = 124;
   public static final int RULE_relation = 125;
   public static final int RULE_relationExtension = 126;
   public static final int RULE_joinRelation = 127;
   public static final int RULE_joinType = 128;
   public static final int RULE_joinCriteria = 129;
   public static final int RULE_sample = 130;
   public static final int RULE_sampleMethod = 131;
   public static final int RULE_identifierList = 132;
   public static final int RULE_identifierSeq = 133;
   public static final int RULE_orderedIdentifierList = 134;
   public static final int RULE_orderedIdentifier = 135;
   public static final int RULE_identifierCommentList = 136;
   public static final int RULE_identifierComment = 137;
   public static final int RULE_relationPrimary = 138;
   public static final int RULE_optionsClause = 139;
   public static final int RULE_inlineTable = 140;
   public static final int RULE_functionTableSubqueryArgument = 141;
   public static final int RULE_tableArgumentPartitioning = 142;
   public static final int RULE_functionTableNamedArgumentExpression = 143;
   public static final int RULE_functionTableReferenceArgument = 144;
   public static final int RULE_functionTableArgument = 145;
   public static final int RULE_functionTable = 146;
   public static final int RULE_tableAlias = 147;
   public static final int RULE_rowFormat = 148;
   public static final int RULE_multipartIdentifierList = 149;
   public static final int RULE_multipartIdentifier = 150;
   public static final int RULE_multipartIdentifierPropertyList = 151;
   public static final int RULE_multipartIdentifierProperty = 152;
   public static final int RULE_tableIdentifier = 153;
   public static final int RULE_functionIdentifier = 154;
   public static final int RULE_namedExpression = 155;
   public static final int RULE_namedExpressionSeq = 156;
   public static final int RULE_partitionFieldList = 157;
   public static final int RULE_partitionField = 158;
   public static final int RULE_transform = 159;
   public static final int RULE_transformArgument = 160;
   public static final int RULE_expression = 161;
   public static final int RULE_namedArgumentExpression = 162;
   public static final int RULE_functionArgument = 163;
   public static final int RULE_expressionSeq = 164;
   public static final int RULE_booleanExpression = 165;
   public static final int RULE_predicate = 166;
   public static final int RULE_errorCapturingNot = 167;
   public static final int RULE_valueExpression = 168;
   public static final int RULE_shiftOperator = 169;
   public static final int RULE_datetimeUnit = 170;
   public static final int RULE_primaryExpression = 171;
   public static final int RULE_literalType = 172;
   public static final int RULE_constant = 173;
   public static final int RULE_comparisonOperator = 174;
   public static final int RULE_arithmeticOperator = 175;
   public static final int RULE_predicateOperator = 176;
   public static final int RULE_booleanValue = 177;
   public static final int RULE_interval = 178;
   public static final int RULE_errorCapturingMultiUnitsInterval = 179;
   public static final int RULE_multiUnitsInterval = 180;
   public static final int RULE_errorCapturingUnitToUnitInterval = 181;
   public static final int RULE_unitToUnitInterval = 182;
   public static final int RULE_intervalValue = 183;
   public static final int RULE_unitInMultiUnits = 184;
   public static final int RULE_unitInUnitToUnit = 185;
   public static final int RULE_colPosition = 186;
   public static final int RULE_collationSpec = 187;
   public static final int RULE_collateClause = 188;
   public static final int RULE_type = 189;
   public static final int RULE_dataType = 190;
   public static final int RULE_qualifiedColTypeWithPositionList = 191;
   public static final int RULE_qualifiedColTypeWithPosition = 192;
   public static final int RULE_colDefinitionDescriptorWithPosition = 193;
   public static final int RULE_defaultExpression = 194;
   public static final int RULE_variableDefaultExpression = 195;
   public static final int RULE_colTypeList = 196;
   public static final int RULE_colType = 197;
   public static final int RULE_colDefinitionList = 198;
   public static final int RULE_colDefinition = 199;
   public static final int RULE_colDefinitionOption = 200;
   public static final int RULE_generationExpression = 201;
   public static final int RULE_identityColSpec = 202;
   public static final int RULE_sequenceGeneratorOption = 203;
   public static final int RULE_sequenceGeneratorStartOrStep = 204;
   public static final int RULE_complexColTypeList = 205;
   public static final int RULE_complexColType = 206;
   public static final int RULE_routineCharacteristics = 207;
   public static final int RULE_routineLanguage = 208;
   public static final int RULE_specificName = 209;
   public static final int RULE_deterministic = 210;
   public static final int RULE_sqlDataAccess = 211;
   public static final int RULE_nullCall = 212;
   public static final int RULE_rightsClause = 213;
   public static final int RULE_whenClause = 214;
   public static final int RULE_windowClause = 215;
   public static final int RULE_namedWindow = 216;
   public static final int RULE_windowSpec = 217;
   public static final int RULE_windowFrame = 218;
   public static final int RULE_frameBound = 219;
   public static final int RULE_qualifiedNameList = 220;
   public static final int RULE_functionName = 221;
   public static final int RULE_qualifiedName = 222;
   public static final int RULE_errorCapturingIdentifier = 223;
   public static final int RULE_errorCapturingIdentifierExtra = 224;
   public static final int RULE_identifier = 225;
   public static final int RULE_strictIdentifier = 226;
   public static final int RULE_quotedIdentifier = 227;
   public static final int RULE_backQuotedIdentifier = 228;
   public static final int RULE_number = 229;
   public static final int RULE_alterColumnSpecList = 230;
   public static final int RULE_alterColumnSpec = 231;
   public static final int RULE_alterColumnAction = 232;
   public static final int RULE_stringLit = 233;
   public static final int RULE_comment = 234;
   public static final int RULE_version = 235;
   public static final int RULE_operatorPipeRightSide = 236;
   public static final int RULE_operatorPipeSetAssignmentSeq = 237;
   public static final int RULE_ansiNonReserved = 238;
   public static final int RULE_strictNonReserved = 239;
   public static final int RULE_nonReserved = 240;
   public static final String[] ruleNames;
   private static final String[] _LITERAL_NAMES;
   private static final String[] _SYMBOLIC_NAMES;
   public static final Vocabulary VOCABULARY;
   /** @deprecated */
   @Deprecated
   public static final String[] tokenNames;
   public boolean legacy_setops_precedence_enabled = false;
   public boolean legacy_exponent_literal_as_decimal_enabled = false;
   public boolean SQL_standard_keyword_behavior = false;
   public boolean double_quoted_identifiers = false;
   private static final String _serializedATNSegment0 = "\u0004\u0001Ʊᇕ\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002'\u0007'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u00071\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u00076\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007;\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007\u009e\u0002\u009f\u0007\u009f\u0002 \u0007 \u0002¡\u0007¡\u0002¢\u0007¢\u0002£\u0007£\u0002¤\u0007¤\u0002¥\u0007¥\u0002¦\u0007¦\u0002§\u0007§\u0002¨\u0007¨\u0002©\u0007©\u0002ª\u0007ª\u0002«\u0007«\u0002¬\u0007¬\u0002\u00ad\u0007\u00ad\u0002®\u0007®\u0002¯\u0007¯\u0002°\u0007°\u0002±\u0007±\u0002²\u0007²\u0002³\u0007³\u0002´\u0007´\u0002µ\u0007µ\u0002¶\u0007¶\u0002·\u0007·\u0002¸\u0007¸\u0002¹\u0007¹\u0002º\u0007º\u0002»\u0007»\u0002¼\u0007¼\u0002½\u0007½\u0002¾\u0007¾\u0002¿\u0007¿\u0002À\u0007À\u0002Á\u0007Á\u0002Â\u0007Â\u0002Ã\u0007Ã\u0002Ä\u0007Ä\u0002Å\u0007Å\u0002Æ\u0007Æ\u0002Ç\u0007Ç\u0002È\u0007È\u0002É\u0007É\u0002Ê\u0007Ê\u0002Ë\u0007Ë\u0002Ì\u0007Ì\u0002Í\u0007Í\u0002Î\u0007Î\u0002Ï\u0007Ï\u0002Ð\u0007Ð\u0002Ñ\u0007Ñ\u0002Ò\u0007Ò\u0002Ó\u0007Ó\u0002Ô\u0007Ô\u0002Õ\u0007Õ\u0002Ö\u0007Ö\u0002×\u0007×\u0002Ø\u0007Ø\u0002Ù\u0007Ù\u0002Ú\u0007Ú\u0002Û\u0007Û\u0002Ü\u0007Ü\u0002Ý\u0007Ý\u0002Þ\u0007Þ\u0002ß\u0007ß\u0002à\u0007à\u0002á\u0007á\u0002â\u0007â\u0002ã\u0007ã\u0002ä\u0007ä\u0002å\u0007å\u0002æ\u0007æ\u0002ç\u0007ç\u0002è\u0007è\u0002é\u0007é\u0002ê\u0007ê\u0002ë\u0007ë\u0002ì\u0007ì\u0002í\u0007í\u0002î\u0007î\u0002ï\u0007ï\u0002ð\u0007ð\u0001\u0000\u0001\u0000\u0003\u0000ǥ\b\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001Ǫ\b\u0001\u0001\u0001\u0003\u0001ǭ\b\u0001\u0001\u0001\u0001\u0001\u0003\u0001Ǳ\b\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0003\u0002Ƕ\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002ǻ\b\u0002\u0001\u0002\u0003\u0002Ǿ\b\u0002\u0001\u0002\u0001\u0002\u0003\u0002Ȃ\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0004\u0003ȇ\b\u0003\u000b\u0003\f\u0003Ȉ\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004Ș\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005ȥ\b\u0005\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007ȯ\b\u0007\u0001\u0007\u0003\u0007Ȳ\b\u0007\u0001\b\u0001\b\u0003\bȶ\b\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\bȽ\b\b\u0001\t\u0001\t\u0001\t\u0005\tɂ\b\t\n\t\f\tɅ\t\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\nɏ\b\n\u0001\u000b\u0003\u000bɒ\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000bɛ\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0005\fɦ\b\f\n\f\f\fɩ\t\f\u0001\f\u0001\f\u0003\fɭ\b\f\u0001\f\u0001\f\u0001\f\u0001\r\u0003\rɳ\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\rɼ\b\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0004\u0010ʊ\b\u0010\u000b\u0010\f\u0010ʋ\u0001\u0010\u0001\u0010\u0003\u0010ʐ\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0004\u0010ʜ\b\u0010\u000b\u0010\f\u0010ʝ\u0001\u0010\u0001\u0010\u0003\u0010ʢ\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010ʧ\b\u0010\u0001\u0011\u0003\u0011ʪ\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011ʱ\b\u0011\u0001\u0012\u0003\u0012ʴ\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012ʺ\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012˂\b\u0012\u0001\u0013\u0001\u0013\u0003\u0013ˆ\b\u0013\u0001\u0013\u0005\u0013ˉ\b\u0013\n\u0013\f\u0013ˌ\t\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d˭\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d˿\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001ḋ\b\u001d\n\u001d\f\u001d̊\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d̤\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d̨\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d̮\b\u001d\u0001\u001d\u0003\u001ḏ\b\u001d\u0001\u001d\u0003\u001d̴\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d̻\b\u001d\u0001\u001d\u0003\u001d̾\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d͂\b\u001d\u0001\u001d\u0003\u001dͅ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d͍\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d͘\b\u001d\n\u001d\f\u001d͛\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d͢\b\u001d\u0001\u001d\u0003\u001dͥ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dͩ\b\u001d\u0001\u001d\u0003\u001dͬ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dͲ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dͽ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0383\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dΈ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dΪ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dη\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϐ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϙ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϡ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dϥ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϪ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϰ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϼ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dЄ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dЊ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dИ\b\u001d\u0001\u001d\u0004\u001dЛ\b\u001d\u000b\u001d\f\u001dМ\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dЭ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dв\b\u001d\n\u001d\f\u001dе\t\u001d\u0001\u001d\u0003\u001dи\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dо\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѐ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dћ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dџ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѥ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѫ\b\u001d\u0001\u001d\u0003\u001dѮ\b\u001d\u0001\u001d\u0003\u001dѱ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѸ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dѼ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d҆\b\u001d\n\u001d\f\u001d҉\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dґ\b\u001d\u0001\u001d\u0003\u001dҔ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҝ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҢ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҨ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҴ\b\u001d\u0001\u001d\u0003\u001dҷ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҾ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dӇ\b\u001d\n\u001d\f\u001dӊ\t\u001d\u0003\u001dӌ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӑ\b\u001d\u0001\u001d\u0003\u001dӔ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӛ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӠ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӪ\b\u001d\u0003\u001dӬ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӲ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dӶ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӻ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԁ\b\u001d\u0001\u001d\u0003\u001dԄ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dԈ\b\u001d\u0001\u001d\u0003\u001dԋ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԒ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԘ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dԜ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԢ\b\u001d\u0001\u001d\u0003\u001dԥ\b\u001d\u0001\u001d\u0003\u001dԨ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԯ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԴ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԽ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dՅ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dՋ\b\u001d\u0001\u001d\u0003\u001dՎ\b\u001d\u0001\u001d\u0003\u001dՑ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0557\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d՛\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dՠ\b\u001d\u0001\u001d\u0003\u001dգ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dէ\b\u001d\u0003\u001dթ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dձ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dչ\b\u001d\u0001\u001d\u0003\u001dռ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dց\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dև\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d֍\b\u001d\u0001\u001d\u0003\u001d\u0590\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֔\b\u001d\u0001\u001d\u0003\u001d֗\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֛\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֟\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dֹ\b\u001d\n\u001d\f\u001dּ\t\u001d\u0003\u001d־\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dׂ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u05c8\b\u001d\u0001\u001d\u0003\u001d\u05cb\b\u001d\u0001\u001d\u0003\u001d\u05ce\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dה\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dל\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dס\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dק\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u05ed\b\u001d\u0001\u001d\u0003\u001dװ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u05f7\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u05fc\b\u001d\n\u001d\f\u001d\u05ff\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d؇\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d،\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dؑ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dؘ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d؞\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dأ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dح\b\u001d\n\u001d\f\u001dذ\t\u001d\u0003\u001dز\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dظ\b\u001d\n\u001d\f\u001dػ\t\u001d\u0003\u001dؽ\b\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eق\b\u001e\n\u001e\f\u001eم\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eٓ\b\u001e\n\u001e\f\u001eٖ\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eٯ\b\u001e\n\u001e\f\u001eٲ\t\u001e\u0003\u001eٴ\b\u001e\u0001\u001e\u0001\u001e\u0005\u001eٸ\b\u001e\n\u001e\f\u001eٻ\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eځ\b\u001e\n\u001e\f\u001eڄ\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eڊ\b\u001e\n\u001e\f\u001eڍ\t\u001e\u0003\u001eڏ\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fږ\b\u001f\u0001\u001f\u0003\u001fڙ\b\u001f\u0001 \u0001 \u0001 \u0001 \u0001 \u0001 \u0001 \u0003 ڢ\b \u0001!\u0001!\u0003!ڦ\b!\u0001\"\u0001\"\u0003\"ڪ\b\"\u0001\"\u0001\"\u0003\"ڮ\b\"\u0001#\u0001#\u0001#\u0005#ڳ\b#\n#\f#ڶ\t#\u0001$\u0001$\u0003$ں\b$\u0001%\u0001%\u0001&\u0001&\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ۆ\b'\u0001'\u0001'\u0003'ۊ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ۑ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'݅\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݍ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݕ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݞ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݨ\b'\u0001(\u0001(\u0003(ݬ\b(\u0001(\u0003(ݯ\b(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(ݶ\b(\u0001(\u0001(\u0001)\u0001)\u0003)ݼ\b)\u0001)\u0001)\u0001)\u0001)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003+ގ\b+\u0001+\u0001+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,ޚ\b,\u0001,\u0001,\u0001,\u0003,ޟ\b,\u0001-\u0001-\u0001-\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.ޫ\b.\u0001/\u0001/\u0001/\u00010\u00010\u00010\u00011\u00031\u07b4\b1\u00011\u00011\u00011\u00012\u00012\u00012\u00032\u07bc\b2\u00012\u00012\u00032߀\b2\u00012\u00012\u00012\u00012\u00012\u00032߇\b2\u00032߉\b2\u00012\u00012\u00012\u00032ߎ\b2\u00012\u00012\u00012\u00032ߓ\b2\u00012\u00012\u00032ߗ\b2\u00012\u00032ߚ\b2\u00012\u00012\u00012\u00012\u00032ߠ\b2\u00012\u00012\u00012\u00032ߥ\b2\u00012\u00012\u00012\u00032ߪ\b2\u00012\u00012\u00032߮\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00032߶\b2\u00012\u00012\u00012\u00032\u07fb\b2\u00012\u00032߾\b2\u00012\u00012\u00012\u00032ࠃ\b2\u00012\u00012\u00032ࠇ\b2\u00012\u00012\u00012\u00032ࠌ\b2\u00032ࠎ\b2\u00013\u00013\u00033ࠒ\b3\u00014\u00014\u00014\u00014\u00014\u00054࠙\b4\n4\f4ࠜ\t4\u00014\u00014\u00015\u00015\u00015\u00035ࠣ\b5\u00015\u00015\u00015\u00015\u00035ࠩ\b5\u00016\u00016\u00017\u00017\u00018\u00018\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00039࠸\b9\u0001:\u0001:\u0001:\u0005:࠽\b:\n:\f:ࡀ\t:\u0001;\u0001;\u0003;ࡄ\b;\u0001;\u0001;\u0001;\u0005;ࡉ\b;\n;\f;ࡌ\t;\u0001<\u0001<\u0003<ࡐ\b<\u0001<\u0003<ࡓ\b<\u0001<\u0001<\u0001<\u0001<\u0001=\u0001=\u0001=\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0005>\u086b\b>\n>\f>\u086e\t>\u0001?\u0001?\u0001?\u0001?\u0005?\u0874\b?\n?\f?\u0877\t?\u0001?\u0001?\u0001@\u0001@\u0003@\u087d\b@\u0001@\u0003@\u0880\b@\u0001A\u0001A\u0001A\u0005A\u0885\bA\nA\fA\u0888\tA\u0001A\u0003A\u088b\bA\u0001B\u0001B\u0001B\u0001B\u0003B\u0891\bB\u0001C\u0001C\u0001C\u0001C\u0005C\u0897\bC\nC\fC\u089a\tC\u0001C\u0001C\u0001D\u0001D\u0003Dࢠ\bD\u0001D\u0003Dࢣ\bD\u0001E\u0001E\u0001E\u0001E\u0005Eࢩ\bE\nE\fEࢬ\tE\u0001E\u0001E\u0001F\u0001F\u0001F\u0001F\u0005Fࢴ\bF\nF\fFࢷ\tF\u0001F\u0001F\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0003Gࣁ\bG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003H\u08c9\bH\u0001I\u0001I\u0001I\u0001I\u0003I\u08cf\bI\u0001J\u0001J\u0001J\u0001K\u0001K\u0001K\u0001K\u0001K\u0004Kࣙ\bK\u000bK\fKࣚ\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u08e2\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0003Kࣩ\bK\u0001K\u0001K\u0001K\u0001K\u0003K࣯\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003Kࣺ\bK\u0001K\u0001K\u0001K\u0001K\u0005Kऀ\bK\nK\fKः\tK\u0001K\u0005Kआ\bK\nK\fKउ\tK\u0001K\u0005Kऌ\bK\nK\fKए\tK\u0003Kऑ\bK\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003Lङ\bL\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mढ\bM\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nऩ\bN\nN\fNब\tN\u0003Nम\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nव\bN\nN\fNस\tN\u0003Nऺ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nु\bN\nN\fNॄ\tN\u0003Nॆ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0005N्\bN\nN\fNॐ\tN\u0003N॒\bN\u0001N\u0003Nॕ\bN\u0001N\u0001N\u0001N\u0003Nग़\bN\u0003Nड़\bN\u0001N\u0001N\u0003Nॠ\bN\u0001O\u0001O\u0001O\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P६\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0003Pॳ\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0003Pॺ\bP\u0001P\u0001P\u0001P\u0001P\u0005Pঀ\bP\nP\fPঃ\tP\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u098e\bQ\u0001R\u0001R\u0003R\u0992\bR\u0001R\u0001R\u0003Rখ\bR\u0001S\u0001S\u0005Sচ\bS\nS\fSঝ\tS\u0001T\u0001T\u0003Tড\bT\u0001T\u0001T\u0001T\u0001T\u0005Tধ\bT\nT\fTপ\tT\u0001T\u0003Tভ\bT\u0001T\u0003Tর\bT\u0001T\u0003T\u09b3\bT\u0001T\u0003Tশ\bT\u0001T\u0001T\u0003T\u09ba\bT\u0001U\u0001U\u0003Uা\bU\u0001U\u0005Uু\bU\nU\fUৄ\tU\u0001U\u0003Uে\bU\u0001U\u0003U\u09ca\bU\u0001U\u0003U্\bU\u0001U\u0003U\u09d0\bU\u0001U\u0001U\u0003U\u09d4\bU\u0001U\u0005Uৗ\bU\nU\fU\u09da\tU\u0001U\u0003Uঢ়\bU\u0001U\u0003Uৠ\bU\u0001U\u0003Uৣ\bU\u0001U\u0003U০\bU\u0003U২\bU\u0001V\u0001V\u0001V\u0001V\u0003V৮\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V৵\bV\u0001V\u0001V\u0001V\u0003V৺\bV\u0001V\u0003V৽\bV\u0001V\u0003V\u0a00\bV\u0001V\u0001V\u0003V\u0a04\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0a0e\bV\u0001V\u0001V\u0003V\u0a12\bV\u0003Vਔ\bV\u0001V\u0003Vਗ\bV\u0001V\u0001V\u0003Vਛ\bV\u0001W\u0001W\u0005Wਟ\bW\nW\fWਢ\tW\u0001W\u0003Wਥ\bW\u0001W\u0001W\u0001X\u0001X\u0001X\u0001Y\u0001Y\u0001Y\u0001Y\u0003Yਰ\bY\u0001Y\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0a3a\bZ\u0001Z\u0001Z\u0003Zਾ\bZ\u0001Z\u0001Z\u0001Z\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0003[\u0a4a\b[\u0001[\u0001[\u0001[\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0a56\b\\\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0005]\u0a63\b]\n]\f]੦\t]\u0001]\u0001]\u0003]੪\b]\u0001^\u0001^\u0001^\u0001^\u0003^ੰ\b^\u0001_\u0001_\u0001_\u0001_\u0001_\u0001`\u0001`\u0001`\u0005`\u0a7a\b`\n`\f`\u0a7d\t`\u0001a\u0001a\u0001a\u0001a\u0001b\u0001b\u0001b\u0001c\u0001c\u0001c\u0001d\u0001d\u0001d\u0003dઌ\bd\u0001d\u0005dએ\bd\nd\fd\u0a92\td\u0001d\u0001d\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0005eજ\be\ne\feટ\te\u0001e\u0001e\u0003eણ\be\u0001f\u0001f\u0001f\u0001f\u0005f\u0aa9\bf\nf\ffબ\tf\u0001f\u0005fય\bf\nf\ffલ\tf\u0001f\u0003fવ\bf\u0001f\u0003fસ\bf\u0001g\u0003g\u0abb\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0003gૂ\bg\u0001g\u0001g\u0001g\u0001g\u0003gૈ\bg\u0001h\u0001h\u0001h\u0001h\u0001h\u0005h\u0acf\bh\nh\fh\u0ad2\th\u0001h\u0001h\u0001h\u0001h\u0001h\u0005h\u0ad9\bh\nh\fh\u0adc\th\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0005h૨\bh\nh\fh૫\th\u0001h\u0001h\u0003h૯\bh\u0003h૱\bh\u0001i\u0001i\u0003i\u0af5\bi\u0001j\u0001j\u0001j\u0001j\u0001j\u0005jૼ\bj\nj\fj૿\tj\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0005jଉ\bj\nj\fjଌ\tj\u0001j\u0001j\u0003jଐ\bj\u0001k\u0001k\u0003kଔ\bk\u0001l\u0001l\u0001l\u0001l\u0005lଚ\bl\nl\flଝ\tl\u0003lଟ\bl\u0001l\u0001l\u0003lଣ\bl\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0005mଯ\bm\nm\fmଲ\tm\u0001m\u0001m\u0001m\u0001n\u0001n\u0001n\u0001n\u0001n\u0005n଼\bn\nn\fnି\tn\u0001n\u0001n\u0003nୃ\bn\u0001o\u0001o\u0003oେ\bo\u0001o\u0003o\u0b4a\bo\u0001p\u0001p\u0003p\u0b4e\bp\u0001p\u0001p\u0001p\u0001p\u0003p\u0b54\bp\u0001p\u0003pୗ\bp\u0001q\u0001q\u0001q\u0001r\u0001r\u0003r\u0b5e\br\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0005s୨\bs\ns\fs୫\ts\u0001s\u0001s\u0001t\u0001t\u0001t\u0001t\u0005t୳\bt\nt\ft୶\tt\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0005t\u0b80\bt\nt\ftஃ\tt\u0001t\u0001t\u0001u\u0001u\u0001u\u0001u\u0005u\u0b8b\bu\nu\fuஎ\tu\u0001u\u0001u\u0003uஒ\bu\u0001v\u0001v\u0001w\u0001w\u0001x\u0001x\u0003xச\bx\u0001y\u0001y\u0001z\u0003zட\bz\u0001z\u0001z\u0001{\u0001{\u0001{\u0003{\u0ba6\b{\u0001{\u0001{\u0001{\u0001{\u0001{\u0005{\u0bad\b{\n{\f{ர\t{\u0003{ல\b{\u0001{\u0001{\u0001{\u0003{ஷ\b{\u0001{\u0001{\u0001{\u0005{\u0bbc\b{\n{\f{ி\t{\u0003{ு\b{\u0001|\u0001|\u0001}\u0003}ெ\b}\u0001}\u0001}\u0005}ொ\b}\n}\f}்\t}\u0001~\u0001~\u0001~\u0003~\u0bd2\b~\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007fௗ\b\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0bdb\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0be1\b\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0be5\b\u007f\u0001\u0080\u0003\u0080௨\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080௭\b\u0080\u0001\u0080\u0003\u0080௰\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080௵\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080௹\b\u0080\u0001\u0080\u0003\u0080\u0bfc\b\u0080\u0001\u0080\u0003\u0080\u0bff\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081అ\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082ఊ\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c11\b\u0082\u0001\u0083\u0003\u0083ఔ\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083ద\b\u0083\u0003\u0083న\b\u0083\u0001\u0083\u0003\u0083ఫ\b\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0005\u0085ఴ\b\u0085\n\u0085\f\u0085ష\t\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0005\u0086ఽ\b\u0086\n\u0086\f\u0086ీ\t\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0003\u0087ె\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0005\u0088ౌ\b\u0088\n\u0088\f\u0088\u0c4f\t\u0088\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0003\u0089ౕ\b\u0089\u0001\u008a\u0001\u008a\u0003\u008aౙ\b\u008a\u0001\u008a\u0003\u008a\u0c5c\b\u008a\u0001\u008a\u0003\u008a\u0c5f\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a౧\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a౯\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u0c75\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0005\u008c౾\b\u008c\n\u008c\f\u008cಁ\t\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dಈ\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dಏ\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dಖ\b\u008d\u0003\u008dಘ\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0005\u008eಣ\b\u008e\n\u008e\f\u008eದ\t\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0004\u008eಭ\b\u008e\u000b\u008e\f\u008eಮ\u0001\u008e\u0003\u008eಲ\b\u008e\u0003\u008e\u0cb4\b\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0005\u008e಼\b\u008e\n\u008e\f\u008eಿ\t\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0004\u008eೆ\b\u008e\u000b\u008e\f\u008eೇ\u0001\u008e\u0003\u008eೋ\b\u008e\u0003\u008e್\b\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u0090\u0001\u0090\u0003\u0090ೕ\b\u0090\u0001\u0091\u0001\u0091\u0003\u0091\u0cd9\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0005\u0092ೠ\b\u0092\n\u0092\f\u0092ೣ\t\u0092\u0003\u0092\u0ce5\b\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0003\u0093೫\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093೯\b\u0093\u0003\u0093ೱ\b\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094\u0cfa\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ആ\b\u0094\u0003\u0094ഈ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ഏ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ഖ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ജ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ഢ\b\u0094\u0003\u0094ത\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0005\u0095ഩ\b\u0095\n\u0095\f\u0095ബ\t\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0005\u0096റ\b\u0096\n\u0096\f\u0096ഴ\t\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0005\u0097ഹ\b\u0097\n\u0097\f\u0097഼\t\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098ു\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099െ\b\u0099\u0001\u0099\u0001\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a്\b\u009a\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b\u0003\u009b\u0d53\b\u009b\u0001\u009b\u0001\u009b\u0003\u009bൗ\b\u009b\u0003\u009b൙\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c൞\b\u009c\n\u009c\f\u009cൡ\t\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0005\u009d൧\b\u009d\n\u009d\f\u009d൪\t\u009d\u0001\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0003\u009e൰\b\u009e\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0005\u009f൸\b\u009f\n\u009f\f\u009fൻ\t\u009f\u0001\u009f\u0001\u009f\u0003\u009fൿ\b\u009f\u0001 \u0001 \u0003 ඃ\b \u0001¡\u0001¡\u0001¢\u0001¢\u0001¢\u0001¢\u0001£\u0001£\u0003£ඍ\b£\u0001¤\u0001¤\u0001¤\u0005¤ඒ\b¤\n¤\f¤ඕ\t¤\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0003¥ඡ\b¥\u0003¥ඣ\b¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0005¥ණ\b¥\n¥\f¥ථ\t¥\u0001¦\u0003¦න\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0003¦ඹ\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0005¦ව\b¦\n¦\f¦ස\t¦\u0001¦\u0001¦\u0001¦\u0003¦\u0dc8\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0003¦ැ\b¦\u0001¦\u0001¦\u0001¦\u0003¦\u0dd5\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0005¦ෟ\b¦\n¦\f¦\u0de2\t¦\u0001¦\u0001¦\u0003¦෦\b¦\u0001¦\u0003¦෩\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0003¦෯\b¦\u0001¦\u0001¦\u0003¦ෳ\b¦\u0001¦\u0001¦\u0001¦\u0003¦\u0df8\b¦\u0001¦\u0001¦\u0001¦\u0003¦\u0dfd\b¦\u0001¦\u0001¦\u0001¦\u0003¦ข\b¦\u0001§\u0001§\u0001¨\u0001¨\u0001¨\u0001¨\u0003¨ช\b¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0005¨ร\b¨\n¨\f¨ฦ\t¨\u0001©\u0001©\u0001ª\u0001ª\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«า\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«\u0e3e\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0004«่\b«\u000b«\f«้\u0001«\u0001«\u0003«๎\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0004«๕\b«\u000b«\f«๖\u0001«\u0001«\u0003«๛\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«\u0e6b\b«\n«\f«\u0e6e\t«\u0003«\u0e70\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«\u0e78\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ກ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ຊ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ຘ\b«\u0001«\u0001«\u0001«\u0001«\u0003«ພ\b«\u0001«\u0001«\u0001«\u0001«\u0004«\u0ea4\b«\u000b«\f«ລ\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ັ\b«\u0001«\u0001«\u0001«\u0005«ຶ\b«\n«\f«ູ\t«\u0003«ົ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«ໆ\b«\n«\f«້\t«\u0001«\u0001«\u0003«ໍ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«໕\b«\u0001«\u0001«\u0003«໙\b«\u0001«\u0001«\u0003«ໝ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0004«\u0ee7\b«\u000b«\f«\u0ee8\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«༂\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«༉\b«\u0001«\u0003«༌\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«༛\b«\u0001«\u0001«\u0003«༟\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«༮\b«\n«\f«༱\t«\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0003¬༺\b¬\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0004\u00adཇ\b\u00ad\u000b\u00ad\f\u00ad\u0f48\u0003\u00adཋ\b\u00ad\u0001®\u0001®\u0001¯\u0001¯\u0001°\u0001°\u0001±\u0001±\u0001²\u0001²\u0001²\u0003²མ\b²\u0001³\u0001³\u0003³ཛྷ\b³\u0001´\u0001´\u0001´\u0004´ཡ\b´\u000b´\f´ར\u0001µ\u0001µ\u0001µ\u0003µཨ\bµ\u0001¶\u0001¶\u0001¶\u0001¶\u0001¶\u0001·\u0003·\u0f70\b·\u0001·\u0001·\u0001·\u0003·ཱུ\b·\u0001¸\u0001¸\u0001¹\u0001¹\u0001º\u0001º\u0001º\u0003ºཾ\bº\u0001»\u0001»\u0001»\u0001»\u0001¼\u0001¼\u0001¼\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0003½ྙ\b½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0003½ྩ\b½\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾ྺ\b¾\u0001¾\u0001¾\u0003¾྾\b¾\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾࿄\b¾\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾࿊\b¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0005¾࿑\b¾\n¾\f¾࿔\t¾\u0001¾\u0003¾࿗\b¾\u0003¾࿙\b¾\u0001¿\u0001¿\u0001¿\u0005¿\u0fde\b¿\n¿\f¿\u0fe1\t¿\u0001À\u0001À\u0001À\u0005À\u0fe6\bÀ\nÀ\fÀ\u0fe9\tÀ\u0001Á\u0001Á\u0001Á\u0001Á\u0001Á\u0001Á\u0003Á\u0ff1\bÁ\u0001Â\u0001Â\u0001Â\u0001Ã\u0001Ã\u0001Ã\u0001Ä\u0001Ä\u0001Ä\u0005Ä\u0ffc\bÄ\nÄ\fÄ\u0fff\tÄ\u0001Å\u0001Å\u0001Å\u0001Å\u0001Å\u0003Åဆ\bÅ\u0001Å\u0003Åဉ\bÅ\u0001Æ\u0001Æ\u0001Æ\u0005Æဎ\bÆ\nÆ\fÆထ\tÆ\u0001Ç\u0001Ç\u0001Ç\u0005Çဖ\bÇ\nÇ\fÇမ\tÇ\u0001È\u0001È\u0001È\u0001È\u0001È\u0001È\u0003Èအ\bÈ\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0003Éီ\bÉ\u0001É\u0001É\u0001É\u0003Éဳ\bÉ\u0003Éဵ\bÉ\u0001Ê\u0001Ê\u0005Ê္\bÊ\nÊ\fÊြ\tÊ\u0001Ê\u0001Ê\u0001Ë\u0001Ë\u0001Ë\u0001Ë\u0001Ë\u0001Ë\u0003Ë၆\bË\u0001Ì\u0003Ì၉\bÌ\u0001Ì\u0001Ì\u0003Ì၍\bÌ\u0001Ì\u0003Ìၐ\bÌ\u0001Í\u0001Í\u0001Í\u0005Íၕ\bÍ\nÍ\fÍၘ\tÍ\u0001Î\u0001Î\u0003Îၜ\bÎ\u0001Î\u0001Î\u0001Î\u0001Î\u0003Îၢ\bÎ\u0001Î\u0003Îၥ\bÎ\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0005Ïၮ\bÏ\nÏ\fÏၱ\tÏ\u0001Ð\u0001Ð\u0001Ð\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ò\u0001Ò\u0001Ò\u0001Ò\u0003Òၽ\bÒ\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0003Óႉ\bÓ\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0003Ô႔\bÔ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0003Õႜ\bÕ\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001×\u0001×\u0001×\u0001×\u0005×Ⴇ\b×\n×\f×Ⴊ\t×\u0001Ø\u0001Ø\u0001Ø\u0001Ø\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0005ÙႻ\bÙ\nÙ\fÙႾ\tÙ\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0005ÙჅ\bÙ\nÙ\fÙ\u10c8\tÙ\u0003Ù\u10ca\bÙ\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0005Ùბ\bÙ\nÙ\fÙე\tÙ\u0003Ùზ\bÙ\u0003Ùი\bÙ\u0001Ù\u0003Ùმ\bÙ\u0001Ù\u0003Ùპ\bÙ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úჰ\bÚ\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0003Ûჹ\bÛ\u0001Ü\u0001Ü\u0001Ü\u0005Üჾ\bÜ\nÜ\fÜᄁ\tÜ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0003Ýᄍ\bÝ\u0001Þ\u0001Þ\u0001Þ\u0005Þᄒ\bÞ\nÞ\fÞᄕ\tÞ\u0001ß\u0001ß\u0001ß\u0001à\u0001à\u0004àᄜ\bà\u000bà\fàᄝ\u0001à\u0003àᄡ\bà\u0001á\u0001á\u0001á\u0003áᄦ\bá\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0003âᄮ\bâ\u0001ã\u0001ã\u0001ã\u0003ãᄳ\bã\u0001ä\u0001ä\u0001å\u0001å\u0003åᄹ\bå\u0001å\u0001å\u0001å\u0003åᄾ\bå\u0001å\u0001å\u0001å\u0003åᅃ\bå\u0001å\u0001å\u0003åᅇ\bå\u0001å\u0001å\u0003åᅋ\bå\u0001å\u0001å\u0003åᅏ\bå\u0001å\u0001å\u0003åᅓ\bå\u0001å\u0001å\u0003åᅗ\bå\u0001å\u0001å\u0003åᅛ\bå\u0001å\u0001å\u0003åᅟ\bå\u0001å\u0003åᅢ\bå\u0001æ\u0001æ\u0001æ\u0005æᅧ\bæ\næ\fæᅪ\tæ\u0001ç\u0001ç\u0003çᅮ\bç\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0003èᅼ\bè\u0001é\u0001é\u0001é\u0003éᆁ\bé\u0001ê\u0001ê\u0003êᆅ\bê\u0001ë\u0001ë\u0003ëᆉ\bë\u0001ì\u0001ì\u0003ìᆍ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᆙ\bì\u0001ì\u0001ì\u0003ìᆝ\bì\u0001ì\u0001ì\u0003ìᆡ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᆧ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᆭ\bì\u0001ì\u0003ìᆰ\bì\u0003ìᆲ\bì\u0001í\u0001í\u0001í\u0005íᆷ\bí\ní\fíᆺ\tí\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0005íᇂ\bí\ní\fíᇅ\tí\u0001í\u0001í\u0001í\u0005íᇊ\bí\ní\fíᇍ\tí\u0001î\u0001î\u0001ï\u0001ï\u0001ð\u0001ð\u0001ð\tֺ\u05fdعكٰٔٹڂڋ\u0004 ŊŐŖñ\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e ¢¤¦¨ª¬®°²´¶¸º¼¾ÀÂÄÆÈÊÌÎÐÒÔÖØÚÜÞàâäæèêìîðòôöøúüþĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĸĺļľŀłńņňŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸźżžƀƂƄƆƈƊƌƎƐƒƔƖƘƚƜƞƠƢƤƦƨƪƬƮưƲƴƶƸƺƼƾǀǂǄǆǈǊǌǎǐǒǔǖǘǚǜǞǠ\u0000?\u0002\u0000EEyy\u0002\u0000ZZþþ\u0002\u0000))ēē\u0002\u0000\u008d\u008d¡¡\u0001\u00009:\u0002\u0000ŅŅŶŶ\u0002\u0000\r\r..\u0005\u000055FF}}\u008b\u008bÈÈ\u0001\u0000cd\u0002\u0000}}\u008b\u008b\u0003\u0000\t\tnnłł\u0002\u0000\t\tÂÂ\u0003\u0000TTÚÚġġ\u0003\u0000UUÛÛĢĢ\u0001\u0000Ųų\u0004\u0000uu««īīŤŤ\u0003\u0000uuīīŤŤ\u0002\u0000\u0017\u0017cc\u0002\u0000\u0085\u0085¸¸\u0002\u0000ńńŵŵ\u0002\u0000ŃŃŏŏ\u0002\u0000IIĜĜ\u0002\u0000ww¢¢\u0002\u0000\f\fii\u0002\u0000ƦƦƨƨ\u0002\u0000jjôô\u0002\u0000ììĳĳ\u0002\u0000\b\báá\u0001\u0000¾¿\u0003\u0000\f\f\u0012\u0012ĲĲ\u0003\u0000\u0080\u0080ŝŝŦŦ\u0002\u0000ƏƐƔƔ\u0002\u0000kkƑƓ\u0002\u0000ƏƐƗƗ\u0001\u0000ƌƎ\u000b\u0000OOQQ\u0099\u0099ÏÏÑÑÓÓÖÖĀĀğğŹŹƁƁ\u0004\u0000KKMNĩĩŭŭ\u0002\u0000VWŒŒ\u0003\u0000XYŎŎœœ\u0002\u0000++şş\u0002\u0000\u009e\u009eĒĒ\u0001\u0000ŀŁ\u0002\u0000\u0004\u0004\u008d\u008d\u0002\u0000\u0004\u0004\u0088\u0088\u0003\u0000!!»»ŘŘ\u0001\u0000ƄƋ\u0003\u0000kkƏƗƙƙ\u0004\u0000\u0010\u0010¡¡ááëë\u0002\u0000\u0080\u0080ŝŝ\u0001\u0000ƏƐ\b\u0000OP\u0099\u009aÏÔÖ×ÜÝğĠŹźƁƂ\u0006\u0000OO\u0099\u0099ÓÓÖÖğğƁƁ\u0002\u0000ÖÖƁƁ\u0004\u0000OO\u0099\u0099ÓÓğğ\u0003\u0000\u0099\u0099ÓÓğğ\u0002\u0000^^ƄƄ\u0002\u0000ķķƬƬ\u0002\u0000\u0087\u0087ûû\u0001\u0000Ƨƨ\u0002\u0000nnĪĪ8\u0000\t\u000b\r\u000f\u0011\u0011\u0013\u0015\u0017\u0019\u001b \"&(),02588:BDFIJOhjnppstv\u007f\u0082\u0082\u0084\u0087\u008a\u008c\u008f\u0092\u0095\u0096\u0098 ¢¥§ª¬®°°²³µ¸ºº¼¼¾ÝßàãåéêííïðòûýćĉĉċĖĘģĥĨĪıĳĶĸńņŋŎŔŗŗřţŧŬůźŽžƁƃ\u0010\u0000\u0011\u0011HHuu\u008e\u008e¦¦««´´¹¹½½ÞÞççėėĥĥīīŤŤŮŮ\u0011\u0000\t\u0010\u0012GItv\u008d\u008f¥§ª¬³µ¸º¼¾ÝßæèĖĘĤĦĪĬţťŭůƃᑵ\u0000Ǥ\u0001\u0000\u0000\u0000\u0002Ǧ\u0001\u0000\u0000\u0000\u0004ǵ\u0001\u0000\u0000\u0000\u0006Ȇ\u0001\u0000\u0000\u0000\bȗ\u0001\u0000\u0000\u0000\nȤ\u0001\u0000\u0000\u0000\fȦ\u0001\u0000\u0000\u0000\u000eȨ\u0001\u0000\u0000\u0000\u0010ȼ\u0001\u0000\u0000\u0000\u0012Ⱦ\u0001\u0000\u0000\u0000\u0014Ɇ\u0001\u0000\u0000\u0000\u0016ɑ\u0001\u0000\u0000\u0000\u0018ɜ\u0001\u0000\u0000\u0000\u001aɲ\u0001\u0000\u0000\u0000\u001cɽ\u0001\u0000\u0000\u0000\u001eʀ\u0001\u0000\u0000\u0000 ʦ\u0001\u0000\u0000\u0000\"ʩ\u0001\u0000\u0000\u0000$ʳ\u0001\u0000\u0000\u0000&˅\u0001\u0000\u0000\u0000(ˏ\u0001\u0000\u0000\u0000*˒\u0001\u0000\u0000\u0000,˔\u0001\u0000\u0000\u0000.˗\u0001\u0000\u0000\u00000˚\u0001\u0000\u0000\u00002˝\u0001\u0000\u0000\u00004ˠ\u0001\u0000\u0000\u00006ˣ\u0001\u0000\u0000\u00008˦\u0001\u0000\u0000\u0000:ؼ\u0001\u0000\u0000\u0000<ڎ\u0001\u0000\u0000\u0000>ڐ\u0001\u0000\u0000\u0000@ڡ\u0001\u0000\u0000\u0000Bڥ\u0001\u0000\u0000\u0000Dک\u0001\u0000\u0000\u0000Fگ\u0001\u0000\u0000\u0000Hڹ\u0001\u0000\u0000\u0000Jڻ\u0001\u0000\u0000\u0000Lڽ\u0001\u0000\u0000\u0000Nݧ\u0001\u0000\u0000\u0000Pݩ\u0001\u0000\u0000\u0000Rݻ\u0001\u0000\u0000\u0000Tށ\u0001\u0000\u0000\u0000Vއ\u0001\u0000\u0000\u0000Xޓ\u0001\u0000\u0000\u0000Zޠ\u0001\u0000\u0000\u0000\\ޣ\u0001\u0000\u0000\u0000^ެ\u0001\u0000\u0000\u0000`ޯ\u0001\u0000\u0000\u0000b\u07b3\u0001\u0000\u0000\u0000dࠍ\u0001\u0000\u0000\u0000fࠏ\u0001\u0000\u0000\u0000hࠓ\u0001\u0000\u0000\u0000jࠨ\u0001\u0000\u0000\u0000lࠪ\u0001\u0000\u0000\u0000nࠬ\u0001\u0000\u0000\u0000p\u082e\u0001\u0000\u0000\u0000r࠷\u0001\u0000\u0000\u0000t࠹\u0001\u0000\u0000\u0000vࡁ\u0001\u0000\u0000\u0000xࡍ\u0001\u0000\u0000\u0000zࡘ\u0001\u0000\u0000\u0000|\u086c\u0001\u0000\u0000\u0000~\u086f\u0001\u0000\u0000\u0000\u0080\u087a\u0001\u0000\u0000\u0000\u0082\u088a\u0001\u0000\u0000\u0000\u0084\u0890\u0001\u0000\u0000\u0000\u0086\u0892\u0001\u0000\u0000\u0000\u0088\u089d\u0001\u0000\u0000\u0000\u008aࢤ\u0001\u0000\u0000\u0000\u008cࢯ\u0001\u0000\u0000\u0000\u008eࣀ\u0001\u0000\u0000\u0000\u0090\u08c8\u0001\u0000\u0000\u0000\u0092\u08ca\u0001\u0000\u0000\u0000\u0094\u08d0\u0001\u0000\u0000\u0000\u0096ऐ\u0001\u0000\u0000\u0000\u0098घ\u0001\u0000\u0000\u0000\u009aड\u0001\u0000\u0000\u0000\u009cभ\u0001\u0000\u0000\u0000\u009eॡ\u0001\u0000\u0000\u0000 ।\u0001\u0000\u0000\u0000¢\u098d\u0001\u0000\u0000\u0000¤এ\u0001\u0000\u0000\u0000¦গ\u0001\u0000\u0000\u0000¨হ\u0001\u0000\u0000\u0000ª১\u0001\u0000\u0000\u0000¬ৼ\u0001\u0000\u0000\u0000®ਜ\u0001\u0000\u0000\u0000°ਨ\u0001\u0000\u0000\u0000²ਫ\u0001\u0000\u0000\u0000´\u0a34\u0001\u0000\u0000\u0000¶ੂ\u0001\u0000\u0000\u0000¸\u0a55\u0001\u0000\u0000\u0000º੩\u0001\u0000\u0000\u0000¼੯\u0001\u0000\u0000\u0000¾ੱ\u0001\u0000\u0000\u0000À੶\u0001\u0000\u0000\u0000Â\u0a7e\u0001\u0000\u0000\u0000Äં\u0001\u0000\u0000\u0000Æઅ\u0001\u0000\u0000\u0000Èઈ\u0001\u0000\u0000\u0000Êઢ\u0001\u0000\u0000\u0000Ìત\u0001\u0000\u0000\u0000Îે\u0001\u0000\u0000\u0000Ð૰\u0001\u0000\u0000\u0000Ò\u0af4\u0001\u0000\u0000\u0000Ôଏ\u0001\u0000\u0000\u0000Öଓ\u0001\u0000\u0000\u0000Øଢ\u0001\u0000\u0000\u0000Úତ\u0001\u0000\u0000\u0000Üୂ\u0001\u0000\u0000\u0000Þୄ\u0001\u0000\u0000\u0000àୋ\u0001\u0000\u0000\u0000â\u0b58\u0001\u0000\u0000\u0000äଢ଼\u0001\u0000\u0000\u0000æୟ\u0001\u0000\u0000\u0000è୮\u0001\u0000\u0000\u0000êஆ\u0001\u0000\u0000\u0000ìஓ\u0001\u0000\u0000\u0000îக\u0001\u0000\u0000\u0000ð\u0b97\u0001\u0000\u0000\u0000ò\u0b9b\u0001\u0000\u0000\u0000ôஞ\u0001\u0000\u0000\u0000ö\u0ba2\u0001\u0000\u0000\u0000øூ\u0001\u0000\u0000\u0000ú\u0bc5\u0001\u0000\u0000\u0000ü\u0bd1\u0001\u0000\u0000\u0000þ\u0be4\u0001\u0000\u0000\u0000Ā\u0bfe\u0001\u0000\u0000\u0000Ăఄ\u0001\u0000\u0000\u0000Ąఆ\u0001\u0000\u0000\u0000Ćప\u0001\u0000\u0000\u0000Ĉబ\u0001\u0000\u0000\u0000Ċర\u0001\u0000\u0000\u0000Čస\u0001\u0000\u0000\u0000Ďృ\u0001\u0000\u0000\u0000Đే\u0001\u0000\u0000\u0000Ē\u0c52\u0001\u0000\u0000\u0000Ĕ\u0c74\u0001\u0000\u0000\u0000Ė\u0c76\u0001\u0000\u0000\u0000Ę౹\u0001\u0000\u0000\u0000Ěಗ\u0001\u0000\u0000\u0000Ĝಳ\u0001\u0000\u0000\u0000Ğ\u0cce\u0001\u0000\u0000\u0000Ġ\u0cd4\u0001\u0000\u0000\u0000Ģ\u0cd8\u0001\u0000\u0000\u0000Ĥ\u0cda\u0001\u0000\u0000\u0000Ħ\u0cf0\u0001\u0000\u0000\u0000Ĩണ\u0001\u0000\u0000\u0000Īഥ\u0001\u0000\u0000\u0000Ĭഭ\u0001\u0000\u0000\u0000Įവ\u0001\u0000\u0000\u0000İഽ\u0001\u0000\u0000\u0000Ĳ\u0d45\u0001\u0000\u0000\u0000Ĵൌ\u0001\u0000\u0000\u0000Ķ\u0d50\u0001\u0000\u0000\u0000ĸ൚\u0001\u0000\u0000\u0000ĺൢ\u0001\u0000\u0000\u0000ļ൯\u0001\u0000\u0000\u0000ľൾ\u0001\u0000\u0000\u0000ŀං\u0001\u0000\u0000\u0000ł\u0d84\u0001\u0000\u0000\u0000ńආ\u0001\u0000\u0000\u0000ņඌ\u0001\u0000\u0000\u0000ňඎ\u0001\u0000\u0000\u0000Ŋජ\u0001\u0000\u0000\u0000Ōก\u0001\u0000\u0000\u0000Ŏฃ\u0001\u0000\u0000\u0000Őฉ\u0001\u0000\u0000\u0000Œว\u0001\u0000\u0000\u0000Ŕษ\u0001\u0000\u0000\u0000Ŗ༞\u0001\u0000\u0000\u0000Ř༹\u0001\u0000\u0000\u0000Śཊ\u0001\u0000\u0000\u0000Ŝཌ\u0001\u0000\u0000\u0000Şཎ\u0001\u0000\u0000\u0000Šཐ\u0001\u0000\u0000\u0000Ţདྷ\u0001\u0000\u0000\u0000Ťཔ\u0001\u0000\u0000\u0000Ŧཙ\u0001\u0000\u0000\u0000Ũའ\u0001\u0000\u0000\u0000Ūཤ\u0001\u0000\u0000\u0000Ŭཀྵ\u0001\u0000\u0000\u0000Ů\u0f6f\u0001\u0000\u0000\u0000Űྲྀ\u0001\u0000\u0000\u0000Ųླྀ\u0001\u0000\u0000\u0000Ŵཽ\u0001\u0000\u0000\u0000Ŷཿ\u0001\u0000\u0000\u0000Ÿྃ\u0001\u0000\u0000\u0000źྨ\u0001\u0000\u0000\u0000ż࿘\u0001\u0000\u0000\u0000ž࿚\u0001\u0000\u0000\u0000ƀ\u0fe2\u0001\u0000\u0000\u0000Ƃ\u0ff0\u0001\u0000\u0000\u0000Ƅ\u0ff2\u0001\u0000\u0000\u0000Ɔ\u0ff5\u0001\u0000\u0000\u0000ƈ\u0ff8\u0001\u0000\u0000\u0000Ɗက\u0001\u0000\u0000\u0000ƌည\u0001\u0000\u0000\u0000Ǝဒ\u0001\u0000\u0000\u0000Ɛဠ\u0001\u0000\u0000\u0000ƒဴ\u0001\u0000\u0000\u0000Ɣံ\u0001\u0000\u0000\u0000Ɩ၅\u0001\u0000\u0000\u0000Ƙ၏\u0001\u0000\u0000\u0000ƚၑ\u0001\u0000\u0000\u0000Ɯၙ\u0001\u0000\u0000\u0000ƞၯ\u0001\u0000\u0000\u0000Ơၲ\u0001\u0000\u0000\u0000Ƣၵ\u0001\u0000\u0000\u0000Ƥၼ\u0001\u0000\u0000\u0000Ʀႈ\u0001\u0000\u0000\u0000ƨ႓\u0001\u0000\u0000\u0000ƪႛ\u0001\u0000\u0000\u0000Ƭႝ\u0001\u0000\u0000\u0000ƮႢ\u0001\u0000\u0000\u0000ưႫ\u0001\u0000\u0000\u0000Ʋო\u0001\u0000\u0000\u0000ƴჯ\u0001\u0000\u0000\u0000ƶჸ\u0001\u0000\u0000\u0000Ƹჺ\u0001\u0000\u0000\u0000ƺᄌ\u0001\u0000\u0000\u0000Ƽᄎ\u0001\u0000\u0000\u0000ƾᄖ\u0001\u0000\u0000\u0000ǀᄠ\u0001\u0000\u0000\u0000ǂᄥ\u0001\u0000\u0000\u0000Ǆᄭ\u0001\u0000\u0000\u0000ǆᄲ\u0001\u0000\u0000\u0000ǈᄴ\u0001\u0000\u0000\u0000Ǌᅡ\u0001\u0000\u0000\u0000ǌᅣ\u0001\u0000\u0000\u0000ǎᅫ\u0001\u0000\u0000\u0000ǐᅻ\u0001\u0000\u0000\u0000ǒᆀ\u0001\u0000\u0000\u0000ǔᆄ\u0001\u0000\u0000\u0000ǖᆈ\u0001\u0000\u0000\u0000ǘᆱ\u0001\u0000\u0000\u0000ǚᆳ\u0001\u0000\u0000\u0000ǜᇎ\u0001\u0000\u0000\u0000Ǟᇐ\u0001\u0000\u0000\u0000Ǡᇒ\u0001\u0000\u0000\u0000Ǣǥ\u0003&\u0013\u0000ǣǥ\u0003\u0002\u0001\u0000ǤǢ\u0001\u0000\u0000\u0000Ǥǣ\u0001\u0000\u0000\u0000ǥ\u0001\u0001\u0000\u0000\u0000Ǧǩ\u0005\u001b\u0000\u0000ǧǨ\u0005á\u0000\u0000ǨǪ\u0005\u0019\u0000\u0000ǩǧ\u0001\u0000\u0000\u0000ǩǪ\u0001\u0000\u0000\u0000ǪǬ\u0001\u0000\u0000\u0000ǫǭ\u0003\u0006\u0003\u0000Ǭǫ\u0001\u0000\u0000\u0000Ǭǭ\u0001\u0000\u0000\u0000ǭǮ\u0001\u0000\u0000\u0000Ǯǰ\u0005q\u0000\u0000ǯǱ\u0005\u0001\u0000\u0000ǰǯ\u0001\u0000\u0000\u0000ǰǱ\u0001\u0000\u0000\u0000Ǳǲ\u0001\u0000\u0000\u0000ǲǳ\u0005\u0000\u0000\u0001ǳ\u0003\u0001\u0000\u0000\u0000ǴǶ\u0003(\u0014\u0000ǵǴ\u0001\u0000\u0000\u0000ǵǶ\u0001\u0000\u0000\u0000ǶǷ\u0001\u0000\u0000\u0000ǷǺ\u0005\u001b\u0000\u0000Ǹǹ\u0005á\u0000\u0000ǹǻ\u0005\u0019\u0000\u0000ǺǸ\u0001\u0000\u0000\u0000Ǻǻ\u0001\u0000\u0000\u0000ǻǽ\u0001\u0000\u0000\u0000ǼǾ\u0003\u0006\u0003\u0000ǽǼ\u0001\u0000\u0000\u0000ǽǾ\u0001\u0000\u0000\u0000Ǿǿ\u0001\u0000\u0000\u0000ǿȁ\u0005q\u0000\u0000ȀȂ\u0003*\u0015\u0000ȁȀ\u0001\u0000\u0000\u0000ȁȂ\u0001\u0000\u0000\u0000Ȃ\u0005\u0001\u0000\u0000\u0000ȃȄ\u0003\b\u0004\u0000Ȅȅ\u0005\u0001\u0000\u0000ȅȇ\u0001\u0000\u0000\u0000Ȇȃ\u0001\u0000\u0000\u0000ȇȈ\u0001\u0000\u0000\u0000ȈȆ\u0001\u0000\u0000\u0000Ȉȉ\u0001\u0000\u0000\u0000ȉ\u0007\u0001\u0000\u0000\u0000ȊȘ\u0003\u000e\u0007\u0000ȋȘ\u0003:\u001d\u0000ȌȘ\u0003\n\u0005\u0000ȍȘ\u0003\u0004\u0002\u0000ȎȘ\u0003\u0014\n\u0000ȏȘ\u0003\u0018\f\u0000ȐȘ\u0003 \u0010\u0000ȑȘ\u0003\u0016\u000b\u0000ȒȘ\u0003\u001a\r\u0000ȓȘ\u0003\u001c\u000e\u0000ȔȘ\u0003\u001e\u000f\u0000ȕȘ\u0003\"\u0011\u0000ȖȘ\u0003$\u0012\u0000ȗȊ\u0001\u0000\u0000\u0000ȗȋ\u0001\u0000\u0000\u0000ȗȌ\u0001\u0000\u0000\u0000ȗȍ\u0001\u0000\u0000\u0000ȗȎ\u0001\u0000\u0000\u0000ȗȏ\u0001\u0000\u0000\u0000ȗȐ\u0001\u0000\u0000\u0000ȗȑ\u0001\u0000\u0000\u0000ȗȒ\u0001\u0000\u0000\u0000ȗȓ\u0001\u0000\u0000\u0000ȗȔ\u0001\u0000\u0000\u0000ȗȕ\u0001\u0000\u0000\u0000ȗȖ\u0001\u0000\u0000\u0000Ș\t\u0001\u0000\u0000\u0000șȚ\u0005Ī\u0000\u0000Țȥ\u0003À`\u0000țȜ\u0005Ī\u0000\u0000Ȝȝ\u0005\u0002\u0000\u0000ȝȞ\u0003Ī\u0095\u0000Ȟȟ\u0005\u0003\u0000\u0000ȟȠ\u0005Ƅ\u0000\u0000Ƞȡ\u0005\u0002\u0000\u0000ȡȢ\u0003b1\u0000Ȣȣ\u0005\u0003\u0000\u0000ȣȥ\u0001\u0000\u0000\u0000Ȥș\u0001\u0000\u0000\u0000Ȥț\u0001\u0000\u0000\u0000ȥ\u000b\u0001\u0000\u0000\u0000Ȧȧ\u0003ǒé\u0000ȧ\r\u0001\u0000\u0000\u0000Ȩȩ\u0005]\u0000\u0000ȩȪ\u0003Ĭ\u0096\u0000Ȫȱ\u0005B\u0000\u0000ȫȬ\u0005\u0088\u0000\u0000ȬȮ\u0005Ĺ\u0000\u0000ȭȯ\u0005ů\u0000\u0000Ȯȭ\u0001\u0000\u0000\u0000Ȯȯ\u0001\u0000\u0000\u0000ȯȰ\u0001\u0000\u0000\u0000ȰȲ\u0003\f\u0006\u0000ȱȫ\u0001\u0000\u0000\u0000ȱȲ\u0001\u0000\u0000\u0000Ȳ\u000f\u0001\u0000\u0000\u0000ȳȵ\u0005Ĺ\u0000\u0000ȴȶ\u0005ů\u0000\u0000ȵȴ\u0001\u0000\u0000\u0000ȵȶ\u0001\u0000\u0000\u0000ȶȷ\u0001\u0000\u0000\u0000ȷȽ\u0003\f\u0006\u0000ȸȽ\u0005ĸ\u0000\u0000ȹȺ\u0005á\u0000\u0000ȺȽ\u0005\u008c\u0000\u0000ȻȽ\u0003Ĭ\u0096\u0000ȼȳ\u0001\u0000\u0000\u0000ȼȸ\u0001\u0000\u0000\u0000ȼȹ\u0001\u0000\u0000\u0000ȼȻ\u0001\u0000\u0000\u0000Ƚ\u0011\u0001\u0000\u0000\u0000ȾɃ\u0003\u0010\b\u0000ȿɀ\u0005\u0004\u0000\u0000ɀɂ\u0003\u0010\b\u0000Ɂȿ\u0001\u0000\u0000\u0000ɂɅ\u0001\u0000\u0000\u0000ɃɁ\u0001\u0000\u0000\u0000ɃɄ\u0001\u0000\u0000\u0000Ʉ\u0013\u0001\u0000\u0000\u0000ɅɃ\u0001\u0000\u0000\u0000Ɇɇ\u0005]\u0000\u0000ɇɈ\u0007\u0000\u0000\u0000Ɉɉ\u0005\u0096\u0000\u0000ɉɊ\u0005\u0088\u0000\u0000ɊɎ\u0003\u0012\t\u0000ɋɏ\u0003\u0004\u0002\u0000Ɍɏ\u0003:\u001d\u0000ɍɏ\u0003\n\u0005\u0000Ɏɋ\u0001\u0000\u0000\u0000ɎɌ\u0001\u0000\u0000\u0000Ɏɍ\u0001\u0000\u0000\u0000ɏ\u0015\u0001\u0000\u0000\u0000ɐɒ\u0003(\u0014\u0000ɑɐ\u0001\u0000\u0000\u0000ɑɒ\u0001\u0000\u0000\u0000ɒɓ\u0001\u0000\u0000\u0000ɓɔ\u0005Ž\u0000\u0000ɔɕ\u0003Ŋ¥\u0000ɕɖ\u0005l\u0000\u0000ɖɗ\u0003\u0006\u0003\u0000ɗɘ\u0005q\u0000\u0000ɘɚ\u0005Ž\u0000\u0000əɛ\u0003*\u0015\u0000ɚə\u0001\u0000\u0000\u0000ɚɛ\u0001\u0000\u0000\u0000ɛ\u0017\u0001\u0000\u0000\u0000ɜɝ\u0005\u009d\u0000\u0000ɝɞ\u0003Ŋ¥\u0000ɞɟ\u0005Ō\u0000\u0000ɟɧ\u0003\u0006\u0003\u0000ɠɡ\u0005p\u0000\u0000ɡɢ\u0003Ŋ¥\u0000ɢɣ\u0005Ō\u0000\u0000ɣɤ\u0003\u0006\u0003\u0000ɤɦ\u0001\u0000\u0000\u0000ɥɠ\u0001\u0000\u0000\u0000ɦɩ\u0001\u0000\u0000\u0000ɧɥ\u0001\u0000\u0000\u0000ɧɨ\u0001\u0000\u0000\u0000ɨɬ\u0001\u0000\u0000\u0000ɩɧ\u0001\u0000\u0000\u0000ɪɫ\u0005o\u0000\u0000ɫɭ\u0003\u0006\u0003\u0000ɬɪ\u0001\u0000\u0000\u0000ɬɭ\u0001\u0000\u0000\u0000ɭɮ\u0001\u0000\u0000\u0000ɮɯ\u0005q\u0000\u0000ɯɰ\u0005\u009d\u0000\u0000ɰ\u0019\u0001\u0000\u0000\u0000ɱɳ\u0003(\u0014\u0000ɲɱ\u0001\u0000\u0000\u0000ɲɳ\u0001\u0000\u0000\u0000ɳɴ\u0001\u0000\u0000\u0000ɴɵ\u0005Ď\u0000\u0000ɵɶ\u0003\u0006\u0003\u0000ɶɷ\u0005Ū\u0000\u0000ɷɸ\u0003Ŋ¥\u0000ɸɹ\u0005q\u0000\u0000ɹɻ\u0005Ď\u0000\u0000ɺɼ\u0003*\u0015\u0000ɻɺ\u0001\u0000\u0000\u0000ɻɼ\u0001\u0000\u0000\u0000ɼ\u001b\u0001\u0000\u0000\u0000ɽɾ\u0005¼\u0000\u0000ɾɿ\u0003Ĭ\u0096\u0000ɿ\u001d\u0001\u0000\u0000\u0000ʀʁ\u0005³\u0000\u0000ʁʂ\u0003Ĭ\u0096\u0000ʂ\u001f\u0001\u0000\u0000\u0000ʃʉ\u0005*\u0000\u0000ʄʅ\u0005Ż\u0000\u0000ʅʆ\u0003Ŋ¥\u0000ʆʇ\u0005Ō\u0000\u0000ʇʈ\u0003\u0006\u0003\u0000ʈʊ\u0001\u0000\u0000\u0000ʉʄ\u0001\u0000\u0000\u0000ʊʋ\u0001\u0000\u0000\u0000ʋʉ\u0001\u0000\u0000\u0000ʋʌ\u0001\u0000\u0000\u0000ʌʏ\u0001\u0000\u0000\u0000ʍʎ\u0005o\u0000\u0000ʎʐ\u0003\u0006\u0003\u0000ʏʍ\u0001\u0000\u0000\u0000ʏʐ\u0001\u0000\u0000\u0000ʐʑ\u0001\u0000\u0000\u0000ʑʒ\u0005q\u0000\u0000ʒʓ\u0005*\u0000\u0000ʓʧ\u0001\u0000\u0000\u0000ʔʕ\u0005*\u0000\u0000ʕʛ\u0003ł¡\u0000ʖʗ\u0005Ż\u0000\u0000ʗʘ\u0003ł¡\u0000ʘʙ\u0005Ō\u0000\u0000ʙʚ\u0003\u0006\u0003\u0000ʚʜ\u0001\u0000\u0000\u0000ʛʖ\u0001\u0000\u0000\u0000ʜʝ\u0001\u0000\u0000\u0000ʝʛ\u0001\u0000\u0000\u0000ʝʞ\u0001\u0000\u0000\u0000ʞʡ\u0001\u0000\u0000\u0000ʟʠ\u0005o\u0000\u0000ʠʢ\u0003\u0006\u0003\u0000ʡʟ\u0001\u0000\u0000\u0000ʡʢ\u0001\u0000\u0000\u0000ʢʣ\u0001\u0000\u0000\u0000ʣʤ\u0005q\u0000\u0000ʤʥ\u0005*\u0000\u0000ʥʧ\u0001\u0000\u0000\u0000ʦʃ\u0001\u0000\u0000\u0000ʦʔ\u0001\u0000\u0000\u0000ʧ!\u0001\u0000\u0000\u0000ʨʪ\u0003(\u0014\u0000ʩʨ\u0001\u0000\u0000\u0000ʩʪ\u0001\u0000\u0000\u0000ʪʫ\u0001\u0000\u0000\u0000ʫʬ\u0005Ê\u0000\u0000ʬʭ\u0003\u0006\u0003\u0000ʭʮ\u0005q\u0000\u0000ʮʰ\u0005Ê\u0000\u0000ʯʱ\u0003*\u0015\u0000ʰʯ\u0001\u0000\u0000\u0000ʰʱ\u0001\u0000\u0000\u0000ʱ#\u0001\u0000\u0000\u0000ʲʴ\u0003(\u0014\u0000ʳʲ\u0001\u0000\u0000\u0000ʳʴ\u0001\u0000\u0000\u0000ʴʵ\u0001\u0000\u0000\u0000ʵʹ\u0005\u0088\u0000\u0000ʶʷ\u0003Ĭ\u0096\u0000ʷʸ\u0005\u0016\u0000\u0000ʸʺ\u0001\u0000\u0000\u0000ʹʶ\u0001\u0000\u0000\u0000ʹʺ\u0001\u0000\u0000\u0000ʺʻ\u0001\u0000\u0000\u0000ʻʼ\u0003b1\u0000ʼʽ\u0005l\u0000\u0000ʽʾ\u0003\u0006\u0003\u0000ʾʿ\u0005q\u0000\u0000ʿˁ\u0005\u0088\u0000\u0000ˀ˂\u0003*\u0015\u0000ˁˀ\u0001\u0000\u0000\u0000ˁ˂\u0001\u0000\u0000\u0000˂%\u0001\u0000\u0000\u0000˃ˆ\u0003:\u001d\u0000˄ˆ\u0003<\u001e\u0000˅˃\u0001\u0000\u0000\u0000˅˄\u0001\u0000\u0000\u0000ˆˊ\u0001\u0000\u0000\u0000ˇˉ\u0005\u0001\u0000\u0000ˈˇ\u0001\u0000\u0000\u0000ˉˌ\u0001\u0000\u0000\u0000ˊˈ\u0001\u0000\u0000\u0000ˊˋ\u0001\u0000\u0000\u0000ˋˍ\u0001\u0000\u0000\u0000ˌˊ\u0001\u0000\u0000\u0000ˍˎ\u0005\u0000\u0000\u0001ˎ'\u0001\u0000\u0000\u0000ˏː\u0003Ĭ\u0096\u0000ːˑ\u0005ƚ\u0000\u0000ˑ)\u0001\u0000\u0000\u0000˒˓\u0003Ĭ\u0096\u0000˓+\u0001\u0000\u0000\u0000˔˕\u0003Ķ\u009b\u0000˕˖\u0005\u0000\u0000\u0001˖-\u0001\u0000\u0000\u0000˗˘\u0003Ĳ\u0099\u0000˘˙\u0005\u0000\u0000\u0001˙/\u0001\u0000\u0000\u0000˚˛\u0003Ĭ\u0096\u0000˛˜\u0005\u0000\u0000\u0001˜1\u0001\u0000\u0000\u0000˝˞\u0003Ĵ\u009a\u0000˞˟\u0005\u0000\u0000\u0001˟3\u0001\u0000\u0000\u0000ˠˡ\u0003ż¾\u0000ˡˢ\u0005\u0000\u0000\u0001ˢ5\u0001\u0000\u0000\u0000ˣˤ\u0003ƈÄ\u0000ˤ˥\u0005\u0000\u0000\u0001˥7\u0001\u0000\u0000\u0000˦˧\u0003ƌÆ\u0000˧˨\u0005\u0000\u0000\u0001˨9\u0001\u0000\u0000\u0000˩ؽ\u0003b1\u0000˪ؽ\u0003>\u001f\u0000˫˭\u0003v;\u0000ˬ˫\u0001\u0000\u0000\u0000ˬ˭\u0001\u0000\u0000\u0000˭ˮ\u0001\u0000\u0000\u0000ˮؽ\u0003\u0096K\u0000˯˰\u0005Ŭ\u0000\u0000˰ؽ\u0003\u0098L\u0000˱˲\u0005Ŭ\u0000\u0000˲˳\u0003l6\u0000˳˴\u0003\u0098L\u0000˴ؽ\u0001\u0000\u0000\u0000˵˶\u0005Ī\u0000\u0000˶˷\u0005,\u0000\u0000˷ؽ\u0003\u009aM\u0000˸˹\u0005G\u0000\u0000˹˾\u0003l6\u0000˺˻\u0005\u009d\u0000\u0000˻˼\u0003Ŏ§\u0000˼˽\u0005x\u0000\u0000˽˿\u0001\u0000\u0000\u0000˾˺\u0001\u0000\u0000\u0000˾˿\u0001\u0000\u0000\u0000˿̀\u0001\u0000\u0000\u0000̀̈\u0003\u0098L\u0000́̇\u0003^/\u0000̂̇\u0003Z-\u0000̃̄\u0005ſ\u0000\u0000̄̅\u0007\u0001\u0000\u0000̅̇\u0003~?\u0000̆́\u0001\u0000\u0000\u0000̆̂\u0001\u0000\u0000\u0000̆̃\u0001\u0000\u0000\u0000̇̊\u0001\u0000\u0000\u0000̈̆\u0001\u0000\u0000\u0000̈̉\u0001\u0000\u0000\u0000̉ؽ\u0001\u0000\u0000\u0000̊̈\u0001\u0000\u0000\u0000̋̌\u0005\r\u0000\u0000̌̍\u0003l6\u0000̍̎\u0003\u0098L\u0000̎̏\u0005Ī\u0000\u0000̏̐\u0007\u0001\u0000\u0000̐̑\u0003~?\u0000̑ؽ\u0001\u0000\u0000\u0000̒̓\u0005\r\u0000\u0000̓̔\u0003l6\u0000̔̕\u0003\u0098L\u0000̖̕\u0005ũ\u0000\u0000̖̗\u0007\u0001\u0000\u0000̗̘\u0003~?\u0000̘ؽ\u0001\u0000\u0000\u0000̙̚\u0005\r\u0000\u0000̛̚\u0003l6\u0000̛̜\u0003\u0098L\u0000̜̝\u0005Ī\u0000\u0000̝̞\u0003Z-\u0000̞ؽ\u0001\u0000\u0000\u0000̟̠\u0005n\u0000\u0000̠̣\u0003l6\u0000̡̢\u0005\u009d\u0000\u0000̢̤\u0005x\u0000\u0000̡̣\u0001\u0000\u0000\u0000̣̤\u0001\u0000\u0000\u0000̤̥\u0001\u0000\u0000\u0000̧̥\u0003\u0098L\u0000̨̦\u0007\u0002\u0000\u0000̧̦\u0001\u0000\u0000\u0000̧̨\u0001\u0000\u0000\u0000̨ؽ\u0001\u0000\u0000\u0000̩̪\u0005Į\u0000\u0000̪̭\u0003n7\u0000̫̬\u0007\u0003\u0000\u0000̬̮\u0003Ĭ\u0096\u0000̭̫\u0001\u0000\u0000\u0000̭̮\u0001\u0000\u0000\u0000̮̳\u0001\u0000\u0000\u0000̯̱\u0005¾\u0000\u0000̰̯\u0001\u0000\u0000\u0000̰̱\u0001\u0000\u0000\u0000̱̲\u0001\u0000\u0000\u0000̴̲\u0003ǒé\u0000̳̰\u0001\u0000\u0000\u0000̴̳\u0001\u0000\u0000\u0000̴ؽ\u0001\u0000\u0000\u0000̵̺\u0003P(\u0000̶̷\u0005\u0002\u0000\u0000̷̸\u0003ƌÆ\u0000̸̹\u0005\u0003\u0000\u0000̹̻\u0001\u0000\u0000\u0000̶̺\u0001\u0000\u0000\u0000̺̻\u0001\u0000\u0000\u0000̻̽\u0001\u0000\u0000\u0000̼̾\u0003z=\u0000̼̽\u0001\u0000\u0000\u0000̽̾\u0001\u0000\u0000\u0000̾̿\u0001\u0000\u0000\u0000̿̈́\u0003|>\u0000̀͂\u0005\u0016\u0000\u0000́̀\u0001\u0000\u0000\u0000́͂\u0001\u0000\u0000\u0000͂̓\u0001\u0000\u0000\u0000̓ͅ\u0003b1\u0000̈́́\u0001\u0000\u0000\u0000̈́ͅ\u0001\u0000\u0000\u0000ͅؽ\u0001\u0000\u0000\u0000͇͆\u0005G\u0000\u0000͇͌\u0005Ņ\u0000\u0000͈͉\u0005\u009d\u0000\u0000͉͊\u0003Ŏ§\u0000͊͋\u0005x\u0000\u0000͍͋\u0001\u0000\u0000\u0000͈͌\u0001\u0000\u0000\u0000͍͌\u0001\u0000\u0000\u0000͍͎\u0001\u0000\u0000\u0000͎͏\u0003Ĳ\u0099\u0000͏͐\u0005¾\u0000\u0000͙͐\u0003Ĳ\u0099\u0000͑͘\u0003z=\u0000͒͘\u0003Ĩ\u0094\u0000͓͘\u0003\u008eG\u0000͔͘\u0003Z-\u0000͕͖\u0005ŉ\u0000\u0000͖͘\u0003~?\u0000͗͑\u0001\u0000\u0000\u0000͗͒\u0001\u0000\u0000\u0000͓͗\u0001\u0000\u0000\u0000͔͗\u0001\u0000\u0000\u0000͕͗\u0001\u0000\u0000\u0000͛͘\u0001\u0000\u0000\u0000͙͗\u0001\u0000\u0000\u0000͙͚\u0001\u0000\u0000\u0000͚ؽ\u0001\u0000\u0000\u0000͙͛\u0001\u0000\u0000\u0000͜͡\u0003R)\u0000͝͞\u0005\u0002\u0000\u0000͟͞\u0003ƌÆ\u0000͟͠\u0005\u0003\u0000\u0000͢͠\u0001\u0000\u0000\u0000͡͝\u0001\u0000\u0000\u0000͢͡\u0001\u0000\u0000\u0000ͤ͢\u0001\u0000\u0000\u0000ͣͥ\u0003z=\u0000ͤͣ\u0001\u0000\u0000\u0000ͤͥ\u0001\u0000\u0000\u0000ͥͦ\u0001\u0000\u0000\u0000ͦͫ\u0003|>\u0000ͧͩ\u0005\u0016\u0000\u0000ͨͧ\u0001\u0000\u0000\u0000ͨͩ\u0001\u0000\u0000\u0000ͩͪ\u0001\u0000\u0000\u0000ͪͬ\u0003b1\u0000ͫͨ\u0001\u0000\u0000\u0000ͫͬ\u0001\u0000\u0000\u0000ͬؽ\u0001\u0000\u0000\u0000ͭͮ\u0005\u000f\u0000\u0000ͮͯ\u0005Ņ\u0000\u0000ͯͱ\u0003\u0098L\u0000ͰͲ\u0003h4\u0000ͱͰ\u0001\u0000\u0000\u0000ͱͲ\u0001\u0000\u0000\u0000Ͳͳ\u0001\u0000\u0000\u0000ͳʹ\u0005@\u0000\u0000ʹͼ\u0005Ļ\u0000\u0000͵ͽ\u0003ǂá\u0000Ͷͷ\u0005\u0088\u0000\u0000ͷ\u0378\u0005:\u0000\u0000\u0378ͽ\u0003Ċ\u0085\u0000\u0379ͺ\u0005\u0088\u0000\u0000ͺͻ\u0005\f\u0000\u0000ͻͽ\u0005:\u0000\u0000ͼ͵\u0001\u0000\u0000\u0000ͼͶ\u0001\u0000\u0000\u0000ͼ\u0379\u0001\u0000\u0000\u0000ͼͽ\u0001\u0000\u0000\u0000ͽؽ\u0001\u0000\u0000\u0000;Ϳ\u0005\u000f\u0000\u0000Ϳ\u0382\u0005ņ\u0000\u0000\u0380\u0381\u0007\u0003\u0000\u0000\u0381\u0383\u0003\u0098L\u0000\u0382\u0380\u0001\u0000\u0000\u0000\u0382\u0383\u0001\u0000\u0000\u0000\u0383΄\u0001\u0000\u0000\u0000΄΅\u0005@\u0000\u0000΅·\u0005Ļ\u0000\u0000ΆΈ\u0003ǂá\u0000·Ά\u0001\u0000\u0000\u0000·Έ\u0001\u0000\u0000\u0000Έؽ\u0001\u0000\u0000\u0000ΉΊ\u0005\r\u0000\u0000Ί\u038b\u0005Ņ\u0000\u0000\u038bΌ\u0003\u0098L\u0000Ό\u038d\u0005\t\u0000\u0000\u038dΎ\u0007\u0004\u0000\u0000ΎΏ\u0003ž¿\u0000Ώؽ\u0001\u0000\u0000\u0000ΐΑ\u0005\r\u0000\u0000ΑΒ\u0005Ņ\u0000\u0000ΒΓ\u0003\u0098L\u0000ΓΔ\u0005\t\u0000\u0000ΔΕ\u0007\u0004\u0000\u0000ΕΖ\u0005\u0002\u0000\u0000ΖΗ\u0003ž¿\u0000ΗΘ\u0005\u0003\u0000\u0000Θؽ\u0001\u0000\u0000\u0000ΙΚ\u0005\r\u0000\u0000ΚΛ\u0005Ņ\u0000\u0000ΛΜ\u0003\u0098L\u0000ΜΝ\u0005Č\u0000\u0000ΝΞ\u00059\u0000\u0000ΞΟ\u0003Ĭ\u0096\u0000ΟΠ\u0005ŕ\u0000\u0000ΠΡ\u0003ƾß\u0000Ρؽ\u0001\u0000\u0000\u0000\u03a2Σ\u0005\r\u0000\u0000ΣΤ\u0005Ņ\u0000\u0000ΤΥ\u0003\u0098L\u0000ΥΦ\u0005n\u0000\u0000ΦΩ\u0007\u0004\u0000\u0000ΧΨ\u0005\u009d\u0000\u0000ΨΪ\u0005x\u0000\u0000ΩΧ\u0001\u0000\u0000\u0000ΩΪ\u0001\u0000\u0000\u0000ΪΫ\u0001\u0000\u0000\u0000Ϋά\u0005\u0002\u0000\u0000άέ\u0003Ī\u0095\u0000έή\u0005\u0003\u0000\u0000ήؽ\u0001\u0000\u0000\u0000ίΰ\u0005\r\u0000\u0000ΰα\u0005Ņ\u0000\u0000αβ\u0003\u0098L\u0000βγ\u0005n\u0000\u0000γζ\u0007\u0004\u0000\u0000δε\u0005\u009d\u0000\u0000εη\u0005x\u0000\u0000ζδ\u0001\u0000\u0000\u0000ζη\u0001\u0000\u0000\u0000ηθ\u0001\u0000\u0000\u0000θι\u0003Ī\u0095\u0000ιؽ\u0001\u0000\u0000\u0000κλ\u0005\r\u0000\u0000λμ\u0007\u0005\u0000\u0000μν\u0003\u0098L\u0000νξ\u0005Č\u0000\u0000ξο\u0005ŕ\u0000\u0000οπ\u0003Ĭ\u0096\u0000πؽ\u0001\u0000\u0000\u0000ρς\u0005\r\u0000\u0000ςσ\u0007\u0005\u0000\u0000στ\u0003\u0098L\u0000τυ\u0005Ī\u0000\u0000υφ\u0005ŉ\u0000\u0000φχ\u0003~?\u0000χؽ\u0001\u0000\u0000\u0000ψω\u0005\r\u0000\u0000ωϊ\u0007\u0005\u0000\u0000ϊϋ\u0003\u0098L\u0000ϋό\u0005ũ\u0000\u0000όϏ\u0005ŉ\u0000\u0000ύώ\u0005\u009d\u0000\u0000ώϐ\u0005x\u0000\u0000Ϗύ\u0001\u0000\u0000\u0000Ϗϐ\u0001\u0000\u0000\u0000ϐϑ\u0001\u0000\u0000\u0000ϑϒ\u0003~?\u0000ϒؽ\u0001\u0000\u0000\u0000ϓϔ\u0005\r\u0000\u0000ϔϕ\u0005Ņ\u0000\u0000ϕϖ\u0003\u0098L\u0000ϖϘ\u0007\u0006\u0000\u0000ϗϙ\u00059\u0000\u0000Ϙϗ\u0001\u0000\u0000\u0000Ϙϙ\u0001\u0000\u0000\u0000ϙϚ\u0001\u0000\u0000\u0000Ϛϛ\u0003ǌæ\u0000ϛؽ\u0001\u0000\u0000\u0000Ϝϝ\u0005\r\u0000\u0000ϝϞ\u0005Ņ\u0000\u0000ϞϠ\u0003\u0098L\u0000ϟϡ\u0003h4\u0000Ϡϟ\u0001\u0000\u0000\u0000Ϡϡ\u0001\u0000\u0000\u0000ϡϢ\u0001\u0000\u0000\u0000ϢϤ\u0005.\u0000\u0000ϣϥ\u00059\u0000\u0000Ϥϣ\u0001\u0000\u0000\u0000Ϥϥ\u0001\u0000\u0000\u0000ϥϦ\u0001\u0000\u0000\u0000Ϧϧ\u0003Ĭ\u0096\u0000ϧϩ\u0003ƊÅ\u0000ϨϪ\u0003Ŵº\u0000ϩϨ\u0001\u0000\u0000\u0000ϩϪ\u0001\u0000\u0000\u0000Ϫؽ\u0001\u0000\u0000\u0000ϫϬ\u0005\r\u0000\u0000Ϭϭ\u0005Ņ\u0000\u0000ϭϯ\u0003\u0098L\u0000Ϯϰ\u0003h4\u0000ϯϮ\u0001\u0000\u0000\u0000ϯϰ\u0001\u0000\u0000\u0000ϰϱ\u0001\u0000\u0000\u0000ϱϲ\u0005Đ\u0000\u0000ϲϳ\u0005:\u0000\u0000ϳϴ\u0005\u0002\u0000\u0000ϴϵ\u0003ž¿\u0000ϵ϶\u0005\u0003\u0000\u0000϶ؽ\u0001\u0000\u0000\u0000Ϸϸ\u0005\r\u0000\u0000ϸϹ\u0005Ņ\u0000\u0000Ϲϻ\u0003\u0098L\u0000Ϻϼ\u0003h4\u0000ϻϺ\u0001\u0000\u0000\u0000ϻϼ\u0001\u0000\u0000\u0000ϼϽ\u0001\u0000\u0000\u0000ϽϾ\u0005Ī\u0000\u0000ϾϿ\u0005ħ\u0000\u0000ϿЃ\u0003ǒé\u0000ЀЁ\u0005ſ\u0000\u0000ЁЂ\u0005Ĩ\u0000\u0000ЂЄ\u0003~?\u0000ЃЀ\u0001\u0000\u0000\u0000ЃЄ\u0001\u0000\u0000\u0000Єؽ\u0001\u0000\u0000\u0000ЅІ\u0005\r\u0000\u0000ІЇ\u0005Ņ\u0000\u0000ЇЉ\u0003\u0098L\u0000ЈЊ\u0003h4\u0000ЉЈ\u0001\u0000\u0000\u0000ЉЊ\u0001\u0000\u0000\u0000ЊЋ\u0001\u0000\u0000\u0000ЋЌ\u0005Ī\u0000\u0000ЌЍ\u0005Ĩ\u0000\u0000ЍЎ\u0003~?\u0000Ўؽ\u0001\u0000\u0000\u0000ЏА\u0005\r\u0000\u0000АБ\u0007\u0005\u0000\u0000БВ\u0003\u0098L\u0000ВЗ\u0005\t\u0000\u0000ГД\u0005\u009d\u0000\u0000ДЕ\u0003Ŏ§\u0000ЕЖ\u0005x\u0000\u0000ЖИ\u0001\u0000\u0000\u0000ЗГ\u0001\u0000\u0000\u0000ЗИ\u0001\u0000\u0000\u0000ИК\u0001\u0000\u0000\u0000ЙЛ\u0003f3\u0000КЙ\u0001\u0000\u0000\u0000ЛМ\u0001\u0000\u0000\u0000МК\u0001\u0000\u0000\u0000МН\u0001\u0000\u0000\u0000Нؽ\u0001\u0000\u0000\u0000ОП\u0005\r\u0000\u0000ПР\u0005Ņ\u0000\u0000РС\u0003\u0098L\u0000СТ\u0003h4\u0000ТУ\u0005Č\u0000\u0000УФ\u0005ŕ\u0000\u0000ФХ\u0003h4\u0000Хؽ\u0001\u0000\u0000\u0000ЦЧ\u0005\r\u0000\u0000ЧШ\u0007\u0005\u0000\u0000ШЩ\u0003\u0098L\u0000ЩЬ\u0005n\u0000\u0000ЪЫ\u0005\u009d\u0000\u0000ЫЭ\u0005x\u0000\u0000ЬЪ\u0001\u0000\u0000\u0000ЬЭ\u0001\u0000\u0000\u0000ЭЮ\u0001\u0000\u0000\u0000Юг\u0003h4\u0000Яа\u0005\u0004\u0000\u0000ав\u0003h4\u0000бЯ\u0001\u0000\u0000\u0000ве\u0001\u0000\u0000\u0000гб\u0001\u0000\u0000\u0000гд\u0001\u0000\u0000\u0000дз\u0001\u0000\u0000\u0000ег\u0001\u0000\u0000\u0000жи\u0005ÿ\u0000\u0000зж\u0001\u0000\u0000\u0000зи\u0001\u0000\u0000\u0000иؽ\u0001\u0000\u0000\u0000йк\u0005\r\u0000\u0000кл\u0005Ņ\u0000\u0000лн\u0003\u0098L\u0000мо\u0003h4\u0000нм\u0001\u0000\u0000\u0000но\u0001\u0000\u0000\u0000оп\u0001\u0000\u0000\u0000пр\u0005Ī\u0000\u0000рс\u0003Z-\u0000сؽ\u0001\u0000\u0000\u0000ту\u0005\r\u0000\u0000уф\u0005Ņ\u0000\u0000фх\u0003\u0098L\u0000хц\u0005ć\u0000\u0000цч\u0005ö\u0000\u0000чؽ\u0001\u0000\u0000\u0000шщ\u0005\r\u0000\u0000щъ\u0005Ņ\u0000\u0000ъя\u0003\u0098L\u0000ыѐ\u0003T*\u0000ьэ\u00053\u0000\u0000эю\u0005$\u0000\u0000юѐ\u0005à\u0000\u0000яы\u0001\u0000\u0000\u0000яь\u0001\u0000\u0000\u0000ѐؽ\u0001\u0000\u0000\u0000ёђ\u0005\r\u0000\u0000ђѓ\u0005Ņ\u0000\u0000ѓє\u0003\u0098L\u0000єѕ\u0003Ŷ»\u0000ѕؽ\u0001\u0000\u0000\u0000ії\u0005n\u0000\u0000їњ\u0005Ņ\u0000\u0000јљ\u0005\u009d\u0000\u0000љћ\u0005x\u0000\u0000њј\u0001\u0000\u0000\u0000њћ\u0001\u0000\u0000\u0000ћќ\u0001\u0000\u0000\u0000ќў\u0003\u0098L\u0000ѝџ\u0005ÿ\u0000\u0000ўѝ\u0001\u0000\u0000\u0000ўџ\u0001\u0000\u0000\u0000џؽ\u0001\u0000\u0000\u0000Ѡѡ\u0005n\u0000\u0000ѡѤ\u0005Ŷ\u0000\u0000Ѣѣ\u0005\u009d\u0000\u0000ѣѥ\u0005x\u0000\u0000ѤѢ\u0001\u0000\u0000\u0000Ѥѥ\u0001\u0000\u0000\u0000ѥѦ\u0001\u0000\u0000\u0000Ѧؽ\u0003\u0098L\u0000ѧѪ\u0005G\u0000\u0000Ѩѩ\u0005ë\u0000\u0000ѩѫ\u0005Đ\u0000\u0000ѪѨ\u0001\u0000\u0000\u0000Ѫѫ\u0001\u0000\u0000\u0000ѫѰ\u0001\u0000\u0000\u0000ѬѮ\u0005\u0092\u0000\u0000ѭѬ\u0001\u0000\u0000\u0000ѭѮ\u0001\u0000\u0000\u0000Ѯѯ\u0001\u0000\u0000\u0000ѯѱ\u0005Ŋ\u0000\u0000Ѱѭ\u0001\u0000\u0000\u0000Ѱѱ\u0001\u0000\u0000\u0000ѱѲ\u0001\u0000\u0000\u0000Ѳѷ\u0005Ŷ\u0000\u0000ѳѴ\u0005\u009d\u0000\u0000Ѵѵ\u0003Ŏ§\u0000ѵѶ\u0005x\u0000\u0000ѶѸ\u0001\u0000\u0000\u0000ѷѳ\u0001\u0000\u0000\u0000ѷѸ\u0001\u0000\u0000\u0000Ѹѹ\u0001\u0000\u0000\u0000ѹѻ\u0003\u0098L\u0000ѺѼ\u0003Đ\u0088\u0000ѻѺ\u0001\u0000\u0000\u0000ѻѼ\u0001\u0000\u0000\u0000Ѽ҇\u0001\u0000\u0000\u0000ѽ҆\u0003^/\u0000Ѿ҆\u0003\\.\u0000ѿ҆\u0003Ŷ»\u0000Ҁҁ\u0005õ\u0000\u0000ҁ҂\u0005ç\u0000\u0000҂҆\u0003Ĉ\u0084\u0000҃҄\u0005ŉ\u0000\u0000҄҆\u0003~?\u0000҅ѽ\u0001\u0000\u0000\u0000҅Ѿ\u0001\u0000\u0000\u0000҅ѿ\u0001\u0000\u0000\u0000҅Ҁ\u0001\u0000\u0000\u0000҅҃\u0001\u0000\u0000\u0000҆҉\u0001\u0000\u0000\u0000҇҅\u0001\u0000\u0000\u0000҇҈\u0001\u0000\u0000\u0000҈Ҋ\u0001\u0000\u0000\u0000҉҇\u0001\u0000\u0000\u0000Ҋҋ\u0005\u0016\u0000\u0000ҋҌ\u0003b1\u0000Ҍؽ\u0001\u0000\u0000\u0000ҍҐ\u0005G\u0000\u0000Ҏҏ\u0005ë\u0000\u0000ҏґ\u0005Đ\u0000\u0000ҐҎ\u0001\u0000\u0000\u0000Ґґ\u0001\u0000\u0000\u0000ґғ\u0001\u0000\u0000\u0000ҒҔ\u0005\u0092\u0000\u0000ғҒ\u0001\u0000\u0000\u0000ғҔ\u0001\u0000\u0000\u0000Ҕҕ\u0001\u0000\u0000\u0000ҕҖ\u0005Ŋ\u0000\u0000Җҗ\u0005Ŷ\u0000\u0000җҜ\u0003Ĳ\u0099\u0000Ҙҙ\u0005\u0002\u0000\u0000ҙҚ\u0003ƈÄ\u0000Ққ\u0005\u0003\u0000\u0000қҝ\u0001\u0000\u0000\u0000ҜҘ\u0001\u0000\u0000\u0000Ҝҝ\u0001\u0000\u0000\u0000ҝҞ\u0001\u0000\u0000\u0000Ҟҡ\u0003z=\u0000ҟҠ\u0005ê\u0000\u0000ҠҢ\u0003~?\u0000ҡҟ\u0001\u0000\u0000\u0000ҡҢ\u0001\u0000\u0000\u0000Ңؽ\u0001\u0000\u0000\u0000ңҤ\u0005\r\u0000\u0000Ҥҥ\u0005Ŷ\u0000\u0000ҥҧ\u0003\u0098L\u0000ҦҨ\u0005\u0016\u0000\u0000ҧҦ\u0001\u0000\u0000\u0000ҧҨ\u0001\u0000\u0000\u0000Ҩҩ\u0001\u0000\u0000\u0000ҩҪ\u0003b1\u0000Ҫؽ\u0001\u0000\u0000\u0000ҫҬ\u0005\r\u0000\u0000Ҭҭ\u0005Ŷ\u0000\u0000ҭҮ\u0003\u0098L\u0000Үү\u0003\\.\u0000үؽ\u0001\u0000\u0000\u0000Ұҳ\u0005G\u0000\u0000ұҲ\u0005ë\u0000\u0000ҲҴ\u0005Đ\u0000\u0000ҳұ\u0001\u0000\u0000\u0000ҳҴ\u0001\u0000\u0000\u0000ҴҶ\u0001\u0000\u0000\u0000ҵҷ\u0005Ŋ\u0000\u0000Ҷҵ\u0001\u0000\u0000\u0000Ҷҷ\u0001\u0000\u0000\u0000ҷҸ\u0001\u0000\u0000\u0000Ҹҽ\u0005\u008f\u0000\u0000ҹҺ\u0005\u009d\u0000\u0000Һһ\u0003Ŏ§\u0000һҼ\u0005x\u0000\u0000ҼҾ\u0001\u0000\u0000\u0000ҽҹ\u0001\u0000\u0000\u0000ҽҾ\u0001\u0000\u0000\u0000Ҿҿ\u0001\u0000\u0000\u0000ҿӀ\u0003\u0098L\u0000ӀӁ\u0005\u0016\u0000\u0000ӁӋ\u0003ǒé\u0000ӂӃ\u0005Ů\u0000\u0000Ӄӈ\u0003\u0094J\u0000ӄӅ\u0005\u0004\u0000\u0000ӅӇ\u0003\u0094J\u0000ӆӄ\u0001\u0000\u0000\u0000Ӈӊ\u0001\u0000\u0000\u0000ӈӆ\u0001\u0000\u0000\u0000ӈӉ\u0001\u0000\u0000\u0000Ӊӌ\u0001\u0000\u0000\u0000ӊӈ\u0001\u0000\u0000\u0000Ӌӂ\u0001\u0000\u0000\u0000Ӌӌ\u0001\u0000\u0000\u0000ӌؽ\u0001\u0000\u0000\u0000ӍӐ\u0005G\u0000\u0000ӎӏ\u0005ë\u0000\u0000ӏӑ\u0005Đ\u0000\u0000Ӑӎ\u0001\u0000\u0000\u0000Ӑӑ\u0001\u0000\u0000\u0000ӑӓ\u0001\u0000\u0000\u0000ӒӔ\u0005Ŋ\u0000\u0000ӓӒ\u0001\u0000\u0000\u0000ӓӔ\u0001\u0000\u0000\u0000Ӕӕ\u0001\u0000\u0000\u0000ӕӚ\u0005\u008f\u0000\u0000Ӗӗ\u0005\u009d\u0000\u0000ӗӘ\u0003Ŏ§\u0000Әә\u0005x\u0000\u0000әӛ\u0001\u0000\u0000\u0000ӚӖ\u0001\u0000\u0000\u0000Ӛӛ\u0001\u0000\u0000\u0000ӛӜ\u0001\u0000\u0000\u0000Ӝӝ\u0003\u0098L\u0000ӝӟ\u0005\u0002\u0000\u0000ӞӠ\u0003ƌÆ\u0000ӟӞ\u0001\u0000\u0000\u0000ӟӠ\u0001\u0000\u0000\u0000Ӡӡ\u0001\u0000\u0000\u0000ӡӫ\u0005\u0003\u0000\u0000Ӣө\u0005ĕ\u0000\u0000ӣӪ\u0003ż¾\u0000Ӥӥ\u0005Ņ\u0000\u0000ӥӦ\u0005\u0002\u0000\u0000Ӧӧ\u0003ƈÄ\u0000ӧӨ\u0005\u0003\u0000\u0000ӨӪ\u0001\u0000\u0000\u0000өӣ\u0001\u0000\u0000\u0000өӤ\u0001\u0000\u0000\u0000ӪӬ\u0001\u0000\u0000\u0000ӫӢ\u0001\u0000\u0000\u0000ӫӬ\u0001\u0000\u0000\u0000Ӭӭ\u0001\u0000\u0000\u0000ӭӮ\u0003ƞÏ\u0000Ӯӱ\u0005Ĕ\u0000\u0000ӯӲ\u0003b1\u0000ӰӲ\u0003ł¡\u0000ӱӯ\u0001\u0000\u0000\u0000ӱӰ\u0001\u0000\u0000\u0000Ӳؽ\u0001\u0000\u0000\u0000ӳӵ\u0005n\u0000\u0000ӴӶ\u0005Ŋ\u0000\u0000ӵӴ\u0001\u0000\u0000\u0000ӵӶ\u0001\u0000\u0000\u0000Ӷӷ\u0001\u0000\u0000\u0000ӷӺ\u0005\u008f\u0000\u0000Ӹӹ\u0005\u009d\u0000\u0000ӹӻ\u0005x\u0000\u0000ӺӸ\u0001\u0000\u0000\u0000Ӻӻ\u0001\u0000\u0000\u0000ӻӼ\u0001\u0000\u0000\u0000Ӽؽ\u0003\u0098L\u0000ӽԀ\u0005]\u0000\u0000Ӿӿ\u0005ë\u0000\u0000ӿԁ\u0005Đ\u0000\u0000ԀӾ\u0001\u0000\u0000\u0000Ԁԁ\u0001\u0000\u0000\u0000ԁԃ\u0001\u0000\u0000\u0000ԂԄ\u0003p8\u0000ԃԂ\u0001\u0000\u0000\u0000ԃԄ\u0001\u0000\u0000\u0000Ԅԅ\u0001\u0000\u0000\u0000ԅԇ\u0003\u0098L\u0000ԆԈ\u0003ż¾\u0000ԇԆ\u0001\u0000\u0000\u0000ԇԈ\u0001\u0000\u0000\u0000ԈԊ\u0001\u0000\u0000\u0000ԉԋ\u0003ƆÃ\u0000Ԋԉ\u0001\u0000\u0000\u0000Ԋԋ\u0001\u0000\u0000\u0000ԋؽ\u0001\u0000\u0000\u0000Ԍԍ\u0005n\u0000\u0000ԍԎ\u0005Ŋ\u0000\u0000Ԏԑ\u0003p8\u0000ԏԐ\u0005\u009d\u0000\u0000ԐԒ\u0005x\u0000\u0000ԑԏ\u0001\u0000\u0000\u0000ԑԒ\u0001\u0000\u0000\u0000Ԓԓ\u0001\u0000\u0000\u0000ԓԔ\u0003\u0098L\u0000Ԕؽ\u0001\u0000\u0000\u0000ԕԗ\u0005z\u0000\u0000ԖԘ\u0007\u0007\u0000\u0000ԗԖ\u0001\u0000\u0000\u0000ԗԘ\u0001\u0000\u0000\u0000Ԙԛ\u0001\u0000\u0000\u0000ԙԜ\u0003:\u001d\u0000ԚԜ\u0003<\u001e\u0000ԛԙ\u0001\u0000\u0000\u0000ԛԚ\u0001\u0000\u0000\u0000Ԝؽ\u0001\u0000\u0000\u0000ԝԞ\u0005Į\u0000\u0000Ԟԡ\u0005ņ\u0000\u0000ԟԠ\u0007\u0003\u0000\u0000ԠԢ\u0003\u0098L\u0000ԡԟ\u0001\u0000\u0000\u0000ԡԢ\u0001\u0000\u0000\u0000Ԣԧ\u0001\u0000\u0000\u0000ԣԥ\u0005¾\u0000\u0000Ԥԣ\u0001\u0000\u0000\u0000Ԥԥ\u0001\u0000\u0000\u0000ԥԦ\u0001\u0000\u0000\u0000ԦԨ\u0003ǒé\u0000ԧԤ\u0001\u0000\u0000\u0000ԧԨ\u0001\u0000\u0000\u0000Ԩؽ\u0001\u0000\u0000\u0000ԩԪ\u0005Į\u0000\u0000Ԫԫ\u0005Ņ\u0000\u0000ԫԮ\u0005}\u0000\u0000Ԭԭ\u0007\u0003\u0000\u0000ԭԯ\u0003\u0098L\u0000ԮԬ\u0001\u0000\u0000\u0000Ԯԯ\u0001\u0000\u0000\u0000ԯ\u0530\u0001\u0000\u0000\u0000\u0530Ա\u0005¾\u0000\u0000ԱԳ\u0003ǒé\u0000ԲԴ\u0003h4\u0000ԳԲ\u0001\u0000\u0000\u0000ԳԴ\u0001\u0000\u0000\u0000Դؽ\u0001\u0000\u0000\u0000ԵԶ\u0005Į\u0000\u0000ԶԷ\u0005ŉ\u0000\u0000ԷԼ\u0003\u0098L\u0000ԸԹ\u0005\u0002\u0000\u0000ԹԺ\u0003\u0082A\u0000ԺԻ\u0005\u0003\u0000\u0000ԻԽ\u0001\u0000\u0000\u0000ԼԸ\u0001\u0000\u0000\u0000ԼԽ\u0001\u0000\u0000\u0000Խؽ\u0001\u0000\u0000\u0000ԾԿ\u0005Į\u0000\u0000ԿՀ\u0005:\u0000\u0000ՀՁ\u0007\u0003\u0000\u0000ՁՄ\u0003\u0098L\u0000ՂՃ\u0007\u0003\u0000\u0000ՃՅ\u0003Ĭ\u0096\u0000ՄՂ\u0001\u0000\u0000\u0000ՄՅ\u0001\u0000\u0000\u0000Յؽ\u0001\u0000\u0000\u0000ՆՇ\u0005Į\u0000\u0000ՇՊ\u0005ŷ\u0000\u0000ՈՉ\u0007\u0003\u0000\u0000ՉՋ\u0003\u0098L\u0000ՊՈ\u0001\u0000\u0000\u0000ՊՋ\u0001\u0000\u0000\u0000ՋՐ\u0001\u0000\u0000\u0000ՌՎ\u0005¾\u0000\u0000ՍՌ\u0001\u0000\u0000\u0000ՍՎ\u0001\u0000\u0000\u0000ՎՏ\u0001\u0000\u0000\u0000ՏՑ\u0003ǒé\u0000ՐՍ\u0001\u0000\u0000\u0000ՐՑ\u0001\u0000\u0000\u0000Ցؽ\u0001\u0000\u0000\u0000ՒՓ\u0005Į\u0000\u0000ՓՔ\u0005ö\u0000\u0000ՔՖ\u0003\u0098L\u0000Օ\u0557\u0003h4\u0000ՖՕ\u0001\u0000\u0000\u0000Ֆ\u0557\u0001\u0000\u0000\u0000\u0557ؽ\u0001\u0000\u0000\u0000\u0558՚\u0005Į\u0000\u0000ՙ՛\u0003ǂá\u0000՚ՙ\u0001\u0000\u0000\u0000՚՛\u0001\u0000\u0000\u0000՛՜\u0001\u0000\u0000\u0000՜՟\u0005\u0090\u0000\u0000՝՞\u0007\u0003\u0000\u0000՞ՠ\u0003\u0098L\u0000՟՝\u0001\u0000\u0000\u0000՟ՠ\u0001\u0000\u0000\u0000ՠը\u0001\u0000\u0000\u0000ագ\u0005¾\u0000\u0000բա\u0001\u0000\u0000\u0000բգ\u0001\u0000\u0000\u0000գզ\u0001\u0000\u0000\u0000դէ\u0003Ĭ\u0096\u0000եէ\u0003ǒé\u0000զդ\u0001\u0000\u0000\u0000զե\u0001\u0000\u0000\u0000էթ\u0001\u0000\u0000\u0000ըբ\u0001\u0000\u0000\u0000ըթ\u0001\u0000\u0000\u0000թؽ\u0001\u0000\u0000\u0000ժի\u0005Į\u0000\u0000իլ\u0005G\u0000\u0000լխ\u0005Ņ\u0000\u0000խհ\u0003\u0098L\u0000ծկ\u0005\u0016\u0000\u0000կձ\u0005ħ\u0000\u0000հծ\u0001\u0000\u0000\u0000հձ\u0001\u0000\u0000\u0000ձؽ\u0001\u0000\u0000\u0000ղճ\u0005Į\u0000\u0000ճմ\u0005J\u0000\u0000մؽ\u0003l6\u0000յն\u0005Į\u0000\u0000նջ\u0005-\u0000\u0000շչ\u0005¾\u0000\u0000ոշ\u0001\u0000\u0000\u0000ոչ\u0001\u0000\u0000\u0000չպ\u0001\u0000\u0000\u0000պռ\u0003ǒé\u0000ջո\u0001\u0000\u0000\u0000ջռ\u0001\u0000\u0000\u0000ռؽ\u0001\u0000\u0000\u0000սվ\u0007\b\u0000\u0000վր\u0005\u008f\u0000\u0000տց\u0005}\u0000\u0000րտ\u0001\u0000\u0000\u0000րց\u0001\u0000\u0000\u0000ցւ\u0001\u0000\u0000\u0000ւؽ\u0003r9\u0000փք\u0007\b\u0000\u0000քֆ\u0003l6\u0000օև\u0005}\u0000\u0000ֆօ\u0001\u0000\u0000\u0000ֆև\u0001\u0000\u0000\u0000ևֈ\u0001\u0000\u0000\u0000ֈ։\u0003\u0098L\u0000։ؽ\u0001\u0000\u0000\u0000֊\u058c\u0007\b\u0000\u0000\u058b֍\u0005Ņ\u0000\u0000\u058c\u058b\u0001\u0000\u0000\u0000\u058c֍\u0001\u0000\u0000\u0000֍֏\u0001\u0000\u0000\u0000֎\u0590\u0007\t\u0000\u0000֏֎\u0001\u0000\u0000\u0000֏\u0590\u0001\u0000\u0000\u0000\u0590֑\u0001\u0000\u0000\u0000֑֓\u0003\u0098L\u0000֒֔\u0003h4\u0000֓֒\u0001\u0000\u0000\u0000֓֔\u0001\u0000\u0000\u0000֖֔\u0001\u0000\u0000\u0000֕֗\u0003t:\u0000֖֕\u0001\u0000\u0000\u0000֖֗\u0001\u0000\u0000\u0000֚֗\u0001\u0000\u0000\u0000֘֙\u0005\u0016\u0000\u0000֛֙\u0005µ\u0000\u0000֚֘\u0001\u0000\u0000\u0000֛֚\u0001\u0000\u0000\u0000֛ؽ\u0001\u0000\u0000\u0000֜֞\u0007\b\u0000\u0000֝֟\u0005ā\u0000\u0000֞֝\u0001\u0000\u0000\u0000֞֟\u0001\u0000\u0000\u0000֟֠\u0001\u0000\u0000\u0000֠ؽ\u0003b1\u0000֢֡\u0005;\u0000\u0000֢֣\u0005ç\u0000\u0000֣֤\u0003l6\u0000֤֥\u0003\u0098L\u0000֥֦\u0005±\u0000\u0000֦֧\u0003ǔê\u0000֧ؽ\u0001\u0000\u0000\u0000֨֩\u0005;\u0000\u0000֪֩\u0005ç\u0000\u0000֪֫\u0005Ņ\u0000\u0000֫֬\u0003\u0098L\u0000֭֬\u0005±\u0000\u0000֭֮\u0003ǔê\u0000֮ؽ\u0001\u0000\u0000\u0000ְ֯\u0005ċ\u0000\u0000ְֱ\u0005Ņ\u0000\u0000ֱؽ\u0003\u0098L\u0000ֲֳ\u0005ċ\u0000\u0000ֳִ\u0005\u008f\u0000\u0000ִؽ\u0003\u0098L\u0000ֵֽ\u0005ċ\u0000\u0000ֶ־\u0003ǒé\u0000ַֹ\t\u0000\u0000\u0000ַָ\u0001\u0000\u0000\u0000ֹּ\u0001\u0000\u0000\u0000ֺֻ\u0001\u0000\u0000\u0000ָֺ\u0001\u0000\u0000\u0000ֻ־\u0001\u0000\u0000\u0000ֺּ\u0001\u0000\u0000\u0000ֶֽ\u0001\u0000\u0000\u0000ֺֽ\u0001\u0000\u0000\u0000־ؽ\u0001\u0000\u0000\u0000ֿׁ\u0005&\u0000\u0000׀ׂ\u0005º\u0000\u0000ׁ׀\u0001\u0000\u0000\u0000ׁׂ\u0001\u0000\u0000\u0000ׂ׃\u0001\u0000\u0000\u0000׃ׄ\u0005Ņ\u0000\u0000ׇׄ\u0003\u0098L\u0000ׅ׆\u0005ê\u0000\u0000׆\u05c8\u0003~?\u0000ׇׅ\u0001\u0000\u0000\u0000ׇ\u05c8\u0001\u0000\u0000\u0000\u05c8\u05cd\u0001\u0000\u0000\u0000\u05c9\u05cb\u0005\u0016\u0000\u0000\u05ca\u05c9\u0001\u0000\u0000\u0000\u05ca\u05cb\u0001\u0000\u0000\u0000\u05cb\u05cc\u0001\u0000\u0000\u0000\u05cc\u05ce\u0003b1\u0000\u05cd\u05ca\u0001\u0000\u0000\u0000\u05cd\u05ce\u0001\u0000\u0000\u0000\u05ceؽ\u0001\u0000\u0000\u0000\u05cfא\u0005ţ\u0000\u0000אד\u0005Ņ\u0000\u0000בג\u0005\u009d\u0000\u0000גה\u0005x\u0000\u0000דב\u0001\u0000\u0000\u0000דה\u0001\u0000\u0000\u0000הו\u0001\u0000\u0000\u0000וؽ\u0003\u0098L\u0000זח\u00052\u0000\u0000חؽ\u0005&\u0000\u0000טי\u0005Ã\u0000\u0000יכ\u0005R\u0000\u0000ךל\u0005Ä\u0000\u0000כך\u0001\u0000\u0000\u0000כל\u0001\u0000\u0000\u0000לם\u0001\u0000\u0000\u0000םמ\u0005§\u0000\u0000מנ\u0003ǒé\u0000ןס\u0005ó\u0000\u0000נן\u0001\u0000\u0000\u0000נס\u0001\u0000\u0000\u0000סע\u0001\u0000\u0000\u0000עף\u0005¯\u0000\u0000ףפ\u0005Ņ\u0000\u0000פצ\u0003\u0098L\u0000ץק\u0003h4\u0000צץ\u0001\u0000\u0000\u0000צק\u0001\u0000\u0000\u0000קؽ\u0001\u0000\u0000\u0000רש\u0005Ş\u0000\u0000שת\u0005Ņ\u0000\u0000ת\u05ec\u0003\u0098L\u0000\u05eb\u05ed\u0003h4\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001\u0000\u0000\u0000\u05edؽ\u0001\u0000\u0000\u0000\u05eeװ\u0005Ø\u0000\u0000ׯ\u05ee\u0001\u0000\u0000\u0000ׯװ\u0001\u0000\u0000\u0000װױ\u0001\u0000\u0000\u0000ױײ\u0005č\u0000\u0000ײ׳\u0005Ņ\u0000\u0000׳\u05f6\u0003\u0098L\u0000״\u05f5\u0007\n\u0000\u0000\u05f5\u05f7\u0005ö\u0000\u0000\u05f6״\u0001\u0000\u0000\u0000\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f7ؽ\u0001\u0000\u0000\u0000\u05f8\u05f9\u0007\u000b\u0000\u0000\u05f9\u05fd\u0003ǂá\u0000\u05fa\u05fc\t\u0000\u0000\u0000\u05fb\u05fa\u0001\u0000\u0000\u0000\u05fc\u05ff\u0001\u0000\u0000\u0000\u05fd\u05fe\u0001\u0000\u0000\u0000\u05fd\u05fb\u0001\u0000\u0000\u0000\u05feؽ\u0001\u0000\u0000\u0000\u05ff\u05fd\u0001\u0000\u0000\u0000\u0600\u0601\u0005G\u0000\u0000\u0601؆\u0005¤\u0000\u0000\u0602\u0603\u0005\u009d\u0000\u0000\u0603\u0604\u0003Ŏ§\u0000\u0604\u0605\u0005x\u0000\u0000\u0605؇\u0001\u0000\u0000\u0000؆\u0602\u0001\u0000\u0000\u0000؆؇\u0001\u0000\u0000\u0000؇؈\u0001\u0000\u0000\u0000؈؉\u0003ǂá\u0000؉؋\u0005ç\u0000\u0000؊،\u0005Ņ\u0000\u0000؋؊\u0001\u0000\u0000\u0000؋،\u0001\u0000\u0000\u0000،؍\u0001\u0000\u0000\u0000؍ؐ\u0003\u0098L\u0000؎؏\u0005Ů\u0000\u0000؏ؑ\u0003ǂá\u0000ؐ؎\u0001\u0000\u0000\u0000ؐؑ\u0001\u0000\u0000\u0000ؑؒ\u0001\u0000\u0000\u0000ؒؓ\u0005\u0002\u0000\u0000ؓؔ\u0003Į\u0097\u0000ؔؗ\u0005\u0003\u0000\u0000ؕؖ\u0005ê\u0000\u0000ؘؖ\u0003~?\u0000ؗؕ\u0001\u0000\u0000\u0000ؘؗ\u0001\u0000\u0000\u0000ؘؽ\u0001\u0000\u0000\u0000ؙؚ\u0005n\u0000\u0000ؚ\u061d\u0005¤\u0000\u0000؛\u061c\u0005\u009d\u0000\u0000\u061c؞\u0005x\u0000\u0000\u061d؛\u0001\u0000\u0000\u0000\u061d؞\u0001\u0000\u0000\u0000؞؟\u0001\u0000\u0000\u0000؟ؠ\u0003ǂá\u0000ؠآ\u0005ç\u0000\u0000ءأ\u0005Ņ\u0000\u0000آء\u0001\u0000\u0000\u0000آأ\u0001\u0000\u0000\u0000أؤ\u0001\u0000\u0000\u0000ؤإ\u0003\u0098L\u0000إؽ\u0001\u0000\u0000\u0000ئا\u0005'\u0000\u0000اب\u0003\u0098L\u0000بر\u0005\u0002\u0000\u0000ةخ\u0003ņ£\u0000تث\u0005\u0004\u0000\u0000ثح\u0003ņ£\u0000جت\u0001\u0000\u0000\u0000حذ\u0001\u0000\u0000\u0000خج\u0001\u0000\u0000\u0000خد\u0001\u0000\u0000\u0000دز\u0001\u0000\u0000\u0000ذخ\u0001\u0000\u0000\u0000رة\u0001\u0000\u0000\u0000رز\u0001\u0000\u0000\u0000زس\u0001\u0000\u0000\u0000سش\u0005\u0003\u0000\u0000شؽ\u0001\u0000\u0000\u0000صع\u0003N'\u0000ضظ\t\u0000\u0000\u0000طض\u0001\u0000\u0000\u0000ظػ\u0001\u0000\u0000\u0000عغ\u0001\u0000\u0000\u0000عط\u0001\u0000\u0000\u0000غؽ\u0001\u0000\u0000\u0000ػع\u0001\u0000\u0000\u0000ؼ˩\u0001\u0000\u0000\u0000ؼ˪\u0001\u0000\u0000\u0000ؼˬ\u0001\u0000\u0000\u0000ؼ˯\u0001\u0000\u0000\u0000ؼ˱\u0001\u0000\u0000\u0000ؼ˵\u0001\u0000\u0000\u0000ؼ˸\u0001\u0000\u0000\u0000ؼ̋\u0001\u0000\u0000\u0000ؼ̒\u0001\u0000\u0000\u0000ؼ̙\u0001\u0000\u0000\u0000ؼ̟\u0001\u0000\u0000\u0000ؼ̩\u0001\u0000\u0000\u0000ؼ̵\u0001\u0000\u0000\u0000ؼ͆\u0001\u0000\u0000\u0000ؼ͜\u0001\u0000\u0000\u0000ؼͭ\u0001\u0000\u0000\u0000ؼ;\u0001\u0000\u0000\u0000ؼΉ\u0001\u0000\u0000\u0000ؼΐ\u0001\u0000\u0000\u0000ؼΙ\u0001\u0000\u0000\u0000ؼ\u03a2\u0001\u0000\u0000\u0000ؼί\u0001\u0000\u0000\u0000ؼκ\u0001\u0000\u0000\u0000ؼρ\u0001\u0000\u0000\u0000ؼψ\u0001\u0000\u0000\u0000ؼϓ\u0001\u0000\u0000\u0000ؼϜ\u0001\u0000\u0000\u0000ؼϫ\u0001\u0000\u0000\u0000ؼϷ\u0001\u0000\u0000\u0000ؼЅ\u0001\u0000\u0000\u0000ؼЏ\u0001\u0000\u0000\u0000ؼО\u0001\u0000\u0000\u0000ؼЦ\u0001\u0000\u0000\u0000ؼй\u0001\u0000\u0000\u0000ؼт\u0001\u0000\u0000\u0000ؼш\u0001\u0000\u0000\u0000ؼё\u0001\u0000\u0000\u0000ؼі\u0001\u0000\u0000\u0000ؼѠ\u0001\u0000\u0000\u0000ؼѧ\u0001\u0000\u0000\u0000ؼҍ\u0001\u0000\u0000\u0000ؼң\u0001\u0000\u0000\u0000ؼҫ\u0001\u0000\u0000\u0000ؼҰ\u0001\u0000\u0000\u0000ؼӍ\u0001\u0000\u0000\u0000ؼӳ\u0001\u0000\u0000\u0000ؼӽ\u0001\u0000\u0000\u0000ؼԌ\u0001\u0000\u0000\u0000ؼԕ\u0001\u0000\u0000\u0000ؼԝ\u0001\u0000\u0000\u0000ؼԩ\u0001\u0000\u0000\u0000ؼԵ\u0001\u0000\u0000\u0000ؼԾ\u0001\u0000\u0000\u0000ؼՆ\u0001\u0000\u0000\u0000ؼՒ\u0001\u0000\u0000\u0000ؼ\u0558\u0001\u0000\u0000\u0000ؼժ\u0001\u0000\u0000\u0000ؼղ\u0001\u0000\u0000\u0000ؼյ\u0001\u0000\u0000\u0000ؼս\u0001\u0000\u0000\u0000ؼփ\u0001\u0000\u0000\u0000ؼ֊\u0001\u0000\u0000\u0000ؼ֜\u0001\u0000\u0000\u0000ؼ֡\u0001\u0000\u0000\u0000ؼ֨\u0001\u0000\u0000\u0000ؼ֯\u0001\u0000\u0000\u0000ؼֲ\u0001\u0000\u0000\u0000ؼֵ\u0001\u0000\u0000\u0000ؼֿ\u0001\u0000\u0000\u0000ؼ\u05cf\u0001\u0000\u0000\u0000ؼז\u0001\u0000\u0000\u0000ؼט\u0001\u0000\u0000\u0000ؼר\u0001\u0000\u0000\u0000ؼׯ\u0001\u0000\u0000\u0000ؼ\u05f8\u0001\u0000\u0000\u0000ؼ\u0600\u0001\u0000\u0000\u0000ؼؙ\u0001\u0000\u0000\u0000ؼئ\u0001\u0000\u0000\u0000ؼص\u0001\u0000\u0000\u0000ؽ;\u0001\u0000\u0000\u0000ؾؿ\u0005Ī\u0000\u0000ؿك\u0005ę\u0000\u0000ـق\t\u0000\u0000\u0000فـ\u0001\u0000\u0000\u0000قم\u0001\u0000\u0000\u0000كل\u0001\u0000\u0000\u0000كف\u0001\u0000\u0000\u0000لڏ\u0001\u0000\u0000\u0000مك\u0001\u0000\u0000\u0000نه\u0005Ī\u0000\u0000هو\u0005ō\u0000\u0000وى\u0005ƃ\u0000\u0000ىڏ\u0003Ť²\u0000يً\u0005Ī\u0000\u0000ًٌ\u0005ō\u0000\u0000ٌٍ\u0005ƃ\u0000\u0000ٍڏ\u0003H$\u0000َُ\u0005Ī\u0000\u0000ُِ\u0005ō\u0000\u0000ِٔ\u0005ƃ\u0000\u0000ّٓ\t\u0000\u0000\u0000ّْ\u0001\u0000\u0000\u0000ٖٓ\u0001\u0000\u0000\u0000ٕٔ\u0001\u0000\u0000\u0000ْٔ\u0001\u0000\u0000\u0000ٕڏ\u0001\u0000\u0000\u0000ٖٔ\u0001\u0000\u0000\u0000ٗ٘\u0005Ī\u0000\u0000٘ٙ\u0003p8\u0000ٙٚ\u0003À`\u0000ٚڏ\u0001\u0000\u0000\u0000ٜٛ\u0005Ī\u0000\u0000ٜٝ\u0003p8\u0000ٝٞ\u0005\u0002\u0000\u0000ٟٞ\u0003Ī\u0095\u0000ٟ٠\u0005\u0003\u0000\u0000٠١\u0005Ƅ\u0000\u0000١٢\u0005\u0002\u0000\u0000٢٣\u0003b1\u0000٣٤\u0005\u0003\u0000\u0000٤ڏ\u0001\u0000\u0000\u0000٥٦\u0005Ī\u0000\u0000٦٧\u0003J%\u0000٧٨\u0005Ƅ\u0000\u0000٨٩\u0003L&\u0000٩ڏ\u0001\u0000\u0000\u0000٪٫\u0005Ī\u0000\u0000٫ٳ\u0003J%\u0000٬ٰ\u0005Ƅ\u0000\u0000٭ٯ\t\u0000\u0000\u0000ٮ٭\u0001\u0000\u0000\u0000ٯٲ\u0001\u0000\u0000\u0000ٰٱ\u0001\u0000\u0000\u0000ٰٮ\u0001\u0000\u0000\u0000ٱٴ\u0001\u0000\u0000\u0000ٲٰ\u0001\u0000\u0000\u0000ٳ٬\u0001\u0000\u0000\u0000ٳٴ\u0001\u0000\u0000\u0000ٴڏ\u0001\u0000\u0000\u0000ٵٹ\u0005Ī\u0000\u0000ٶٸ\t\u0000\u0000\u0000ٷٶ\u0001\u0000\u0000\u0000ٸٻ\u0001\u0000\u0000\u0000ٹٺ\u0001\u0000\u0000\u0000ٹٷ\u0001\u0000\u0000\u0000ٺټ\u0001\u0000\u0000\u0000ٻٹ\u0001\u0000\u0000\u0000ټٽ\u0005Ƅ\u0000\u0000ٽڏ\u0003L&\u0000پڂ\u0005Ī\u0000\u0000ٿځ\t\u0000\u0000\u0000ڀٿ\u0001\u0000\u0000\u0000ځڄ\u0001\u0000\u0000\u0000ڂڃ\u0001\u0000\u0000\u0000ڂڀ\u0001\u0000\u0000\u0000ڃڏ\u0001\u0000\u0000\u0000ڄڂ\u0001\u0000\u0000\u0000څچ\u0005đ\u0000\u0000چڏ\u0003J%\u0000ڇڋ\u0005đ\u0000\u0000ڈڊ\t\u0000\u0000\u0000ډڈ\u0001\u0000\u0000\u0000ڊڍ\u0001\u0000\u0000\u0000ڋڌ\u0001\u0000\u0000\u0000ڋډ\u0001\u0000\u0000\u0000ڌڏ\u0001\u0000\u0000\u0000ڍڋ\u0001\u0000\u0000\u0000ڎؾ\u0001\u0000\u0000\u0000ڎن\u0001\u0000\u0000\u0000ڎي\u0001\u0000\u0000\u0000ڎَ\u0001\u0000\u0000\u0000ڎٗ\u0001\u0000\u0000\u0000ڎٛ\u0001\u0000\u0000\u0000ڎ٥\u0001\u0000\u0000\u0000ڎ٪\u0001\u0000\u0000\u0000ڎٵ\u0001\u0000\u0000\u0000ڎپ\u0001\u0000\u0000\u0000ڎڅ\u0001\u0000\u0000\u0000ڎڇ\u0001\u0000\u0000\u0000ڏ=\u0001\u0000\u0000\u0000ڐڑ\u0005Ŗ\u0000\u0000ڑڒ\u0005\u009f\u0000\u0000ڒڕ\u0003B!\u0000ړڔ\u0005¯\u0000\u0000ڔږ\u0003Ī\u0095\u0000ڕړ\u0001\u0000\u0000\u0000ڕږ\u0001\u0000\u0000\u0000ږژ\u0001\u0000\u0000\u0000ڗڙ\u0003@ \u0000ژڗ\u0001\u0000\u0000\u0000ژڙ\u0001\u0000\u0000\u0000ڙ?\u0001\u0000\u0000\u0000ښڛ\u0005Ů\u0000\u0000ڛڜ\u0005\u0002\u0000\u0000ڜڝ\u0003ĸ\u009c\u0000ڝڞ\u0005\u0003\u0000\u0000ڞڢ\u0001\u0000\u0000\u0000ڟڠ\u0005Ů\u0000\u0000ڠڢ\u0003ĸ\u009c\u0000ڡښ\u0001\u0000\u0000\u0000ڡڟ\u0001\u0000\u0000\u0000ڢA\u0001\u0000\u0000\u0000ڣڦ\u0003ǒé\u0000ڤڦ\u0003Ĭ\u0096\u0000ڥڣ\u0001\u0000\u0000\u0000ڥڤ\u0001\u0000\u0000\u0000ڦC\u0001\u0000\u0000\u0000ڧڪ\u0003Ś\u00ad\u0000ڨڪ\u0003Ĭ\u0096\u0000کڧ\u0001\u0000\u0000\u0000کڨ\u0001\u0000\u0000\u0000ڪڭ\u0001\u0000\u0000\u0000ګڬ\u0005\u0016\u0000\u0000ڬڮ\u0003ƾß\u0000ڭګ\u0001\u0000\u0000\u0000ڭڮ\u0001\u0000\u0000\u0000ڮE\u0001\u0000\u0000\u0000گڴ\u0003D\"\u0000ڰڱ\u0005\u0004\u0000\u0000ڱڳ\u0003D\"\u0000ڲڰ\u0001\u0000\u0000\u0000ڳڶ\u0001\u0000\u0000\u0000ڴڲ\u0001\u0000\u0000\u0000ڴڵ\u0001\u0000\u0000\u0000ڵG\u0001\u0000\u0000\u0000ڶڴ\u0001\u0000\u0000\u0000ڷں\u0003ǒé\u0000ڸں\u0005Ä\u0000\u0000ڹڷ\u0001\u0000\u0000\u0000ڹڸ\u0001\u0000\u0000\u0000ںI\u0001\u0000\u0000\u0000ڻڼ\u0003ǆã\u0000ڼK\u0001\u0000\u0000\u0000ڽھ\u0003ǈä\u0000ھM\u0001\u0000\u0000\u0000ڿۀ\u0005G\u0000\u0000ۀݨ\u0005ę\u0000\u0000ہۂ\u0005n\u0000\u0000ۂݨ\u0005ę\u0000\u0000ۃۅ\u0005\u0093\u0000\u0000ۄۆ\u0005ę\u0000\u0000ۅۄ\u0001\u0000\u0000\u0000ۅۆ\u0001\u0000\u0000\u0000ۆݨ\u0001\u0000\u0000\u0000ۇۉ\u0005Ė\u0000\u0000ۈۊ\u0005ę\u0000\u0000ۉۈ\u0001\u0000\u0000\u0000ۉۊ\u0001\u0000\u0000\u0000ۊݨ\u0001\u0000\u0000\u0000ۋی\u0005Į\u0000\u0000یݨ\u0005\u0093\u0000\u0000ۍێ\u0005Į\u0000\u0000ێې\u0005ę\u0000\u0000ۏۑ\u0005\u0093\u0000\u0000ېۏ\u0001\u0000\u0000\u0000ېۑ\u0001\u0000\u0000\u0000ۑݨ\u0001\u0000\u0000\u0000ےۓ\u0005Į\u0000\u0000ۓݨ\u0005ý\u0000\u0000۔ە\u0005Į\u0000\u0000ەݨ\u0005Ě\u0000\u0000ۖۗ\u0005Į\u0000\u0000ۗۘ\u0005J\u0000\u0000ۘݨ\u0005Ě\u0000\u0000ۙۚ\u0005{\u0000\u0000ۚݨ\u0005Ņ\u0000\u0000ۛۜ\u0005 \u0000\u0000ۜݨ\u0005Ņ\u0000\u0000\u06dd۞\u0005Į\u0000\u0000۞ݨ\u0005>\u0000\u0000۟۠\u0005Į\u0000\u0000۠ۡ\u0005G\u0000\u0000ۡݨ\u0005Ņ\u0000\u0000ۣۢ\u0005Į\u0000\u0000ۣݨ\u0005Ś\u0000\u0000ۤۥ\u0005Į\u0000\u0000ۥݨ\u0005¥\u0000\u0000ۦۧ\u0005Į\u0000\u0000ۧݨ\u0005Ç\u0000\u0000ۨ۩\u0005G\u0000\u0000۩ݨ\u0005¤\u0000\u0000۪۫\u0005n\u0000\u0000۫ݨ\u0005¤\u0000\u0000ۭ۬\u0005\r\u0000\u0000ۭݨ\u0005¤\u0000\u0000ۮۯ\u0005Æ\u0000\u0000ۯݨ\u0005Ņ\u0000\u0000۰۱\u0005Æ\u0000\u0000۱ݨ\u0005T\u0000\u0000۲۳\u0005ŧ\u0000\u0000۳ݨ\u0005Ņ\u0000\u0000۴۵\u0005ŧ\u0000\u0000۵ݨ\u0005T\u0000\u0000۶۷\u0005G\u0000\u0000۷۸\u0005Ŋ\u0000\u0000۸ݨ\u0005Ë\u0000\u0000۹ۺ\u0005n\u0000\u0000ۺۻ\u0005Ŋ\u0000\u0000ۻݨ\u0005Ë\u0000\u0000ۼ۽\u0005\r\u0000\u0000۽۾\u0005Ņ\u0000\u0000۾ۿ\u0003Ĳ\u0099\u0000ۿ܀\u0005á\u0000\u0000܀܁\u00054\u0000\u0000܁ݨ\u0001\u0000\u0000\u0000܂܃\u0005\r\u0000\u0000܃܄\u0005Ņ\u0000\u0000܄܅\u0003Ĳ\u0099\u0000܅܆\u00054\u0000\u0000܆܇\u0005$\u0000\u0000܇ݨ\u0001\u0000\u0000\u0000܈܉\u0005\r\u0000\u0000܉܊\u0005Ņ\u0000\u0000܊܋\u0003Ĳ\u0099\u0000܋܌\u0005á\u0000\u0000܌܍\u0005Ĵ\u0000\u0000܍ݨ\u0001\u0000\u0000\u0000\u070e\u070f\u0005\r\u0000\u0000";
   private static final String _serializedATNSegment1 = "\u070fܐ\u0005Ņ\u0000\u0000ܐܑ\u0003Ĳ\u0099\u0000ܑܒ\u0005İ\u0000\u0000ܒܓ\u0005$\u0000\u0000ܓݨ\u0001\u0000\u0000\u0000ܔܕ\u0005\r\u0000\u0000ܕܖ\u0005Ņ\u0000\u0000ܖܗ\u0003Ĳ\u0099\u0000ܗܘ\u0005á\u0000\u0000ܘܙ\u0005İ\u0000\u0000ܙݨ\u0001\u0000\u0000\u0000ܚܛ\u0005\r\u0000\u0000ܛܜ\u0005Ņ\u0000\u0000ܜܝ\u0003Ĳ\u0099\u0000ܝܞ\u0005á\u0000\u0000ܞܟ\u0005ļ\u0000\u0000ܟܠ\u0005\u0016\u0000\u0000ܠܡ\u0005g\u0000\u0000ܡݨ\u0001\u0000\u0000\u0000ܢܣ\u0005\r\u0000\u0000ܣܤ\u0005Ņ\u0000\u0000ܤܥ\u0003Ĳ\u0099\u0000ܥܦ\u0005Ī\u0000\u0000ܦܧ\u0005İ\u0000\u0000ܧܨ\u0005Å\u0000\u0000ܨݨ\u0001\u0000\u0000\u0000ܩܪ\u0005\r\u0000\u0000ܪܫ\u0005Ņ\u0000\u0000ܫܬ\u0003Ĳ\u0099\u0000ܬܭ\u0005v\u0000\u0000ܭܮ\u0005ô\u0000\u0000ܮݨ\u0001\u0000\u0000\u0000ܯܰ\u0005\r\u0000\u0000ܱܰ\u0005Ņ\u0000\u0000ܱܲ\u0003Ĳ\u0099\u0000ܲܳ\u0005\u0014\u0000\u0000ܴܳ\u0005ô\u0000\u0000ܴݨ\u0001\u0000\u0000\u0000ܵܶ\u0005\r\u0000\u0000ܷܶ\u0005Ņ\u0000\u0000ܷܸ\u0003Ĳ\u0099\u0000ܸܹ\u0005š\u0000\u0000ܹܺ\u0005ô\u0000\u0000ܺݨ\u0001\u0000\u0000\u0000ܻܼ\u0005\r\u0000\u0000ܼܽ\u0005Ņ\u0000\u0000ܾܽ\u0003Ĳ\u0099\u0000ܾܿ\u0005ŗ\u0000\u0000ܿݨ\u0001\u0000\u0000\u0000݀݁\u0005\r\u0000\u0000݂݁\u0005Ņ\u0000\u0000݂݄\u0003Ĳ\u0099\u0000݃݅\u0003h4\u0000݄݃\u0001\u0000\u0000\u0000݄݅\u0001\u0000\u0000\u0000݆݅\u0001\u0000\u0000\u0000݆݇\u0005=\u0000\u0000݇ݨ\u0001\u0000\u0000\u0000݈݉\u0005\r\u0000\u0000݉݊\u0005Ņ\u0000\u0000݊\u074c\u0003Ĳ\u0099\u0000\u074bݍ\u0003h4\u0000\u074c\u074b\u0001\u0000\u0000\u0000\u074cݍ\u0001\u0000\u0000\u0000ݍݎ\u0001\u0000\u0000\u0000ݎݏ\u0005A\u0000\u0000ݏݨ\u0001\u0000\u0000\u0000ݐݑ\u0005\r\u0000\u0000ݑݒ\u0005Ņ\u0000\u0000ݒݔ\u0003Ĳ\u0099\u0000ݓݕ\u0003h4\u0000ݔݓ\u0001\u0000\u0000\u0000ݔݕ\u0001\u0000\u0000\u0000ݕݖ\u0001\u0000\u0000\u0000ݖݗ\u0005Ī\u0000\u0000ݗݘ\u0005\u0084\u0000\u0000ݘݨ\u0001\u0000\u0000\u0000ݙݚ\u0005\r\u0000\u0000ݚݛ\u0005Ņ\u0000\u0000ݛݝ\u0003Ĳ\u0099\u0000ݜݞ\u0003h4\u0000ݝݜ\u0001\u0000\u0000\u0000ݝݞ\u0001\u0000\u0000\u0000ݞݟ\u0001\u0000\u0000\u0000ݟݠ\u0005Đ\u0000\u0000ݠݡ\u0005:\u0000\u0000ݡݨ\u0001\u0000\u0000\u0000ݢݣ\u0005ĺ\u0000\u0000ݣݨ\u0005ř\u0000\u0000ݤݨ\u0005<\u0000\u0000ݥݨ\u0005ě\u0000\u0000ݦݨ\u0005f\u0000\u0000ݧڿ\u0001\u0000\u0000\u0000ݧہ\u0001\u0000\u0000\u0000ݧۃ\u0001\u0000\u0000\u0000ݧۇ\u0001\u0000\u0000\u0000ݧۋ\u0001\u0000\u0000\u0000ݧۍ\u0001\u0000\u0000\u0000ݧے\u0001\u0000\u0000\u0000ݧ۔\u0001\u0000\u0000\u0000ݧۖ\u0001\u0000\u0000\u0000ݧۙ\u0001\u0000\u0000\u0000ݧۛ\u0001\u0000\u0000\u0000ݧ\u06dd\u0001\u0000\u0000\u0000ݧ۟\u0001\u0000\u0000\u0000ݧۢ\u0001\u0000\u0000\u0000ݧۤ\u0001\u0000\u0000\u0000ݧۦ\u0001\u0000\u0000\u0000ݧۨ\u0001\u0000\u0000\u0000ݧ۪\u0001\u0000\u0000\u0000ݧ۬\u0001\u0000\u0000\u0000ݧۮ\u0001\u0000\u0000\u0000ݧ۰\u0001\u0000\u0000\u0000ݧ۲\u0001\u0000\u0000\u0000ݧ۴\u0001\u0000\u0000\u0000ݧ۶\u0001\u0000\u0000\u0000ݧ۹\u0001\u0000\u0000\u0000ݧۼ\u0001\u0000\u0000\u0000ݧ܂\u0001\u0000\u0000\u0000ݧ܈\u0001\u0000\u0000\u0000ݧ\u070e\u0001\u0000\u0000\u0000ݧܔ\u0001\u0000\u0000\u0000ݧܚ\u0001\u0000\u0000\u0000ݧܢ\u0001\u0000\u0000\u0000ݧܩ\u0001\u0000\u0000\u0000ݧܯ\u0001\u0000\u0000\u0000ݧܵ\u0001\u0000\u0000\u0000ݧܻ\u0001\u0000\u0000\u0000ݧ݀\u0001\u0000\u0000\u0000ݧ݈\u0001\u0000\u0000\u0000ݧݐ\u0001\u0000\u0000\u0000ݧݙ\u0001\u0000\u0000\u0000ݧݢ\u0001\u0000\u0000\u0000ݧݤ\u0001\u0000\u0000\u0000ݧݥ\u0001\u0000\u0000\u0000ݧݦ\u0001\u0000\u0000\u0000ݨO\u0001\u0000\u0000\u0000ݩݫ\u0005G\u0000\u0000ݪݬ\u0005Ŋ\u0000\u0000ݫݪ\u0001\u0000\u0000\u0000ݫݬ\u0001\u0000\u0000\u0000ݬݮ\u0001\u0000\u0000\u0000ݭݯ\u0005~\u0000\u0000ݮݭ\u0001\u0000\u0000\u0000ݮݯ\u0001\u0000\u0000\u0000ݯݰ\u0001\u0000\u0000\u0000ݰݵ\u0005Ņ\u0000\u0000ݱݲ\u0005\u009d\u0000\u0000ݲݳ\u0003Ŏ§\u0000ݳݴ\u0005x\u0000\u0000ݴݶ\u0001\u0000\u0000\u0000ݵݱ\u0001\u0000\u0000\u0000ݵݶ\u0001\u0000\u0000\u0000ݶݷ\u0001\u0000\u0000\u0000ݷݸ\u0003\u0098L\u0000ݸQ\u0001\u0000\u0000\u0000ݹݺ\u0005G\u0000\u0000ݺݼ\u0005ë\u0000\u0000ݻݹ\u0001\u0000\u0000\u0000ݻݼ\u0001\u0000\u0000\u0000ݼݽ\u0001\u0000\u0000\u0000ݽݾ\u0005Đ\u0000\u0000ݾݿ\u0005Ņ\u0000\u0000ݿހ\u0003\u0098L\u0000ހS\u0001\u0000\u0000\u0000ށނ\u00053\u0000\u0000ނރ\u0005$\u0000\u0000ރބ\u0005\u0002\u0000\u0000ބޅ\u0003Ī\u0095\u0000ޅކ\u0005\u0003\u0000\u0000ކU\u0001\u0000\u0000\u0000އވ\u00054\u0000\u0000ވމ\u0005$\u0000\u0000މލ\u0003Ĉ\u0084\u0000ފދ\u0005Ĵ\u0000\u0000ދތ\u0005$\u0000\u0000ތގ\u0003Č\u0086\u0000ލފ\u0001\u0000\u0000\u0000ލގ\u0001\u0000\u0000\u0000ގޏ\u0001\u0000\u0000\u0000ޏސ\u0005¯\u0000\u0000ސޑ\u0005Ʀ\u0000\u0000ޑޒ\u0005#\u0000\u0000ޒW\u0001\u0000\u0000\u0000ޓޔ\u0005İ\u0000\u0000ޔޕ\u0005$\u0000\u0000ޕޖ\u0003Ĉ\u0084\u0000ޖޙ\u0005ç\u0000\u0000ޗޚ\u0003\u008aE\u0000ޘޚ\u0003\u008cF\u0000ޙޗ\u0001\u0000\u0000\u0000ޙޘ\u0001\u0000\u0000\u0000ޚޞ\u0001\u0000\u0000\u0000ޛޜ\u0005ļ\u0000\u0000ޜޝ\u0005\u0016\u0000\u0000ޝޟ\u0005g\u0000\u0000ޞޛ\u0001\u0000\u0000\u0000ޞޟ\u0001\u0000\u0000\u0000ޟY\u0001\u0000\u0000\u0000ޠޡ\u0005Å\u0000\u0000ޡޢ\u0003ǒé\u0000ޢ[\u0001\u0000\u0000\u0000ޣޤ\u0005ſ\u0000\u0000ޤު\u0005ġ\u0000\u0000ޥޫ\u0005\u001f\u0000\u0000ަޫ\u0005?\u0000\u0000ާޫ\u0005t\u0000\u0000ިީ\u0005Š\u0000\u0000ީޫ\u0005t\u0000\u0000ުޥ\u0001\u0000\u0000\u0000ުަ\u0001\u0000\u0000\u0000ުާ\u0001\u0000\u0000\u0000ުި\u0001\u0000\u0000\u0000ޫ]\u0001\u0000\u0000\u0000ެޭ\u0005;\u0000\u0000ޭޮ\u0003ǒé\u0000ޮ_\u0001\u0000\u0000\u0000ޯް\u0003b1\u0000ްޱ\u0005\u0000\u0000\u0001ޱa\u0001\u0000\u0000\u0000\u07b2\u07b4\u0003v;\u0000\u07b3\u07b2\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5\u07b6\u0003 P\u0000\u07b6\u07b7\u0003\u009cN\u0000\u07b7c\u0001\u0000\u0000\u0000\u07b8\u07b9\u0005ª\u0000\u0000\u07b9\u07bb\u0005ó\u0000\u0000\u07ba\u07bc\u0005Ņ\u0000\u0000\u07bb\u07ba\u0001\u0000\u0000\u0000\u07bb\u07bc\u0001\u0000\u0000\u0000\u07bc\u07bd\u0001\u0000\u0000\u0000\u07bd\u07bf\u0003\u0098L\u0000\u07be߀\u0003Ė\u008b\u0000\u07bf\u07be\u0001\u0000\u0000\u0000\u07bf߀\u0001\u0000\u0000\u0000߀߈\u0001\u0000\u0000\u0000߁߆\u0003h4\u0000߂߃\u0005\u009d\u0000\u0000߃߄\u0003Ŏ§\u0000߄߅\u0005x\u0000\u0000߅߇\u0001\u0000\u0000\u0000߆߂\u0001\u0000\u0000\u0000߆߇\u0001\u0000\u0000\u0000߇߉\u0001\u0000\u0000\u0000߈߁\u0001\u0000\u0000\u0000߈߉\u0001\u0000\u0000\u0000߉ߍ\u0001\u0000\u0000\u0000ߊߋ\u0005$\u0000\u0000ߋߎ\u0005Ù\u0000\u0000ߌߎ\u0003Ĉ\u0084\u0000ߍߊ\u0001\u0000\u0000\u0000ߍߌ\u0001\u0000\u0000\u0000ߍߎ\u0001\u0000\u0000\u0000ߎࠎ\u0001\u0000\u0000\u0000ߏߐ\u0005ª\u0000\u0000ߐߒ\u0005¯\u0000\u0000ߑߓ\u0005Ņ\u0000\u0000ߒߑ\u0001\u0000\u0000\u0000ߒߓ\u0001\u0000\u0000\u0000ߓߔ\u0001\u0000\u0000\u0000ߔߖ\u0003\u0098L\u0000ߕߗ\u0003Ė\u008b\u0000ߖߕ\u0001\u0000\u0000\u0000ߖߗ\u0001\u0000\u0000\u0000ߗߙ\u0001\u0000\u0000\u0000ߘߚ\u0003h4\u0000ߙߘ\u0001\u0000\u0000\u0000ߙߚ\u0001\u0000\u0000\u0000ߚߟ\u0001\u0000\u0000\u0000ߛߜ\u0005\u009d\u0000\u0000ߜߝ\u0003Ŏ§\u0000ߝߞ\u0005x\u0000\u0000ߞߠ\u0001\u0000\u0000\u0000ߟߛ\u0001\u0000\u0000\u0000ߟߠ\u0001\u0000\u0000\u0000ߠߤ\u0001\u0000\u0000\u0000ߡߢ\u0005$\u0000\u0000ߢߥ\u0005Ù\u0000\u0000ߣߥ\u0003Ĉ\u0084\u0000ߤߡ\u0001\u0000\u0000\u0000ߤߣ\u0001\u0000\u0000\u0000ߤߥ\u0001\u0000\u0000\u0000ߥࠎ\u0001\u0000\u0000\u0000ߦߧ\u0005ª\u0000\u0000ߧߩ\u0005¯\u0000\u0000ߨߪ\u0005Ņ\u0000\u0000ߩߨ\u0001\u0000\u0000\u0000ߩߪ\u0001\u0000\u0000\u0000ߪ߫\u0001\u0000\u0000\u0000߫߭\u0003\u0098L\u0000߬߮\u0003Ė\u008b\u0000߭߬\u0001\u0000\u0000\u0000߭߮\u0001\u0000\u0000\u0000߮߯\u0001\u0000\u0000\u0000߯߰\u0005Đ\u0000\u0000߰߱\u0003Äb\u0000߱ࠎ\u0001\u0000\u0000\u0000߲߳\u0005ª\u0000\u0000߳ߵ\u0005ó\u0000\u0000ߴ߶\u0005Ä\u0000\u0000ߵߴ\u0001\u0000\u0000\u0000ߵ߶\u0001\u0000\u0000\u0000߶߷\u0001\u0000\u0000\u0000߷߸\u0005h\u0000\u0000߸ߺ\u0003ǒé\u0000߹\u07fb\u0003Ĩ\u0094\u0000ߺ߹\u0001\u0000\u0000\u0000ߺ\u07fb\u0001\u0000\u0000\u0000\u07fb߽\u0001\u0000\u0000\u0000\u07fc߾\u0003\u008eG\u0000߽\u07fc\u0001\u0000\u0000\u0000߽߾\u0001\u0000\u0000\u0000߾ࠎ\u0001\u0000\u0000\u0000߿ࠀ\u0005ª\u0000\u0000ࠀࠂ\u0005ó\u0000\u0000ࠁࠃ\u0005Ä\u0000\u0000ࠂࠁ\u0001\u0000\u0000\u0000ࠂࠃ\u0001\u0000\u0000\u0000ࠃࠄ\u0001\u0000\u0000\u0000ࠄࠆ\u0005h\u0000\u0000ࠅࠇ\u0003ǒé\u0000ࠆࠅ\u0001\u0000\u0000\u0000ࠆࠇ\u0001\u0000\u0000\u0000ࠇࠈ\u0001\u0000\u0000\u0000ࠈࠋ\u0003z=\u0000ࠉࠊ\u0005ê\u0000\u0000ࠊࠌ\u0003~?\u0000ࠋࠉ\u0001\u0000\u0000\u0000ࠋࠌ\u0001\u0000\u0000\u0000ࠌࠎ\u0001\u0000\u0000\u0000ࠍ\u07b8\u0001\u0000\u0000\u0000ࠍߏ\u0001\u0000\u0000\u0000ࠍߦ\u0001\u0000\u0000\u0000ࠍ߲\u0001\u0000\u0000\u0000ࠍ߿\u0001\u0000\u0000\u0000ࠎe\u0001\u0000\u0000\u0000ࠏࠑ\u0003h4\u0000ࠐࠒ\u0003Z-\u0000ࠑࠐ\u0001\u0000\u0000\u0000ࠑࠒ\u0001\u0000\u0000\u0000ࠒg\u0001\u0000\u0000\u0000ࠓࠔ\u0005ô\u0000\u0000ࠔࠕ\u0005\u0002\u0000\u0000ࠕࠚ\u0003j5\u0000ࠖࠗ\u0005\u0004\u0000\u0000ࠗ࠙\u0003j5\u0000࠘ࠖ\u0001\u0000\u0000\u0000࠙ࠜ\u0001\u0000\u0000\u0000ࠚ࠘\u0001\u0000\u0000\u0000ࠚࠛ\u0001\u0000\u0000\u0000ࠛࠝ\u0001\u0000\u0000\u0000ࠜࠚ\u0001\u0000\u0000\u0000ࠝࠞ\u0005\u0003\u0000\u0000ࠞi\u0001\u0000\u0000\u0000ࠟࠢ\u0003ǂá\u0000ࠠࠡ\u0005Ƅ\u0000\u0000ࠡࠣ\u0003Ś\u00ad\u0000ࠢࠠ\u0001\u0000\u0000\u0000ࠢࠣ\u0001\u0000\u0000\u0000ࠣࠩ\u0001\u0000\u0000\u0000ࠤࠥ\u0003ǂá\u0000ࠥࠦ\u0005Ƅ\u0000\u0000ࠦࠧ\u0005^\u0000\u0000ࠧࠩ\u0001\u0000\u0000\u0000ࠨࠟ\u0001\u0000\u0000\u0000ࠨࠤ\u0001\u0000\u0000\u0000ࠩk\u0001\u0000\u0000\u0000ࠪࠫ\u0007\f\u0000\u0000ࠫm\u0001\u0000\u0000\u0000ࠬ࠭\u0007\r\u0000\u0000࠭o\u0001\u0000\u0000\u0000\u082e\u082f\u0007\u000e\u0000\u0000\u082fq\u0001\u0000\u0000\u0000࠰࠸\u0003\u0098L\u0000࠱࠸\u0003ǒé\u0000࠲࠸\u0003Ŝ®\u0000࠳࠸\u0003Ş¯\u0000࠴࠸\u0003Š°\u0000࠵࠸\u0003Œ©\u0000࠶࠸\u0005\b\u0000\u0000࠷࠰\u0001\u0000\u0000\u0000࠷࠱\u0001\u0000\u0000\u0000࠷࠲\u0001\u0000\u0000\u0000࠷࠳\u0001\u0000\u0000\u0000࠷࠴\u0001\u0000\u0000\u0000࠷࠵\u0001\u0000\u0000\u0000࠷࠶\u0001\u0000\u0000\u0000࠸s\u0001\u0000\u0000\u0000࠹࠾\u0003ƾß\u0000࠺࠻\u0005\u0005\u0000\u0000࠻࠽\u0003ƾß\u0000࠼࠺\u0001\u0000\u0000\u0000࠽ࡀ\u0001\u0000\u0000\u0000࠾࠼\u0001\u0000\u0000\u0000࠾\u083f\u0001\u0000\u0000\u0000\u083fu\u0001\u0000\u0000\u0000ࡀ࠾\u0001\u0000\u0000\u0000ࡁࡃ\u0005ſ\u0000\u0000ࡂࡄ\u0005Ĉ\u0000\u0000ࡃࡂ\u0001\u0000\u0000\u0000ࡃࡄ\u0001\u0000\u0000\u0000ࡄࡅ\u0001\u0000\u0000\u0000ࡅࡊ\u0003x<\u0000ࡆࡇ\u0005\u0004\u0000\u0000ࡇࡉ\u0003x<\u0000ࡈࡆ\u0001\u0000\u0000\u0000ࡉࡌ\u0001\u0000\u0000\u0000ࡊࡈ\u0001\u0000\u0000\u0000ࡊࡋ\u0001\u0000\u0000\u0000ࡋw\u0001\u0000\u0000\u0000ࡌࡊ\u0001\u0000\u0000\u0000ࡍࡏ\u0003ƾß\u0000ࡎࡐ\u0003Ĉ\u0084\u0000ࡏࡎ\u0001\u0000\u0000\u0000ࡏࡐ\u0001\u0000\u0000\u0000ࡐࡒ\u0001\u0000\u0000\u0000ࡑࡓ\u0005\u0016\u0000\u0000ࡒࡑ\u0001\u0000\u0000\u0000ࡒࡓ\u0001\u0000\u0000\u0000ࡓࡔ\u0001\u0000\u0000\u0000ࡔࡕ\u0005\u0002\u0000\u0000ࡕࡖ\u0003b1\u0000ࡖࡗ\u0005\u0003\u0000\u0000ࡗy\u0001\u0000\u0000\u0000ࡘ࡙\u0005Ů\u0000\u0000࡙࡚\u0003Ĭ\u0096\u0000࡚{\u0001\u0000\u0000\u0000࡛\u085c\u0005ê\u0000\u0000\u085c\u086b\u0003\u0086C\u0000\u085d࡞\u0005õ\u0000\u0000࡞\u085f\u0005$\u0000\u0000\u085f\u086b\u0003ĺ\u009d\u0000ࡠ\u086b\u0003X,\u0000ࡡ\u086b\u0003T*\u0000ࡢ\u086b\u0003V+\u0000ࡣ\u086b\u0003Ĩ\u0094\u0000ࡤ\u086b\u0003\u008eG\u0000ࡥ\u086b\u0003Z-\u0000ࡦ\u086b\u0003^/\u0000ࡧ\u086b\u0003Ŷ»\u0000ࡨࡩ\u0005ŉ\u0000\u0000ࡩ\u086b\u0003~?\u0000ࡪ࡛\u0001\u0000\u0000\u0000ࡪ\u085d\u0001\u0000\u0000\u0000ࡪࡠ\u0001\u0000\u0000\u0000ࡪࡡ\u0001\u0000\u0000\u0000ࡪࡢ\u0001\u0000\u0000\u0000ࡪࡣ\u0001\u0000\u0000\u0000ࡪࡤ\u0001\u0000\u0000\u0000ࡪࡥ\u0001\u0000\u0000\u0000ࡪࡦ\u0001\u0000\u0000\u0000ࡪࡧ\u0001\u0000\u0000\u0000ࡪࡨ\u0001\u0000\u0000\u0000\u086b\u086e\u0001\u0000\u0000\u0000\u086cࡪ\u0001\u0000\u0000\u0000\u086c\u086d\u0001\u0000\u0000\u0000\u086d}\u0001\u0000\u0000\u0000\u086e\u086c\u0001\u0000\u0000\u0000\u086f\u0870\u0005\u0002\u0000\u0000\u0870\u0875\u0003\u0080@\u0000\u0871\u0872\u0005\u0004\u0000\u0000\u0872\u0874\u0003\u0080@\u0000\u0873\u0871\u0001\u0000\u0000\u0000\u0874\u0877\u0001\u0000\u0000\u0000\u0875\u0873\u0001\u0000\u0000\u0000\u0875\u0876\u0001\u0000\u0000\u0000\u0876\u0878\u0001\u0000\u0000\u0000\u0877\u0875\u0001\u0000\u0000\u0000\u0878\u0879\u0005\u0003\u0000\u0000\u0879\u007f\u0001\u0000\u0000\u0000\u087a\u087f\u0003\u0082A\u0000\u087b\u087d\u0005Ƅ\u0000\u0000\u087c\u087b\u0001\u0000\u0000\u0000\u087c\u087d\u0001\u0000\u0000\u0000\u087d\u087e\u0001\u0000\u0000\u0000\u087e\u0880\u0003\u0084B\u0000\u087f\u087c\u0001\u0000\u0000\u0000\u087f\u0880\u0001\u0000\u0000\u0000\u0880\u0081\u0001\u0000\u0000\u0000\u0881\u0886\u0003ƾß\u0000\u0882\u0883\u0005\u0005\u0000\u0000\u0883\u0885\u0003ƾß\u0000\u0884\u0882\u0001\u0000\u0000\u0000\u0885\u0888\u0001\u0000\u0000\u0000\u0886\u0884\u0001\u0000\u0000\u0000\u0886\u0887\u0001\u0000\u0000\u0000\u0887\u088b\u0001\u0000\u0000\u0000\u0888\u0886\u0001\u0000\u0000\u0000\u0889\u088b\u0003ǒé\u0000\u088a\u0881\u0001\u0000\u0000\u0000\u088a\u0889\u0001\u0000\u0000\u0000\u088b\u0083\u0001\u0000\u0000\u0000\u088c\u0891\u0005Ʀ\u0000\u0000\u088d\u0891\u0005ƨ\u0000\u0000\u088e\u0891\u0003Ţ±\u0000\u088f\u0891\u0003ǒé\u0000\u0890\u088c\u0001\u0000\u0000\u0000\u0890\u088d\u0001\u0000\u0000\u0000\u0890\u088e\u0001\u0000\u0000\u0000\u0890\u088f\u0001\u0000\u0000\u0000\u0891\u0085\u0001\u0000\u0000\u0000\u0892\u0893\u0005\u0002\u0000\u0000\u0893\u0898\u0003\u0088D\u0000\u0894\u0895\u0005\u0004\u0000\u0000\u0895\u0897\u0003\u0088D\u0000\u0896\u0894\u0001\u0000\u0000\u0000\u0897\u089a\u0001\u0000\u0000\u0000\u0898\u0896\u0001\u0000\u0000\u0000\u0898\u0899\u0001\u0000\u0000\u0000\u0899\u089b\u0001\u0000\u0000\u0000\u089a\u0898\u0001\u0000\u0000\u0000\u089b\u089c\u0005\u0003\u0000\u0000\u089c\u0087\u0001\u0000\u0000\u0000\u089dࢢ\u0003\u0082A\u0000\u089eࢠ\u0005Ƅ\u0000\u0000\u089f\u089e\u0001\u0000\u0000\u0000\u089fࢠ\u0001\u0000\u0000\u0000ࢠࢡ\u0001\u0000\u0000\u0000ࢡࢣ\u0003ł¡\u0000ࢢ\u089f\u0001\u0000\u0000\u0000ࢢࢣ\u0001\u0000\u0000\u0000ࢣ\u0089\u0001\u0000\u0000\u0000ࢤࢥ\u0005\u0002\u0000\u0000ࢥࢪ\u0003Ś\u00ad\u0000ࢦࢧ\u0005\u0004\u0000\u0000ࢧࢩ\u0003Ś\u00ad\u0000ࢨࢦ\u0001\u0000\u0000\u0000ࢩࢬ\u0001\u0000\u0000\u0000ࢪࢨ\u0001\u0000\u0000\u0000ࢪࢫ\u0001\u0000\u0000\u0000ࢫࢭ\u0001\u0000\u0000\u0000ࢬࢪ\u0001\u0000\u0000\u0000ࢭࢮ\u0005\u0003\u0000\u0000ࢮ\u008b\u0001\u0000\u0000\u0000ࢯࢰ\u0005\u0002\u0000\u0000ࢰ\u08b5\u0003\u008aE\u0000ࢱࢲ\u0005\u0004\u0000\u0000ࢲࢴ\u0003\u008aE\u0000ࢳࢱ\u0001\u0000\u0000\u0000ࢴࢷ\u0001\u0000\u0000\u0000\u08b5ࢳ\u0001\u0000\u0000\u0000\u08b5ࢶ\u0001\u0000\u0000\u0000ࢶࢸ\u0001\u0000\u0000\u0000ࢷ\u08b5\u0001\u0000\u0000\u0000ࢸࢹ\u0005\u0003\u0000\u0000ࢹ\u008d\u0001\u0000\u0000\u0000ࢺࢻ\u0005ļ\u0000\u0000ࢻࢼ\u0005\u0016\u0000\u0000ࢼࣁ\u0003\u0090H\u0000ࢽࢾ\u0005ļ\u0000\u0000ࢾࢿ\u0005$\u0000\u0000ࢿࣁ\u0003\u0092I\u0000ࣀࢺ\u0001\u0000\u0000\u0000ࣀࢽ\u0001\u0000\u0000\u0000ࣁ\u008f\u0001\u0000\u0000\u0000ࣂࣃ\u0005©\u0000\u0000ࣃࣄ\u0003ǒé\u0000ࣄࣅ\u0005ï\u0000\u0000ࣅࣆ\u0003ǒé\u0000ࣆ\u08c9\u0001\u0000\u0000\u0000ࣇ\u08c9\u0003ǂá\u0000\u08c8ࣂ\u0001\u0000\u0000\u0000\u08c8ࣇ\u0001\u0000\u0000\u0000\u08c9\u0091\u0001\u0000\u0000\u0000\u08ca\u08ce\u0003ǒé\u0000\u08cb\u08cc\u0005ſ\u0000\u0000\u08cc\u08cd\u0005Ĩ\u0000\u0000\u08cd\u08cf\u0003~?\u0000\u08ce\u08cb\u0001\u0000\u0000\u0000\u08ce\u08cf\u0001\u0000\u0000\u0000\u08cf\u0093\u0001\u0000\u0000\u0000\u08d0\u08d1\u0003ǂá\u0000\u08d1\u08d2\u0003ǒé\u0000\u08d2\u0095\u0001\u0000\u0000\u0000࣓ࣔ\u0003d2\u0000ࣔࣕ\u0003b1\u0000ࣕऑ\u0001\u0000\u0000\u0000ࣖࣘ\u0003Ìf\u0000ࣗࣙ\u0003\u009eO\u0000ࣘࣗ\u0001\u0000\u0000\u0000ࣙࣚ\u0001\u0000\u0000\u0000ࣚࣘ\u0001\u0000\u0000\u0000ࣚࣛ\u0001\u0000\u0000\u0000ࣛऑ\u0001\u0000\u0000\u0000ࣜࣝ\u0005a\u0000\u0000ࣝࣞ\u0005\u008d\u0000\u0000ࣞࣟ\u0003\u0098L\u0000ࣟ࣡\u0003Ħ\u0093\u0000࣠\u08e2\u0003Äb\u0000࣡࣠\u0001\u0000\u0000\u0000࣡\u08e2\u0001\u0000\u0000\u0000\u08e2ऑ\u0001\u0000\u0000\u0000ࣣࣤ\u0005ū\u0000\u0000ࣤࣥ\u0003\u0098L\u0000ࣦࣥ\u0003Ħ\u0093\u0000ࣦࣨ\u0003°X\u0000ࣩࣧ\u0003Äb\u0000ࣨࣧ\u0001\u0000\u0000\u0000ࣩࣨ\u0001\u0000\u0000\u0000ࣩऑ\u0001\u0000\u0000\u0000࣮࣪\u0005Î\u0000\u0000࣫࣬\u0005ſ\u0000\u0000࣭࣬\u0005ġ\u0000\u0000࣭࣯\u0005t\u0000\u0000࣮࣫\u0001\u0000\u0000\u0000࣮࣯\u0001\u0000\u0000\u0000ࣰ࣯\u0001\u0000\u0000\u0000ࣰࣱ\u0005¯\u0000\u0000ࣱࣲ\u0003\u0098L\u0000ࣲࣳ\u0003Ħ\u0093\u0000ࣹࣳ\u0005Ů\u0000\u0000ࣺࣴ\u0003\u0098L\u0000ࣶࣵ\u0005\u0002\u0000\u0000ࣶࣷ\u0003b1\u0000ࣷࣸ\u0005\u0003\u0000\u0000ࣺࣸ\u0001\u0000\u0000\u0000ࣹࣴ\u0001\u0000\u0000\u0000ࣹࣵ\u0001\u0000\u0000\u0000ࣺࣻ\u0001\u0000\u0000\u0000ࣻࣼ\u0003Ħ\u0093\u0000ࣼࣽ\u0005ç\u0000\u0000ࣽँ\u0003Ŋ¥\u0000ࣾऀ\u0003²Y\u0000ࣿࣾ\u0001\u0000\u0000\u0000ऀः\u0001\u0000\u0000\u0000ँࣿ\u0001\u0000\u0000\u0000ँं\u0001\u0000\u0000\u0000ंइ\u0001\u0000\u0000\u0000ःँ\u0001\u0000\u0000\u0000ऄआ\u0003´Z\u0000अऄ\u0001\u0000\u0000\u0000आउ\u0001\u0000\u0000\u0000इअ\u0001\u0000\u0000\u0000इई\u0001\u0000\u0000\u0000ईऍ\u0001\u0000\u0000\u0000उइ\u0001\u0000\u0000\u0000ऊऌ\u0003¶[\u0000ऋऊ\u0001\u0000\u0000\u0000ऌए\u0001\u0000\u0000\u0000ऍऋ\u0001\u0000\u0000\u0000ऍऎ\u0001\u0000\u0000\u0000ऎऑ\u0001\u0000\u0000\u0000एऍ\u0001\u0000\u0000\u0000ऐ࣓\u0001\u0000\u0000\u0000ऐࣖ\u0001\u0000\u0000\u0000ऐࣜ\u0001\u0000\u0000\u0000ऐࣣ\u0001\u0000\u0000\u0000ऐ࣪\u0001\u0000\u0000\u0000ऑ\u0097\u0001\u0000\u0000\u0000ऒओ\u0005\u009b\u0000\u0000ओऔ\u0005\u0002\u0000\u0000औक\u0003ł¡\u0000कख\u0005\u0003\u0000\u0000खङ\u0001\u0000\u0000\u0000गङ\u0003Ĭ\u0096\u0000घऒ\u0001\u0000\u0000\u0000घग\u0001\u0000\u0000\u0000ङ\u0099\u0001\u0000\u0000\u0000चछ\u0005\u009b\u0000\u0000छज\u0005\u0002\u0000\u0000जझ\u0003ł¡\u0000झञ\u0005\u0003\u0000\u0000ञढ\u0001\u0000\u0000\u0000टढ\u0003ƾß\u0000ठढ\u0003ǒé\u0000डच\u0001\u0000\u0000\u0000डट\u0001\u0000\u0000\u0000डठ\u0001\u0000\u0000\u0000ढ\u009b\u0001\u0000\u0000\u0000णत\u0005ì\u0000\u0000तथ\u0005$\u0000\u0000थप\u0003¤R\u0000दध\u0005\u0004\u0000\u0000धऩ\u0003¤R\u0000नद\u0001\u0000\u0000\u0000ऩब\u0001\u0000\u0000\u0000पन\u0001\u0000\u0000\u0000पफ\u0001\u0000\u0000\u0000फम\u0001\u0000\u0000\u0000बप\u0001\u0000\u0000\u0000भण\u0001\u0000\u0000\u0000भम\u0001\u0000\u0000\u0000मह\u0001\u0000\u0000\u0000यर\u00053\u0000\u0000रऱ\u0005$\u0000\u0000ऱश\u0003ł¡\u0000लळ\u0005\u0004\u0000\u0000ळव\u0003ł¡\u0000ऴल\u0001\u0000\u0000\u0000वस\u0001\u0000\u0000\u0000शऴ\u0001\u0000\u0000\u0000शष\u0001\u0000\u0000\u0000षऺ\u0001\u0000\u0000\u0000सश\u0001\u0000\u0000\u0000हय\u0001\u0000\u0000\u0000हऺ\u0001\u0000\u0000\u0000ऺॅ\u0001\u0000\u0000\u0000ऻ़\u0005j\u0000\u0000़ऽ\u0005$\u0000\u0000ऽू\u0003ł¡\u0000ाि\u0005\u0004\u0000\u0000िु\u0003ł¡\u0000ीा\u0001\u0000\u0000\u0000ुॄ\u0001\u0000\u0000\u0000ूी\u0001\u0000\u0000\u0000ूृ\u0001\u0000\u0000\u0000ृॆ\u0001\u0000\u0000\u0000ॄू\u0001\u0000\u0000\u0000ॅऻ\u0001\u0000\u0000\u0000ॅॆ\u0001\u0000\u0000\u0000ॆ॑\u0001\u0000\u0000\u0000ेै\u0005ĳ\u0000\u0000ैॉ\u0005$\u0000\u0000ॉॎ\u0003¤R\u0000ॊो\u0005\u0004\u0000\u0000ो्\u0003¤R\u0000ौॊ\u0001\u0000\u0000\u0000्ॐ\u0001\u0000\u0000\u0000ॎौ\u0001\u0000\u0000\u0000ॎॏ\u0001\u0000\u0000\u0000ॏ॒\u0001\u0000\u0000\u0000ॐॎ\u0001\u0000\u0000\u0000॑े\u0001\u0000\u0000\u0000॒॑\u0001\u0000\u0000\u0000॒॔\u0001\u0000\u0000\u0000॓ॕ\u0003Ʈ×\u0000॔॓\u0001\u0000\u0000\u0000॔ॕ\u0001\u0000\u0000\u0000ॕज़\u0001\u0000\u0000\u0000ॖख़\u0005À\u0000\u0000ॗग़\u0005\f\u0000\u0000क़ग़\u0003ł¡\u0000ख़ॗ\u0001\u0000\u0000\u0000ख़क़\u0001\u0000\u0000\u0000ग़ड़\u0001\u0000\u0000\u0000ज़ॖ\u0001\u0000\u0000\u0000ज़ड़\u0001\u0000\u0000\u0000ड़य़\u0001\u0000\u0000\u0000ढ़फ़\u0005æ\u0000\u0000फ़ॠ\u0003ł¡\u0000य़ढ़\u0001\u0000\u0000\u0000य़ॠ\u0001\u0000\u0000\u0000ॠ\u009d\u0001\u0000\u0000\u0000ॡॢ\u0003d2\u0000ॢॣ\u0003¨T\u0000ॣ\u009f\u0001\u0000\u0000\u0000।॥\u0006P\uffff\uffff\u0000॥०\u0003¢Q\u0000०ঁ\u0001\u0000\u0000\u0000१२\n\u0004\u0000\u0000२३\u0004P\u0001\u0000३५\u0007\u000f\u0000\u0000४६\u0003ø|\u0000५४\u0001\u0000\u0000\u0000५६\u0001\u0000\u0000\u0000६७\u0001\u0000\u0000\u0000७ঀ\u0003 P\u0005८९\n\u0003\u0000\u0000९॰\u0004P\u0003\u0000॰ॲ\u0005«\u0000\u0000ॱॳ\u0003ø|\u0000ॲॱ\u0001\u0000\u0000\u0000ॲॳ\u0001\u0000\u0000\u0000ॳॴ\u0001\u0000\u0000\u0000ॴঀ\u0003 P\u0004ॵॶ\n\u0002\u0000\u0000ॶॷ\u0004P\u0005\u0000ॷॹ\u0007\u0010\u0000\u0000ॸॺ\u0003ø|\u0000ॹॸ\u0001\u0000\u0000\u0000ॹॺ\u0001\u0000\u0000\u0000ॺॻ\u0001\u0000\u0000\u0000ॻঀ\u0003 P\u0003ॼॽ\n\u0001\u0000\u0000ॽॾ\u0005Ƙ\u0000\u0000ॾঀ\u0003ǘì\u0000ॿ१\u0001\u0000\u0000\u0000ॿ८\u0001\u0000\u0000\u0000ॿॵ\u0001\u0000\u0000\u0000ॿॼ\u0001\u0000\u0000\u0000ঀঃ\u0001\u0000\u0000\u0000ঁॿ\u0001\u0000\u0000\u0000ঁং\u0001\u0000\u0000\u0000ং¡\u0001\u0000\u0000\u0000ঃঁ\u0001\u0000\u0000\u0000\u0984\u098e\u0003ªU\u0000অ\u098e\u0003¦S\u0000আই\u0005Ņ\u0000\u0000ই\u098e\u0003\u0098L\u0000ঈ\u098e\u0003Ę\u008c\u0000উঊ\u0005\u0002\u0000\u0000ঊঋ\u0003b1\u0000ঋঌ\u0005\u0003\u0000\u0000ঌ\u098e\u0001\u0000\u0000\u0000\u098d\u0984\u0001\u0000\u0000\u0000\u098dঅ\u0001\u0000\u0000\u0000\u098dআ\u0001\u0000\u0000\u0000\u098dঈ\u0001\u0000\u0000\u0000\u098dউ\u0001\u0000\u0000\u0000\u098e£\u0001\u0000\u0000\u0000এ\u0991\u0003ł¡\u0000ঐ\u0992\u0007\u0011\u0000\u0000\u0991ঐ\u0001\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992ক\u0001\u0000\u0000\u0000ওঔ\u0005ã\u0000\u0000ঔখ\u0007\u0012\u0000\u0000কও\u0001\u0000\u0000\u0000কখ\u0001\u0000\u0000\u0000খ¥\u0001\u0000\u0000\u0000গছ\u0003Ìf\u0000ঘচ\u0003¨T\u0000ঙঘ\u0001\u0000\u0000\u0000চঝ\u0001\u0000\u0000\u0000ছঙ\u0001\u0000\u0000\u0000ছজ\u0001\u0000\u0000\u0000জ§\u0001\u0000\u0000\u0000ঝছ\u0001\u0000\u0000\u0000ঞঠ\u0003¬V\u0000টড\u0003Äb\u0000ঠট\u0001\u0000\u0000\u0000ঠড\u0001\u0000\u0000\u0000ডঢ\u0001\u0000\u0000\u0000ঢণ\u0003\u009cN\u0000ণ\u09ba\u0001\u0000\u0000\u0000তন\u0003®W\u0000থধ\u0003ö{\u0000দথ\u0001\u0000\u0000\u0000ধপ\u0001\u0000\u0000\u0000নদ\u0001\u0000\u0000\u0000ন\u09a9\u0001\u0000\u0000\u0000\u09a9ব\u0001\u0000\u0000\u0000পন\u0001\u0000\u0000\u0000ফভ\u0003Äb\u0000বফ\u0001\u0000\u0000\u0000বভ\u0001\u0000\u0000\u0000ভয\u0001\u0000\u0000\u0000মর\u0003Ðh\u0000যম\u0001\u0000\u0000\u0000যর\u0001\u0000\u0000\u0000রল\u0001\u0000\u0000\u0000\u09b1\u09b3\u0003Æc\u0000ল\u09b1\u0001\u0000\u0000\u0000ল\u09b3\u0001\u0000\u0000\u0000\u09b3\u09b5\u0001\u0000\u0000\u0000\u09b4শ\u0003Ʈ×\u0000\u09b5\u09b4\u0001\u0000\u0000\u0000\u09b5শ\u0001\u0000\u0000\u0000শষ\u0001\u0000\u0000\u0000ষস\u0003\u009cN\u0000স\u09ba\u0001\u0000\u0000\u0000হঞ\u0001\u0000\u0000\u0000হত\u0001\u0000\u0000\u0000\u09ba©\u0001\u0000\u0000\u0000\u09bbঽ\u0003¬V\u0000়া\u0003Ìf\u0000ঽ়\u0001\u0000\u0000\u0000ঽা\u0001\u0000\u0000\u0000াূ\u0001\u0000\u0000\u0000িু\u0003ö{\u0000ীি\u0001\u0000\u0000\u0000ুৄ\u0001\u0000\u0000\u0000ূী\u0001\u0000\u0000\u0000ূৃ\u0001\u0000\u0000\u0000ৃ\u09c6\u0001\u0000\u0000\u0000ৄূ\u0001\u0000\u0000\u0000\u09c5ে\u0003Äb\u0000\u09c6\u09c5\u0001\u0000\u0000\u0000\u09c6ে\u0001\u0000\u0000\u0000ে\u09c9\u0001\u0000\u0000\u0000ৈ\u09ca\u0003Ðh\u0000\u09c9ৈ\u0001\u0000\u0000\u0000\u09c9\u09ca\u0001\u0000\u0000\u0000\u09caৌ\u0001\u0000\u0000\u0000ো্\u0003Æc\u0000ৌো\u0001\u0000\u0000\u0000ৌ্\u0001\u0000\u0000\u0000্\u09cf\u0001\u0000\u0000\u0000ৎ\u09d0\u0003Ʈ×\u0000\u09cfৎ\u0001\u0000\u0000\u0000\u09cf\u09d0\u0001\u0000\u0000\u0000\u09d0২\u0001\u0000\u0000\u0000\u09d1\u09d3\u0003®W\u0000\u09d2\u09d4\u0003Ìf\u0000\u09d3\u09d2\u0001\u0000\u0000\u0000\u09d3\u09d4\u0001\u0000\u0000\u0000\u09d4\u09d8\u0001\u0000\u0000\u0000\u09d5ৗ\u0003ö{\u0000\u09d6\u09d5\u0001\u0000\u0000\u0000ৗ\u09da\u0001\u0000\u0000\u0000\u09d8\u09d6\u0001\u0000\u0000\u0000\u09d8\u09d9\u0001\u0000\u0000\u0000\u09d9ড়\u0001\u0000\u0000\u0000\u09da\u09d8\u0001\u0000\u0000\u0000\u09dbঢ়\u0003Äb\u0000ড়\u09db\u0001\u0000\u0000\u0000ড়ঢ়\u0001\u0000\u0000\u0000ঢ়য়\u0001\u0000\u0000\u0000\u09deৠ\u0003Ðh\u0000য়\u09de\u0001\u0000\u0000\u0000য়ৠ\u0001\u0000\u0000\u0000ৠৢ\u0001\u0000\u0000\u0000ৡৣ\u0003Æc\u0000ৢৡ\u0001\u0000\u0000\u0000ৢৣ\u0001\u0000\u0000\u0000ৣ\u09e5\u0001\u0000\u0000\u0000\u09e4০\u0003Ʈ×\u0000\u09e5\u09e4\u0001\u0000\u0000\u0000\u09e5০\u0001\u0000\u0000\u0000০২\u0001\u0000\u0000\u0000১\u09bb\u0001\u0000\u0000\u0000১\u09d1\u0001\u0000\u0000\u0000২«\u0001\u0000\u0000\u0000৩৪\u0005Ĥ\u0000\u0000৪৫\u0005ś\u0000\u0000৫৭\u0005\u0002\u0000\u0000৬৮\u0003ø|\u0000৭৬\u0001\u0000\u0000\u0000৭৮\u0001\u0000\u0000\u0000৮৯\u0001\u0000\u0000\u0000৯ৰ\u0003ň¤\u0000ৰৱ\u0005\u0003\u0000\u0000ৱ৽\u0001\u0000\u0000\u0000৲৴\u0005Ì\u0000\u0000৳৵\u0003ø|\u0000৴৳\u0001\u0000\u0000\u0000৴৵\u0001\u0000\u0000\u0000৵৶\u0001\u0000\u0000\u0000৶৽\u0003ň¤\u0000৷৹\u0005ĉ\u0000\u0000৸৺\u0003ø|\u0000৹৸\u0001\u0000\u0000\u0000৹৺\u0001\u0000\u0000\u0000৺৻\u0001\u0000\u0000\u0000৻৽\u0003ň¤\u0000ৼ৩\u0001\u0000\u0000\u0000ৼ৲\u0001\u0000\u0000\u0000ৼ৷\u0001\u0000\u0000\u0000৽\u09ff\u0001\u0000\u0000\u0000৾\u0a00\u0003Ĩ\u0094\u0000\u09ff৾\u0001\u0000\u0000\u0000\u09ff\u0a00\u0001\u0000\u0000\u0000\u0a00ਃ\u0001\u0000\u0000\u0000ਁਂ\u0005Ć\u0000\u0000ਂ\u0a04\u0003ǒé\u0000ਃਁ\u0001\u0000\u0000\u0000ਃ\u0a04\u0001\u0000\u0000\u0000\u0a04ਅ\u0001\u0000\u0000\u0000ਅਆ\u0005Ů\u0000\u0000ਆਓ\u0003ǒé\u0000ਇ\u0a11\u0005\u0016\u0000\u0000ਈ\u0a12\u0003Ċ\u0085\u0000ਉ\u0a12\u0003ƈÄ\u0000ਊ\u0a0d\u0005\u0002\u0000\u0000\u0a0b\u0a0e\u0003Ċ\u0085\u0000\u0a0c\u0a0e\u0003ƈÄ\u0000\u0a0d\u0a0b\u0001\u0000\u0000\u0000\u0a0d\u0a0c\u0001\u0000\u0000\u0000\u0a0eਏ\u0001\u0000\u0000\u0000ਏਐ\u0005\u0003\u0000\u0000ਐ\u0a12\u0001\u0000\u0000\u0000\u0a11ਈ\u0001\u0000\u0000\u0000\u0a11ਉ\u0001\u0000\u0000\u0000\u0a11ਊ\u0001\u0000\u0000\u0000\u0a12ਔ\u0001\u0000\u0000\u0000ਓਇ\u0001\u0000\u0000\u0000ਓਔ\u0001\u0000\u0000\u0000ਔਖ\u0001\u0000\u0000\u0000ਕਗ\u0003Ĩ\u0094\u0000ਖਕ\u0001\u0000\u0000\u0000ਖਗ\u0001\u0000\u0000\u0000ਗਚ\u0001\u0000\u0000\u0000ਘਙ\u0005ą\u0000\u0000ਙਛ\u0003ǒé\u0000ਚਘ\u0001\u0000\u0000\u0000ਚਛ\u0001\u0000\u0000\u0000ਛ\u00ad\u0001\u0000\u0000\u0000ਜਠ\u0005Ĥ\u0000\u0000ਝਟ\u0003Èd\u0000ਞਝ\u0001\u0000\u0000\u0000ਟਢ\u0001\u0000\u0000\u0000ਠਞ\u0001\u0000\u0000\u0000ਠਡ\u0001\u0000\u0000\u0000ਡਤ\u0001\u0000\u0000\u0000ਢਠ\u0001\u0000\u0000\u0000ਣਥ\u0003ø|\u0000ਤਣ\u0001\u0000\u0000\u0000ਤਥ\u0001\u0000\u0000\u0000ਥਦ\u0001\u0000\u0000\u0000ਦਧ\u0003ĸ\u009c\u0000ਧ¯\u0001\u0000\u0000\u0000ਨ\u0a29\u0005Ī\u0000\u0000\u0a29ਪ\u0003À`\u0000ਪ±\u0001\u0000\u0000\u0000ਫਬ\u0005Ż\u0000\u0000ਬਯ\u0005Í\u0000\u0000ਭਮ\u0005\u0010\u0000\u0000ਮਰ\u0003Ŋ¥\u0000ਯਭ\u0001\u0000\u0000\u0000ਯਰ\u0001\u0000\u0000\u0000ਰ\u0a31\u0001\u0000\u0000\u0000\u0a31ਲ\u0005Ō\u0000\u0000ਲਲ਼\u0003¸\\\u0000ਲ਼³\u0001\u0000\u0000\u0000\u0a34ਵ\u0005Ż\u0000\u0000ਵਸ਼\u0003Ŏ§\u0000ਸ਼ਹ\u0005Í\u0000\u0000\u0a37ਸ\u0005$\u0000\u0000ਸ\u0a3a\u0005ň\u0000\u0000ਹ\u0a37\u0001\u0000\u0000\u0000ਹ\u0a3a\u0001\u0000\u0000\u0000\u0a3a\u0a3d\u0001\u0000\u0000\u0000\u0a3b਼\u0005\u0010\u0000\u0000਼ਾ\u0003Ŋ¥\u0000\u0a3d\u0a3b\u0001\u0000\u0000\u0000\u0a3dਾ\u0001\u0000\u0000\u0000ਾਿ\u0001\u0000\u0000\u0000ਿੀ\u0005Ō\u0000\u0000ੀੁ\u0003º]\u0000ੁµ\u0001\u0000\u0000\u0000ੂ\u0a43\u0005Ż\u0000\u0000\u0a43\u0a44\u0003Ŏ§\u0000\u0a44\u0a45\u0005Í\u0000\u0000\u0a45\u0a46\u0005$\u0000\u0000\u0a46\u0a49\u0005ĵ\u0000\u0000ੇੈ\u0005\u0010\u0000\u0000ੈ\u0a4a\u0003Ŋ¥\u0000\u0a49ੇ\u0001\u0000\u0000\u0000\u0a49\u0a4a\u0001\u0000\u0000\u0000\u0a4aੋ\u0001\u0000\u0000\u0000ੋੌ\u0005Ō\u0000\u0000ੌ੍\u0003¼^\u0000੍·\u0001\u0000\u0000\u0000\u0a4e\u0a56\u0005a\u0000\u0000\u0a4f\u0a50\u0005ū\u0000\u0000\u0a50ੑ\u0005Ī\u0000\u0000ੑ\u0a56\u0005Ƒ\u0000\u0000\u0a52\u0a53\u0005ū\u0000\u0000\u0a53\u0a54\u0005Ī\u0000\u0000\u0a54\u0a56\u0003À`\u0000\u0a55\u0a4e\u0001\u0000\u0000\u0000\u0a55\u0a4f\u0001\u0000\u0000\u0000\u0a55\u0a52\u0001\u0000\u0000\u0000\u0a56¹\u0001\u0000\u0000\u0000\u0a57\u0a58\u0005ª\u0000\u0000\u0a58੪\u0005Ƒ\u0000\u0000ਖ਼ਗ਼\u0005ª\u0000\u0000ਗ਼ਜ਼\u0005\u0002\u0000\u0000ਜ਼ੜ\u0003Ī\u0095\u0000ੜ\u0a5d\u0005\u0003\u0000\u0000\u0a5dਫ਼\u0005Ű\u0000\u0000ਫ਼\u0a5f\u0005\u0002\u0000\u0000\u0a5f\u0a64\u0003ł¡\u0000\u0a60\u0a61\u0005\u0004\u0000\u0000\u0a61\u0a63\u0003ł¡\u0000\u0a62\u0a60\u0001\u0000\u0000\u0000\u0a63੦\u0001\u0000\u0000\u0000\u0a64\u0a62\u0001\u0000\u0000\u0000\u0a64\u0a65\u0001\u0000\u0000\u0000\u0a65੧\u0001\u0000\u0000\u0000੦\u0a64\u0001\u0000\u0000\u0000੧੨\u0005\u0003\u0000\u0000੨੪\u0001\u0000\u0000\u0000੩\u0a57\u0001\u0000\u0000\u0000੩ਖ਼\u0001\u0000\u0000\u0000੪»\u0001\u0000\u0000\u0000੫ੰ\u0005a\u0000\u0000੬੭\u0005ū\u0000\u0000੭੮\u0005Ī\u0000\u0000੮ੰ\u0003À`\u0000੯੫\u0001\u0000\u0000\u0000੯੬\u0001\u0000\u0000\u0000ੰ½\u0001\u0000\u0000\u0000ੱੲ\u0005u\u0000\u0000ੲੳ\u0005\u0002\u0000\u0000ੳੴ\u0003Ī\u0095\u0000ੴੵ\u0005\u0003\u0000\u0000ੵ¿\u0001\u0000\u0000\u0000੶\u0a7b\u0003Âa\u0000\u0a77\u0a78\u0005\u0004\u0000\u0000\u0a78\u0a7a\u0003Âa\u0000\u0a79\u0a77\u0001\u0000\u0000\u0000\u0a7a\u0a7d\u0001\u0000\u0000\u0000\u0a7b\u0a79\u0001\u0000\u0000\u0000\u0a7b\u0a7c\u0001\u0000\u0000\u0000\u0a7cÁ\u0001\u0000\u0000\u0000\u0a7d\u0a7b\u0001\u0000\u0000\u0000\u0a7e\u0a7f\u0003Ĭ\u0096\u0000\u0a7f\u0a80\u0005Ƅ\u0000\u0000\u0a80ઁ\u0003ł¡\u0000ઁÃ\u0001\u0000\u0000\u0000ંઃ\u0005ż\u0000\u0000ઃ\u0a84\u0003Ŋ¥\u0000\u0a84Å\u0001\u0000\u0000\u0000અઆ\u0005\u0097\u0000\u0000આઇ\u0003Ŋ¥\u0000ઇÇ\u0001\u0000\u0000\u0000ઈઉ\u0005ƞ\u0000\u0000ઉઐ\u0003Êe\u0000ઊઌ\u0005\u0004\u0000\u0000ઋઊ\u0001\u0000\u0000\u0000ઋઌ\u0001\u0000\u0000\u0000ઌઍ\u0001\u0000\u0000\u0000ઍએ\u0003Êe\u0000\u0a8eઋ\u0001\u0000\u0000\u0000એ\u0a92\u0001\u0000\u0000\u0000ઐ\u0a8e\u0001\u0000\u0000\u0000ઐઑ\u0001\u0000\u0000\u0000ઑઓ\u0001\u0000\u0000\u0000\u0a92ઐ\u0001\u0000\u0000\u0000ઓઔ\u0005Ɵ\u0000\u0000ઔÉ\u0001\u0000\u0000\u0000કણ\u0003ǂá\u0000ખગ\u0003ǂá\u0000ગઘ\u0005\u0002\u0000\u0000ઘઝ\u0003Ŗ«\u0000ઙચ\u0005\u0004\u0000\u0000ચજ\u0003Ŗ«\u0000છઙ\u0001\u0000\u0000\u0000જટ\u0001\u0000\u0000\u0000ઝછ\u0001\u0000\u0000\u0000ઝઞ\u0001\u0000\u0000\u0000ઞઠ\u0001\u0000\u0000\u0000ટઝ\u0001\u0000\u0000\u0000ઠડ\u0005\u0003\u0000\u0000ડણ\u0001\u0000\u0000\u0000ઢક\u0001\u0000\u0000\u0000ઢખ\u0001\u0000\u0000\u0000ણË\u0001\u0000\u0000\u0000તથ\u0005\u008d\u0000\u0000થપ\u0003ú}\u0000દધ\u0005\u0004\u0000\u0000ધ\u0aa9\u0003ú}\u0000નદ\u0001\u0000\u0000\u0000\u0aa9બ\u0001\u0000\u0000\u0000પન\u0001\u0000\u0000\u0000પફ\u0001\u0000\u0000\u0000ફર\u0001\u0000\u0000\u0000બપ\u0001\u0000\u0000\u0000ભય\u0003ö{\u0000મભ\u0001\u0000\u0000\u0000યલ\u0001\u0000\u0000\u0000રમ\u0001\u0000\u0000\u0000ર\u0ab1\u0001\u0000\u0000\u0000\u0ab1\u0ab4\u0001\u0000\u0000\u0000લર\u0001\u0000\u0000\u0000ળવ\u0003Úm\u0000\u0ab4ળ\u0001\u0000\u0000\u0000\u0ab4વ\u0001\u0000\u0000\u0000વષ\u0001\u0000\u0000\u0000શસ\u0003àp\u0000ષશ\u0001\u0000\u0000\u0000ષસ\u0001\u0000\u0000\u0000સÍ\u0001\u0000\u0000\u0000હ\u0abb\u0005\u0088\u0000\u0000\u0abaહ\u0001\u0000\u0000\u0000\u0aba\u0abb\u0001\u0000\u0000\u0000\u0abb઼\u0001\u0000\u0000\u0000઼ઽ\u0007\u0013\u0000\u0000ઽા\u0005\u0016\u0000\u0000ાિ\u0005å\u0000\u0000િૈ\u0003ǖë\u0000ીૂ\u0005\u0088\u0000\u0000ુી\u0001\u0000\u0000\u0000ુૂ\u0001\u0000\u0000\u0000ૂૃ\u0001\u0000\u0000\u0000ૃૄ\u0007\u0014\u0000\u0000ૄૅ\u0005\u0016\u0000\u0000ૅ\u0ac6\u0005å\u0000\u0000\u0ac6ૈ\u0003Ő¨\u0000ે\u0aba\u0001\u0000\u0000\u0000ેુ\u0001\u0000\u0000\u0000ૈÏ\u0001\u0000\u0000\u0000ૉ\u0aca\u0005\u0094\u0000\u0000\u0acaો\u0005$\u0000\u0000ોૐ\u0003Òi\u0000ૌ્\u0005\u0004\u0000\u0000્\u0acf\u0003Òi\u0000\u0aceૌ\u0001\u0000\u0000\u0000\u0acf\u0ad2\u0001\u0000\u0000\u0000ૐ\u0ace\u0001\u0000\u0000\u0000ૐ\u0ad1\u0001\u0000\u0000\u0000\u0ad1૱\u0001\u0000\u0000\u0000\u0ad2ૐ\u0001\u0000\u0000\u0000\u0ad3\u0ad4\u0005\u0094\u0000\u0000\u0ad4\u0ad5\u0005$\u0000\u0000\u0ad5\u0ada\u0003Ķ\u009b\u0000\u0ad6\u0ad7\u0005\u0004\u0000\u0000\u0ad7\u0ad9\u0003Ķ\u009b\u0000\u0ad8\u0ad6\u0001\u0000\u0000\u0000\u0ad9\u0adc\u0001\u0000\u0000\u0000\u0ada\u0ad8\u0001\u0000\u0000\u0000\u0ada\u0adb\u0001\u0000\u0000\u0000\u0adb૮\u0001\u0000\u0000\u0000\u0adc\u0ada\u0001\u0000\u0000\u0000\u0add\u0ade\u0005ſ\u0000\u0000\u0ade૯\u0005Ĝ\u0000\u0000\u0adfૠ\u0005ſ\u0000\u0000ૠ૯\u0005I\u0000\u0000ૡૢ\u0005\u0095\u0000\u0000ૢૣ\u0005Ĭ\u0000\u0000ૣ\u0ae4\u0005\u0002\u0000\u0000\u0ae4૩\u0003Øl\u0000\u0ae5૦\u0005\u0004\u0000\u0000૦૨\u0003Øl\u0000૧\u0ae5\u0001\u0000\u0000\u0000૨૫\u0001\u0000\u0000\u0000૩૧\u0001\u0000\u0000\u0000૩૪\u0001\u0000\u0000\u0000૪૬\u0001\u0000\u0000\u0000૫૩\u0001\u0000\u0000\u0000૬૭\u0005\u0003\u0000\u0000૭૯\u0001\u0000\u0000\u0000૮\u0add\u0001\u0000\u0000\u0000૮\u0adf\u0001\u0000\u0000\u0000૮ૡ\u0001\u0000\u0000\u0000૮૯\u0001\u0000\u0000\u0000૯૱\u0001\u0000\u0000\u0000૰ૉ\u0001\u0000\u0000\u0000૰\u0ad3\u0001\u0000\u0000\u0000૱Ñ\u0001\u0000\u0000\u0000\u0af2\u0af5\u0003Ôj\u0000\u0af3\u0af5\u0003ł¡\u0000\u0af4\u0af2\u0001\u0000\u0000\u0000\u0af4\u0af3\u0001\u0000\u0000\u0000\u0af5Ó\u0001\u0000\u0000\u0000\u0af6\u0af7\u0007\u0015\u0000\u0000\u0af7\u0af8\u0005\u0002\u0000\u0000\u0af8૽\u0003Øl\u0000ૹૺ\u0005\u0004\u0000\u0000ૺૼ\u0003Øl\u0000ૻૹ\u0001\u0000\u0000\u0000ૼ૿\u0001\u0000\u0000\u0000૽ૻ\u0001\u0000\u0000\u0000૽૾\u0001\u0000\u0000\u0000૾\u0b00\u0001\u0000\u0000\u0000૿૽\u0001\u0000\u0000\u0000\u0b00ଁ\u0005\u0003\u0000\u0000ଁଐ\u0001\u0000\u0000\u0000ଂଃ\u0005\u0095\u0000\u0000ଃ\u0b04\u0005Ĭ\u0000\u0000\u0b04ଅ\u0005\u0002\u0000\u0000ଅଊ\u0003Ök\u0000ଆଇ\u0005\u0004\u0000\u0000ଇଉ\u0003Ök\u0000ଈଆ\u0001\u0000\u0000\u0000ଉଌ\u0001\u0000\u0000\u0000ଊଈ\u0001\u0000\u0000\u0000ଊଋ\u0001\u0000\u0000\u0000ଋ\u0b0d\u0001\u0000\u0000\u0000ଌଊ\u0001\u0000\u0000\u0000\u0b0d\u0b0e\u0005\u0003\u0000\u0000\u0b0eଐ\u0001\u0000\u0000\u0000ଏ\u0af6\u0001\u0000\u0000\u0000ଏଂ\u0001\u0000\u0000\u0000ଐÕ\u0001\u0000\u0000\u0000\u0b11ଔ\u0003Ôj\u0000\u0b12ଔ\u0003Øl\u0000ଓ\u0b11\u0001\u0000\u0000\u0000ଓ\u0b12\u0001\u0000\u0000\u0000ଔ×\u0001\u0000\u0000\u0000କଞ\u0005\u0002\u0000\u0000ଖଛ\u0003ł¡\u0000ଗଘ\u0005\u0004\u0000\u0000ଘଚ\u0003ł¡\u0000ଙଗ\u0001\u0000\u0000\u0000ଚଝ\u0001\u0000\u0000\u0000ଛଙ\u0001\u0000\u0000\u0000ଛଜ\u0001\u0000\u0000\u0000ଜଟ\u0001\u0000\u0000\u0000ଝଛ\u0001\u0000\u0000\u0000ଞଖ\u0001\u0000\u0000\u0000ଞଟ\u0001\u0000\u0000\u0000ଟଠ\u0001\u0000\u0000\u0000ଠଣ\u0005\u0003\u0000\u0000ଡଣ\u0003ł¡\u0000ଢକ\u0001\u0000\u0000\u0000ଢଡ\u0001\u0000\u0000\u0000ଣÙ\u0001\u0000\u0000\u0000ତଥ\u0005ø\u0000\u0000ଥଦ\u0005\u0002\u0000\u0000ଦଧ\u0003ĸ\u009c\u0000ଧନ\u0005\u0088\u0000\u0000ନ\u0b29\u0003Ün\u0000\u0b29ପ\u0005¡\u0000\u0000ପଫ\u0005\u0002\u0000\u0000ଫର\u0003Þo\u0000ବଭ\u0005\u0004\u0000\u0000ଭଯ\u0003Þo\u0000ମବ\u0001\u0000\u0000\u0000ଯଲ\u0001\u0000\u0000\u0000ରମ\u0001\u0000\u0000\u0000ର\u0b31\u0001\u0000\u0000\u0000\u0b31ଳ\u0001\u0000\u0000\u0000ଲର\u0001\u0000\u0000\u0000ଳ\u0b34\u0005\u0003\u0000\u0000\u0b34ଵ\u0005\u0003\u0000\u0000ଵÛ\u0001\u0000\u0000\u0000ଶୃ\u0003ƾß\u0000ଷସ\u0005\u0002\u0000\u0000ସଽ\u0003ƾß\u0000ହ\u0b3a\u0005\u0004\u0000\u0000\u0b3a଼\u0003ƾß\u0000\u0b3bହ\u0001\u0000\u0000\u0000଼ି\u0001\u0000\u0000\u0000ଽ\u0b3b\u0001\u0000\u0000\u0000ଽା\u0001\u0000\u0000\u0000ାୀ\u0001\u0000\u0000\u0000ିଽ\u0001\u0000\u0000\u0000ୀୁ\u0005\u0003\u0000\u0000ୁୃ\u0001\u0000\u0000\u0000ୂଶ\u0001\u0000\u0000\u0000ୂଷ\u0001\u0000\u0000\u0000ୃÝ\u0001\u0000\u0000\u0000ୄ\u0b49\u0003ł¡\u0000\u0b45େ\u0005\u0016\u0000\u0000\u0b46\u0b45\u0001\u0000\u0000\u0000\u0b46େ\u0001\u0000\u0000\u0000େୈ\u0001\u0000\u0000\u0000ୈ\u0b4a\u0003ƾß\u0000\u0b49\u0b46\u0001\u0000\u0000\u0000\u0b49\u0b4a\u0001\u0000\u0000\u0000\u0b4aß\u0001\u0000\u0000\u0000ୋ୍\u0005Ũ\u0000\u0000ୌ\u0b4e\u0003âq\u0000୍ୌ\u0001\u0000\u0000\u0000୍\u0b4e\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0001\u0000\u0000\u0000\u0b4f\u0b50\u0005\u0002\u0000\u0000\u0b50\u0b51\u0003är\u0000\u0b51ୖ\u0005\u0003\u0000\u0000\u0b52\u0b54\u0005\u0016\u0000\u0000\u0b53\u0b52\u0001\u0000\u0000\u0000\u0b53\u0b54\u0001\u0000\u0000\u0000\u0b54୕\u0001\u0000\u0000\u0000୕ୗ\u0003ƾß\u0000ୖ\u0b53\u0001\u0000\u0000\u0000ୖୗ\u0001\u0000\u0000\u0000ୗá\u0001\u0000\u0000\u0000\u0b58\u0b59\u0007\u0016\u0000\u0000\u0b59\u0b5a\u0005ã\u0000\u0000\u0b5aã\u0001\u0000\u0000\u0000\u0b5b\u0b5e\u0003æs\u0000ଡ଼\u0b5e\u0003èt\u0000ଢ଼\u0b5b\u0001\u0000\u0000\u0000ଢ଼ଡ଼\u0001\u0000\u0000\u0000\u0b5eå\u0001\u0000\u0000\u0000ୟୠ\u0003ìv\u0000ୠୡ\u0005\u0088\u0000\u0000ୡୢ\u0003îw\u0000ୢୣ\u0005¡\u0000\u0000ୣ\u0b64\u0005\u0002\u0000\u0000\u0b64୩\u0003ðx\u0000\u0b65୦\u0005\u0004\u0000\u0000୦୨\u0003ðx\u0000୧\u0b65\u0001\u0000\u0000\u0000୨୫\u0001\u0000\u0000\u0000୩୧\u0001\u0000\u0000\u0000୩୪\u0001\u0000\u0000\u0000୪୬\u0001\u0000\u0000\u0000୫୩\u0001\u0000\u0000\u0000୬୭\u0005\u0003\u0000\u0000୭ç\u0001\u0000\u0000\u0000୮୯\u0005\u0002\u0000\u0000୯୴\u0003ìv\u0000୰ୱ\u0005\u0004\u0000\u0000ୱ୳\u0003ìv\u0000୲୰\u0001\u0000\u0000\u0000୳୶\u0001\u0000\u0000\u0000୴୲\u0001\u0000\u0000\u0000୴୵\u0001\u0000\u0000\u0000୵୷\u0001\u0000\u0000\u0000୶୴\u0001\u0000\u0000\u0000୷\u0b78\u0005\u0003\u0000\u0000\u0b78\u0b79\u0005\u0088\u0000\u0000\u0b79\u0b7a\u0003îw\u0000\u0b7a\u0b7b\u0005¡\u0000\u0000\u0b7b\u0b7c\u0005\u0002\u0000\u0000\u0b7c\u0b81\u0003êu\u0000\u0b7d\u0b7e\u0005\u0004\u0000\u0000\u0b7e\u0b80\u0003êu\u0000\u0b7f\u0b7d\u0001\u0000\u0000\u0000\u0b80ஃ\u0001\u0000\u0000\u0000\u0b81\u0b7f\u0001\u0000\u0000\u0000\u0b81ஂ\u0001\u0000\u0000\u0000ஂ\u0b84\u0001\u0000\u0000\u0000ஃ\u0b81\u0001\u0000\u0000\u0000\u0b84அ\u0005\u0003\u0000\u0000அé\u0001\u0000\u0000\u0000ஆஇ\u0005\u0002\u0000\u0000இ\u0b8c\u0003òy\u0000ஈஉ\u0005\u0004\u0000\u0000உ\u0b8b\u0003òy\u0000ஊஈ\u0001\u0000\u0000\u0000\u0b8bஎ\u0001\u0000\u0000\u0000\u0b8cஊ\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0001\u0000\u0000\u0000\u0b8dஏ\u0001\u0000\u0000\u0000எ\u0b8c\u0001\u0000\u0000\u0000ஏ\u0b91\u0005\u0003\u0000\u0000ஐஒ\u0003ôz\u0000\u0b91ஐ\u0001\u0000\u0000\u0000\u0b91ஒ\u0001\u0000\u0000\u0000ஒë\u0001\u0000\u0000\u0000ஓஔ\u0003ǂá\u0000ஔí\u0001\u0000\u0000\u0000க\u0b96\u0003ǂá\u0000\u0b96ï\u0001\u0000\u0000\u0000\u0b97ங\u0003òy\u0000\u0b98ச\u0003ôz\u0000ங\u0b98\u0001\u0000\u0000\u0000ஙச\u0001\u0000\u0000\u0000சñ\u0001\u0000\u0000\u0000\u0b9bஜ\u0003Ĭ\u0096\u0000ஜó\u0001\u0000\u0000\u0000\u0b9dட\u0005\u0016\u0000\u0000ஞ\u0b9d\u0001\u0000\u0000\u0000ஞட\u0001\u0000\u0000\u0000ட\u0ba0\u0001\u0000\u0000\u0000\u0ba0\u0ba1\u0003ƾß\u0000\u0ba1õ\u0001\u0000\u0000\u0000\u0ba2ண\u0005¹\u0000\u0000ண\u0ba5\u0005Ŷ\u0000\u0000த\u0ba6\u0005î\u0000\u0000\u0ba5த\u0001\u0000\u0000\u0000\u0ba5\u0ba6\u0001\u0000\u0000\u0000\u0ba6\u0ba7\u0001\u0000\u0000\u0000\u0ba7ந\u0003ƼÞ\u0000நற\u0005\u0002\u0000\u0000னம\u0003ł¡\u0000ப\u0bab\u0005\u0004\u0000\u0000\u0bab\u0bad\u0003ł¡\u0000\u0bacப\u0001\u0000\u0000\u0000\u0badர\u0001\u0000\u0000\u0000ம\u0bac\u0001\u0000\u0000\u0000மய\u0001\u0000\u0000\u0000யல\u0001\u0000\u0000\u0000ரம\u0001\u0000\u0000\u0000றன\u0001\u0000\u0000\u0000றல\u0001\u0000\u0000\u0000லள\u0001\u0000\u0000\u0000ளழ\u0005\u0003\u0000\u0000ழீ\u0003ǂá\u0000வஷ\u0005\u0016\u0000\u0000ஶவ\u0001\u0000\u0000\u0000ஶஷ\u0001\u0000\u0000\u0000ஷஸ\u0001\u0000\u0000\u0000ஸ\u0bbd\u0003ǂá\u0000ஹ\u0bba\u0005\u0004\u0000\u0000\u0bba\u0bbc\u0003ǂá\u0000\u0bbbஹ\u0001\u0000\u0000\u0000\u0bbcி\u0001\u0000\u0000\u0000\u0bbd\u0bbb\u0001\u0000\u0000\u0000\u0bbdா\u0001\u0000\u0000\u0000ாு\u0001\u0000\u0000\u0000ி\u0bbd\u0001\u0000\u0000\u0000ீஶ\u0001\u0000\u0000\u0000ீு\u0001\u0000\u0000\u0000ு÷\u0001\u0000\u0000\u0000ூ\u0bc3\u0007\u0017\u0000\u0000\u0bc3ù\u0001\u0000\u0000\u0000\u0bc4ெ\u0005¹\u0000\u0000\u0bc5\u0bc4\u0001\u0000\u0000\u0000\u0bc5ெ\u0001\u0000\u0000\u0000ெே\u0001\u0000\u0000\u0000ேோ\u0003Ĕ\u008a\u0000ைொ\u0003ü~\u0000\u0bc9ை\u0001\u0000\u0000\u0000ொ்\u0001\u0000\u0000\u0000ோ\u0bc9\u0001\u0000\u0000\u0000ோௌ\u0001\u0000\u0000\u0000ௌû\u0001\u0000\u0000\u0000்ோ\u0001\u0000\u0000\u0000\u0bce\u0bd2\u0003þ\u007f\u0000\u0bcf\u0bd2\u0003Úm\u0000ௐ\u0bd2\u0003àp\u0000\u0bd1\u0bce\u0001\u0000\u0000\u0000\u0bd1\u0bcf\u0001\u0000\u0000\u0000\u0bd1ௐ\u0001\u0000\u0000\u0000\u0bd2ý\u0001\u0000\u0000\u0000\u0bd3\u0bd4\u0003Ā\u0080\u0000\u0bd4\u0bd6\u0005´\u0000\u0000\u0bd5ௗ\u0005¹\u0000\u0000\u0bd6\u0bd5\u0001\u0000\u0000\u0000\u0bd6ௗ\u0001\u0000\u0000\u0000ௗ\u0bd8\u0001\u0000\u0000\u0000\u0bd8\u0bda\u0003Ĕ\u008a\u0000\u0bd9\u0bdb\u0003Ă\u0081\u0000\u0bda\u0bd9\u0001\u0000\u0000\u0000\u0bda\u0bdb\u0001\u0000\u0000\u0000\u0bdb\u0be5\u0001\u0000\u0000\u0000\u0bdc\u0bdd\u0005Þ\u0000\u0000\u0bdd\u0bde\u0003Ā\u0080\u0000\u0bde\u0be0\u0005´\u0000\u0000\u0bdf\u0be1\u0005¹\u0000\u0000\u0be0\u0bdf\u0001\u0000\u0000\u0000\u0be0\u0be1\u0001\u0000\u0000\u0000\u0be1\u0be2\u0001\u0000\u0000\u0000\u0be2\u0be3\u0003Ĕ\u008a\u0000\u0be3\u0be5\u0001\u0000\u0000\u0000\u0be4\u0bd3\u0001\u0000\u0000\u0000\u0be4\u0bdc\u0001\u0000\u0000\u0000\u0be5ÿ\u0001\u0000\u0000\u0000௦௨\u0005¦\u0000\u0000௧௦\u0001\u0000\u0000\u0000௧௨\u0001\u0000\u0000\u0000௨\u0bff\u0001\u0000\u0000\u0000௩\u0bff\u0005H\u0000\u0000௪௬\u0005½\u0000\u0000௫௭\u0005î\u0000\u0000௬௫\u0001\u0000\u0000\u0000௬௭\u0001\u0000\u0000\u0000௭\u0bff\u0001\u0000\u0000\u0000௮௰\u0005½\u0000\u0000௯௮\u0001\u0000\u0000\u0000௯௰\u0001\u0000\u0000\u0000௰௱\u0001\u0000\u0000\u0000௱\u0bff\u0005ĥ\u0000\u0000௲௴\u0005ė\u0000\u0000௳௵\u0005î\u0000\u0000௴௳\u0001\u0000\u0000\u0000௴௵\u0001\u0000\u0000\u0000௵\u0bff\u0001\u0000\u0000\u0000௶௸\u0005\u008e\u0000\u0000௷௹\u0005î\u0000\u0000௸௷\u0001\u0000\u0000\u0000௸௹\u0001\u0000\u0000\u0000௹\u0bff\u0001\u0000\u0000\u0000௺\u0bfc\u0005½\u0000\u0000\u0bfb௺\u0001\u0000\u0000\u0000\u0bfb\u0bfc\u0001\u0000\u0000\u0000\u0bfc\u0bfd\u0001\u0000\u0000\u0000\u0bfd\u0bff\u0005\u0011\u0000\u0000\u0bfe௧\u0001\u0000\u0000\u0000\u0bfe௩\u0001\u0000\u0000\u0000\u0bfe௪\u0001\u0000\u0000\u0000\u0bfe௯\u0001\u0000\u0000\u0000\u0bfe௲\u0001\u0000\u0000\u0000\u0bfe௶\u0001\u0000\u0000\u0000\u0bfe\u0bfb\u0001\u0000\u0000\u0000\u0bffā\u0001\u0000\u0000\u0000ఀఁ\u0005ç\u0000\u0000ఁఅ\u0003Ŋ¥\u0000ంః\u0005Ů\u0000\u0000ఃఅ\u0003Ĉ\u0084\u0000ఄఀ\u0001\u0000\u0000\u0000ఄం\u0001\u0000\u0000\u0000అă\u0001\u0000\u0000\u0000ఆఇ\u0005Ň\u0000\u0000ఇఉ\u0005\u0002\u0000\u0000ఈఊ\u0003Ć\u0083\u0000ఉఈ\u0001\u0000\u0000\u0000ఉఊ\u0001\u0000\u0000\u0000ఊఋ\u0001\u0000\u0000\u0000ఋఐ\u0005\u0003\u0000\u0000ఌ\u0c0d\u0005ď\u0000\u0000\u0c0dఎ\u0005\u0002\u0000\u0000ఎఏ\u0005Ʀ\u0000\u0000ఏ\u0c11\u0005\u0003\u0000\u0000ఐఌ\u0001\u0000\u0000\u0000ఐ\u0c11\u0001\u0000\u0000\u0000\u0c11ą\u0001\u0000\u0000\u0000ఒఔ\u0005Ɛ\u0000\u0000ఓఒ\u0001\u0000\u0000\u0000ఓఔ\u0001\u0000\u0000\u0000ఔక\u0001\u0000\u0000\u0000కఖ\u0007\u0018\u0000\u0000ఖఫ\u0005÷\u0000\u0000గఘ\u0003ł¡\u0000ఘఙ\u0005Ğ\u0000\u0000ఙఫ\u0001\u0000\u0000\u0000చఛ\u0005\"\u0000\u0000ఛజ\u0005Ʀ\u0000\u0000జఝ\u0005í\u0000\u0000ఝఞ\u0005å\u0000\u0000ఞధ\u0005Ʀ\u0000\u0000టథ\u0005ç\u0000\u0000ఠద\u0003ǂá\u0000డఢ\u0003ƼÞ\u0000ఢణ\u0005\u0002\u0000\u0000ణత\u0005\u0003\u0000\u0000తద\u0001\u0000\u0000\u0000థఠ\u0001\u0000\u0000\u0000థడ\u0001\u0000\u0000\u0000దన\u0001\u0000\u0000\u0000ధట\u0001\u0000\u0000\u0000ధన\u0001\u0000\u0000\u0000నఫ\u0001\u0000\u0000\u0000\u0c29ఫ\u0003ł¡\u0000పఓ\u0001\u0000\u0000\u0000పగ\u0001\u0000\u0000\u0000పచ\u0001\u0000\u0000\u0000ప\u0c29\u0001\u0000\u0000\u0000ఫć\u0001\u0000\u0000\u0000బభ\u0005\u0002\u0000\u0000భమ\u0003Ċ\u0085\u0000మయ\u0005\u0003\u0000\u0000యĉ\u0001\u0000\u0000\u0000రవ\u0003ƾß\u0000ఱల\u0005\u0004\u0000\u0000లఴ\u0003ƾß\u0000ళఱ\u0001\u0000\u0000\u0000ఴష\u0001\u0000\u0000\u0000వళ\u0001\u0000\u0000\u0000వశ\u0001\u0000\u0000\u0000శċ\u0001\u0000\u0000\u0000షవ\u0001\u0000\u0000\u0000సహ\u0005\u0002\u0000\u0000హా\u0003Ď\u0087\u0000\u0c3a\u0c3b\u0005\u0004\u0000\u0000\u0c3bఽ\u0003Ď\u0087\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000ఽీ\u0001\u0000\u0000\u0000ా\u0c3c\u0001\u0000\u0000\u0000ాి\u0001\u0000\u0000\u0000ిు\u0001\u0000\u0000\u0000ీా\u0001\u0000\u0000\u0000ుూ\u0005\u0003\u0000\u0000ూč\u0001\u0000\u0000\u0000ృ\u0c45\u0003ƾß\u0000ౄె\u0007\u0011\u0000\u0000\u0c45ౄ\u0001\u0000\u0000\u0000\u0c45ె\u0001\u0000\u0000\u0000ెď\u0001\u0000\u0000\u0000ేై\u0005\u0002\u0000\u0000ై్\u0003Ē\u0089\u0000\u0c49ొ\u0005\u0004\u0000\u0000ొౌ\u0003Ē\u0089\u0000ో\u0c49\u0001\u0000\u0000\u0000ౌ\u0c4f\u0001\u0000\u0000\u0000్ో\u0001\u0000\u0000\u0000్\u0c4e\u0001\u0000\u0000\u0000\u0c4e\u0c50\u0001\u0000\u0000\u0000\u0c4f్\u0001\u0000\u0000\u0000\u0c50\u0c51\u0005\u0003\u0000\u0000\u0c51đ\u0001\u0000\u0000\u0000\u0c52\u0c54\u0003ǂá\u0000\u0c53ౕ\u0003^/\u0000\u0c54\u0c53\u0001\u0000\u0000\u0000\u0c54ౕ\u0001\u0000\u0000\u0000ౕē\u0001\u0000\u0000\u0000ౖౘ\u0003\u0098L\u0000\u0c57ౙ\u0003Îg\u0000ౘ\u0c57\u0001\u0000\u0000\u0000ౘౙ\u0001\u0000\u0000\u0000ౙ\u0c5b\u0001\u0000\u0000\u0000ౚ\u0c5c\u0003Ė\u008b\u0000\u0c5bౚ\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0001\u0000\u0000\u0000\u0c5c\u0c5e\u0001\u0000\u0000\u0000\u0c5d\u0c5f\u0003Ą\u0082\u0000\u0c5e\u0c5d\u0001\u0000\u0000\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5fౠ\u0001\u0000\u0000\u0000ౠౡ\u0003Ħ\u0093\u0000ౡ\u0c75\u0001\u0000\u0000\u0000ౢౣ\u0005\u0002\u0000\u0000ౣ\u0c64\u0003b1\u0000\u0c64౦\u0005\u0003\u0000\u0000\u0c65౧\u0003Ą\u0082\u0000౦\u0c65\u0001\u0000\u0000\u0000౦౧\u0001\u0000\u0000\u0000౧౨\u0001\u0000\u0000\u0000౨౩\u0003Ħ\u0093\u0000౩\u0c75\u0001\u0000\u0000\u0000౪౫\u0005\u0002\u0000\u0000౫౬\u0003ú}\u0000౬౮\u0005\u0003\u0000\u0000౭౯\u0003Ą\u0082\u0000౮౭\u0001\u0000\u0000\u0000౮౯\u0001\u0000\u0000\u0000౯\u0c70\u0001\u0000\u0000\u0000\u0c70\u0c71\u0003Ħ\u0093\u0000\u0c71\u0c75\u0001\u0000\u0000\u0000\u0c72\u0c75\u0003Ę\u008c\u0000\u0c73\u0c75\u0003Ĥ\u0092\u0000\u0c74ౖ\u0001\u0000\u0000\u0000\u0c74ౢ\u0001\u0000\u0000\u0000\u0c74౪\u0001\u0000\u0000\u0000\u0c74\u0c72\u0001\u0000\u0000\u0000\u0c74\u0c73\u0001\u0000\u0000\u0000\u0c75ĕ\u0001\u0000\u0000\u0000\u0c76౷\u0005ſ\u0000\u0000౷౸\u0003~?\u0000౸ė\u0001\u0000\u0000\u0000౹౺\u0005Ű\u0000\u0000౺౿\u0003ł¡\u0000౻౼\u0005\u0004\u0000\u0000౼౾\u0003ł¡\u0000౽౻\u0001\u0000\u0000\u0000౾ಁ\u0001\u0000\u0000\u0000౿౽\u0001\u0000\u0000\u0000౿ಀ\u0001\u0000\u0000\u0000ಀಂ\u0001\u0000\u0000\u0000ಁ౿\u0001\u0000\u0000\u0000ಂಃ\u0003Ħ\u0093\u0000ಃę\u0001\u0000\u0000\u0000಄ಅ\u0005Ņ\u0000\u0000ಅಇ\u0003\u0098L\u0000ಆಈ\u0003Ĝ\u008e\u0000ಇಆ\u0001\u0000\u0000\u0000ಇಈ\u0001\u0000\u0000\u0000ಈಘ\u0001\u0000\u0000\u0000ಉಊ\u0005Ņ\u0000\u0000ಊಋ\u0005\u0002\u0000\u0000ಋಌ\u0003\u0098L\u0000ಌಎ\u0005\u0003\u0000\u0000\u0c8dಏ\u0003Ĝ\u008e\u0000ಎ\u0c8d\u0001\u0000\u0000\u0000ಎಏ\u0001\u0000\u0000\u0000ಏಘ\u0001\u0000\u0000\u0000ಐ\u0c91\u0005Ņ\u0000\u0000\u0c91ಒ\u0005\u0002\u0000\u0000ಒಓ\u0003b1\u0000ಓಕ\u0005\u0003\u0000\u0000ಔಖ\u0003Ĝ\u008e\u0000ಕಔ\u0001\u0000\u0000\u0000ಕಖ\u0001\u0000\u0000\u0000ಖಘ\u0001\u0000\u0000\u0000ಗ಄\u0001\u0000\u0000\u0000ಗಉ\u0001\u0000\u0000\u0000ಗಐ\u0001\u0000\u0000\u0000ಘě\u0001\u0000\u0000\u0000ಙಚ\u0005ſ\u0000\u0000ಚಛ\u0005į\u0000\u0000ಛ\u0cb4\u0005ô\u0000\u0000ಜಝ\u0007\u0019\u0000\u0000ಝಱ\u0005$\u0000\u0000ಞಟ\u0005\u0002\u0000\u0000ಟತ\u0003ł¡\u0000ಠಡ\u0005\u0004\u0000\u0000ಡಣ\u0003ł¡\u0000ಢಠ\u0001\u0000\u0000\u0000ಣದ\u0001\u0000\u0000\u0000ತಢ\u0001\u0000\u0000\u0000ತಥ\u0001\u0000\u0000\u0000ಥಧ\u0001\u0000\u0000\u0000ದತ\u0001\u0000\u0000\u0000ಧನ\u0005\u0003\u0000\u0000ನಲ\u0001\u0000\u0000\u0000\u0ca9ಬ\u0003ł¡\u0000ಪಫ\u0005\u0004\u0000\u0000ಫಭ\u0003ł¡\u0000ಬಪ\u0001\u0000\u0000\u0000ಭಮ\u0001\u0000\u0000\u0000ಮಬ\u0001\u0000\u0000\u0000ಮಯ\u0001\u0000\u0000\u0000ಯಲ\u0001\u0000\u0000\u0000ರಲ\u0003ł¡\u0000ಱಞ\u0001\u0000\u0000\u0000ಱ\u0ca9\u0001\u0000\u0000\u0000ಱರ\u0001\u0000\u0000\u0000ಲ\u0cb4\u0001\u0000\u0000\u0000ಳಙ\u0001\u0000\u0000\u0000ಳಜ\u0001\u0000\u0000\u0000\u0cb4ೌ\u0001\u0000\u0000\u0000ವಶ\u0007\u001a\u0000\u0000ಶೊ\u0005$\u0000\u0000ಷಸ\u0005\u0002\u0000\u0000ಸಽ\u0003¤R\u0000ಹ\u0cba\u0005\u0004\u0000\u0000\u0cba಼\u0003¤R\u0000\u0cbbಹ\u0001\u0000\u0000\u0000಼ಿ\u0001\u0000\u0000\u0000ಽ\u0cbb\u0001\u0000\u0000\u0000ಽಾ\u0001\u0000\u0000\u0000ಾೀ\u0001\u0000\u0000\u0000ಿಽ\u0001\u0000\u0000\u0000ೀು\u0005\u0003\u0000\u0000ುೋ\u0001\u0000\u0000\u0000ೂ\u0cc5\u0003¤R\u0000ೃೄ\u0005\u0004\u0000\u0000ೄೆ\u0003¤R\u0000\u0cc5ೃ\u0001\u0000\u0000\u0000ೆೇ\u0001\u0000\u0000\u0000ೇ\u0cc5\u0001\u0000\u0000\u0000ೇೈ\u0001\u0000\u0000\u0000ೈೋ\u0001\u0000\u0000\u0000\u0cc9ೋ\u0003¤R\u0000ೊಷ\u0001\u0000\u0000\u0000ೊೂ\u0001\u0000\u0000\u0000ೊ\u0cc9\u0001\u0000\u0000\u0000ೋ್\u0001\u0000\u0000\u0000ೌವ\u0001\u0000\u0000\u0000ೌ್\u0001\u0000\u0000\u0000್ĝ\u0001\u0000\u0000\u0000\u0cce\u0ccf\u0003ǂá\u0000\u0ccf\u0cd0\u0005Ɲ\u0000\u0000\u0cd0\u0cd1\u0003Ě\u008d\u0000\u0cd1ğ\u0001\u0000\u0000\u0000\u0cd2ೕ\u0003Ě\u008d\u0000\u0cd3ೕ\u0003Ğ\u008f\u0000\u0cd4\u0cd2\u0001\u0000\u0000\u0000\u0cd4\u0cd3\u0001\u0000\u0000\u0000ೕġ\u0001\u0000\u0000\u0000ೖ\u0cd9\u0003Ġ\u0090\u0000\u0cd7\u0cd9\u0003ņ£\u0000\u0cd8ೖ\u0001\u0000\u0000\u0000\u0cd8\u0cd7\u0001\u0000\u0000\u0000\u0cd9ģ\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0003ƺÝ\u0000\u0cdb\u0ce4\u0005\u0002\u0000\u0000\u0cdcೡ\u0003Ģ\u0091\u0000\u0cddೞ\u0005\u0004\u0000\u0000ೞೠ\u0003Ģ\u0091\u0000\u0cdf\u0cdd\u0001\u0000\u0000\u0000ೠೣ\u0001\u0000\u0000\u0000ೡ\u0cdf\u0001\u0000\u0000\u0000ೡೢ\u0001\u0000\u0000\u0000ೢ\u0ce5\u0001\u0000\u0000\u0000ೣೡ\u0001\u0000\u0000\u0000\u0ce4\u0cdc\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0001\u0000\u0000\u0000\u0ce5೦\u0001\u0000\u0000\u0000೦೧\u0005\u0003\u0000\u0000೧೨\u0003Ħ\u0093\u0000೨ĥ\u0001\u0000\u0000\u0000೩೫\u0005\u0016\u0000\u0000೪೩\u0001\u0000\u0000\u0000೪೫\u0001\u0000\u0000\u0000೫೬\u0001\u0000\u0000\u0000೬೮\u0003Ǆâ\u0000೭೯\u0003Ĉ\u0084\u0000೮೭\u0001\u0000\u0000\u0000೮೯\u0001\u0000\u0000\u0000೯ೱ\u0001\u0000\u0000\u0000\u0cf0೪\u0001\u0000\u0000\u0000\u0cf0ೱ\u0001\u0000\u0000\u0000ೱħ\u0001\u0000\u0000\u0000ೲ\u0cf3\u0005ĝ\u0000\u0000\u0cf3\u0cf4\u0005\u008a\u0000\u0000\u0cf4\u0cf5\u0005ħ\u0000\u0000\u0cf5\u0cf9\u0003ǒé\u0000\u0cf6\u0cf7\u0005ſ\u0000\u0000\u0cf7\u0cf8\u0005Ĩ\u0000\u0000\u0cf8\u0cfa\u0003~?\u0000\u0cf9\u0cf6\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0001\u0000\u0000\u0000\u0cfaത\u0001\u0000\u0000\u0000\u0cfb\u0cfc\u0005ĝ\u0000\u0000\u0cfc\u0cfd\u0005\u008a\u0000\u0000\u0cfdഇ\u0005b\u0000\u0000\u0cfe\u0cff\u0005\u0082\u0000\u0000\u0cffഀ\u0005ŋ\u0000\u0000ഀഁ\u0005$\u0000\u0000ഁഅ\u0003ǒé\u0000ംഃ\u0005s\u0000\u0000ഃഄ\u0005$\u0000\u0000ഄആ\u0003ǒé\u0000അം\u0001\u0000\u0000\u0000അആ\u0001\u0000\u0000\u0000ആഈ\u0001\u0000\u0000\u0000ഇ\u0cfe\u0001\u0000\u0000\u0000ഇഈ\u0001\u0000\u0000\u0000ഈഎ\u0001\u0000\u0000\u0000ഉഊ\u00058\u0000\u0000ഊഋ\u0005²\u0000\u0000ഋഌ\u0005ŋ\u0000\u0000ഌ\u0d0d\u0005$\u0000\u0000\u0d0dഏ\u0003ǒé\u0000എഉ\u0001\u0000\u0000\u0000എഏ\u0001\u0000\u0000\u0000ഏക\u0001\u0000\u0000\u0000ഐ\u0d11\u0005Ì\u0000\u0000\u0d11ഒ\u0005¶\u0000\u0000ഒഓ\u0005ŋ\u0000\u0000ഓഔ\u0005$\u0000\u0000ഔഖ\u0003ǒé\u0000കഐ\u0001\u0000\u0000\u0000കഖ\u0001\u0000\u0000\u0000ഖഛ\u0001\u0000\u0000\u0000ഗഘ\u0005Á\u0000\u0000ഘങ\u0005ŋ\u0000\u0000ങച\u0005$\u0000\u0000ചജ\u0003ǒé\u0000ഛഗ\u0001\u0000\u0000\u0000ഛജ\u0001\u0000\u0000\u0000ജഡ\u0001\u0000\u0000\u0000ഝഞ\u0005â\u0000\u0000ഞട\u0005_\u0000\u0000ടഠ\u0005\u0016\u0000\u0000ഠഢ\u0003ǒé\u0000ഡഝ\u0001\u0000\u0000\u0000ഡഢ\u0001\u0000\u0000\u0000ഢത\u0001\u0000\u0000\u0000ണೲ\u0001\u0000\u0000\u0000ണ\u0cfb\u0001\u0000\u0000\u0000തĩ\u0001\u0000\u0000\u0000ഥപ\u0003Ĭ\u0096\u0000ദധ\u0005\u0004\u0000\u0000ധഩ\u0003Ĭ\u0096\u0000നദ\u0001\u0000\u0000\u0000ഩബ\u0001\u0000\u0000\u0000പന\u0001\u0000\u0000\u0000പഫ\u0001\u0000\u0000\u0000ഫī\u0001\u0000\u0000\u0000ബപ\u0001\u0000\u0000\u0000ഭല\u0003ƾß\u0000മയ\u0005\u0005\u0000\u0000യറ\u0003ƾß\u0000രമ\u0001\u0000\u0000\u0000റഴ\u0001\u0000\u0000\u0000ലര\u0001\u0000\u0000\u0000ലള\u0001\u0000\u0000\u0000ളĭ\u0001\u0000\u0000\u0000ഴല\u0001\u0000\u0000\u0000വഺ\u0003İ\u0098\u0000ശഷ\u0005\u0004\u0000\u0000ഷഹ\u0003İ\u0098\u0000സശ\u0001\u0000\u0000\u0000ഹ഼\u0001\u0000\u0000\u0000ഺസ\u0001\u0000\u0000\u0000ഺ഻\u0001\u0000\u0000\u0000഻į\u0001\u0000\u0000\u0000഼ഺ\u0001\u0000\u0000\u0000ഽീ\u0003Ĭ\u0096\u0000ാി\u0005ê\u0000\u0000ിു\u0003~?\u0000ീാ\u0001\u0000\u0000\u0000ീു\u0001\u0000\u0000\u0000ുı\u0001\u0000\u0000\u0000ൂൃ\u0003ƾß\u0000ൃൄ\u0005\u0005\u0000\u0000ൄെ\u0001\u0000\u0000\u0000\u0d45ൂ\u0001\u0000\u0000\u0000\u0d45െ\u0001\u0000\u0000\u0000െേ\u0001\u0000\u0000\u0000േൈ\u0003ƾß\u0000ൈĳ\u0001\u0000\u0000\u0000\u0d49ൊ\u0003ƾß\u0000ൊോ\u0005\u0005\u0000\u0000ോ്\u0001\u0000\u0000\u0000ൌ\u0d49\u0001\u0000\u0000\u0000ൌ്\u0001\u0000\u0000\u0000്ൎ\u0001\u0000\u0000\u0000ൎ൏\u0003ƾß\u0000൏ĵ\u0001\u0000\u0000\u0000\u0d50൘\u0003ł¡\u0000\u0d51\u0d53\u0005\u0016\u0000\u0000\u0d52\u0d51\u0001\u0000\u0000\u0000\u0d52\u0d53\u0001\u0000\u0000\u0000\u0d53ൖ\u0001\u0000\u0000\u0000ൔൗ\u0003ƾß\u0000ൕൗ\u0003Ĉ\u0084\u0000ൖൔ\u0001\u0000\u0000\u0000ൖൕ\u0001\u0000\u0000\u0000ൗ൙\u0001\u0000\u0000\u0000൘\u0d52\u0001\u0000\u0000\u0000൘൙\u0001\u0000\u0000\u0000൙ķ\u0001\u0000\u0000\u0000൚ൟ\u0003Ķ\u009b\u0000൛൜\u0005\u0004\u0000\u0000൜൞\u0003Ķ\u009b\u0000൝൛\u0001\u0000\u0000\u0000൞ൡ\u0001\u0000\u0000\u0000ൟ൝\u0001\u0000\u0000\u0000ൟൠ\u0001\u0000\u0000\u0000ൠĹ\u0001\u0000\u0000\u0000ൡൟ\u0001\u0000\u0000\u0000ൢൣ\u0005\u0002\u0000\u0000ൣ൨\u0003ļ\u009e\u0000\u0d64\u0d65\u0005\u0004\u0000\u0000\u0d65൧\u0003ļ\u009e\u0000൦\u0d64\u0001\u0000\u0000\u0000൧൪\u0001\u0000\u0000\u0000൨൦\u0001\u0000\u0000\u0000൨൩\u0001\u0000\u0000\u0000൩൫\u0001\u0000\u0000\u0000൪൨\u0001\u0000\u0000\u0000൫൬\u0005\u0003\u0000\u0000൬Ļ\u0001\u0000\u0000\u0000൭൰\u0003ľ\u009f\u0000൮൰\u0003ƊÅ\u0000൯൭\u0001\u0000\u0000\u0000൯൮\u0001\u0000\u0000\u0000൰Ľ\u0001\u0000\u0000\u0000൱ൿ\u0003ƼÞ\u0000൲൳\u0003ǂá\u0000൳൴\u0005\u0002\u0000\u0000൴൹\u0003ŀ \u0000൵൶\u0005\u0004\u0000\u0000൶൸\u0003ŀ \u0000൷൵\u0001\u0000\u0000\u0000൸ൻ\u0001\u0000\u0000\u0000൹൷\u0001\u0000\u0000\u0000൹ൺ\u0001\u0000\u0000\u0000ൺർ\u0001\u0000\u0000\u0000ൻ൹\u0001\u0000\u0000\u0000ർൽ\u0005\u0003\u0000\u0000ൽൿ\u0001\u0000\u0000\u0000ൾ൱\u0001\u0000\u0000\u0000ൾ൲\u0001\u0000\u0000\u0000ൿĿ\u0001\u0000\u0000\u0000\u0d80ඃ\u0003ƼÞ\u0000ඁඃ\u0003Ś\u00ad\u0000ං\u0d80\u0001\u0000\u0000\u0000ංඁ\u0001\u0000\u0000\u0000ඃŁ\u0001\u0000\u0000\u0000\u0d84අ\u0003Ŋ¥\u0000අŃ\u0001\u0000\u0000\u0000ආඇ\u0003ǂá\u0000ඇඈ\u0005Ɲ\u0000\u0000ඈඉ\u0003ł¡\u0000ඉŅ\u0001\u0000\u0000\u0000ඊඍ\u0003ł¡\u0000උඍ\u0003ń¢\u0000ඌඊ\u0001\u0000\u0000\u0000ඌඋ\u0001\u0000\u0000\u0000ඍŇ\u0001\u0000\u0000\u0000ඎඓ\u0003ł¡\u0000ඏඐ\u0005\u0004\u0000\u0000ඐඒ\u0003ł¡\u0000එඏ\u0001\u0000\u0000\u0000ඒඕ\u0001\u0000\u0000\u0000ඓඑ\u0001\u0000\u0000\u0000ඓඔ\u0001\u0000\u0000\u0000ඔŉ\u0001\u0000\u0000\u0000ඕඓ\u0001\u0000\u0000\u0000ඖ\u0d97\u0006¥\uffff\uffff\u0000\u0d97\u0d98\u0007\u001b\u0000\u0000\u0d98ඣ\u0003Ŋ¥\u0005\u0d99ක\u0005x\u0000\u0000කඛ\u0005\u0002\u0000\u0000ඛග\u0003b1\u0000ගඝ\u0005\u0003\u0000\u0000ඝඣ\u0001\u0000\u0000\u0000ඞච\u0003Ő¨\u0000ඟඡ\u0003Ō¦\u0000චඟ\u0001\u0000\u0000\u0000චඡ\u0001\u0000\u0000\u0000ඡඣ\u0001\u0000\u0000\u0000ජඖ\u0001\u0000\u0000\u0000ජ\u0d99\u0001\u0000\u0000\u0000ජඞ\u0001\u0000\u0000\u0000ඣඬ\u0001\u0000\u0000\u0000ඤඥ\n\u0002\u0000\u0000ඥඦ\u0005\u0010\u0000\u0000ඦණ\u0003Ŋ¥\u0003ටඨ\n\u0001\u0000\u0000ඨඩ\u0005ë\u0000\u0000ඩණ\u0003Ŋ¥\u0002ඪඤ\u0001\u0000\u0000\u0000ඪට\u0001\u0000\u0000\u0000ණථ\u0001\u0000\u0000\u0000ඬඪ\u0001\u0000\u0000\u0000ඬත\u0001\u0000\u0000\u0000තŋ\u0001\u0000\u0000\u0000ථඬ\u0001\u0000\u0000\u0000දන\u0003Ŏ§\u0000ධද\u0001\u0000\u0000\u0000ධන\u0001\u0000\u0000\u0000න\u0db2\u0001\u0000\u0000\u0000\u0db2ඳ\u0005\u001c\u0000\u0000ඳප\u0003Ő¨\u0000පඵ\u0005\u0010\u0000\u0000ඵබ\u0003Ő¨\u0000බข\u0001\u0000\u0000\u0000භඹ\u0003Ŏ§\u0000මභ\u0001\u0000\u0000\u0000මඹ\u0001\u0000\u0000\u0000ඹය\u0001\u0000\u0000\u0000යර\u0005¡\u0000\u0000ර\u0dbc\u0005\u0002\u0000\u0000\u0dbcශ\u0003ł¡\u0000ල\u0dbe\u0005\u0004\u0000\u0000\u0dbeව\u0003ł¡\u0000\u0dbfල\u0001\u0000\u0000\u0000වස\u0001\u0000\u0000\u0000ශ\u0dbf\u0001\u0000\u0000\u0000ශෂ\u0001\u0000\u0000\u0000ෂහ\u0001\u0000\u0000\u0000සශ\u0001\u0000\u0000\u0000හළ\u0005\u0003\u0000\u0000ළข\u0001\u0000\u0000\u0000ෆ\u0dc8\u0003Ŏ§\u0000\u0dc7ෆ\u0001\u0000\u0000\u0000\u0dc7\u0dc8\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9්\u0005¡\u0000\u0000්\u0dcb\u0005\u0002\u0000\u0000\u0dcb\u0dcc\u0003b1\u0000\u0dcc\u0dcd\u0005\u0003\u0000\u0000\u0dcdข\u0001\u0000\u0000\u0000\u0dceැ\u0003Ŏ§\u0000ා\u0dce\u0001\u0000\u0000\u0000ාැ\u0001\u0000\u0000\u0000ැෑ\u0001\u0000\u0000\u0000ෑි\u0005Ę\u0000\u0000ිข\u0003Ő¨\u0000ී\u0dd5\u0003Ŏ§\u0000ුී\u0001\u0000\u0000\u0000ු\u0dd5\u0001\u0000\u0000\u0000\u0dd5ූ\u0001\u0000\u0000\u0000ූ\u0dd7\u0007\u001c\u0000\u0000\u0dd7\u0de5\u0007\u001d\u0000\u0000ෘෙ\u0005\u0002\u0000\u0000ෙ෦\u0005\u0003\u0000\u0000ේෛ\u0005\u0002\u0000\u0000ෛ\u0de0\u0003ł¡\u0000ොෝ\u0005\u0004\u0000\u0000ෝෟ\u0003ł¡\u0000ෞො\u0001\u0000\u0000\u0000ෟ\u0de2\u0001\u0000\u0000\u0000\u0de0ෞ\u0001\u0000\u0000\u0000\u0de0\u0de1\u0001\u0000\u0000\u0000\u0de1\u0de3\u0001\u0000\u0000\u0000\u0de2\u0de0\u0001\u0000\u0000\u0000\u0de3\u0de4\u0005\u0003\u0000\u0000\u0de4෦\u0001\u0000\u0000\u0000\u0de5ෘ\u0001\u0000\u0000\u0000\u0de5ේ\u0001\u0000\u0000\u0000෦ข\u0001\u0000\u0000\u0000෧෩\u0003Ŏ§\u0000෨෧\u0001\u0000\u0000\u0000෨෩\u0001\u0000\u0000\u0000෩෪\u0001\u0000\u0000\u0000෪෫\u0007\u001c\u0000\u0000෫෮\u0003Ő¨\u0000෬෭\u0005r\u0000\u0000෭෯\u0003ǒé\u0000෮෬\u0001\u0000\u0000\u0000෮෯\u0001\u0000\u0000\u0000෯ข\u0001\u0000\u0000\u0000\u0df0ෲ\u0005±\u0000\u0000\u0df1ෳ\u0003Ŏ§\u0000ෲ\u0df1\u0001\u0000\u0000\u0000ෲෳ\u0001\u0000\u0000\u0000ෳ෴\u0001\u0000\u0000\u0000෴ข\u0005â\u0000\u0000\u0df5\u0df7\u0005±\u0000\u0000\u0df6\u0df8\u0003Ŏ§\u0000\u0df7\u0df6\u0001\u0000\u0000\u0000\u0df7\u0df8\u0001\u0000\u0000\u0000\u0df8\u0df9\u0001\u0000\u0000\u0000\u0df9ข\u0007\u001e\u0000\u0000\u0dfa\u0dfc\u0005±\u0000\u0000\u0dfb\u0dfd\u0003Ŏ§\u0000\u0dfc\u0dfb\u0001\u0000\u0000\u0000\u0dfc\u0dfd\u0001\u0000\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe\u0dff\u0005i\u0000\u0000\u0dff\u0e00\u0005\u008d\u0000\u0000\u0e00ข\u0003Ő¨\u0000กධ\u0001\u0000\u0000\u0000กම\u0001\u0000\u0000\u0000ก\u0dc7\u0001\u0000\u0000\u0000กා\u0001\u0000\u0000\u0000กු\u0001\u0000\u0000\u0000ก෨\u0001\u0000\u0000\u0000ก\u0df0\u0001\u0000\u0000\u0000ก\u0df5\u0001\u0000\u0000\u0000ก\u0dfa\u0001\u0000\u0000\u0000ขō\u0001\u0000\u0000\u0000ฃค\u0007\u001b\u0000\u0000คŏ\u0001\u0000\u0000\u0000ฅฆ\u0006¨\uffff\uffff\u0000ฆช\u0003Ŗ«\u0000งจ\u0007\u001f\u0000\u0000จช\u0003Ő¨\bฉฅ\u0001\u0000\u0000\u0000ฉง\u0001\u0000\u0000\u0000ชฤ\u0001\u0000\u0000\u0000ซฌ\n\u0007\u0000\u0000ฌญ\u0007 \u0000\u0000ญร\u0003Ő¨\bฎฏ\n\u0006\u0000\u0000ฏฐ\u0007!\u0000\u0000ฐร\u0003Ő¨\u0007ฑฒ\n\u0005\u0000\u0000ฒณ\u0003Œ©\u0000ณด\u0003Ő¨\u0006ดร\u0001\u0000\u0000\u0000ตถ\n\u0004\u0000\u0000ถท\u0005ƕ\u0000\u0000ทร\u0003Ő¨\u0005ธน\n\u0003\u0000\u0000นบ\u0005ƙ\u0000\u0000บร\u0003Ő¨\u0004ปผ\n\u0002\u0000\u0000ผฝ\u0005Ɩ\u0000\u0000ฝร\u0003Ő¨\u0003พฟ\n\u0001\u0000\u0000ฟภ\u0003Ŝ®\u0000ภม\u0003Ő¨\u0002มร\u0001\u0000\u0000\u0000ยซ\u0001\u0000\u0000\u0000ยฎ\u0001\u0000\u0000\u0000ยฑ\u0001\u0000\u0000\u0000ยต\u0001\u0000\u0000\u0000ยธ\u0001\u0000\u0000\u0000ยป\u0001\u0000\u0000\u0000ยพ\u0001\u0000\u0000\u0000รฦ\u0001\u0000\u0000\u0000ฤย\u0001\u0000\u0000\u0000ฤล\u0001\u0000\u0000\u0000ลő\u0001\u0000\u0000\u0000ฦฤ\u0001\u0000\u0000\u0000วศ\u0007\"\u0000\u0000ศœ\u0001\u0000\u0000\u0000ษส\u0007#\u0000\u0000สŕ\u0001\u0000\u0000\u0000หฬ\u0006«\uffff\uffff\u0000ฬ༟\u0007$\u0000\u0000อฮ\u0007%\u0000\u0000ฮั\u0005\u0002\u0000\u0000ฯา\u0003Ŕª\u0000ะา\u0003ǒé\u0000ัฯ\u0001\u0000\u0000\u0000ัะ\u0001\u0000\u0000\u0000าำ\u0001\u0000\u0000\u0000ำิ\u0005\u0004\u0000\u0000ิี\u0003Ő¨\u0000ีึ\u0005\u0004\u0000\u0000ึื\u0003Ő¨\u0000ืุ\u0005\u0003\u0000\u0000ุ༟\u0001\u0000\u0000\u0000ฺู\u0007&\u0000\u0000ฺ\u0e3d\u0005\u0002\u0000\u0000\u0e3b\u0e3e\u0003Ŕª\u0000\u0e3c\u0e3e\u0003ǒé\u0000\u0e3d\u0e3b\u0001\u0000\u0000\u0000\u0e3d\u0e3c\u0001\u0000\u0000\u0000\u0e3e฿\u0001\u0000\u0000\u0000฿เ\u0005\u0004\u0000\u0000เแ\u0003Ő¨\u0000แโ\u0005\u0004\u0000\u0000โใ\u0003Ő¨\u0000ใไ\u0005\u0003\u0000\u0000ไ༟\u0001\u0000\u0000\u0000ๅ็\u0005*\u0000\u0000ๆ่\u0003ƬÖ\u0000็ๆ\u0001\u0000\u0000\u0000่้\u0001\u0000\u0000\u0000้็\u0001\u0000\u0000\u0000้๊\u0001\u0000\u0000\u0000๊ํ\u0001\u0000\u0000\u0000๋์\u0005o\u0000\u0000์๎\u0003ł¡\u0000ํ๋\u0001\u0000\u0000\u0000ํ๎\u0001\u0000\u0000\u0000๎๏\u0001\u0000\u0000\u0000๏๐\u0005q\u0000\u0000๐༟\u0001\u0000\u0000\u0000๑๒\u0005*\u0000\u0000๒๔\u0003ł¡\u0000๓๕\u0003ƬÖ\u0000๔๓\u0001\u0000\u0000\u0000๕๖\u0001\u0000\u0000\u0000๖๔\u0001\u0000\u0000\u0000๖๗\u0001\u0000\u0000\u0000๗๚\u0001\u0000\u0000\u0000๘๙\u0005o\u0000\u0000๙๛\u0003ł¡\u0000๚๘\u0001\u0000\u0000\u0000๚๛\u0001\u0000\u0000\u0000๛\u0e5c\u0001\u0000\u0000\u0000\u0e5c\u0e5d\u0005q\u0000\u0000\u0e5d༟\u0001\u0000\u0000\u0000\u0e5e\u0e5f\u0007'\u0000\u0000\u0e5f\u0e60\u0005\u0002\u0000\u0000\u0e60\u0e61\u0003ł¡\u0000\u0e61\u0e62\u0005\u0016\u0000\u0000\u0e62\u0e63\u0003ż¾\u0000\u0e63\u0e64\u0005\u0003\u0000\u0000\u0e64༟\u0001\u0000\u0000\u0000\u0e65\u0e66\u0005Ŀ\u0000\u0000\u0e66\u0e6f\u0005\u0002\u0000\u0000\u0e67\u0e6c\u0003Ķ\u009b\u0000\u0e68\u0e69\u0005\u0004\u0000\u0000\u0e69\u0e6b\u0003Ķ\u009b\u0000\u0e6a\u0e68\u0001\u0000\u0000\u0000\u0e6b\u0e6e\u0001\u0000\u0000\u0000\u0e6c\u0e6a\u0001\u0000\u0000\u0000\u0e6c\u0e6d\u0001\u0000\u0000\u0000\u0e6d\u0e70\u0001\u0000\u0000\u0000\u0e6e\u0e6c\u0001\u0000\u0000\u0000\u0e6f\u0e67\u0001\u0000\u0000\u0000\u0e6f\u0e70\u0001\u0000\u0000\u0000\u0e70\u0e71\u0001\u0000\u0000\u0000\u0e71༟\u0005\u0003\u0000\u0000\u0e72\u0e73\u0005\u0085\u0000\u0000\u0e73\u0e74\u0005\u0002\u0000\u0000\u0e74\u0e77\u0003ł¡\u0000\u0e75\u0e76\u0005\u009e\u0000\u0000\u0e76\u0e78\u0005ã\u0000\u0000\u0e77\u0e75\u0001\u0000\u0000\u0000\u0e77\u0e78\u0001\u0000\u0000\u0000\u0e78\u0e79\u0001\u0000\u0000\u0000\u0e79\u0e7a\u0005\u0003\u0000\u0000\u0e7a༟\u0001\u0000\u0000\u0000\u0e7b\u0e7c\u0005\u0013\u0000\u0000\u0e7c\u0e7d\u0005\u0002\u0000\u0000\u0e7d\u0e80\u0003ł¡\u0000\u0e7e\u0e7f\u0005\u009e\u0000\u0000\u0e7fກ\u0005ã\u0000\u0000\u0e80\u0e7e\u0001\u0000\u0000\u0000\u0e80ກ\u0001\u0000\u0000\u0000ກຂ\u0001\u0000\u0000\u0000ຂ\u0e83\u0005\u0003\u0000\u0000\u0e83༟\u0001\u0000\u0000\u0000ຄ\u0e85\u0005¸\u0000\u0000\u0e85ຆ\u0005\u0002\u0000\u0000ຆຉ\u0003ł¡\u0000ງຈ\u0005\u009e\u0000\u0000ຈຊ\u0005ã\u0000\u0000ຉງ\u0001\u0000\u0000\u0000ຉຊ\u0001\u0000\u0000\u0000ຊ\u0e8b\u0001\u0000\u0000\u0000\u0e8bຌ\u0005\u0003\u0000\u0000ຌ༟\u0001\u0000\u0000\u0000ຍຎ\u0005ú\u0000\u0000ຎຏ\u0005\u0002\u0000\u0000ຏຐ\u0003Ő¨\u0000ຐຑ\u0005¡\u0000\u0000ຑຒ\u0003Ő¨\u0000ຒຓ\u0005\u0003\u0000\u0000ຓ༟\u0001\u0000\u0000\u0000ດ༟\u0003Ś\u00ad\u0000ຕທ\u0005Ƒ\u0000\u0000ຖຘ\u0003¾_\u0000ທຖ\u0001\u0000\u0000\u0000ທຘ\u0001\u0000\u0000\u0000ຘ༟\u0001\u0000\u0000\u0000ນບ\u0003ƼÞ\u0000ບປ\u0005\u0005\u0000\u0000ປຝ\u0005Ƒ\u0000\u0000ຜພ\u0003¾_\u0000ຝຜ\u0001\u0000\u0000\u0000ຝພ\u0001\u0000\u0000\u0000ພ༟\u0001\u0000\u0000\u0000ຟຠ\u0005\u0002\u0000\u0000ຠຣ\u0003Ķ\u009b\u0000ມຢ\u0005\u0004\u0000\u0000ຢ\u0ea4\u0003Ķ\u009b\u0000ຣມ\u0001\u0000\u0000\u0000\u0ea4ລ\u0001\u0000\u0000\u0000ລຣ\u0001\u0000\u0000\u0000ລ\u0ea6\u0001\u0000\u0000\u0000\u0ea6ວ\u0001\u0000\u0000\u0000ວຨ\u0005\u0003\u0000\u0000ຨ༟\u0001\u0000\u0000\u0000ຩສ\u0005\u0002\u0000\u0000ສຫ\u0003b1\u0000ຫຬ\u0005\u0003\u0000\u0000ຬ༟\u0001\u0000\u0000\u0000ອຮ\u0003ƺÝ\u0000ຮ຺\u0005\u0002\u0000\u0000ຯັ\u0003ø|\u0000ະຯ\u0001\u0000\u0000\u0000ະັ\u0001\u0000\u0000\u0000ັາ\u0001\u0000\u0000\u0000າື\u0003ņ£\u0000ຳິ\u0005\u0004\u0000\u0000ິຶ\u0003ņ£\u0000ີຳ\u0001\u0000\u0000\u0000ຶູ\u0001\u0000\u0000\u0000ືີ\u0001\u0000\u0000\u0000ືຸ\u0001\u0000\u0000\u0000ຸົ\u0001\u0000\u0000\u0000ູື\u0001\u0000\u0000\u0000຺ະ\u0001\u0000\u0000\u0000຺ົ\u0001\u0000\u0000\u0000ົຼ\u0001\u0000\u0000\u0000ຼ໌\u0005\u0003\u0000\u0000ຽ\u0ebe\u0005ƀ\u0000\u0000\u0ebe\u0ebf\u0005\u0094\u0000\u0000\u0ebfເ\u0005\u0002\u0000\u0000ເແ\u0005ì\u0000\u0000ແໂ\u0005$\u0000\u0000ໂ\u0ec7\u0003¤R\u0000ໃໄ\u0005\u0004\u0000\u0000ໄໆ\u0003¤R\u0000\u0ec5ໃ\u0001\u0000\u0000\u0000ໆ້\u0001\u0000\u0000\u0000\u0ec7\u0ec5\u0001\u0000\u0000\u0000\u0ec7່\u0001\u0000\u0000\u0000່໊\u0001\u0000\u0000\u0000້\u0ec7\u0001\u0000\u0000\u0000໊໋\u0005\u0003\u0000\u0000໋ໍ\u0001\u0000\u0000\u0000໌ຽ\u0001\u0000\u0000\u0000໌ໍ\u0001\u0000\u0000\u0000ໍ໔\u0001\u0000\u0000\u0000\u0ece\u0ecf\u0005\u0083\u0000\u0000\u0ecf໐\u0005\u0002\u0000\u0000໐໑\u0005ż\u0000\u0000໑໒\u0003Ŋ¥\u0000໒໓\u0005\u0003\u0000\u0000໓໕\u0001\u0000\u0000\u0000໔\u0ece\u0001\u0000\u0000\u0000໔໕\u0001\u0000\u0000\u0000໕໘\u0001\u0000\u0000\u0000໖໗\u0007(\u0000\u0000໗໙\u0005ã\u0000\u0000໘໖\u0001\u0000\u0000\u0000໘໙\u0001\u0000\u0000\u0000໙ໜ\u0001\u0000\u0000\u0000\u0eda\u0edb\u0005ð\u0000\u0000\u0edbໝ\u0003ƲÙ\u0000ໜ\u0eda\u0001\u0000\u0000\u0000ໜໝ\u0001\u0000\u0000\u0000ໝ༟\u0001\u0000\u0000\u0000ໞໟ\u0003ǂá\u0000ໟ\u0ee0\u0005Ɯ\u0000\u0000\u0ee0\u0ee1\u0003ł¡\u0000\u0ee1༟\u0001\u0000\u0000\u0000\u0ee2\u0ee3\u0005\u0002\u0000\u0000\u0ee3\u0ee6\u0003ǂá\u0000\u0ee4\u0ee5\u0005\u0004\u0000\u0000\u0ee5\u0ee7\u0003ǂá\u0000\u0ee6\u0ee4\u0001\u0000\u0000\u0000\u0ee7\u0ee8\u0001\u0000\u0000\u0000\u0ee8\u0ee6\u0001\u0000\u0000\u0000\u0ee8\u0ee9\u0001\u0000\u0000\u0000\u0ee9\u0eea\u0001\u0000\u0000\u0000\u0eea\u0eeb\u0005\u0003\u0000\u0000\u0eeb\u0eec\u0005Ɯ\u0000\u0000\u0eec\u0eed\u0003ł¡\u0000\u0eed༟\u0001\u0000\u0000\u0000\u0eee༟\u0003ǂá\u0000\u0eef\u0ef0\u0005\u0002\u0000\u0000\u0ef0\u0ef1\u0003ł¡\u0000\u0ef1\u0ef2\u0005\u0003\u0000\u0000\u0ef2༟\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0005\u007f\u0000\u0000\u0ef4\u0ef5\u0005\u0002\u0000\u0000\u0ef5\u0ef6\u0003ǂá\u0000\u0ef6\u0ef7\u0005\u008d\u0000\u0000\u0ef7\u0ef8\u0003Ő¨\u0000\u0ef8\u0ef9\u0005\u0003\u0000\u0000\u0ef9༟\u0001\u0000\u0000\u0000\u0efa\u0efb\u0007)\u0000\u0000\u0efb\u0efc\u0005\u0002\u0000\u0000\u0efc\u0efd\u0003Ő¨\u0000\u0efd\u0efe\u0007*\u0000\u0000\u0efe༁\u0003Ő¨\u0000\u0effༀ\u0007+\u0000\u0000ༀ༂\u0003Ő¨\u0000༁\u0eff\u0001\u0000\u0000\u0000༁༂\u0001\u0000\u0000\u0000༂༃\u0001\u0000\u0000\u0000༃༄\u0005\u0003\u0000\u0000༄༟\u0001\u0000\u0000\u0000༅༆\u0005Ŝ\u0000\u0000༆༈\u0005\u0002\u0000\u0000༇༉\u0007,\u0000\u0000༈༇\u0001\u0000\u0000\u0000༈༉\u0001\u0000\u0000\u0000༉་\u0001\u0000\u0000\u0000༊༌\u0003Ő¨\u0000་༊\u0001\u0000\u0000\u0000་༌\u0001\u0000\u0000\u0000༌།\u0001\u0000\u0000\u0000།༎\u0005\u008d\u0000\u0000༎༏\u0003Ő¨\u0000༏༐\u0005\u0003\u0000\u0000༐༟\u0001\u0000\u0000\u0000༑༒\u0005ò\u0000\u0000༒༓\u0005\u0002\u0000\u0000༓༔\u0003Ő¨\u0000༔༕\u0005ù\u0000\u0000༕༖\u0003Ő¨\u0000༖༗\u0005\u008d\u0000\u0000༗༚\u0003Ő¨\u0000༘༙\u0005\u0088\u0000\u0000༙༛\u0003Ő¨\u0000༚༘\u0001\u0000\u0000\u0000༚༛\u0001\u0000\u0000\u0000༛༜\u0001\u0000\u0000\u0000༜༝\u0005\u0003\u0000\u0000༝༟\u0001\u0000\u0000\u0000༞ห\u0001\u0000\u0000\u0000༞อ\u0001\u0000\u0000\u0000༞ู\u0001\u0000\u0000\u0000༞ๅ\u0001\u0000\u0000\u0000༞๑\u0001\u0000\u0000\u0000༞\u0e5e\u0001\u0000\u0000\u0000༞\u0e65\u0001\u0000\u0000\u0000༞\u0e72\u0001\u0000\u0000\u0000༞\u0e7b\u0001\u0000\u0000\u0000༞ຄ\u0001\u0000\u0000\u0000༞ຍ\u0001\u0000\u0000\u0000༞ດ\u0001\u0000\u0000\u0000༞ຕ\u0001\u0000\u0000\u0000༞ນ\u0001\u0000\u0000\u0000༞ຟ\u0001\u0000\u0000\u0000༞ຩ\u0001\u0000\u0000\u0000༞ອ\u0001\u0000\u0000\u0000༞ໞ\u0001\u0000\u0000\u0000༞\u0ee2\u0001\u0000\u0000\u0000༞\u0eee\u0001\u0000\u0000\u0000༞\u0eef\u0001\u0000\u0000\u0000༞\u0ef3\u0001\u0000\u0000\u0000༞\u0efa\u0001\u0000\u0000\u0000༞༅\u0001\u0000\u0000\u0000༞༑\u0001\u0000\u0000\u0000༟༯\u0001\u0000\u0000\u0000༠༡\n\u0017\u0000\u0000༡༮\u0003Ÿ¼\u0000༢༣\n\u0016\u0000\u0000༣༤\u0005ƛ\u0000\u0000༤༮\u0003ż¾\u0000༥༦\n\b\u0000\u0000༦༧\u0005\u0006\u0000\u0000༧༨\u0003Ő¨\u0000༨༩\u0005\u0007\u0000\u0000༩༮\u0001\u0000\u0000\u0000༪༫\n\u0006\u0000\u0000༫༬\u0005\u0005\u0000\u0000༬༮\u0003ǂá\u0000༭༠\u0001\u0000\u0000\u0000༭༢\u0001\u0000\u0000\u0000༭༥\u0001\u0000\u0000\u0000༭༪\u0001\u0000\u0000\u0000༮༱\u0001\u0000\u0000\u0000༯༭\u0001\u0000\u0000\u0000༯༰\u0001\u0000\u0000\u0000༰ŗ\u0001\u0000\u0000\u0000༱༯\u0001\u0000\u0000\u0000༲༺\u0005S\u0000\u0000༳༺\u0005ŏ\u0000\u0000༴༺\u0005Ő\u0000\u0000༵༺\u0005ő\u0000\u0000༶༺\u0005¬\u0000\u0000༷༺\u0005\u0098\u0000\u0000༸༺\u0003ǂá\u0000༹༲\u0001\u0000\u0000\u0000༹༳\u0001\u0000\u0000\u0000༹༴\u0001\u0000\u0000\u0000༹༵\u0001\u0000\u0000\u0000༹༶\u0001\u0000\u0000\u0000༹༷\u0001\u0000\u0000\u0000༹༸\u0001\u0000\u0000\u0000༺ř\u0001\u0000\u0000\u0000༻ཋ\u0005â\u0000\u0000༼ཋ\u0005Ơ\u0000\u0000༽༾\u0005ƚ\u0000\u0000༾ཋ\u0003ǂá\u0000༿ཋ\u0003Ť²\u0000ཀཁ\u0003Ř¬\u0000ཁག\u0003ǒé\u0000གཋ\u0001\u0000\u0000\u0000གྷཋ\u0003Ǌå\u0000ངཋ\u0003Ţ±\u0000ཅཇ\u0003ǒé\u0000ཆཅ\u0001\u0000\u0000\u0000ཇ\u0f48\u0001\u0000\u0000\u0000\u0f48ཆ\u0001\u0000\u0000\u0000\u0f48ཉ\u0001\u0000\u0000\u0000ཉཋ\u0001\u0000\u0000\u0000ཊ༻\u0001\u0000\u0000\u0000ཊ༼\u0001\u0000\u0000\u0000ཊ༽\u0001\u0000\u0000\u0000ཊ༿\u0001\u0000\u0000\u0000ཊཀ\u0001\u0000\u0000\u0000ཊགྷ\u0001\u0000\u0000\u0000ཊང\u0001\u0000\u0000\u0000ཊཆ\u0001\u0000\u0000\u0000ཋś\u0001\u0000\u0000\u0000ཌཌྷ\u0007-\u0000\u0000ཌྷŝ\u0001\u0000\u0000\u0000ཎཏ\u0007.\u0000\u0000ཏş\u0001\u0000\u0000\u0000ཐད\u0007/\u0000\u0000དš\u0001\u0000\u0000\u0000དྷན\u00070\u0000\u0000ནţ\u0001\u0000\u0000\u0000པབྷ\u0005¬\u0000\u0000ཕམ\u0003Ŧ³\u0000བམ\u0003Ūµ\u0000བྷཕ\u0001\u0000\u0000\u0000བྷབ\u0001\u0000\u0000\u0000མť\u0001\u0000\u0000\u0000ཙཛ\u0003Ũ´\u0000ཚཛྷ\u0003Ŭ¶\u0000ཛཚ\u0001\u0000\u0000\u0000ཛཛྷ\u0001\u0000\u0000\u0000ཛྷŧ\u0001\u0000\u0000\u0000ཝཞ\u0003Ů·\u0000ཞཟ\u0003Ű¸\u0000ཟཡ\u0001\u0000\u0000\u0000འཝ\u0001\u0000\u0000\u0000ཡར\u0001\u0000\u0000\u0000རའ\u0001\u0000\u0000\u0000རལ\u0001\u0000\u0000\u0000ལũ\u0001\u0000\u0000\u0000ཤཧ\u0003Ŭ¶\u0000ཥཨ\u0003Ũ´\u0000སཨ\u0003Ŭ¶\u0000ཧཥ\u0001\u0000\u0000\u0000ཧས\u0001\u0000\u0000\u0000ཧཨ\u0001\u0000\u0000\u0000ཨū\u0001\u0000\u0000\u0000ཀྵཪ\u0003Ů·\u0000ཪཫ\u0003Ų¹\u0000ཫཬ\u0005ŕ\u0000\u0000ཬ\u0f6d\u0003Ų¹\u0000\u0f6dŭ\u0001\u0000\u0000\u0000\u0f6e\u0f70\u00071\u0000\u0000\u0f6f\u0f6e\u0001\u0000\u0000\u0000\u0f6f\u0f70\u0001\u0000\u0000\u0000\u0f70ུ\u0001\u0000\u0000\u0000ཱཱུ\u0005Ʀ\u0000\u0000ཱིུ\u0005ƨ\u0000\u0000ཱཱིུ\u0003ǒé\u0000ཱུ\u0001\u0000\u0000\u0000ིུ\u0001\u0000\u0000\u0000ཱིུ\u0001\u0000\u0000\u0000ཱུů\u0001\u0000\u0000\u0000ྲྀཷ\u00072\u0000\u0000ཷű\u0001\u0000\u0000\u0000ླྀཹ\u00073\u0000\u0000ཹų\u0001\u0000\u0000\u0000ེཾ\u0005\u0085\u0000\u0000ཻོ\u0005\n\u0000\u0000ོཾ\u0003ƾß\u0000ཽེ\u0001\u0000\u0000\u0000ཽཻ\u0001\u0000\u0000\u0000ཾŵ\u0001\u0000\u0000\u0000ཿྀ\u0005^\u0000\u0000ཱྀྀ\u00057\u0000\u0000ཱྀྂ\u0003ǂá\u0000ྂŷ\u0001\u0000\u0000\u0000྄ྃ\u00056\u0000\u0000྄྅\u0003Ĭ\u0096\u0000྅Ź\u0001\u0000\u0000\u0000྆ྩ\u0005 \u0000\u0000྇ྩ\u0005Ŕ\u0000\u0000ྈྩ\u0005%\u0000\u0000ྉྩ\u0005ı\u0000\u0000ྊྩ\u0005ĭ\u0000\u0000ྋྩ\u0005\u00ad\u0000\u0000ྌྩ\u0005®\u0000\u0000ྍྩ\u0005\u001d\u0000\u0000ྎྩ\u0005É\u0000\u0000ྏྩ\u0005\u0086\u0000\u0000ྐྩ\u0005Ą\u0000\u0000ྑྩ\u0005m\u0000\u0000ྒྩ\u0005S\u0000\u0000ྒྷྩ\u0005ŏ\u0000\u0000ྔྩ\u0005ő\u0000\u0000ྕྩ\u0005Ő\u0000\u0000ྖ\u0f98\u0005ľ\u0000\u0000ྗྙ\u0003Ÿ¼\u0000\u0f98ྗ\u0001\u0000\u0000\u0000\u0f98ྙ\u0001\u0000\u0000\u0000ྙྩ\u0001\u0000\u0000\u0000ྚྩ\u00050\u0000\u0000ྛྩ\u0005/\u0000\u0000ྜྩ\u0005ű\u0000\u0000ྜྷྩ\u0005\u001e\u0000\u0000ྞྩ\u0005\\\u0000\u0000ྟྩ\u0005[\u0000\u0000ྠྩ\u0005ä\u0000\u0000ྡྩ\u0005Ÿ\u0000\u0000ྡྷྩ\u0005¬\u0000\u0000ྣྩ\u0005Ŵ\u0000\u0000ྤྩ\u0005\u0015\u0000\u0000ྥྩ\u0005Ŀ\u0000\u0000ྦྩ\u0005Ì\u0000\u0000ྦྷྩ\u0003ǂá\u0000ྨ྆\u0001\u0000\u0000\u0000ྨ྇\u0001\u0000\u0000\u0000ྨྈ\u0001\u0000\u0000\u0000ྨྉ\u0001\u0000\u0000\u0000ྨྊ\u0001\u0000\u0000\u0000ྨྋ\u0001\u0000\u0000\u0000ྨྌ\u0001\u0000\u0000\u0000ྨྍ\u0001\u0000\u0000\u0000ྨྎ\u0001\u0000\u0000\u0000ྨྏ\u0001\u0000\u0000\u0000ྨྐ\u0001\u0000\u0000\u0000ྨྑ\u0001\u0000\u0000\u0000ྨྒ\u0001\u0000\u0000\u0000ྨྒྷ\u0001\u0000\u0000\u0000ྨྔ\u0001\u0000\u0000\u0000ྨྕ\u0001\u0000\u0000\u0000ྨྖ\u0001\u0000\u0000\u0000ྨྚ\u0001\u0000\u0000\u0000ྨྛ\u0001\u0000\u0000\u0000ྨྜ\u0001\u0000\u0000\u0000ྨྜྷ\u0001\u0000\u0000\u0000ྨྞ\u0001\u0000\u0000\u0000ྨྟ\u0001\u0000\u0000\u0000ྨྠ\u0001\u0000\u0000\u0000ྨྡ\u0001\u0000\u0000\u0000ྨྡྷ\u0001\u0000\u0000\u0000ྨྣ\u0001\u0000\u0000\u0000ྨྤ\u0001\u0000\u0000\u0000ྨྥ\u0001\u0000\u0000\u0000ྨྦ\u0001\u0000\u0000\u0000ྨྦྷ\u0001\u0000\u0000\u0000ྩŻ\u0001\u0000\u0000\u0000ྪྫ\u0005\u0015\u0000\u0000ྫྫྷ\u0005ƈ\u0000\u0000ྫྷྭ\u0003ż¾\u0000ྭྮ\u0005Ɗ\u0000\u0000ྮ࿙\u0001\u0000\u0000\u0000ྯྰ\u0005Ì\u0000\u0000ྰྱ\u0005ƈ\u0000\u0000ྱྲ\u0003ż¾\u0000ྲླ\u0005\u0004\u0000\u0000ླྴ\u0003ż¾\u0000ྴྵ\u0005Ɗ\u0000\u0000ྵ࿙\u0001\u0000\u0000\u0000ྶ\u0fbd\u0005Ŀ\u0000\u0000ྷྐྵ\u0005ƈ\u0000\u0000ྸྺ\u0003ƚÍ\u0000ྐྵྸ\u0001\u0000\u0000\u0000ྐྵྺ\u0001\u0000\u0000\u0000ྺྻ\u0001\u0000\u0000\u0000ྻ྾\u0005Ɗ\u0000\u0000ྼ྾\u0005Ɔ\u0000\u0000\u0fbdྷ\u0001\u0000\u0000\u0000\u0fbdྼ\u0001\u0000\u0000\u0000྾࿙\u0001\u0000\u0000\u0000྿࿀\u0005¬\u0000\u0000࿀࿃\u00074\u0000\u0000࿁࿂\u0005ŕ\u0000\u0000࿂࿄\u0005Ö\u0000\u0000࿃࿁\u0001\u0000\u0000\u0000࿃࿄\u0001\u0000\u0000\u0000࿄࿙\u0001\u0000\u0000\u0000࿅࿆\u0005¬\u0000\u0000࿆࿉\u00075\u0000\u0000࿇࿈\u0005ŕ\u0000\u0000࿈࿊\u00076\u0000\u0000࿉࿇\u0001\u0000\u0000\u0000࿉࿊\u0001\u0000\u0000\u0000࿊࿙\u0001\u0000\u0000\u0000࿋࿖\u0003ź½\u0000࿌\u0fcd\u0005\u0002\u0000\u0000\u0fcd࿒\u0005Ʀ\u0000\u0000࿎࿏\u0005\u0004\u0000\u0000࿏࿑\u0005Ʀ\u0000\u0000࿐࿎\u0001\u0000\u0000\u0000࿑࿔\u0001\u0000\u0000\u0000࿒࿐\u0001\u0000\u0000\u0000࿒࿓\u0001\u0000\u0000\u0000࿓࿕\u0001\u0000\u0000\u0000࿔࿒\u0001\u0000\u0000\u0000࿕࿗\u0005\u0003\u0000\u0000࿖࿌\u0001\u0000\u0000\u0000࿖࿗\u0001\u0000\u0000\u0000࿗࿙\u0001\u0000\u0000\u0000࿘ྪ\u0001\u0000\u0000\u0000࿘ྯ\u0001\u0000\u0000\u0000࿘ྶ\u0001\u0000\u0000\u0000࿘྿\u0001\u0000\u0000\u0000࿘࿅\u0001\u0000\u0000\u0000࿘࿋\u0001\u0000\u0000\u0000࿙Ž\u0001\u0000\u0000\u0000࿚\u0fdf\u0003ƀÀ\u0000\u0fdb\u0fdc\u0005\u0004\u0000\u0000\u0fdc\u0fde\u0003ƀÀ\u0000\u0fdd\u0fdb\u0001\u0000\u0000\u0000\u0fde\u0fe1\u0001\u0000\u0000\u0000\u0fdf\u0fdd\u0001\u0000\u0000\u0000\u0fdf\u0fe0\u0001\u0000\u0000\u0000\u0fe0ſ\u0001\u0000\u0000\u0000\u0fe1\u0fdf\u0001\u0000\u0000\u0000\u0fe2\u0fe3\u0003Ĭ\u0096\u0000\u0fe3\u0fe7\u0003ż¾\u0000\u0fe4\u0fe6\u0003ƂÁ\u0000\u0fe5\u0fe4\u0001\u0000\u0000\u0000\u0fe6\u0fe9\u0001\u0000\u0000\u0000\u0fe7\u0fe5\u0001\u0000\u0000\u0000\u0fe7\u0fe8\u0001\u0000\u0000\u0000\u0fe8Ɓ\u0001\u0000\u0000\u0000\u0fe9\u0fe7\u0001\u0000\u0000\u0000\u0fea\u0feb\u0003Ŏ§\u0000\u0feb\u0fec\u0005â\u0000\u0000\u0fec\u0ff1\u0001\u0000\u0000\u0000\u0fed\u0ff1\u0003ƄÂ\u0000\u0fee\u0ff1\u0003^/\u0000\u0fef\u0ff1\u0003Ŵº\u0000\u0ff0\u0fea\u0001\u0000\u0000\u0000\u0ff0\u0fed\u0001\u0000\u0000\u0000\u0ff0\u0fee\u0001\u0000\u0000\u0000\u0ff0\u0fef\u0001\u0000\u0000\u0000\u0ff1ƃ\u0001\u0000\u0000\u0000\u0ff2\u0ff3\u0005^\u0000\u0000\u0ff3\u0ff4\u0003ł¡\u0000\u0ff4ƅ\u0001\u0000\u0000\u0000\u0ff5\u0ff6\u00077\u0000\u0000\u0ff6\u0ff7\u0003ł¡\u0000\u0ff7Ƈ\u0001\u0000\u0000\u0000\u0ff8\u0ffd\u0003ƊÅ\u0000\u0ff9\u0ffa\u0005\u0004\u0000\u0000\u0ffa\u0ffc\u0003ƊÅ\u0000\u0ffb\u0ff9\u0001\u0000\u0000\u0000\u0ffc\u0fff\u0001\u0000\u0000\u0000\u0ffd\u0ffb\u0001\u0000\u0000\u0000\u0ffd\u0ffe\u0001\u0000\u0000\u0000\u0ffeƉ\u0001\u0000\u0000\u0000\u0fff\u0ffd\u0001\u0000\u0000\u0000ကခ\u0003ƾß\u0000ခစ\u0003ż¾\u0000ဂဃ\u0003Ŏ§\u0000ဃင\u0005â\u0000\u0000ငဆ\u0001\u0000\u0000\u0000စဂ\u0001\u0000\u0000\u0000စဆ\u0001\u0000\u0000\u0000ဆဈ\u0001\u0000\u0000\u0000ဇဉ\u0003^/\u0000ဈဇ\u0001\u0000\u0000\u0000ဈဉ\u0001\u0000\u0000\u0000ဉƋ\u0001\u0000\u0000\u0000ညဏ\u0003ƎÇ\u0000ဋဌ\u0005\u0004\u0000\u0000ဌဎ\u0003ƎÇ\u0000ဍဋ\u0001\u0000\u0000\u0000ဎထ\u0001\u0000\u0000\u0000ဏဍ\u0001\u0000\u0000\u0000ဏတ\u0001\u0000\u0000\u0000တƍ\u0001\u0000\u0000\u0000ထဏ\u0001\u0000\u0000\u0000ဒဓ\u0003ƾß\u0000ဓဗ\u0003ż¾\u0000နဖ\u0003ƐÈ\u0000ပန\u0001\u0000\u0000\u0000ဖမ\u0001\u0000\u0000\u0000ဗပ\u0001\u0000\u0000\u0000ဗဘ\u0001\u0000\u0000\u0000ဘƏ\u0001\u0000\u0000\u0000မဗ\u0001\u0000\u0000\u0000ယရ\u0003Ŏ§\u0000ရလ\u0005â\u0000\u0000လအ\u0001\u0000\u0000\u0000ဝအ\u0003ƄÂ\u0000သအ\u0003ƒÉ\u0000ဟအ\u0003^/\u0000ဠယ\u0001\u0000\u0000\u0000ဠဝ\u0001\u0000\u0000\u0000ဠသ\u0001\u0000\u0000\u0000ဠဟ\u0001\u0000\u0000\u0000အƑ\u0001\u0000\u0000\u0000ဢဣ\u0005\u0091\u0000\u0000ဣဤ\u0005\u000e\u0000\u0000ဤဥ\u0005\u0016\u0000\u0000ဥဦ\u0005\u0002\u0000\u0000ဦဧ\u0003ł¡\u0000ဧဨ\u0005\u0003\u0000\u0000ဨဵ\u0001\u0000\u0000\u0000ဩိ\u0005\u0091\u0000\u0000ဪီ\u0005\u000e\u0000\u0000ါာ\u0005$\u0000\u0000ာီ\u0005^\u0000\u0000ိဪ\u0001\u0000\u0000\u0000ိါ\u0001\u0000\u0000\u0000ီု\u0001\u0000\u0000\u0000ုူ\u0005\u0016\u0000\u0000ူဲ\u0005\u009c\u0000\u0000ေဳ\u0003ƔÊ\u0000ဲေ\u0001\u0000\u0000\u0000ဲဳ\u0001\u0000\u0000\u0000ဳဵ\u0001\u0000\u0000\u0000ဴဢ\u0001\u0000\u0000\u0000ဴဩ\u0001\u0000\u0000\u0000ဵƓ\u0001\u0000\u0000\u0000ံ်\u0005\u0002\u0000\u0000့္\u0003ƖË\u0000း့\u0001\u0000\u0000\u0000္ြ\u0001\u0000\u0000\u0000်း\u0001\u0000\u0000\u0000်ျ\u0001\u0000\u0000\u0000ျွ\u0001\u0000\u0000\u0000ြ်\u0001\u0000\u0000\u0000ွှ\u0005\u0003\u0000\u0000ှƕ\u0001\u0000\u0000\u0000ဿ၀\u0005ĺ\u0000\u0000၀၁\u0005ſ\u0000\u0000၁၆\u0003ƘÌ\u0000၂၃\u0005£\u0000\u0000၃၄\u0005$\u0000\u0000၄၆\u0003ƘÌ\u0000၅ဿ\u0001\u0000\u0000\u0000၅၂\u0001\u0000\u0000\u0000၆Ɨ\u0001\u0000\u0000\u0000၇၉\u0005Ɛ\u0000\u0000၈၇\u0001\u0000\u0000\u0000၈၉\u0001\u0000\u0000\u0000၉၊\u0001\u0000\u0000\u0000၊ၐ\u0005Ʀ\u0000\u0000။၍\u0005Ɛ\u0000\u0000၌။\u0001\u0000\u0000\u0000၌၍\u0001\u0000\u0000\u0000၍၎\u0001\u0000\u0000\u0000၎ၐ\u0005ƣ\u0000\u0000၏၈\u0001\u0000\u0000\u0000၏၌\u0001\u0000\u0000\u0000ၐƙ\u0001\u0000\u0000\u0000ၑၖ\u0003ƜÎ\u0000ၒၓ\u0005\u0004\u0000\u0000ၓၕ\u0003ƜÎ\u0000ၔၒ\u0001\u0000\u0000\u0000ၕၘ\u0001\u0000\u0000\u0000ၖၔ\u0001\u0000\u0000\u0000ၖၗ\u0001\u0000\u0000\u0000ၗƛ\u0001\u0000\u0000\u0000ၘၖ\u0001\u0000\u0000\u0000ၙၛ\u0003ƾß\u0000ၚၜ\u0005ƚ\u0000\u0000ၛၚ\u0001\u0000\u0000\u0000ၛၜ\u0001\u0000\u0000\u0000ၜၝ\u0001\u0000\u0000\u0000ၝၡ\u0003ż¾\u0000ၞၟ\u0003Ŏ§\u0000ၟၠ\u0005â\u0000\u0000ၠၢ\u0001\u0000\u0000\u0000ၡၞ\u0001\u0000\u0000\u0000ၡၢ\u0001\u0000\u0000\u0000ၢၤ\u0001\u0000\u0000\u0000ၣၥ\u0003^/\u0000ၤၣ\u0001\u0000\u0000\u0000ၤၥ\u0001\u0000\u0000\u0000ၥƝ\u0001\u0000\u0000\u0000ၦၮ\u0003ƠÐ\u0000ၧၮ\u0003ƢÑ\u0000ၨၮ\u0003ƤÒ\u0000ၩၮ\u0003ƦÓ\u0000ၪၮ\u0003ƨÔ\u0000ၫၮ\u0003^/\u0000ၬၮ\u0003ƪÕ\u0000ၭၦ\u0001\u0000\u0000\u0000ၭၧ\u0001\u0000\u0000\u0000ၭၨ\u0001\u0000\u0000\u0000ၭၩ\u0001\u0000\u0000\u0000ၭၪ\u0001\u0000\u0000\u0000ၭၫ\u0001\u0000\u0000\u0000ၭၬ\u0001\u0000\u0000\u0000ၮၱ\u0001\u0000\u0000\u0000ၯၭ\u0001\u0000\u0000\u0000ၯၰ\u0001\u0000\u0000\u0000ၰƟ\u0001\u0000\u0000\u0000ၱၯ\u0001\u0000\u0000\u0000ၲၳ\u0005·\u0000\u0000ၳၴ\u00078\u0000\u0000ၴơ\u0001\u0000\u0000\u0000ၵၶ\u0005Ķ\u0000\u0000ၶၷ\u0003ƾß\u0000ၷƣ\u0001\u0000\u0000\u0000ၸၽ\u0005e\u0000\u0000ၹၺ\u0003Ŏ§\u0000ၺၻ\u0005e\u0000\u0000ၻၽ\u0001\u0000\u0000\u0000ၼၸ\u0001\u0000\u0000\u0000ၼၹ\u0001\u0000\u0000\u0000ၽƥ\u0001\u0000\u0000\u0000ၾၿ\u0005ß\u0000\u0000ၿႉ\u0005ķ\u0000\u0000ႀႁ\u0005D\u0000\u0000ႁႉ\u0005ķ\u0000\u0000ႂႃ\u0005ă\u0000\u0000ႃႄ\u0005ķ\u0000\u0000ႄႉ\u0005R\u0000\u0000ႅႆ\u0005Õ\u0000\u0000ႆႇ\u0005ķ\u0000\u0000ႇႉ\u0005R\u0000\u0000ႈၾ\u0001\u0000\u0000\u0000ႈႀ\u0001\u0000\u0000\u0000ႈႂ\u0001\u0000\u0000\u0000ႈႅ\u0001\u0000\u0000\u0000ႉƧ\u0001\u0000\u0000\u0000ႊႋ\u0005ĕ\u0000\u0000ႋႌ\u0005â\u0000\u0000ႌႍ\u0005ç\u0000\u0000ႍႎ\u0005â\u0000\u0000ႎ႔\u0005¨\u0000\u0000ႏ႐\u0005(\u0000\u0000႐႑\u0005ç\u0000\u0000႑႒\u0005â\u0000\u0000႒႔\u0005¨\u0000\u0000႓ႊ\u0001\u0000\u0000\u0000႓ႏ\u0001\u0000\u0000\u0000႔Ʃ\u0001\u0000\u0000\u0000႕႖\u0005ķ\u0000\u0000႖႗\u0005ģ\u0000\u0000႗ႜ\u0005°\u0000\u0000႘႙\u0005ķ\u0000\u0000႙ႚ\u0005ģ\u0000\u0000ႚႜ\u0005`\u0000\u0000ႛ႕\u0001\u0000\u0000\u0000ႛ႘\u0001\u0000\u0000\u0000ႜƫ\u0001\u0000\u0000\u0000ႝ႞\u0005Ż\u0000\u0000႞႟\u0003ł¡\u0000႟Ⴀ\u0005Ō\u0000\u0000ႠႡ\u0003ł¡\u0000Ⴁƭ\u0001\u0000\u0000\u0000ႢႣ\u0005ž\u0000\u0000ႣႨ\u0003ưØ\u0000ႤႥ\u0005\u0004\u0000\u0000ႥႧ\u0003ưØ\u0000ႦႤ\u0001\u0000\u0000\u0000ႧႪ\u0001\u0000\u0000\u0000ႨႦ\u0001\u0000\u0000\u0000ႨႩ\u0001\u0000\u0000\u0000ႩƯ\u0001\u0000\u0000\u0000ႪႨ\u0001\u0000\u0000\u0000ႫႬ\u0003ƾß\u0000ႬႭ\u0005\u0016\u0000\u0000ႭႮ\u0003ƲÙ\u0000ႮƱ\u0001\u0000\u0000\u0000Ⴏპ\u0003ƾß\u0000ႰႱ\u0005\u0002\u0000\u0000ႱႲ\u0003ƾß\u0000ႲႳ\u0005\u0003\u0000\u0000Ⴓპ\u0001\u0000\u0000\u0000Ⴔთ\u0005\u0002\u0000\u0000ႵႶ\u00053\u0000\u0000ႶႷ\u0005$\u0000\u0000ႷႼ\u0003ł¡\u0000ႸႹ\u0005\u0004\u0000\u0000ႹႻ\u0003ł¡\u0000ႺႸ\u0001\u0000\u0000\u0000ႻႾ\u0001\u0000\u0000\u0000ႼႺ\u0001\u0000\u0000\u0000ႼႽ\u0001\u0000\u0000\u0000Ⴝი\u0001\u0000\u0000\u0000ႾႼ\u0001\u0000\u0000\u0000ႿჀ\u0007\u0019\u0000\u0000ჀჁ\u0005$\u0000\u0000Ⴡ\u10c6\u0003ł¡\u0000ჂჃ\u0005\u0004\u0000\u0000ჃჅ\u0003ł¡\u0000ჄჂ\u0001\u0000\u0000\u0000Ⴥ\u10c8\u0001\u0000\u0000\u0000\u10c6Ⴤ\u0001\u0000\u0000\u0000\u10c6Ⴧ\u0001\u0000\u0000\u0000Ⴧ\u10ca\u0001\u0000\u0000\u0000\u10c8\u10c6\u0001\u0000\u0000\u0000\u10c9Ⴟ\u0001\u0000\u0000\u0000\u10c9\u10ca\u0001\u0000\u0000\u0000\u10caვ\u0001\u0000\u0000\u0000\u10cb\u10cc\u0007\u001a\u0000\u0000\u10ccჍ\u0005$\u0000\u0000Ⴭგ\u0003¤R\u0000\u10ce\u10cf\u0005\u0004\u0000\u0000\u10cfბ\u0003¤R\u0000ა\u10ce\u0001\u0000\u0000\u0000ბე\u0001\u0000\u0000\u0000გა\u0001\u0000\u0000\u0000გდ\u0001\u0000\u0000\u0000დზ\u0001\u0000\u0000\u0000ეგ\u0001\u0000\u0000\u0000ვ\u10cb\u0001\u0000\u0000\u0000ვზ\u0001\u0000\u0000\u0000ზი\u0001\u0000\u0000\u0000თႵ\u0001\u0000\u0000\u0000თ\u10c9\u0001\u0000\u0000\u0000ილ\u0001\u0000\u0000\u0000კმ\u0003ƴÚ\u0000ლკ\u0001\u0000\u0000\u0000ლმ\u0001\u0000\u0000\u0000მნ\u0001\u0000\u0000\u0000ნპ\u0005\u0003\u0000\u0000ოႯ\u0001\u0000\u0000\u0000ოႰ\u0001\u0000\u0000\u0000ოႴ\u0001\u0000\u0000\u0000პƳ\u0001\u0000\u0000\u0000ჟრ\u0005Ă\u0000\u0000რჰ\u0003ƶÛ\u0000სტ\u0005Ğ\u0000\u0000ტჰ\u0003ƶÛ\u0000უფ\u0005Ă\u0000\u0000ფქ\u0005\u001c\u0000\u0000ქღ\u0003ƶÛ\u0000ღყ\u0005\u0010\u0000\u0000ყშ\u0003ƶÛ\u0000შჰ\u0001\u0000\u0000\u0000ჩც\u0005Ğ\u0000\u0000ცძ\u0005\u001c\u0000\u0000ძწ\u0003ƶÛ\u0000წჭ\u0005\u0010\u0000\u0000ჭხ\u0003ƶÛ\u0000ხჰ\u0001\u0000\u0000\u0000ჯჟ\u0001\u0000\u0000\u0000ჯს\u0001\u0000\u0000\u0000ჯუ\u0001\u0000\u0000\u0000ჯჩ\u0001\u0000\u0000\u0000ჰƵ\u0001\u0000\u0000\u0000ჱჲ\u0005Ţ\u0000\u0000ჲჹ\u00079\u0000\u0000ჳჴ\u0005J\u0000\u0000ჴჹ\u0005ĝ\u0000\u0000ჵჶ\u0003ł¡\u0000ჶჷ\u00079\u0000\u0000ჷჹ\u0001\u0000\u0000\u0000ჸჱ\u0001\u0000\u0000\u0000ჸჳ\u0001\u0000\u0000\u0000ჸჵ\u0001\u0000\u0000\u0000ჹƷ\u0001\u0000\u0000\u0000ჺჿ\u0003ƼÞ\u0000჻ჼ\u0005\u0004\u0000\u0000ჼჾ\u0003ƼÞ\u0000ჽ჻\u0001\u0000\u0000\u0000ჾᄁ\u0001\u0000\u0000\u0000ჿჽ\u0001\u0000\u0000\u0000ჿᄀ\u0001\u0000\u0000\u0000ᄀƹ\u0001\u0000\u0000\u0000ᄁჿ\u0001\u0000\u0000\u0000ᄂᄃ\u0005\u009b\u0000\u0000ᄃᄄ\u0005\u0002\u0000\u0000ᄄᄅ\u0003ł¡\u0000ᄅᄆ\u0005\u0003\u0000\u0000ᄆᄍ\u0001\u0000\u0000\u0000ᄇᄍ\u0005\u009b\u0000\u0000ᄈᄍ\u0003ƼÞ\u0000ᄉᄍ\u0005\u0083\u0000\u0000ᄊᄍ\u0005½\u0000\u0000ᄋᄍ\u0005ė\u0000\u0000ᄌᄂ\u0001\u0000\u0000\u0000ᄌᄇ\u0001\u0000\u0000\u0000ᄌᄈ\u0001\u0000\u0000\u0000ᄌᄉ\u0001\u0000\u0000\u0000ᄌᄊ\u0001\u0000\u0000\u0000ᄌᄋ\u0001\u0000\u0000\u0000ᄍƻ\u0001\u0000\u0000\u0000ᄎᄓ\u0003ǂá\u0000ᄏᄐ\u0005\u0005\u0000\u0000ᄐᄒ\u0003ǂá\u0000ᄑᄏ\u0001\u0000\u0000\u0000ᄒᄕ\u0001\u0000\u0000\u0000ᄓᄑ\u0001\u0000\u0000\u0000ᄓᄔ\u0001\u0000\u0000\u0000ᄔƽ\u0001\u0000\u0000\u0000ᄕᄓ\u0001\u0000\u0000\u0000ᄖᄗ\u0003ǂá\u0000ᄗᄘ\u0003ǀà\u0000ᄘƿ\u0001\u0000\u0000\u0000ᄙᄚ\u0005Ɛ\u0000\u0000ᄚᄜ\u0003ǂá\u0000ᄛᄙ\u0001\u0000\u0000\u0000ᄜᄝ\u0001\u0000\u0000\u0000ᄝᄛ\u0001\u0000\u0000\u0000ᄝᄞ\u0001\u0000\u0000\u0000ᄞᄡ\u0001\u0000\u0000\u0000ᄟᄡ\u0001\u0000\u0000\u0000ᄠᄛ\u0001\u0000\u0000\u0000ᄠᄟ\u0001\u0000\u0000\u0000ᄡǁ\u0001\u0000\u0000\u0000ᄢᄦ\u0003Ǆâ\u0000ᄣᄤ\u0004á\u0014\u0000ᄤᄦ\u0003Ǟï\u0000ᄥᄢ\u0001\u0000\u0000\u0000ᄥᄣ\u0001\u0000\u0000\u0000ᄦǃ\u0001\u0000\u0000\u0000ᄧᄮ\u0005Ƭ\u0000\u0000ᄨᄮ\u0003ǆã\u0000ᄩᄪ\u0004â\u0015\u0000ᄪᄮ\u0003ǜî\u0000ᄫᄬ\u0004â\u0016\u0000ᄬᄮ\u0003Ǡð\u0000ᄭᄧ\u0001\u0000\u0000\u0000ᄭᄨ\u0001\u0000\u0000\u0000ᄭᄩ\u0001\u0000\u0000\u0000ᄭᄫ\u0001\u0000\u0000\u0000ᄮǅ\u0001\u0000\u0000\u0000ᄯᄳ\u0005ƭ\u0000\u0000ᄰᄱ\u0004ã\u0017\u0000ᄱᄳ\u0005Ƣ\u0000\u0000ᄲᄯ\u0001\u0000\u0000\u0000ᄲᄰ\u0001\u0000\u0000\u0000ᄳǇ\u0001\u0000\u0000\u0000ᄴᄵ\u0005ƭ\u0000\u0000ᄵǉ\u0001\u0000\u0000\u0000ᄶᄸ\u0004å\u0018\u0000ᄷᄹ\u0005Ɛ\u0000\u0000ᄸᄷ\u0001\u0000\u0000\u0000ᄸᄹ\u0001\u0000\u0000\u0000ᄹᄺ\u0001\u0000\u0000\u0000ᄺᅢ\u0005Ƨ\u0000\u0000ᄻᄽ\u0004å\u0019\u0000ᄼᄾ\u0005Ɛ\u0000\u0000ᄽᄼ\u0001\u0000\u0000\u0000ᄽᄾ\u0001\u0000\u0000\u0000ᄾᄿ\u0001\u0000\u0000\u0000ᄿᅢ\u0005ƨ\u0000\u0000ᅀᅂ\u0004å\u001a\u0000ᅁᅃ\u0005Ɛ\u0000\u0000ᅂᅁ\u0001\u0000\u0000\u0000ᅂᅃ\u0001\u0000\u0000\u0000ᅃᅄ\u0001\u0000\u0000\u0000ᅄᅢ\u0007:\u0000\u0000ᅅᅇ\u0005Ɛ\u0000\u0000ᅆᅅ\u0001\u0000\u0000\u0000ᅆᅇ\u0001\u0000\u0000\u0000ᅇᅈ\u0001\u0000\u0000\u0000ᅈᅢ\u0005Ʀ\u0000\u0000ᅉᅋ\u0005Ɛ\u0000\u0000ᅊᅉ\u0001\u0000\u0000\u0000ᅊᅋ\u0001\u0000\u0000\u0000ᅋᅌ\u0001\u0000\u0000\u0000ᅌᅢ\u0005ƣ\u0000\u0000ᅍᅏ\u0005Ɛ\u0000\u0000ᅎᅍ\u0001\u0000\u0000\u0000ᅎᅏ\u0001\u0000\u0000\u0000ᅏᅐ\u0001\u0000\u0000\u0000ᅐᅢ\u0005Ƥ\u0000\u0000ᅑᅓ\u0005Ɛ\u0000\u0000ᅒᅑ\u0001\u0000\u0000\u0000ᅒᅓ\u0001\u0000\u0000\u0000ᅓᅔ\u0001\u0000\u0000\u0000ᅔᅢ\u0005ƥ\u0000\u0000ᅕᅗ\u0005Ɛ\u0000\u0000ᅖᅕ\u0001\u0000\u0000\u0000ᅖᅗ\u0001\u0000\u0000\u0000ᅗᅘ\u0001\u0000\u0000\u0000ᅘᅢ\u0005ƪ\u0000\u0000ᅙᅛ\u0005Ɛ\u0000\u0000ᅚᅙ\u0001\u0000\u0000\u0000ᅚᅛ\u0001\u0000\u0000\u0000ᅛᅜ\u0001\u0000\u0000\u0000ᅜᅢ\u0005Ʃ\u0000\u0000ᅝᅟ\u0005Ɛ\u0000\u0000ᅞᅝ\u0001\u0000\u0000\u0000ᅞᅟ\u0001\u0000\u0000\u0000ᅟᅠ\u0001\u0000\u0000\u0000ᅠᅢ\u0005ƫ\u0000\u0000ᅡᄶ\u0001\u0000\u0000\u0000ᅡᄻ\u0001\u0000\u0000\u0000ᅡᅀ\u0001\u0000\u0000\u0000ᅡᅆ\u0001\u0000\u0000\u0000ᅡᅊ\u0001\u0000\u0000\u0000ᅡᅎ\u0001\u0000\u0000\u0000ᅡᅒ\u0001\u0000\u0000\u0000ᅡᅖ\u0001\u0000\u0000\u0000ᅡᅚ\u0001\u0000\u0000\u0000ᅡᅞ\u0001\u0000\u0000\u0000ᅢǋ\u0001\u0000\u0000\u0000ᅣᅨ\u0003ǎç\u0000ᅤᅥ\u0005\u0004\u0000\u0000ᅥᅧ\u0003ǎç\u0000ᅦᅤ\u0001\u0000\u0000\u0000ᅧᅪ\u0001\u0000\u0000\u0000ᅨᅦ\u0001\u0000\u0000\u0000ᅨᅩ\u0001\u0000\u0000\u0000ᅩǍ\u0001\u0000\u0000\u0000ᅪᅨ\u0001\u0000\u0000\u0000ᅫᅭ\u0003Ĭ\u0096\u0000ᅬᅮ\u0003ǐè\u0000ᅭᅬ\u0001\u0000\u0000\u0000ᅭᅮ\u0001\u0000\u0000\u0000ᅮǏ\u0001\u0000\u0000\u0000ᅯᅰ\u0005Š\u0000\u0000ᅰᅼ\u0003ż¾\u0000ᅱᅼ\u0003^/\u0000ᅲᅼ\u0003Ŵº\u0000ᅳᅴ\u0007;\u0000\u0000ᅴᅵ\u0003Ŏ§\u0000ᅵᅶ\u0005â\u0000\u0000ᅶᅼ\u0001\u0000\u0000\u0000ᅷᅸ\u0005Ī\u0000\u0000ᅸᅼ\u0003ƄÂ\u0000ᅹᅺ\u0005n\u0000\u0000ᅺᅼ\u0005^\u0000\u0000ᅻᅯ\u0001\u0000\u0000\u0000ᅻᅱ\u0001\u0000\u0000\u0000ᅻᅲ\u0001\u0000\u0000\u0000ᅻᅳ\u0001\u0000\u0000\u0000ᅻᅷ\u0001\u0000\u0000\u0000ᅻᅹ\u0001\u0000\u0000\u0000ᅼǑ\u0001\u0000\u0000\u0000ᅽᆁ\u0005ơ\u0000\u0000ᅾᅿ\u0004é\u001b\u0000ᅿᆁ\u0005Ƣ\u0000\u0000ᆀᅽ\u0001\u0000\u0000\u0000ᆀᅾ\u0001\u0000\u0000\u0000ᆁǓ\u0001\u0000\u0000\u0000ᆂᆅ\u0003ǒé\u0000ᆃᆅ\u0005â\u0000\u0000ᆄᆂ\u0001\u0000\u0000\u0000ᆄᆃ\u0001\u0000\u0000\u0000ᆅǕ\u0001\u0000\u0000\u0000ᆆᆉ\u0005Ʀ\u0000\u0000ᆇᆉ\u0003ǒé\u0000ᆈᆆ\u0001\u0000\u0000\u0000ᆈᆇ\u0001\u0000\u0000\u0000ᆉǗ\u0001\u0000\u0000\u0000ᆊᆌ\u0003®W\u0000ᆋᆍ\u0003Ʈ×\u0000ᆌᆋ\u0001\u0000\u0000\u0000ᆌᆍ\u0001\u0000\u0000\u0000ᆍᆲ\u0001\u0000\u0000\u0000ᆎᆏ\u0005|\u0000\u0000ᆏᆲ\u0003ĸ\u009c\u0000ᆐᆑ\u0005Ī\u0000\u0000ᆑᆲ\u0003ǚí\u0000ᆒᆓ\u0005n\u0000\u0000ᆓᆲ\u0003Ċ\u0085\u0000ᆔᆕ\u0005\u0016\u0000\u0000ᆕᆲ\u0003ƾß\u0000ᆖᆘ\u0003Äb\u0000ᆗᆙ\u0003Ʈ×\u0000ᆘᆗ\u0001\u0000\u0000\u0000ᆘᆙ\u0001\u0000\u0000\u0000ᆙᆲ\u0001\u0000\u0000\u0000ᆚᆜ\u0003Úm\u0000ᆛᆝ\u0003àp\u0000ᆜᆛ\u0001\u0000\u0000\u0000ᆜᆝ\u0001\u0000\u0000\u0000ᆝᆲ\u0001\u0000\u0000\u0000ᆞᆠ\u0003àp\u0000ᆟᆡ\u0003Úm\u0000ᆠᆟ\u0001\u0000\u0000\u0000ᆠᆡ\u0001\u0000\u0000\u0000ᆡᆲ\u0001\u0000\u0000\u0000ᆢᆲ\u0003Ą\u0082\u0000ᆣᆲ\u0003þ\u007f\u0000ᆤᆦ\u0007\u000f\u0000\u0000ᆥᆧ\u0003ø|\u0000ᆦᆥ\u0001\u0000\u0000\u0000ᆦᆧ\u0001\u0000\u0000\u0000ᆧᆨ\u0001\u0000\u0000\u0000ᆨᆲ\u0003¢Q\u0000ᆩᆲ\u0003\u009cN\u0000ᆪᆬ\u0005\u000b\u0000\u0000ᆫᆭ\u0003ĸ\u009c\u0000ᆬᆫ\u0001\u0000\u0000\u0000ᆬᆭ\u0001\u0000\u0000\u0000ᆭᆯ\u0001\u0000\u0000\u0000ᆮᆰ\u0003Ðh\u0000ᆯᆮ\u0001\u0000\u0000\u0000ᆯᆰ\u0001\u0000\u0000\u0000ᆰᆲ\u0001\u0000\u0000\u0000ᆱᆊ\u0001\u0000\u0000\u0000ᆱᆎ\u0001\u0000\u0000\u0000ᆱᆐ\u0001\u0000\u0000\u0000ᆱᆒ\u0001\u0000\u0000\u0000ᆱᆔ\u0001\u0000\u0000\u0000ᆱᆖ\u0001\u0000\u0000\u0000ᆱᆚ\u0001\u0000\u0000\u0000ᆱᆞ\u0001\u0000\u0000\u0000ᆱᆢ\u0001\u0000\u0000\u0000ᆱᆣ\u0001\u0000\u0000\u0000ᆱᆤ\u0001\u0000\u0000\u0000ᆱᆩ\u0001\u0000\u0000\u0000ᆱᆪ\u0001\u0000\u0000\u0000ᆲǙ\u0001\u0000\u0000\u0000ᆳᆸ\u0003ƾß\u0000ᆴᆵ\u0005\u0005\u0000\u0000ᆵᆷ\u0003ƾß\u0000ᆶᆴ\u0001\u0000\u0000\u0000ᆷᆺ\u0001\u0000\u0000\u0000ᆸᆶ\u0001\u0000\u0000\u0000ᆸᆹ\u0001\u0000\u0000\u0000ᆹᆻ\u0001\u0000\u0000\u0000ᆺᆸ\u0001\u0000\u0000\u0000ᆻᆼ\u0005Ƅ\u0000\u0000ᆼᇋ\u0003ł¡\u0000ᆽᆾ\u0005\u0004\u0000\u0000ᆾᇃ\u0003ƾß\u0000ᆿᇀ\u0005\u0005\u0000\u0000ᇀᇂ\u0003ƾß\u0000ᇁᆿ\u0001\u0000\u0000\u0000ᇂᇅ\u0001\u0000\u0000\u0000ᇃᇁ\u0001\u0000\u0000\u0000ᇃᇄ\u0001\u0000\u0000\u0000ᇄᇆ\u0001\u0000\u0000\u0000ᇅᇃ\u0001\u0000\u0000\u0000ᇆᇇ\u0005Ƅ\u0000\u0000ᇇᇈ\u0003ł¡\u0000ᇈᇊ\u0001\u0000\u0000\u0000ᇉᆽ\u0001\u0000\u0000\u0000ᇊᇍ\u0001\u0000\u0000\u0000ᇋᇉ\u0001\u0000\u0000\u0000ᇋᇌ\u0001\u0000\u0000\u0000ᇌǛ\u0001\u0000\u0000\u0000ᇍᇋ\u0001\u0000\u0000\u0000ᇎᇏ\u0007<\u0000\u0000ᇏǝ\u0001\u0000\u0000\u0000ᇐᇑ\u0007=\u0000\u0000ᇑǟ\u0001\u0000\u0000\u0000ᇒᇓ\u0007>\u0000\u0000ᇓǡ\u0001\u0000\u0000\u0000ɇǤǩǬǰǵǺǽȁȈȗȤȮȱȵȼɃɎɑɚɧɬɲɻʋʏʝʡʦʩʰʳʹˁ˅ˊˬ˾̧̣̭̰̳̺͙̆̈̽́̈́͌͗ͤͨͫ͡ͱͼ\u0382·ΩζϏϘϠϤϩϯϻЃЉЗМЬгзняњўѤѪѭѰѷѻ҅҇ҐғҜҡҧҳҶҽӈӋӐӓӚӟөӫӱӵӺԀԃԇԊԑԗԛԡԤԧԮԳԼՄՊՍՐՖ՚՟բզըհոջրֆ\u058c֏ׇֺֽׁ֖֚֓֞\u05ca\u05cdדכנצ\u05ecׯ\u05f6\u05fd؆؋ؐؗ\u061dآخرعؼكٰٔٳٹڂڋڎڕژڡڥکڭڴڹۅۉې݄\u074cݔݝݧݫݮݵݻލޙޞު\u07b3\u07bb\u07bf߆߈ߍߒߖߙߟߤߩ߭ߵߺ߽ࠂࠆࠋࠍࠑࠚࠢࠨ࠷࠾ࡃࡊࡏࡒࡪ\u086c\u0875\u087c\u087f\u0886\u088a\u0890\u0898\u089fࢢࢪ\u08b5ࣀ\u08c8\u08ce࣮ࣹࣚ࣡ࣨँइऍऐघडपभशहूॅॎ॑॔ख़ज़य़५ॲॹॿঁ\u098d\u0991কছঠনবযল\u09b5হঽূ\u09c6\u09c9ৌ\u09cf\u09d3\u09d8ড়য়ৢ\u09e5১৭৴৹ৼ\u09ffਃ\u0a0d\u0a11ਓਖਚਠਤਯਹ\u0a3d\u0a49\u0a55\u0a64੩੯\u0a7bઋઐઝઢપર\u0ab4ષ\u0abaુેૐ\u0ada૩૮૰\u0af4૽ଊଏଓଛଞଢରଽୂ\u0b46\u0b49୍\u0b53ୖଢ଼୩୴\u0b81\u0b8c\u0b91ஙஞ\u0ba5மறஶ\u0bbdீ\u0bc5ோ\u0bd1\u0bd6\u0bda\u0be0\u0be4௧௬௯௴௸\u0bfb\u0bfeఄఉఐఓథధపవా\u0c45్\u0c54ౘ\u0c5b\u0c5e౦౮\u0c74౿ಇಎಕಗತಮಱಳಽೇೊೌ\u0cd4\u0cd8ೡ\u0ce4೪೮\u0cf0\u0cf9അഇഎകഛഡണപലഺീ\u0d45ൌ\u0d52ൖ൘ൟ൨൯൹ൾංඌඓචජඪඬධමශ\u0dc7ාු\u0de0\u0de5෨෮ෲ\u0df7\u0dfcกฉยฤั\u0e3d้ํ๖๚\u0e6c\u0e6f\u0e77\u0e80ຉທຝລະື຺\u0ec7໌໔໘ໜ\u0ee8༁༈་༚༞༭༯༹\u0f48ཊབྷཛརཧ\u0f6fཽུ\u0f98ྨྐྵ\u0fbd࿃࿉࿒࿖࿘\u0fdf\u0fe7\u0ff0\u0ffdစဈဏဗဠိဲဴ်၅၈၌၏ၖၛၡၤၭၯၼႈ႓ႛႨႼ\u10c6\u10c9გვთლოჯჸჿᄌᄓᄝᄠᄥᄭᄲᄸᄽᅂᅆᅊᅎᅒᅖᅚᅞᅡᅨᅭᅻᆀᆄᆈᆌᆘᆜᆠᆦᆬᆯᆱᆸᇃᇋ";
   public static final String _serializedATN;
   public static final ATN _ATN;

   private static String[] makeRuleNames() {
      return new String[]{"compoundOrSingleStatement", "singleCompoundStatement", "beginEndCompoundBlock", "compoundBody", "compoundStatement", "setStatementInsideSqlScript", "sqlStateValue", "declareConditionStatement", "conditionValue", "conditionValues", "declareHandlerStatement", "whileStatement", "ifElseStatement", "repeatStatement", "leaveStatement", "iterateStatement", "caseStatement", "loopStatement", "forStatement", "singleStatement", "beginLabel", "endLabel", "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier", "singleFunctionIdentifier", "singleDataType", "singleTableSchema", "singleRoutineParamList", "statement", "setResetStatement", "executeImmediate", "executeImmediateUsing", "executeImmediateQueryParam", "executeImmediateArgument", "executeImmediateArgumentSeq", "timezone", "configKey", "configValue", "unsupportedHiveNativeCommands", "createTableHeader", "replaceTableHeader", "clusterBySpec", "bucketSpec", "skewSpec", "locationSpec", "schemaBinding", "commentSpec", "singleQuery", "query", "insertInto", "partitionSpecLocation", "partitionSpec", "partitionVal", "namespace", "namespaces", "variable", "describeFuncName", "describeColName", "ctes", "namedQuery", "tableProvider", "createTableClauses", "propertyList", "property", "propertyKey", "propertyValue", "expressionPropertyList", "expressionProperty", "constantList", "nestedConstantList", "createFileFormat", "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", "identifierReference", "catalogIdentifierReference", "queryOrganization", "multiInsertQueryBody", "queryTerm", "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", "querySpecification", "transformClause", "selectClause", "setClause", "matchedClause", "notMatchedClause", "notMatchedBySourceClause", "matchedAction", "notMatchedAction", "notMatchedBySourceAction", "exceptClause", "assignmentList", "assignment", "whereClause", "havingClause", "hint", "hintStatement", "fromClause", "temporalClause", "aggregationClause", "groupByClause", "groupingAnalytics", "groupingElement", "groupingSet", "pivotClause", "pivotColumn", "pivotValue", "unpivotClause", "unpivotNullClause", "unpivotOperator", "unpivotSingleValueColumnClause", "unpivotMultiValueColumnClause", "unpivotColumnSet", "unpivotValueColumn", "unpivotNameColumn", "unpivotColumnAndAlias", "unpivotColumn", "unpivotAlias", "lateralView", "setQuantifier", "relation", "relationExtension", "joinRelation", "joinType", "joinCriteria", "sample", "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", "orderedIdentifier", "identifierCommentList", "identifierComment", "relationPrimary", "optionsClause", "inlineTable", "functionTableSubqueryArgument", "tableArgumentPartitioning", "functionTableNamedArgumentExpression", "functionTableReferenceArgument", "functionTableArgument", "functionTable", "tableAlias", "rowFormat", "multipartIdentifierList", "multipartIdentifier", "multipartIdentifierPropertyList", "multipartIdentifierProperty", "tableIdentifier", "functionIdentifier", "namedExpression", "namedExpressionSeq", "partitionFieldList", "partitionField", "transform", "transformArgument", "expression", "namedArgumentExpression", "functionArgument", "expressionSeq", "booleanExpression", "predicate", "errorCapturingNot", "valueExpression", "shiftOperator", "datetimeUnit", "primaryExpression", "literalType", "constant", "comparisonOperator", "arithmeticOperator", "predicateOperator", "booleanValue", "interval", "errorCapturingMultiUnitsInterval", "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval", "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", "colPosition", "collationSpec", "collateClause", "type", "dataType", "qualifiedColTypeWithPositionList", "qualifiedColTypeWithPosition", "colDefinitionDescriptorWithPosition", "defaultExpression", "variableDefaultExpression", "colTypeList", "colType", "colDefinitionList", "colDefinition", "colDefinitionOption", "generationExpression", "identityColSpec", "sequenceGeneratorOption", "sequenceGeneratorStartOrStep", "complexColTypeList", "complexColType", "routineCharacteristics", "routineLanguage", "specificName", "deterministic", "sqlDataAccess", "nullCall", "rightsClause", "whenClause", "windowClause", "namedWindow", "windowSpec", "windowFrame", "frameBound", "qualifiedNameList", "functionName", "qualifiedName", "errorCapturingIdentifier", "errorCapturingIdentifierExtra", "identifier", "strictIdentifier", "quotedIdentifier", "backQuotedIdentifier", "number", "alterColumnSpecList", "alterColumnSpec", "alterColumnAction", "stringLit", "comment", "version", "operatorPipeRightSide", "operatorPipeSetAssignmentSeq", "ansiNonReserved", "strictNonReserved", "nonReserved"};
   }

   private static String[] makeLiteralNames() {
      return new String[]{null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'!'", "'ADD'", "'AFTER'", "'AGGREGATE'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'ATOMIC'", "'AUTHORIZATION'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BINDING'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'BYTE'", "'CACHE'", "'CALL'", "'CALLED'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", "'CHANGE'", "'CHAR'", "'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLATION'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", "'COMPENSATION'", "'COMPUTE'", "'CONCATENATE'", "'CONDITION'", "'CONSTRAINT'", "'CONTAINS'", "'CONTINUE'", "'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", "'DATEADD'", "'DATE_ADD'", "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", "'DEC'", "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DEFINER'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", "'DO'", "'DOUBLE'", "'DROP'", "'ELSE'", "'ELSEIF'", "'END'", "'ESCAPE'", "'ESCAPED'", "'EVOLUTION'", "'EXCEPT'", "'EXCHANGE'", "'EXCLUDE'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'EXPORT'", "'EXTEND'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FOUND'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HANDLER'", "'HAVING'", "'X'", "'HOUR'", "'HOURS'", "'IDENTIFIER'", "'IDENTITY'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IMPORT'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", "'INPUT'", "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", "'INTEGER'", "'INTO'", "'INVOKER'", "'IS'", "'ITEMS'", "'ITERATE'", "'JOIN'", "'JSON'", "'KEYS'", "'LANGUAGE'", "'LAST'", "'LATERAL'", "'LAZY'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", "'LONG'", "'LOOP'", "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'", "'MICROSECONDS'", "'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", "'MINUTES'", "'MODIFIES'", "'MONTH'", "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", "'NAMESPACES'", "'NANOSECOND'", "'NANOSECONDS'", "'NATURAL'", "'NO'", "'NONE'", "'NOT'", "'NULL'", "'NULLS'", "'NUMERIC'", "'OF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", "'RANGE'", "'READS'", "'REAL'", "'RECORDREADER'", "'RECORDWRITER'", "'RECOVER'", "'RECURSIVE'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", "'RENAME'", "'REPAIR'", "'REPEAT'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", "'RESTRICT'", "'RETURN'", "'RETURNS'", "'REVOKE'", "'RIGHT'", null, "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", "'SECURITY'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'", "'SHORT'", "'SHOW'", "'SINGLE'", "'SKEWED'", "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", "'SOURCE'", "'SPECIFIC'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", "'STRING'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM_TIME'", "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TARGET'", "'TBLPROPERTIES'", null, "'TERMINATED'", "'THEN'", "'TIME'", "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", "'EXECUTE'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UNTIL'", "'UPDATE'", "'USE'", "'USER'", "'USING'", "'VALUE'", "'VALUES'", "'VARCHAR'", "'VAR'", "'VARIABLE'", "'VARIANT'", "'VERSION'", "'VIEW'", "'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", "'YEARS'", "'ZONE'", null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", null, "'<<'", "'>>'", "'>>>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", "'|>'", "'^'", "':'", "'::'", "'->'", "'=>'", "'/*+'", "'*/'", "'?'"};
   }

   private static String[] makeSymbolicNames() {
      return new String[]{null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", "BANG", "ADD", "AFTER", "AGGREGATE", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ANTI", "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", "AS", "ASC", "AT", "ATOMIC", "AUTHORIZATION", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BINDING", "BOOLEAN", "BOTH", "BUCKET", "BUCKETS", "BY", "BYTE", "CACHE", "CALL", "CALLED", "CASCADE", "CASE", "CAST", "CATALOG", "CATALOGS", "CHANGE", "CHAR", "CHARACTER", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", "CODEGEN", "COLLATE", "COLLATION", "COLLECTION", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPENSATION", "COMPUTE", "CONCATENATE", "CONDITION", "CONSTRAINT", "CONTAINS", "CONTINUE", "COST", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DAY", "DAYS", "DAYOFYEAR", "DATA", "DATE", "DATABASE", "DATABASES", "DATEADD", "DATE_ADD", "DATEDIFF", "DATE_DIFF", "DBPROPERTIES", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFINED", "DEFINER", "DELETE", "DELIMITED", "DESC", "DESCRIBE", "DETERMINISTIC", "DFS", "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DIV", "DO", "DOUBLE", "DROP", "ELSE", "ELSEIF", "END", "ESCAPE", "ESCAPED", "EVOLUTION", "EXCEPT", "EXCHANGE", "EXCLUDE", "EXISTS", "EXIT", "EXPLAIN", "EXPORT", "EXTEND", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", "FIRST", "FLOAT", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", "FORMATTED", "FOUND", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANT", "GROUP", "GROUPING", "HANDLER", "HAVING", "BINARY_HEX", "HOUR", "HOURS", "IDENTIFIER_KW", "IDENTITY", "IF", "IGNORE", "IMMEDIATE", "IMPORT", "IN", "INCLUDE", "INCREMENT", "INDEX", "INDEXES", "INNER", "INPATH", "INPUT", "INPUTFORMAT", "INSERT", "INTERSECT", "INTERVAL", "INT", "INTEGER", "INTO", "INVOKER", "IS", "ITEMS", "ITERATE", "JOIN", "JSON", "KEYS", "LANGUAGE", "LAST", "LATERAL", "LAZY", "LEADING", "LEAVE", "LEFT", "LIKE", "ILIKE", "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL", "LONG", "LOOP", "MACRO", "MAP", "MATCHED", "MERGE", "MICROSECOND", "MICROSECONDS", "MILLISECOND", "MILLISECONDS", "MINUTE", "MINUTES", "MODIFIES", "MONTH", "MONTHS", "MSCK", "NAME", "NAMESPACE", "NAMESPACES", "NANOSECOND", "NANOSECONDS", "NATURAL", "NO", "NONE", "NOT", "NULL", "NULLS", "NUMERIC", "OF", "OFFSET", "ON", "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING", "PRIMARY", "PRINCIPALS", "PROPERTIES", "PURGE", "QUARTER", "QUERY", "RANGE", "READS", "REAL", "RECORDREADER", "RECORDWRITER", "RECOVER", "RECURSIVE", "REDUCE", "REFERENCES", "REFRESH", "RENAME", "REPAIR", "REPEAT", "REPEATABLE", "REPLACE", "RESET", "RESPECT", "RESTRICT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", "SCHEMA", "SCHEMAS", "SECURITY", "SELECT", "SEMI", "SEPARATED", "SERDE", "SERDEPROPERTIES", "SESSION_USER", "SET", "SETMINUS", "SETS", "SHORT", "SHOW", "SINGLE", "SKEWED", "SMALLINT", "SOME", "SORT", "SORTED", "SOURCE", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "START", "STATISTICS", "STORED", "STRATIFY", "STRING", "STRUCT", "SUBSTR", "SUBSTRING", "SYNC", "SYSTEM_TIME", "SYSTEM_VERSION", "TABLE", "TABLES", "TABLESAMPLE", "TARGET", "TBLPROPERTIES", "TEMPORARY", "TERMINATED", "THEN", "TIME", "TIMEDIFF", "TIMESTAMP", "TIMESTAMP_LTZ", "TIMESTAMP_NTZ", "TIMESTAMPADD", "TIMESTAMPDIFF", "TINYINT", "TO", "EXECUTE", "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNPIVOT", "UNSET", "UNTIL", "UPDATE", "USE", "USER", "USING", "VALUE", "VALUES", "VARCHAR", "VAR", "VARIABLE", "VARIANT", "VERSION", "VIEW", "VIEWS", "VOID", "WEEK", "WEEKS", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "WITHIN", "YEAR", "YEARS", "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", "SHIFT_LEFT", "SHIFT_RIGHT", "SHIFT_RIGHT_UNSIGNED", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", "OPERATOR_PIPE", "HAT", "COLON", "DOUBLE_COLON", "ARROW", "FAT_ARROW", "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED"};
   }

   /** @deprecated */
   @Deprecated
   public String[] getTokenNames() {
      return tokenNames;
   }

   public Vocabulary getVocabulary() {
      return VOCABULARY;
   }

   public String getGrammarFileName() {
      return "SqlBaseParser.g4";
   }

   public String[] getRuleNames() {
      return ruleNames;
   }

   public String getSerializedATN() {
      return _serializedATN;
   }

   public ATN getATN() {
      return _ATN;
   }

   public SqlBaseParser(TokenStream input) {
      super(input);
      this._interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
   }

   public final CompoundOrSingleStatementContext compoundOrSingleStatement() throws RecognitionException {
      CompoundOrSingleStatementContext _localctx = new CompoundOrSingleStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 0, 0);

      try {
         this.setState(484);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 2:
            case 9:
            case 13:
            case 15:
            case 38:
            case 39:
            case 50:
            case 59:
            case 60:
            case 71:
            case 93:
            case 97:
            case 99:
            case 100:
            case 102:
            case 110:
            case 122:
            case 123:
            case 141:
            case 147:
            case 160:
            case 170:
            case 194:
            case 195:
            case 198:
            case 204:
            case 206:
            case 216:
            case 265:
            case 267:
            case 269:
            case 272:
            case 273:
            case 278:
            case 283:
            case 292:
            case 298:
            case 302:
            case 314:
            case 325:
            case 342:
            case 350:
            case 355:
            case 359:
            case 363:
            case 364:
            case 368:
            case 383:
               this.enterOuterAlt(_localctx, 1);
               this.setState(482);
               this.singleStatement();
               break;
            case 27:
               this.enterOuterAlt(_localctx, 2);
               this.setState(483);
               this.singleCompoundStatement();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleCompoundStatementContext singleCompoundStatement() throws RecognitionException {
      SingleCompoundStatementContext _localctx = new SingleCompoundStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 2, 1);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(486);
         this.match(27);
         this.setState(489);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 1, this._ctx)) {
            case 1:
               this.setState(487);
               this.match(225);
               this.setState(488);
               this.match(25);
            default:
               this.setState(492);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 2, this._ctx)) {
                  case 1:
                     this.setState(491);
                     this.compoundBody();
                  default:
                     this.setState(494);
                     this.match(113);
                     this.setState(496);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 1) {
                        this.setState(495);
                        this.match(1);
                     }

                     this.setState(498);
                     this.match(-1);
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final BeginEndCompoundBlockContext beginEndCompoundBlock() throws RecognitionException {
      BeginEndCompoundBlockContext _localctx = new BeginEndCompoundBlockContext(this._ctx, this.getState());
      this.enterRule(_localctx, 4, 2);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(501);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 4, this._ctx)) {
            case 1:
               this.setState(500);
               this.beginLabel();
            default:
               this.setState(503);
               this.match(27);
               this.setState(506);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 5, this._ctx)) {
                  case 1:
                     this.setState(504);
                     this.match(225);
                     this.setState(505);
                     this.match(25);
                  default:
                     this.setState(509);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 6, this._ctx)) {
                        case 1:
                           this.setState(508);
                           this.compoundBody();
                        default:
                           this.setState(511);
                           this.match(113);
                           this.setState(513);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 7, this._ctx)) {
                              case 1:
                                 this.setState(512);
                                 this.endLabel();
                           }
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CompoundBodyContext compoundBody() throws RecognitionException {
      CompoundBodyContext _localctx = new CompoundBodyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 6, 3);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(518);
         this._errHandler.sync(this);
         int _alt = 1;

         while(true) {
            switch (_alt) {
               case 1:
                  this.setState(515);
                  _localctx.compoundStatement = this.compoundStatement();
                  _localctx.compoundStatements.add(_localctx.compoundStatement);
                  this.setState(516);
                  this.match(1);
                  this.setState(520);
                  this._errHandler.sync(this);
                  _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 8, this._ctx);
                  if (_alt == 2 || _alt == 0) {
                     return _localctx;
                  }
                  break;
               default:
                  throw new NoViableAltException(this);
            }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CompoundStatementContext compoundStatement() throws RecognitionException {
      CompoundStatementContext _localctx = new CompoundStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 8, 4);

      try {
         this.setState(535);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 9, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(522);
               this.declareConditionStatement();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(523);
               this.statement();
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(524);
               this.setStatementInsideSqlScript();
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(525);
               this.beginEndCompoundBlock();
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(526);
               this.declareHandlerStatement();
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(527);
               this.ifElseStatement();
               break;
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(528);
               this.caseStatement();
               break;
            case 8:
               this.enterOuterAlt(_localctx, 8);
               this.setState(529);
               this.whileStatement();
               break;
            case 9:
               this.enterOuterAlt(_localctx, 9);
               this.setState(530);
               this.repeatStatement();
               break;
            case 10:
               this.enterOuterAlt(_localctx, 10);
               this.setState(531);
               this.leaveStatement();
               break;
            case 11:
               this.enterOuterAlt(_localctx, 11);
               this.setState(532);
               this.iterateStatement();
               break;
            case 12:
               this.enterOuterAlt(_localctx, 12);
               this.setState(533);
               this.loopStatement();
               break;
            case 13:
               this.enterOuterAlt(_localctx, 13);
               this.setState(534);
               this.forStatement();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SetStatementInsideSqlScriptContext setStatementInsideSqlScript() throws RecognitionException {
      SetStatementInsideSqlScriptContext _localctx = new SetStatementInsideSqlScriptContext(this._ctx, this.getState());
      this.enterRule(_localctx, 10, 5);

      try {
         this.setState(548);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 10, this._ctx)) {
            case 1:
               _localctx = new SetVariableInsideSqlScriptContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(537);
               this.match(298);
               this.setState(538);
               this.assignmentList();
               break;
            case 2:
               _localctx = new SetVariableInsideSqlScriptContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(539);
               this.match(298);
               this.setState(540);
               this.match(2);
               this.setState(541);
               this.multipartIdentifierList();
               this.setState(542);
               this.match(3);
               this.setState(543);
               this.match(388);
               this.setState(544);
               this.match(2);
               this.setState(545);
               this.query();
               this.setState(546);
               this.match(3);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SqlStateValueContext sqlStateValue() throws RecognitionException {
      SqlStateValueContext _localctx = new SqlStateValueContext(this._ctx, this.getState());
      this.enterRule(_localctx, 12, 6);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(550);
         this.stringLit();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DeclareConditionStatementContext declareConditionStatement() throws RecognitionException {
      DeclareConditionStatementContext _localctx = new DeclareConditionStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 14, 7);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(552);
         this.match(93);
         this.setState(553);
         this.multipartIdentifier();
         this.setState(554);
         this.match(66);
         this.setState(561);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 136) {
            this.setState(555);
            this.match(136);
            this.setState(556);
            this.match(313);
            this.setState(558);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 11, this._ctx)) {
               case 1:
                  this.setState(557);
                  this.match(367);
               default:
                  this.setState(560);
                  this.sqlStateValue();
            }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ConditionValueContext conditionValue() throws RecognitionException {
      ConditionValueContext _localctx = new ConditionValueContext(this._ctx, this.getState());
      this.enterRule(_localctx, 16, 8);

      try {
         this.setState(572);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 14, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(563);
               this.match(313);
               this.setState(565);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 13, this._ctx)) {
                  case 1:
                     this.setState(564);
                     this.match(367);
                  default:
                     this.setState(567);
                     this.sqlStateValue();
                     return _localctx;
               }
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(568);
               this.match(312);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(569);
               this.match(225);
               this.setState(570);
               this.match(140);
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(571);
               this.multipartIdentifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ConditionValuesContext conditionValues() throws RecognitionException {
      ConditionValuesContext _localctx = new ConditionValuesContext(this._ctx, this.getState());
      this.enterRule(_localctx, 18, 9);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(574);
         _localctx.conditionValue = this.conditionValue();
         _localctx.cvList.add(_localctx.conditionValue);
         this.setState(579);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 15, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 15, this._ctx)) {
            if (_alt == 1) {
               this.setState(575);
               this.match(4);
               this.setState(576);
               _localctx.conditionValue = this.conditionValue();
               _localctx.cvList.add(_localctx.conditionValue);
            }

            this.setState(581);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DeclareHandlerStatementContext declareHandlerStatement() throws RecognitionException {
      DeclareHandlerStatementContext _localctx = new DeclareHandlerStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 20, 10);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(582);
         this.match(93);
         this.setState(583);
         int _la = this._input.LA(1);
         if (_la != 69 && _la != 121) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }

         this.setState(584);
         this.match(150);
         this.setState(585);
         this.match(136);
         this.setState(586);
         this.conditionValues();
         this.setState(590);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 16, this._ctx)) {
            case 1:
               this.setState(587);
               this.beginEndCompoundBlock();
               break;
            case 2:
               this.setState(588);
               this.statement();
               break;
            case 3:
               this.setState(589);
               this.setStatementInsideSqlScript();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final WhileStatementContext whileStatement() throws RecognitionException {
      WhileStatementContext _localctx = new WhileStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 22, 11);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(593);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 17, this._ctx)) {
            case 1:
               this.setState(592);
               this.beginLabel();
            default:
               this.setState(595);
               this.match(381);
               this.setState(596);
               this.booleanExpression(0);
               this.setState(597);
               this.match(108);
               this.setState(598);
               this.compoundBody();
               this.setState(599);
               this.match(113);
               this.setState(600);
               this.match(381);
               this.setState(602);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 18, this._ctx)) {
                  case 1:
                     this.setState(601);
                     this.endLabel();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IfElseStatementContext ifElseStatement() throws RecognitionException {
      IfElseStatementContext _localctx = new IfElseStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 24, 12);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(604);
         this.match(157);
         this.setState(605);
         this.booleanExpression(0);
         this.setState(606);
         this.match(332);
         this.setState(607);
         _localctx.compoundBody = this.compoundBody();
         _localctx.conditionalBodies.add(_localctx.compoundBody);
         this.setState(615);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 112; _la = this._input.LA(1)) {
            this.setState(608);
            this.match(112);
            this.setState(609);
            this.booleanExpression(0);
            this.setState(610);
            this.match(332);
            this.setState(611);
            _localctx.compoundBody = this.compoundBody();
            _localctx.conditionalBodies.add(_localctx.compoundBody);
            this.setState(617);
            this._errHandler.sync(this);
         }

         this.setState(620);
         this._errHandler.sync(this);
         int var9 = this._input.LA(1);
         if (var9 == 111) {
            this.setState(618);
            this.match(111);
            this.setState(619);
            _localctx.elseBody = this.compoundBody();
         }

         this.setState(622);
         this.match(113);
         this.setState(623);
         this.match(157);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RepeatStatementContext repeatStatement() throws RecognitionException {
      RepeatStatementContext _localctx = new RepeatStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 26, 13);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(626);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 21, this._ctx)) {
            case 1:
               this.setState(625);
               this.beginLabel();
            default:
               this.setState(628);
               this.match(270);
               this.setState(629);
               this.compoundBody();
               this.setState(630);
               this.match(362);
               this.setState(631);
               this.booleanExpression(0);
               this.setState(632);
               this.match(113);
               this.setState(633);
               this.match(270);
               this.setState(635);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 22, this._ctx)) {
                  case 1:
                     this.setState(634);
                     this.endLabel();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final LeaveStatementContext leaveStatement() throws RecognitionException {
      LeaveStatementContext _localctx = new LeaveStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 28, 14);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(637);
         this.match(188);
         this.setState(638);
         this.multipartIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IterateStatementContext iterateStatement() throws RecognitionException {
      IterateStatementContext _localctx = new IterateStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 30, 15);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(640);
         this.match(179);
         this.setState(641);
         this.multipartIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CaseStatementContext caseStatement() throws RecognitionException {
      CaseStatementContext _localctx = new CaseStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 32, 16);

      try {
         this.setState(678);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 27, this._ctx)) {
            case 1:
               _localctx = new SearchedCaseStatementContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(643);
               this.match(42);
               this.setState(649);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);

               do {
                  this.setState(644);
                  this.match(379);
                  this.setState(645);
                  ((SearchedCaseStatementContext)_localctx).booleanExpression = this.booleanExpression(0);
                  ((SearchedCaseStatementContext)_localctx).conditions.add(((SearchedCaseStatementContext)_localctx).booleanExpression);
                  this.setState(646);
                  this.match(332);
                  this.setState(647);
                  ((SearchedCaseStatementContext)_localctx).compoundBody = this.compoundBody();
                  ((SearchedCaseStatementContext)_localctx).conditionalBodies.add(((SearchedCaseStatementContext)_localctx).compoundBody);
                  this.setState(651);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 379);

               this.setState(655);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 111) {
                  this.setState(653);
                  this.match(111);
                  this.setState(654);
                  ((SearchedCaseStatementContext)_localctx).elseBody = this.compoundBody();
               }

               this.setState(657);
               this.match(113);
               this.setState(658);
               this.match(42);
               break;
            case 2:
               _localctx = new SimpleCaseStatementContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(660);
               this.match(42);
               this.setState(661);
               ((SimpleCaseStatementContext)_localctx).caseVariable = this.expression();
               this.setState(667);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);

               do {
                  this.setState(662);
                  this.match(379);
                  this.setState(663);
                  ((SimpleCaseStatementContext)_localctx).expression = this.expression();
                  ((SimpleCaseStatementContext)_localctx).conditionExpressions.add(((SimpleCaseStatementContext)_localctx).expression);
                  this.setState(664);
                  this.match(332);
                  this.setState(665);
                  ((SimpleCaseStatementContext)_localctx).compoundBody = this.compoundBody();
                  ((SimpleCaseStatementContext)_localctx).conditionalBodies.add(((SimpleCaseStatementContext)_localctx).compoundBody);
                  this.setState(669);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 379);

               this.setState(673);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 111) {
                  this.setState(671);
                  this.match(111);
                  this.setState(672);
                  ((SimpleCaseStatementContext)_localctx).elseBody = this.compoundBody();
               }

               this.setState(675);
               this.match(113);
               this.setState(676);
               this.match(42);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final LoopStatementContext loopStatement() throws RecognitionException {
      LoopStatementContext _localctx = new LoopStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 34, 17);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(681);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 28, this._ctx)) {
            case 1:
               this.setState(680);
               this.beginLabel();
            default:
               this.setState(683);
               this.match(202);
               this.setState(684);
               this.compoundBody();
               this.setState(685);
               this.match(113);
               this.setState(686);
               this.match(202);
               this.setState(688);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 29, this._ctx)) {
                  case 1:
                     this.setState(687);
                     this.endLabel();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ForStatementContext forStatement() throws RecognitionException {
      ForStatementContext _localctx = new ForStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 36, 18);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(691);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 30, this._ctx)) {
            case 1:
               this.setState(690);
               this.beginLabel();
            default:
               this.setState(693);
               this.match(136);
               this.setState(697);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 31, this._ctx)) {
                  case 1:
                     this.setState(694);
                     this.multipartIdentifier();
                     this.setState(695);
                     this.match(22);
                  default:
                     this.setState(699);
                     this.query();
                     this.setState(700);
                     this.match(108);
                     this.setState(701);
                     this.compoundBody();
                     this.setState(702);
                     this.match(113);
                     this.setState(703);
                     this.match(136);
                     this.setState(705);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 32, this._ctx)) {
                        case 1:
                           this.setState(704);
                           this.endLabel();
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleStatementContext singleStatement() throws RecognitionException {
      SingleStatementContext _localctx = new SingleStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 38, 19);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(709);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 33, this._ctx)) {
            case 1:
               this.setState(707);
               this.statement();
               break;
            case 2:
               this.setState(708);
               this.setResetStatement();
         }

         this.setState(714);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 1; _la = this._input.LA(1)) {
            this.setState(711);
            this.match(1);
            this.setState(716);
            this._errHandler.sync(this);
         }

         this.setState(717);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final BeginLabelContext beginLabel() throws RecognitionException {
      BeginLabelContext _localctx = new BeginLabelContext(this._ctx, this.getState());
      this.enterRule(_localctx, 40, 20);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(719);
         this.multipartIdentifier();
         this.setState(720);
         this.match(410);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final EndLabelContext endLabel() throws RecognitionException {
      EndLabelContext _localctx = new EndLabelContext(this._ctx, this.getState());
      this.enterRule(_localctx, 42, 21);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(722);
         this.multipartIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleExpressionContext singleExpression() throws RecognitionException {
      SingleExpressionContext _localctx = new SingleExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 44, 22);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(724);
         this.namedExpression();
         this.setState(725);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleTableIdentifierContext singleTableIdentifier() throws RecognitionException {
      SingleTableIdentifierContext _localctx = new SingleTableIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 46, 23);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(727);
         this.tableIdentifier();
         this.setState(728);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleMultipartIdentifierContext singleMultipartIdentifier() throws RecognitionException {
      SingleMultipartIdentifierContext _localctx = new SingleMultipartIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 48, 24);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(730);
         this.multipartIdentifier();
         this.setState(731);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleFunctionIdentifierContext singleFunctionIdentifier() throws RecognitionException {
      SingleFunctionIdentifierContext _localctx = new SingleFunctionIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 50, 25);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(733);
         this.functionIdentifier();
         this.setState(734);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleDataTypeContext singleDataType() throws RecognitionException {
      SingleDataTypeContext _localctx = new SingleDataTypeContext(this._ctx, this.getState());
      this.enterRule(_localctx, 52, 26);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(736);
         this.dataType();
         this.setState(737);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleTableSchemaContext singleTableSchema() throws RecognitionException {
      SingleTableSchemaContext _localctx = new SingleTableSchemaContext(this._ctx, this.getState());
      this.enterRule(_localctx, 54, 27);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(739);
         this.colTypeList();
         this.setState(740);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleRoutineParamListContext singleRoutineParamList() throws RecognitionException {
      SingleRoutineParamListContext _localctx = new SingleRoutineParamListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 56, 28);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(742);
         this.colDefinitionList();
         this.setState(743);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final StatementContext statement() throws RecognitionException {
      StatementContext _localctx = new StatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 58, 29);

      try {
         this.setState(1596);
         this._errHandler.sync(this);
         label2353:
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 163, this._ctx)) {
            case 1:
               _localctx = new StatementDefaultContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(745);
               this.query();
               break;
            case 2:
               _localctx = new VisitExecuteImmediateContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(746);
               this.executeImmediate();
               break;
            case 3:
               _localctx = new DmlStatementContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(748);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 383) {
                  this.setState(747);
                  this.ctes();
               }

               this.setState(750);
               this.dmlStatementNoWith();
               break;
            case 4:
               _localctx = new UseContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(751);
               this.match(364);
               this.setState(752);
               this.identifierReference();
               break;
            case 5:
               _localctx = new UseNamespaceContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(753);
               this.match(364);
               this.setState(754);
               this.namespace();
               this.setState(755);
               this.identifierReference();
               break;
            case 6:
               _localctx = new SetCatalogContext(_localctx);
               this.enterOuterAlt(_localctx, 6);
               this.setState(757);
               this.match(298);
               this.setState(758);
               this.match(44);
               this.setState(759);
               this.catalogIdentifierReference();
               break;
            case 7:
               _localctx = new CreateNamespaceContext(_localctx);
               this.enterOuterAlt(_localctx, 7);
               this.setState(760);
               this.match(71);
               this.setState(761);
               this.namespace();
               this.setState(766);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 36, this._ctx)) {
                  case 1:
                     this.setState(762);
                     this.match(157);
                     this.setState(763);
                     this.errorCapturingNot();
                     this.setState(764);
                     this.match(120);
                  default:
                     this.setState(768);
                     this.identifierReference();
                     this.setState(776);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 59 || _la == 197 || _la == 383; _la = this._input.LA(1)) {
                        this.setState(774);
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                           case 59:
                              this.setState(769);
                              this.commentSpec();
                              break;
                           case 197:
                              this.setState(770);
                              this.locationSpec();
                              break;
                           case 383:
                              this.setState(771);
                              this.match(383);
                              this.setState(772);
                              _la = this._input.LA(1);
                              if (_la != 90 && _la != 254) {
                                 this._errHandler.recoverInline(this);
                              } else {
                                 if (this._input.LA(1) == -1) {
                                    this.matchedEOF = true;
                                 }

                                 this._errHandler.reportMatch(this);
                                 this.consume();
                              }

                              this.setState(773);
                              this.propertyList();
                              break;
                           default:
                              throw new NoViableAltException(this);
                        }

                        this.setState(778);
                        this._errHandler.sync(this);
                     }

                     return _localctx;
               }
            case 8:
               _localctx = new SetNamespacePropertiesContext(_localctx);
               this.enterOuterAlt(_localctx, 8);
               this.setState(779);
               this.match(13);
               this.setState(780);
               this.namespace();
               this.setState(781);
               this.identifierReference();
               this.setState(782);
               this.match(298);
               this.setState(783);
               int _la = this._input.LA(1);
               if (_la != 90 && _la != 254) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(784);
               this.propertyList();
               break;
            case 9:
               _localctx = new UnsetNamespacePropertiesContext(_localctx);
               this.enterOuterAlt(_localctx, 9);
               this.setState(786);
               this.match(13);
               this.setState(787);
               this.namespace();
               this.setState(788);
               this.identifierReference();
               this.setState(789);
               this.match(361);
               this.setState(790);
               int _la = this._input.LA(1);
               if (_la != 90 && _la != 254) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(791);
               this.propertyList();
               break;
            case 10:
               _localctx = new SetNamespaceLocationContext(_localctx);
               this.enterOuterAlt(_localctx, 10);
               this.setState(793);
               this.match(13);
               this.setState(794);
               this.namespace();
               this.setState(795);
               this.identifierReference();
               this.setState(796);
               this.match(298);
               this.setState(797);
               this.locationSpec();
               break;
            case 11:
               _localctx = new DropNamespaceContext(_localctx);
               this.enterOuterAlt(_localctx, 11);
               this.setState(799);
               this.match(110);
               this.setState(800);
               this.namespace();
               this.setState(803);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 39, this._ctx)) {
                  case 1:
                     this.setState(801);
                     this.match(157);
                     this.setState(802);
                     this.match(120);
               }

               this.setState(805);
               this.identifierReference();
               this.setState(807);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 41 || _la == 275) {
                  this.setState(806);
                  _la = this._input.LA(1);
                  if (_la != 41 && _la != 275) {
                     this._errHandler.recoverInline(this);
                  } else {
                     if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                     }

                     this._errHandler.reportMatch(this);
                     this.consume();
                  }
               }
               break;
            case 12:
               _localctx = new ShowNamespacesContext(_localctx);
               this.enterOuterAlt(_localctx, 12);
               this.setState(809);
               this.match(302);
               this.setState(810);
               this.namespaces();
               this.setState(813);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 41, this._ctx)) {
                  case 1:
                     this.setState(811);
                     int _la = this._input.LA(1);
                     if (_la != 141 && _la != 161) {
                        this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }

                     this.setState(812);
                     this.multipartIdentifier();
               }

               this.setState(819);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 43, this._ctx)) {
                  case 1:
                     this.setState(816);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 42, this._ctx)) {
                        case 1:
                           this.setState(815);
                           this.match(190);
                        default:
                           this.setState(818);
                           ((ShowNamespacesContext)_localctx).pattern = this.stringLit();
                           return _localctx;
                     }
                  default:
                     return _localctx;
               }
            case 13:
               _localctx = new CreateTableContext(_localctx);
               this.enterOuterAlt(_localctx, 13);
               this.setState(821);
               this.createTableHeader();
               this.setState(826);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 44, this._ctx)) {
                  case 1:
                     this.setState(822);
                     this.match(2);
                     this.setState(823);
                     this.colDefinitionList();
                     this.setState(824);
                     this.match(3);
                  default:
                     this.setState(829);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 366) {
                        this.setState(828);
                        this.tableProvider();
                     }

                     this.setState(831);
                     this.createTableClauses();
                     this.setState(836);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
                     if (_la == 2 || _la == 22 || _la == 141 || _la == 204 || (_la - 265 & -64) == 0 && (1L << _la - 265 & 1152921504741064705L) != 0L || _la == 368 || _la == 383) {
                        this.setState(833);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 22) {
                           this.setState(832);
                           this.match(22);
                        }

                        this.setState(835);
                        this.query();
                     }

                     return _localctx;
               }
            case 14:
               _localctx = new CreateTableLikeContext(_localctx);
               this.enterOuterAlt(_localctx, 14);
               this.setState(838);
               this.match(71);
               this.setState(839);
               this.match(325);
               this.setState(844);
               this._errHandler.sync(this);
               int _la;
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 48, this._ctx)) {
                  case 1:
                     this.setState(840);
                     this.match(157);
                     this.setState(841);
                     this.errorCapturingNot();
                     this.setState(842);
                     this.match(120);
                  default:
                     this.setState(846);
                     ((CreateTableLikeContext)_localctx).target = this.tableIdentifier();
                     this.setState(847);
                     this.match(190);
                     this.setState(848);
                     ((CreateTableLikeContext)_localctx).source = this.tableIdentifier();
                     this.setState(857);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
               }

               while(_la == 197 || (_la - 285 & -64) == 0 && (1L << _la - 285 & 17594333528065L) != 0L || _la == 366) {
                  this.setState(855);
                  this._errHandler.sync(this);
                  switch (this._input.LA(1)) {
                     case 197:
                        this.setState(852);
                        this.locationSpec();
                        break;
                     case 285:
                        this.setState(850);
                        this.rowFormat();
                        break;
                     case 316:
                        this.setState(851);
                        this.createFileFormat();
                        break;
                     case 329:
                        this.setState(853);
                        this.match(329);
                        this.setState(854);
                        ((CreateTableLikeContext)_localctx).tableProps = this.propertyList();
                        break;
                     case 366:
                        this.setState(849);
                        this.tableProvider();
                        break;
                     default:
                        throw new NoViableAltException(this);
                  }

                  this.setState(859);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               }
               break;
            case 15:
               _localctx = new ReplaceTableContext(_localctx);
               this.enterOuterAlt(_localctx, 15);
               this.setState(860);
               this.replaceTableHeader();
               this.setState(865);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 51, this._ctx)) {
                  case 1:
                     this.setState(861);
                     this.match(2);
                     this.setState(862);
                     this.colDefinitionList();
                     this.setState(863);
                     this.match(3);
                  default:
                     this.setState(868);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 366) {
                        this.setState(867);
                        this.tableProvider();
                     }

                     this.setState(870);
                     this.createTableClauses();
                     this.setState(875);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
                     if (_la == 2 || _la == 22 || _la == 141 || _la == 204 || (_la - 265 & -64) == 0 && (1L << _la - 265 & 1152921504741064705L) != 0L || _la == 368 || _la == 383) {
                        this.setState(872);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la == 22) {
                           this.setState(871);
                           this.match(22);
                        }

                        this.setState(874);
                        this.query();
                     }

                     return _localctx;
               }
            case 16:
               _localctx = new AnalyzeContext(_localctx);
               this.enterOuterAlt(_localctx, 16);
               this.setState(877);
               this.match(15);
               this.setState(878);
               this.match(325);
               this.setState(879);
               this.identifierReference();
               this.setState(881);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(880);
                  this.partitionSpec();
               }

               this.setState(883);
               this.match(64);
               this.setState(884);
               this.match(315);
               this.setState(892);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 56, this._ctx)) {
                  case 1:
                     this.setState(885);
                     this.identifier();
                     return _localctx;
                  case 2:
                     this.setState(886);
                     this.match(136);
                     this.setState(887);
                     this.match(58);
                     this.setState(888);
                     this.identifierSeq();
                     return _localctx;
                  case 3:
                     this.setState(889);
                     this.match(136);
                     this.setState(890);
                     this.match(12);
                     this.setState(891);
                     this.match(58);
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 17:
               _localctx = new AnalyzeTablesContext(_localctx);
               this.enterOuterAlt(_localctx, 17);
               this.setState(894);
               this.match(15);
               this.setState(895);
               this.match(326);
               this.setState(898);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 141 || _la == 161) {
                  this.setState(896);
                  _la = this._input.LA(1);
                  if (_la != 141 && _la != 161) {
                     this._errHandler.recoverInline(this);
                  } else {
                     if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                     }

                     this._errHandler.reportMatch(this);
                     this.consume();
                  }

                  this.setState(897);
                  this.identifierReference();
               }

               this.setState(900);
               this.match(64);
               this.setState(901);
               this.match(315);
               this.setState(903);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 58, this._ctx)) {
                  case 1:
                     this.setState(902);
                     this.identifier();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 18:
               _localctx = new AddTableColumnsContext(_localctx);
               this.enterOuterAlt(_localctx, 18);
               this.setState(905);
               this.match(13);
               this.setState(906);
               this.match(325);
               this.setState(907);
               this.identifierReference();
               this.setState(908);
               this.match(9);
               this.setState(909);
               int _la = this._input.LA(1);
               if (_la != 57 && _la != 58) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(910);
               ((AddTableColumnsContext)_localctx).columns = this.qualifiedColTypeWithPositionList();
               break;
            case 19:
               _localctx = new AddTableColumnsContext(_localctx);
               this.enterOuterAlt(_localctx, 19);
               this.setState(912);
               this.match(13);
               this.setState(913);
               this.match(325);
               this.setState(914);
               this.identifierReference();
               this.setState(915);
               this.match(9);
               this.setState(916);
               int _la = this._input.LA(1);
               if (_la != 57 && _la != 58) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(917);
               this.match(2);
               this.setState(918);
               ((AddTableColumnsContext)_localctx).columns = this.qualifiedColTypeWithPositionList();
               this.setState(919);
               this.match(3);
               break;
            case 20:
               _localctx = new RenameTableColumnContext(_localctx);
               this.enterOuterAlt(_localctx, 20);
               this.setState(921);
               this.match(13);
               this.setState(922);
               this.match(325);
               this.setState(923);
               ((RenameTableColumnContext)_localctx).table = this.identifierReference();
               this.setState(924);
               this.match(268);
               this.setState(925);
               this.match(57);
               this.setState(926);
               ((RenameTableColumnContext)_localctx).from = this.multipartIdentifier();
               this.setState(927);
               this.match(341);
               this.setState(928);
               ((RenameTableColumnContext)_localctx).to = this.errorCapturingIdentifier();
               break;
            case 21:
               _localctx = new DropTableColumnsContext(_localctx);
               this.enterOuterAlt(_localctx, 21);
               this.setState(930);
               this.match(13);
               this.setState(931);
               this.match(325);
               this.setState(932);
               this.identifierReference();
               this.setState(933);
               this.match(110);
               this.setState(934);
               int _la = this._input.LA(1);
               if (_la != 57 && _la != 58) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(937);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 157) {
                  this.setState(935);
                  this.match(157);
                  this.setState(936);
                  this.match(120);
               }

               this.setState(939);
               this.match(2);
               this.setState(940);
               ((DropTableColumnsContext)_localctx).columns = this.multipartIdentifierList();
               this.setState(941);
               this.match(3);
               break;
            case 22:
               _localctx = new DropTableColumnsContext(_localctx);
               this.enterOuterAlt(_localctx, 22);
               this.setState(943);
               this.match(13);
               this.setState(944);
               this.match(325);
               this.setState(945);
               this.identifierReference();
               this.setState(946);
               this.match(110);
               this.setState(947);
               int _la = this._input.LA(1);
               if (_la != 57 && _la != 58) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(950);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 60, this._ctx)) {
                  case 1:
                     this.setState(948);
                     this.match(157);
                     this.setState(949);
                     this.match(120);
                  default:
                     this.setState(952);
                     ((DropTableColumnsContext)_localctx).columns = this.multipartIdentifierList();
                     return _localctx;
               }
            case 23:
               _localctx = new RenameTableContext(_localctx);
               this.enterOuterAlt(_localctx, 23);
               this.setState(954);
               this.match(13);
               this.setState(955);
               int _la = this._input.LA(1);
               if (_la != 325 && _la != 374) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(956);
               ((RenameTableContext)_localctx).from = this.identifierReference();
               this.setState(957);
               this.match(268);
               this.setState(958);
               this.match(341);
               this.setState(959);
               ((RenameTableContext)_localctx).to = this.multipartIdentifier();
               break;
            case 24:
               _localctx = new SetTablePropertiesContext(_localctx);
               this.enterOuterAlt(_localctx, 24);
               this.setState(961);
               this.match(13);
               this.setState(962);
               int _la = this._input.LA(1);
               if (_la != 325 && _la != 374) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(963);
               this.identifierReference();
               this.setState(964);
               this.match(298);
               this.setState(965);
               this.match(329);
               this.setState(966);
               this.propertyList();
               break;
            case 25:
               _localctx = new UnsetTablePropertiesContext(_localctx);
               this.enterOuterAlt(_localctx, 25);
               this.setState(968);
               this.match(13);
               this.setState(969);
               int _la = this._input.LA(1);
               if (_la != 325 && _la != 374) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(970);
               this.identifierReference();
               this.setState(971);
               this.match(361);
               this.setState(972);
               this.match(329);
               this.setState(975);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 157) {
                  this.setState(973);
                  this.match(157);
                  this.setState(974);
                  this.match(120);
               }

               this.setState(977);
               this.propertyList();
               break;
            case 26:
               _localctx = new AlterTableAlterColumnContext(_localctx);
               this.enterOuterAlt(_localctx, 26);
               this.setState(979);
               this.match(13);
               this.setState(980);
               this.match(325);
               this.setState(981);
               ((AlterTableAlterColumnContext)_localctx).table = this.identifierReference();
               this.setState(982);
               int _la = this._input.LA(1);
               if (_la != 13 && _la != 46) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(984);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 62, this._ctx)) {
                  case 1:
                     this.setState(983);
                     this.match(57);
                  default:
                     this.setState(986);
                     ((AlterTableAlterColumnContext)_localctx).columns = this.alterColumnSpecList();
                     return _localctx;
               }
            case 27:
               _localctx = new HiveChangeColumnContext(_localctx);
               this.enterOuterAlt(_localctx, 27);
               this.setState(988);
               this.match(13);
               this.setState(989);
               this.match(325);
               this.setState(990);
               ((HiveChangeColumnContext)_localctx).table = this.identifierReference();
               this.setState(992);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(991);
                  this.partitionSpec();
               }

               this.setState(994);
               this.match(46);
               this.setState(996);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 64, this._ctx)) {
                  case 1:
                     this.setState(995);
                     this.match(57);
               }

               this.setState(998);
               ((HiveChangeColumnContext)_localctx).colName = this.multipartIdentifier();
               this.setState(999);
               this.colType();
               this.setState(1001);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 10 || _la == 133) {
                  this.setState(1000);
                  this.colPosition();
               }
               break;
            case 28:
               _localctx = new HiveReplaceColumnsContext(_localctx);
               this.enterOuterAlt(_localctx, 28);
               this.setState(1003);
               this.match(13);
               this.setState(1004);
               this.match(325);
               this.setState(1005);
               ((HiveReplaceColumnsContext)_localctx).table = this.identifierReference();
               this.setState(1007);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1006);
                  this.partitionSpec();
               }

               this.setState(1009);
               this.match(272);
               this.setState(1010);
               this.match(58);
               this.setState(1011);
               this.match(2);
               this.setState(1012);
               ((HiveReplaceColumnsContext)_localctx).columns = this.qualifiedColTypeWithPositionList();
               this.setState(1013);
               this.match(3);
               break;
            case 29:
               _localctx = new SetTableSerDeContext(_localctx);
               this.enterOuterAlt(_localctx, 29);
               this.setState(1015);
               this.match(13);
               this.setState(1016);
               this.match(325);
               this.setState(1017);
               this.identifierReference();
               this.setState(1019);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1018);
                  this.partitionSpec();
               }

               this.setState(1021);
               this.match(298);
               this.setState(1022);
               this.match(295);
               this.setState(1023);
               this.stringLit();
               this.setState(1027);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 383) {
                  this.setState(1024);
                  this.match(383);
                  this.setState(1025);
                  this.match(296);
                  this.setState(1026);
                  this.propertyList();
               }
               break;
            case 30:
               _localctx = new SetTableSerDeContext(_localctx);
               this.enterOuterAlt(_localctx, 30);
               this.setState(1029);
               this.match(13);
               this.setState(1030);
               this.match(325);
               this.setState(1031);
               this.identifierReference();
               this.setState(1033);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1032);
                  this.partitionSpec();
               }

               this.setState(1035);
               this.match(298);
               this.setState(1036);
               this.match(296);
               this.setState(1037);
               this.propertyList();
               break;
            case 31:
               _localctx = new AddTablePartitionContext(_localctx);
               this.enterOuterAlt(_localctx, 31);
               this.setState(1039);
               this.match(13);
               this.setState(1040);
               int _la = this._input.LA(1);
               if (_la != 325 && _la != 374) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1041);
               this.identifierReference();
               this.setState(1042);
               this.match(9);
               this.setState(1047);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 157) {
                  this.setState(1043);
                  this.match(157);
                  this.setState(1044);
                  this.errorCapturingNot();
                  this.setState(1045);
                  this.match(120);
               }

               this.setState(1050);
               this._errHandler.sync(this);
               _la = this._input.LA(1);

               do {
                  this.setState(1049);
                  this.partitionSpecLocation();
                  this.setState(1052);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 244);

               return _localctx;
            case 32:
               _localctx = new RenameTablePartitionContext(_localctx);
               this.enterOuterAlt(_localctx, 32);
               this.setState(1054);
               this.match(13);
               this.setState(1055);
               this.match(325);
               this.setState(1056);
               this.identifierReference();
               this.setState(1057);
               ((RenameTablePartitionContext)_localctx).from = this.partitionSpec();
               this.setState(1058);
               this.match(268);
               this.setState(1059);
               this.match(341);
               this.setState(1060);
               ((RenameTablePartitionContext)_localctx).to = this.partitionSpec();
               break;
            case 33:
               _localctx = new DropTablePartitionsContext(_localctx);
               this.enterOuterAlt(_localctx, 33);
               this.setState(1062);
               this.match(13);
               this.setState(1063);
               int _la = this._input.LA(1);
               if (_la != 325 && _la != 374) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1064);
               this.identifierReference();
               this.setState(1065);
               this.match(110);
               this.setState(1068);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 157) {
                  this.setState(1066);
                  this.match(157);
                  this.setState(1067);
                  this.match(120);
               }

               this.setState(1070);
               this.partitionSpec();
               this.setState(1075);
               this._errHandler.sync(this);

               for(int var66 = this._input.LA(1); var66 == 4; var66 = this._input.LA(1)) {
                  this.setState(1071);
                  this.match(4);
                  this.setState(1072);
                  this.partitionSpec();
                  this.setState(1077);
                  this._errHandler.sync(this);
               }

               this.setState(1079);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 255) {
                  this.setState(1078);
                  this.match(255);
               }
               break;
            case 34:
               _localctx = new SetTableLocationContext(_localctx);
               this.enterOuterAlt(_localctx, 34);
               this.setState(1081);
               this.match(13);
               this.setState(1082);
               this.match(325);
               this.setState(1083);
               this.identifierReference();
               this.setState(1085);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1084);
                  this.partitionSpec();
               }

               this.setState(1087);
               this.match(298);
               this.setState(1088);
               this.locationSpec();
               break;
            case 35:
               _localctx = new RecoverPartitionsContext(_localctx);
               this.enterOuterAlt(_localctx, 35);
               this.setState(1090);
               this.match(13);
               this.setState(1091);
               this.match(325);
               this.setState(1092);
               this.identifierReference();
               this.setState(1093);
               this.match(263);
               this.setState(1094);
               this.match(246);
               break;
            case 36:
               _localctx = new AlterClusterByContext(_localctx);
               this.enterOuterAlt(_localctx, 36);
               this.setState(1096);
               this.match(13);
               this.setState(1097);
               this.match(325);
               this.setState(1098);
               this.identifierReference();
               this.setState(1103);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 76, this._ctx)) {
                  case 1:
                     this.setState(1099);
                     this.clusterBySpec();
                     return _localctx;
                  case 2:
                     this.setState(1100);
                     this.match(51);
                     this.setState(1101);
                     this.match(36);
                     this.setState(1102);
                     this.match(224);
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 37:
               _localctx = new AlterTableCollationContext(_localctx);
               this.enterOuterAlt(_localctx, 37);
               this.setState(1105);
               this.match(13);
               this.setState(1106);
               this.match(325);
               this.setState(1107);
               this.identifierReference();
               this.setState(1108);
               this.collationSpec();
               break;
            case 38:
               _localctx = new DropTableContext(_localctx);
               this.enterOuterAlt(_localctx, 38);
               this.setState(1110);
               this.match(110);
               this.setState(1111);
               this.match(325);
               this.setState(1114);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 77, this._ctx)) {
                  case 1:
                     this.setState(1112);
                     this.match(157);
                     this.setState(1113);
                     this.match(120);
                  default:
                     this.setState(1116);
                     this.identifierReference();
                     this.setState(1118);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 255) {
                        this.setState(1117);
                        this.match(255);
                     }

                     return _localctx;
               }
            case 39:
               _localctx = new DropViewContext(_localctx);
               this.enterOuterAlt(_localctx, 39);
               this.setState(1120);
               this.match(110);
               this.setState(1121);
               this.match(374);
               this.setState(1124);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 79, this._ctx)) {
                  case 1:
                     this.setState(1122);
                     this.match(157);
                     this.setState(1123);
                     this.match(120);
                  default:
                     this.setState(1126);
                     this.identifierReference();
                     return _localctx;
               }
            case 40:
               _localctx = new CreateViewContext(_localctx);
               this.enterOuterAlt(_localctx, 40);
               this.setState(1127);
               this.match(71);
               this.setState(1130);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 235) {
                  this.setState(1128);
                  this.match(235);
                  this.setState(1129);
                  this.match(272);
               }

               this.setState(1136);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 146 || _la == 330) {
                  this.setState(1133);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la == 146) {
                     this.setState(1132);
                     this.match(146);
                  }

                  this.setState(1135);
                  this.match(330);
               }

               this.setState(1138);
               this.match(374);
               this.setState(1143);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 83, this._ctx)) {
                  case 1:
                     this.setState(1139);
                     this.match(157);
                     this.setState(1140);
                     this.errorCapturingNot();
                     this.setState(1141);
                     this.match(120);
                  default:
                     this.setState(1145);
                     this.identifierReference();
                     this.setState(1147);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
                     if (_la == 2) {
                        this.setState(1146);
                        this.identifierCommentList();
                     }

                     this.setState(1159);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
               }

               while(_la == 59 || _la == 94 || _la == 245 || _la == 329 || _la == 383) {
                  this.setState(1157);
                  this._errHandler.sync(this);
                  switch (this._input.LA(1)) {
                     case 59:
                        this.setState(1149);
                        this.commentSpec();
                        break;
                     case 94:
                        this.setState(1151);
                        this.collationSpec();
                        break;
                     case 245:
                        this.setState(1152);
                        this.match(245);
                        this.setState(1153);
                        this.match(231);
                        this.setState(1154);
                        this.identifierList();
                        break;
                     case 329:
                        this.setState(1155);
                        this.match(329);
                        this.setState(1156);
                        this.propertyList();
                        break;
                     case 383:
                        this.setState(1150);
                        this.schemaBinding();
                        break;
                     default:
                        throw new NoViableAltException(this);
                  }

                  this.setState(1161);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               }

               this.setState(1162);
               this.match(22);
               this.setState(1163);
               this.query();
               break;
            case 41:
               _localctx = new CreateTempViewUsingContext(_localctx);
               this.enterOuterAlt(_localctx, 41);
               this.setState(1165);
               this.match(71);
               this.setState(1168);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 235) {
                  this.setState(1166);
                  this.match(235);
                  this.setState(1167);
                  this.match(272);
               }

               this.setState(1171);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 146) {
                  this.setState(1170);
                  this.match(146);
               }

               this.setState(1173);
               this.match(330);
               this.setState(1174);
               this.match(374);
               this.setState(1175);
               this.tableIdentifier();
               this.setState(1180);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 2) {
                  this.setState(1176);
                  this.match(2);
                  this.setState(1177);
                  this.colTypeList();
                  this.setState(1178);
                  this.match(3);
               }

               this.setState(1182);
               this.tableProvider();
               this.setState(1185);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 234) {
                  this.setState(1183);
                  this.match(234);
                  this.setState(1184);
                  this.propertyList();
               }
               break;
            case 42:
               _localctx = new AlterViewQueryContext(_localctx);
               this.enterOuterAlt(_localctx, 42);
               this.setState(1187);
               this.match(13);
               this.setState(1188);
               this.match(374);
               this.setState(1189);
               this.identifierReference();
               this.setState(1191);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 22) {
                  this.setState(1190);
                  this.match(22);
               }

               this.setState(1193);
               this.query();
               break;
            case 43:
               _localctx = new AlterViewSchemaBindingContext(_localctx);
               this.enterOuterAlt(_localctx, 43);
               this.setState(1195);
               this.match(13);
               this.setState(1196);
               this.match(374);
               this.setState(1197);
               this.identifierReference();
               this.setState(1198);
               this.schemaBinding();
               break;
            case 44:
               _localctx = new CreateFunctionContext(_localctx);
               this.enterOuterAlt(_localctx, 44);
               this.setState(1200);
               this.match(71);
               this.setState(1203);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 235) {
                  this.setState(1201);
                  this.match(235);
                  this.setState(1202);
                  this.match(272);
               }

               this.setState(1206);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 330) {
                  this.setState(1205);
                  this.match(330);
               }

               this.setState(1208);
               this.match(143);
               this.setState(1213);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 94, this._ctx)) {
                  case 1:
                     this.setState(1209);
                     this.match(157);
                     this.setState(1210);
                     this.errorCapturingNot();
                     this.setState(1211);
                     this.match(120);
               }

               this.setState(1215);
               this.identifierReference();
               this.setState(1216);
               this.match(22);
               this.setState(1217);
               ((CreateFunctionContext)_localctx).className = this.stringLit();
               this.setState(1227);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 366) {
                  this.setState(1218);
                  this.match(366);
                  this.setState(1219);
                  this.resource();
                  this.setState(1224);
                  this._errHandler.sync(this);

                  for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                     this.setState(1220);
                     this.match(4);
                     this.setState(1221);
                     this.resource();
                     this.setState(1226);
                     this._errHandler.sync(this);
                  }
               }
               break;
            case 45:
               _localctx = new CreateUserDefinedFunctionContext(_localctx);
               this.enterOuterAlt(_localctx, 45);
               this.setState(1229);
               this.match(71);
               this.setState(1232);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 235) {
                  this.setState(1230);
                  this.match(235);
                  this.setState(1231);
                  this.match(272);
               }

               this.setState(1235);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 330) {
                  this.setState(1234);
                  this.match(330);
               }

               this.setState(1237);
               this.match(143);
               this.setState(1242);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 99, this._ctx)) {
                  case 1:
                     this.setState(1238);
                     this.match(157);
                     this.setState(1239);
                     this.errorCapturingNot();
                     this.setState(1240);
                     this.match(120);
                  default:
                     this.setState(1244);
                     this.identifierReference();
                     this.setState(1245);
                     this.match(2);
                     this.setState(1247);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 100, this._ctx)) {
                        case 1:
                           this.setState(1246);
                           ((CreateUserDefinedFunctionContext)_localctx).parameters = this.colDefinitionList();
                        default:
                           this.setState(1249);
                           this.match(3);
                           this.setState(1259);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 102, this._ctx)) {
                              case 1:
                                 this.setState(1250);
                                 this.match(277);
                                 this.setState(1257);
                                 this._errHandler.sync(this);
                                 switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 101, this._ctx)) {
                                    case 1:
                                       this.setState(1251);
                                       this.dataType();
                                       break;
                                    case 2:
                                       this.setState(1252);
                                       this.match(325);
                                       this.setState(1253);
                                       this.match(2);
                                       this.setState(1254);
                                       ((CreateUserDefinedFunctionContext)_localctx).returnParams = this.colTypeList();
                                       this.setState(1255);
                                       this.match(3);
                                 }
                              default:
                                 this.setState(1261);
                                 this.routineCharacteristics();
                                 this.setState(1262);
                                 this.match(276);
                                 this.setState(1265);
                                 this._errHandler.sync(this);
                                 switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 103, this._ctx)) {
                                    case 1:
                                       this.setState(1263);
                                       this.query();
                                       return _localctx;
                                    case 2:
                                       this.setState(1264);
                                       this.expression();
                                       return _localctx;
                                    default:
                                       return _localctx;
                                 }
                           }
                     }
               }
            case 46:
               _localctx = new DropFunctionContext(_localctx);
               this.enterOuterAlt(_localctx, 46);
               this.setState(1267);
               this.match(110);
               this.setState(1269);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 330) {
                  this.setState(1268);
                  this.match(330);
               }

               this.setState(1271);
               this.match(143);
               this.setState(1274);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 105, this._ctx)) {
                  case 1:
                     this.setState(1272);
                     this.match(157);
                     this.setState(1273);
                     this.match(120);
                  default:
                     this.setState(1276);
                     this.identifierReference();
                     return _localctx;
               }
            case 47:
               _localctx = new CreateVariableContext(_localctx);
               this.enterOuterAlt(_localctx, 47);
               this.setState(1277);
               this.match(93);
               this.setState(1280);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 106, this._ctx)) {
                  case 1:
                     this.setState(1278);
                     this.match(235);
                     this.setState(1279);
                     this.match(272);
               }

               this.setState(1283);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 107, this._ctx)) {
                  case 1:
                     this.setState(1282);
                     this.variable();
                  default:
                     this.setState(1285);
                     this.identifierReference();
                     this.setState(1287);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 108, this._ctx)) {
                        case 1:
                           this.setState(1286);
                           this.dataType();
                     }

                     this.setState(1290);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 94 || _la == 388) {
                        this.setState(1289);
                        this.variableDefaultExpression();
                     }

                     return _localctx;
               }
            case 48:
               _localctx = new DropVariableContext(_localctx);
               this.enterOuterAlt(_localctx, 48);
               this.setState(1292);
               this.match(110);
               this.setState(1293);
               this.match(330);
               this.setState(1294);
               this.variable();
               this.setState(1297);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 110, this._ctx)) {
                  case 1:
                     this.setState(1295);
                     this.match(157);
                     this.setState(1296);
                     this.match(120);
                  default:
                     this.setState(1299);
                     this.identifierReference();
                     return _localctx;
               }
            case 49:
               _localctx = new ExplainContext(_localctx);
               this.enterOuterAlt(_localctx, 49);
               this.setState(1301);
               this.match(122);
               this.setState(1303);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 53 || _la == 70 || _la == 125 || _la == 139 || _la == 200) {
                  this.setState(1302);
                  _la = this._input.LA(1);
                  if (_la != 53 && _la != 70 && _la != 125 && _la != 139 && _la != 200) {
                     this._errHandler.recoverInline(this);
                  } else {
                     if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                     }

                     this._errHandler.reportMatch(this);
                     this.consume();
                  }
               }

               this.setState(1307);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 112, this._ctx)) {
                  case 1:
                     this.setState(1305);
                     this.statement();
                     return _localctx;
                  case 2:
                     this.setState(1306);
                     this.setResetStatement();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 50:
               _localctx = new ShowTablesContext(_localctx);
               this.enterOuterAlt(_localctx, 50);
               this.setState(1309);
               this.match(302);
               this.setState(1310);
               this.match(326);
               this.setState(1313);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 113, this._ctx)) {
                  case 1:
                     this.setState(1311);
                     int _la = this._input.LA(1);
                     if (_la != 141 && _la != 161) {
                        this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }

                     this.setState(1312);
                     this.identifierReference();
               }

               this.setState(1319);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 115, this._ctx)) {
                  case 1:
                     this.setState(1316);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 114, this._ctx)) {
                        case 1:
                           this.setState(1315);
                           this.match(190);
                        default:
                           this.setState(1318);
                           ((ShowTablesContext)_localctx).pattern = this.stringLit();
                           return _localctx;
                     }
                  default:
                     return _localctx;
               }
            case 51:
               _localctx = new ShowTableExtendedContext(_localctx);
               this.enterOuterAlt(_localctx, 51);
               this.setState(1321);
               this.match(302);
               this.setState(1322);
               this.match(325);
               this.setState(1323);
               this.match(125);
               this.setState(1326);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 141 || _la == 161) {
                  this.setState(1324);
                  _la = this._input.LA(1);
                  if (_la != 141 && _la != 161) {
                     this._errHandler.recoverInline(this);
                  } else {
                     if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                     }

                     this._errHandler.reportMatch(this);
                     this.consume();
                  }

                  this.setState(1325);
                  ((ShowTableExtendedContext)_localctx).ns = this.identifierReference();
               }

               this.setState(1328);
               this.match(190);
               this.setState(1329);
               ((ShowTableExtendedContext)_localctx).pattern = this.stringLit();
               this.setState(1331);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1330);
                  this.partitionSpec();
               }
               break;
            case 52:
               _localctx = new ShowTblPropertiesContext(_localctx);
               this.enterOuterAlt(_localctx, 52);
               this.setState(1333);
               this.match(302);
               this.setState(1334);
               this.match(329);
               this.setState(1335);
               ((ShowTblPropertiesContext)_localctx).table = this.identifierReference();
               this.setState(1340);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 2) {
                  this.setState(1336);
                  this.match(2);
                  this.setState(1337);
                  ((ShowTblPropertiesContext)_localctx).key = this.propertyKey();
                  this.setState(1338);
                  this.match(3);
               }
               break;
            case 53:
               _localctx = new ShowColumnsContext(_localctx);
               this.enterOuterAlt(_localctx, 53);
               this.setState(1342);
               this.match(302);
               this.setState(1343);
               this.match(58);
               this.setState(1344);
               int _la = this._input.LA(1);
               if (_la != 141 && _la != 161) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1345);
               ((ShowColumnsContext)_localctx).table = this.identifierReference();
               this.setState(1348);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 141 || _la == 161) {
                  this.setState(1346);
                  _la = this._input.LA(1);
                  if (_la != 141 && _la != 161) {
                     this._errHandler.recoverInline(this);
                  } else {
                     if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                     }

                     this._errHandler.reportMatch(this);
                     this.consume();
                  }

                  this.setState(1347);
                  ((ShowColumnsContext)_localctx).ns = this.multipartIdentifier();
               }
               break;
            case 54:
               _localctx = new ShowViewsContext(_localctx);
               this.enterOuterAlt(_localctx, 54);
               this.setState(1350);
               this.match(302);
               this.setState(1351);
               this.match(375);
               this.setState(1354);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 120, this._ctx)) {
                  case 1:
                     this.setState(1352);
                     int _la = this._input.LA(1);
                     if (_la != 141 && _la != 161) {
                        this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }

                     this.setState(1353);
                     this.identifierReference();
               }

               this.setState(1360);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 122, this._ctx)) {
                  case 1:
                     this.setState(1357);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 121, this._ctx)) {
                        case 1:
                           this.setState(1356);
                           this.match(190);
                        default:
                           this.setState(1359);
                           ((ShowViewsContext)_localctx).pattern = this.stringLit();
                           return _localctx;
                     }
                  default:
                     return _localctx;
               }
            case 55:
               _localctx = new ShowPartitionsContext(_localctx);
               this.enterOuterAlt(_localctx, 55);
               this.setState(1362);
               this.match(302);
               this.setState(1363);
               this.match(246);
               this.setState(1364);
               this.identifierReference();
               this.setState(1366);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1365);
                  this.partitionSpec();
               }
               break;
            case 56:
               _localctx = new ShowFunctionsContext(_localctx);
               this.enterOuterAlt(_localctx, 56);
               this.setState(1368);
               this.match(302);
               this.setState(1370);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 124, this._ctx)) {
                  case 1:
                     this.setState(1369);
                     this.identifier();
               }

               this.setState(1372);
               this.match(144);
               this.setState(1375);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 125, this._ctx)) {
                  case 1:
                     this.setState(1373);
                     int _la = this._input.LA(1);
                     if (_la != 141 && _la != 161) {
                        this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }

                     this.setState(1374);
                     ((ShowFunctionsContext)_localctx).ns = this.identifierReference();
               }

               this.setState(1384);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 128, this._ctx)) {
                  case 1:
                     this.setState(1378);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 126, this._ctx)) {
                        case 1:
                           this.setState(1377);
                           this.match(190);
                        default:
                           this.setState(1382);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 127, this._ctx)) {
                              case 1:
                                 this.setState(1380);
                                 ((ShowFunctionsContext)_localctx).legacy = this.multipartIdentifier();
                                 return _localctx;
                              case 2:
                                 this.setState(1381);
                                 ((ShowFunctionsContext)_localctx).pattern = this.stringLit();
                                 return _localctx;
                           }
                     }
                  default:
                     return _localctx;
               }
            case 57:
               _localctx = new ShowCreateTableContext(_localctx);
               this.enterOuterAlt(_localctx, 57);
               this.setState(1386);
               this.match(302);
               this.setState(1387);
               this.match(71);
               this.setState(1388);
               this.match(325);
               this.setState(1389);
               this.identifierReference();
               this.setState(1392);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 22) {
                  this.setState(1390);
                  this.match(22);
                  this.setState(1391);
                  this.match(295);
               }
               break;
            case 58:
               _localctx = new ShowCurrentNamespaceContext(_localctx);
               this.enterOuterAlt(_localctx, 58);
               this.setState(1394);
               this.match(302);
               this.setState(1395);
               this.match(74);
               this.setState(1396);
               this.namespace();
               break;
            case 59:
               _localctx = new ShowCatalogsContext(_localctx);
               this.enterOuterAlt(_localctx, 59);
               this.setState(1397);
               this.match(302);
               this.setState(1398);
               this.match(45);
               this.setState(1403);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 131, this._ctx)) {
                  case 1:
                     this.setState(1400);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 130, this._ctx)) {
                        case 1:
                           this.setState(1399);
                           this.match(190);
                        default:
                           this.setState(1402);
                           ((ShowCatalogsContext)_localctx).pattern = this.stringLit();
                           return _localctx;
                     }
                  default:
                     return _localctx;
               }
            case 60:
               _localctx = new DescribeFunctionContext(_localctx);
               this.enterOuterAlt(_localctx, 60);
               this.setState(1405);
               int _la = this._input.LA(1);
               if (_la != 99 && _la != 100) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1406);
               this.match(143);
               this.setState(1408);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 132, this._ctx)) {
                  case 1:
                     this.setState(1407);
                     this.match(125);
                  default:
                     this.setState(1410);
                     this.describeFuncName();
                     return _localctx;
               }
            case 61:
               _localctx = new DescribeNamespaceContext(_localctx);
               this.enterOuterAlt(_localctx, 61);
               this.setState(1411);
               int _la = this._input.LA(1);
               if (_la != 99 && _la != 100) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1412);
               this.namespace();
               this.setState(1414);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 133, this._ctx)) {
                  case 1:
                     this.setState(1413);
                     this.match(125);
                  default:
                     this.setState(1416);
                     this.identifierReference();
                     return _localctx;
               }
            case 62:
               _localctx = new DescribeRelationContext(_localctx);
               this.enterOuterAlt(_localctx, 62);
               this.setState(1418);
               int _la = this._input.LA(1);
               if (_la != 99 && _la != 100) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1420);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 134, this._ctx)) {
                  case 1:
                     this.setState(1419);
                     this.match(325);
               }

               this.setState(1423);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 135, this._ctx)) {
                  case 1:
                     this.setState(1422);
                     ((DescribeRelationContext)_localctx).option = this._input.LT(1);
                     _la = this._input.LA(1);
                     if (_la != 125 && _la != 139) {
                        ((DescribeRelationContext)_localctx).option = this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }
               }

               this.setState(1425);
               this.identifierReference();
               this.setState(1427);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 136, this._ctx)) {
                  case 1:
                     this.setState(1426);
                     this.partitionSpec();
                  default:
                     this.setState(1430);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 137, this._ctx)) {
                        case 1:
                           this.setState(1429);
                           this.describeColName();
                        default:
                           this.setState(1434);
                           this._errHandler.sync(this);
                           _la = this._input.LA(1);
                           if (_la == 22) {
                              this.setState(1432);
                              this.match(22);
                              this.setState(1433);
                              this.match(181);
                           }

                           return _localctx;
                     }
               }
            case 63:
               _localctx = new DescribeQueryContext(_localctx);
               this.enterOuterAlt(_localctx, 63);
               this.setState(1436);
               int _la = this._input.LA(1);
               if (_la != 99 && _la != 100) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1438);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 257) {
                  this.setState(1437);
                  this.match(257);
               }

               this.setState(1440);
               this.query();
               break;
            case 64:
               _localctx = new CommentNamespaceContext(_localctx);
               this.enterOuterAlt(_localctx, 64);
               this.setState(1441);
               this.match(59);
               this.setState(1442);
               this.match(231);
               this.setState(1443);
               this.namespace();
               this.setState(1444);
               this.identifierReference();
               this.setState(1445);
               this.match(177);
               this.setState(1446);
               this.comment();
               break;
            case 65:
               _localctx = new CommentTableContext(_localctx);
               this.enterOuterAlt(_localctx, 65);
               this.setState(1448);
               this.match(59);
               this.setState(1449);
               this.match(231);
               this.setState(1450);
               this.match(325);
               this.setState(1451);
               this.identifierReference();
               this.setState(1452);
               this.match(177);
               this.setState(1453);
               this.comment();
               break;
            case 66:
               _localctx = new RefreshTableContext(_localctx);
               this.enterOuterAlt(_localctx, 66);
               this.setState(1455);
               this.match(267);
               this.setState(1456);
               this.match(325);
               this.setState(1457);
               this.identifierReference();
               break;
            case 67:
               _localctx = new RefreshFunctionContext(_localctx);
               this.enterOuterAlt(_localctx, 67);
               this.setState(1458);
               this.match(267);
               this.setState(1459);
               this.match(143);
               this.setState(1460);
               this.identifierReference();
               break;
            case 68:
               _localctx = new RefreshResourceContext(_localctx);
               this.enterOuterAlt(_localctx, 68);
               this.setState(1461);
               this.match(267);
               this.setState(1469);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 141, this._ctx)) {
                  case 1:
                     this.setState(1462);
                     this.stringLit();
                     return _localctx;
                  case 2:
                     this.setState(1466);
                     this._errHandler.sync(this);

                     for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 140, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 140, this._ctx)) {
                        if (_alt == 2) {
                           this.setState(1463);
                           this.matchWildcard();
                        }

                        this.setState(1468);
                        this._errHandler.sync(this);
                     }
                     break label2353;
                  default:
                     return _localctx;
               }
            case 69:
               _localctx = new CacheTableContext(_localctx);
               this.enterOuterAlt(_localctx, 69);
               this.setState(1471);
               this.match(38);
               this.setState(1473);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 186) {
                  this.setState(1472);
                  this.match(186);
               }

               this.setState(1475);
               this.match(325);
               this.setState(1476);
               this.identifierReference();
               this.setState(1479);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 234) {
                  this.setState(1477);
                  this.match(234);
                  this.setState(1478);
                  ((CacheTableContext)_localctx).options = this.propertyList();
               }

               this.setState(1485);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 2 || _la == 22 || _la == 141 || _la == 204 || (_la - 265 & -64) == 0 && (1L << _la - 265 & 1152921504741064705L) != 0L || _la == 368 || _la == 383) {
                  this.setState(1482);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la == 22) {
                     this.setState(1481);
                     this.match(22);
                  }

                  this.setState(1484);
                  this.query();
               }
               break;
            case 70:
               _localctx = new UncacheTableContext(_localctx);
               this.enterOuterAlt(_localctx, 70);
               this.setState(1487);
               this.match(355);
               this.setState(1488);
               this.match(325);
               this.setState(1491);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 146, this._ctx)) {
                  case 1:
                     this.setState(1489);
                     this.match(157);
                     this.setState(1490);
                     this.match(120);
                  default:
                     this.setState(1493);
                     this.identifierReference();
                     return _localctx;
               }
            case 71:
               _localctx = new ClearCacheContext(_localctx);
               this.enterOuterAlt(_localctx, 71);
               this.setState(1494);
               this.match(50);
               this.setState(1495);
               this.match(38);
               break;
            case 72:
               _localctx = new LoadDataContext(_localctx);
               this.enterOuterAlt(_localctx, 72);
               this.setState(1496);
               this.match(195);
               this.setState(1497);
               this.match(82);
               this.setState(1499);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 196) {
                  this.setState(1498);
                  this.match(196);
               }

               this.setState(1501);
               this.match(167);
               this.setState(1502);
               ((LoadDataContext)_localctx).path = this.stringLit();
               this.setState(1504);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 243) {
                  this.setState(1503);
                  this.match(243);
               }

               this.setState(1506);
               this.match(175);
               this.setState(1507);
               this.match(325);
               this.setState(1508);
               this.identifierReference();
               this.setState(1510);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1509);
                  this.partitionSpec();
               }
               break;
            case 73:
               _localctx = new TruncateTableContext(_localctx);
               this.enterOuterAlt(_localctx, 73);
               this.setState(1512);
               this.match(350);
               this.setState(1513);
               this.match(325);
               this.setState(1514);
               this.identifierReference();
               this.setState(1516);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1515);
                  this.partitionSpec();
               }
               break;
            case 74:
               _localctx = new RepairTableContext(_localctx);
               this.enterOuterAlt(_localctx, 74);
               this.setState(1519);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 216) {
                  this.setState(1518);
                  this.match(216);
               }

               this.setState(1521);
               this.match(269);
               this.setState(1522);
               this.match(325);
               this.setState(1523);
               this.identifierReference();
               this.setState(1526);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 9 || _la == 110 || _la == 322) {
                  this.setState(1524);
                  ((RepairTableContext)_localctx).option = this._input.LT(1);
                  _la = this._input.LA(1);
                  if (_la != 9 && _la != 110 && _la != 322) {
                     ((RepairTableContext)_localctx).option = this._errHandler.recoverInline(this);
                  } else {
                     if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                     }

                     this._errHandler.reportMatch(this);
                     this.consume();
                  }

                  this.setState(1525);
                  this.match(246);
               }
               break;
            case 75:
               _localctx = new ManageResourceContext(_localctx);
               this.enterOuterAlt(_localctx, 75);
               this.setState(1528);
               ((ManageResourceContext)_localctx).op = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 9 && _la != 194) {
                  ((ManageResourceContext)_localctx).op = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(1529);
               this.identifier();
               this.setState(1533);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 153, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 153, this._ctx)) {
                  if (_alt == 2) {
                     this.setState(1530);
                     this.matchWildcard();
                  }

                  this.setState(1535);
                  this._errHandler.sync(this);
               }
               break;
            case 76:
               _localctx = new CreateIndexContext(_localctx);
               this.enterOuterAlt(_localctx, 76);
               this.setState(1536);
               this.match(71);
               this.setState(1537);
               this.match(164);
               this.setState(1542);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 154, this._ctx)) {
                  case 1:
                     this.setState(1538);
                     this.match(157);
                     this.setState(1539);
                     this.errorCapturingNot();
                     this.setState(1540);
                     this.match(120);
                  default:
                     this.setState(1544);
                     this.identifier();
                     this.setState(1545);
                     this.match(231);
                     this.setState(1547);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 155, this._ctx)) {
                        case 1:
                           this.setState(1546);
                           this.match(325);
                        default:
                           this.setState(1549);
                           this.identifierReference();
                           this.setState(1552);
                           this._errHandler.sync(this);
                           int _la = this._input.LA(1);
                           if (_la == 366) {
                              this.setState(1550);
                              this.match(366);
                              this.setState(1551);
                              ((CreateIndexContext)_localctx).indexType = this.identifier();
                           }

                           this.setState(1554);
                           this.match(2);
                           this.setState(1555);
                           ((CreateIndexContext)_localctx).columns = this.multipartIdentifierPropertyList();
                           this.setState(1556);
                           this.match(3);
                           this.setState(1559);
                           this._errHandler.sync(this);
                           _la = this._input.LA(1);
                           if (_la == 234) {
                              this.setState(1557);
                              this.match(234);
                              this.setState(1558);
                              ((CreateIndexContext)_localctx).options = this.propertyList();
                           }

                           return _localctx;
                     }
               }
            case 77:
               _localctx = new DropIndexContext(_localctx);
               this.enterOuterAlt(_localctx, 77);
               this.setState(1561);
               this.match(110);
               this.setState(1562);
               this.match(164);
               this.setState(1565);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 158, this._ctx)) {
                  case 1:
                     this.setState(1563);
                     this.match(157);
                     this.setState(1564);
                     this.match(120);
                  default:
                     this.setState(1567);
                     this.identifier();
                     this.setState(1568);
                     this.match(231);
                     this.setState(1570);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 159, this._ctx)) {
                        case 1:
                           this.setState(1569);
                           this.match(325);
                        default:
                           this.setState(1572);
                           this.identifierReference();
                           return _localctx;
                     }
               }
            case 78:
               _localctx = new CallContext(_localctx);
               this.enterOuterAlt(_localctx, 78);
               this.setState(1574);
               this.match(39);
               this.setState(1575);
               this.identifierReference();
               this.setState(1576);
               this.match(2);
               this.setState(1585);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 161, this._ctx)) {
                  case 1:
                     this.setState(1577);
                     this.functionArgument();
                     this.setState(1582);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                        this.setState(1578);
                        this.match(4);
                        this.setState(1579);
                        this.functionArgument();
                        this.setState(1584);
                        this._errHandler.sync(this);
                     }
               }

               this.setState(1587);
               this.match(3);
               break;
            case 79:
               _localctx = new FailNativeCommandContext(_localctx);
               this.enterOuterAlt(_localctx, 79);
               this.setState(1589);
               this.unsupportedHiveNativeCommands();
               this.setState(1593);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 162, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 162, this._ctx)) {
                  if (_alt == 2) {
                     this.setState(1590);
                     this.matchWildcard();
                  }

                  this.setState(1595);
                  this._errHandler.sync(this);
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SetResetStatementContext setResetStatement() throws RecognitionException {
      SetResetStatementContext _localctx = new SetResetStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 60, 30);

      try {
         this.setState(1678);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 171, this._ctx)) {
            case 1:
               _localctx = new FailSetRoleContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(1598);
               this.match(298);
               this.setState(1599);
               this.match(281);
               this.setState(1603);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 164, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 164, this._ctx)) {
                  if (_alt == 2) {
                     this.setState(1600);
                     this.matchWildcard();
                  }

                  this.setState(1605);
                  this._errHandler.sync(this);
               }
               break;
            case 2:
               _localctx = new SetTimeZoneContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(1606);
               this.match(298);
               this.setState(1607);
               this.match(333);
               this.setState(1608);
               this.match(387);
               this.setState(1609);
               this.interval();
               break;
            case 3:
               _localctx = new SetTimeZoneContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(1610);
               this.match(298);
               this.setState(1611);
               this.match(333);
               this.setState(1612);
               this.match(387);
               this.setState(1613);
               this.timezone();
               break;
            case 4:
               _localctx = new SetTimeZoneContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(1614);
               this.match(298);
               this.setState(1615);
               this.match(333);
               this.setState(1616);
               this.match(387);
               this.setState(1620);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 165, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 165, this._ctx)) {
                  if (_alt == 2) {
                     this.setState(1617);
                     this.matchWildcard();
                  }

                  this.setState(1622);
                  this._errHandler.sync(this);
               }
               break;
            case 5:
               _localctx = new SetVariableContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(1623);
               this.match(298);
               this.setState(1624);
               this.variable();
               this.setState(1625);
               this.assignmentList();
               break;
            case 6:
               _localctx = new SetVariableContext(_localctx);
               this.enterOuterAlt(_localctx, 6);
               this.setState(1627);
               this.match(298);
               this.setState(1628);
               this.variable();
               this.setState(1629);
               this.match(2);
               this.setState(1630);
               this.multipartIdentifierList();
               this.setState(1631);
               this.match(3);
               this.setState(1632);
               this.match(388);
               this.setState(1633);
               this.match(2);
               this.setState(1634);
               this.query();
               this.setState(1635);
               this.match(3);
               break;
            case 7:
               _localctx = new SetQuotedConfigurationContext(_localctx);
               this.enterOuterAlt(_localctx, 7);
               this.setState(1637);
               this.match(298);
               this.setState(1638);
               this.configKey();
               this.setState(1639);
               this.match(388);
               this.setState(1640);
               this.configValue();
               break;
            case 8:
               _localctx = new SetConfigurationContext(_localctx);
               this.enterOuterAlt(_localctx, 8);
               this.setState(1642);
               this.match(298);
               this.setState(1643);
               this.configKey();
               this.setState(1651);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 388) {
                  this.setState(1644);
                  this.match(388);
                  this.setState(1648);
                  this._errHandler.sync(this);

                  for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 166, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 166, this._ctx)) {
                     if (_alt == 2) {
                        this.setState(1645);
                        this.matchWildcard();
                     }

                     this.setState(1650);
                     this._errHandler.sync(this);
                  }
               }
               break;
            case 9:
               _localctx = new SetQuotedConfigurationContext(_localctx);
               this.enterOuterAlt(_localctx, 9);
               this.setState(1653);
               this.match(298);
               this.setState(1657);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 168, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 168, this._ctx)) {
                  if (_alt == 2) {
                     this.setState(1654);
                     this.matchWildcard();
                  }

                  this.setState(1659);
                  this._errHandler.sync(this);
               }

               this.setState(1660);
               this.match(388);
               this.setState(1661);
               this.configValue();
               break;
            case 10:
               _localctx = new SetConfigurationContext(_localctx);
               this.enterOuterAlt(_localctx, 10);
               this.setState(1662);
               this.match(298);
               this.setState(1666);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 169, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 169, this._ctx)) {
                  if (_alt == 2) {
                     this.setState(1663);
                     this.matchWildcard();
                  }

                  this.setState(1668);
                  this._errHandler.sync(this);
               }
               break;
            case 11:
               _localctx = new ResetQuotedConfigurationContext(_localctx);
               this.enterOuterAlt(_localctx, 11);
               this.setState(1669);
               this.match(273);
               this.setState(1670);
               this.configKey();
               break;
            case 12:
               _localctx = new ResetConfigurationContext(_localctx);
               this.enterOuterAlt(_localctx, 12);
               this.setState(1671);
               this.match(273);
               this.setState(1675);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 170, this._ctx); _alt != 1 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 170, this._ctx)) {
                  if (_alt == 2) {
                     this.setState(1672);
                     this.matchWildcard();
                  }

                  this.setState(1677);
                  this._errHandler.sync(this);
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExecuteImmediateContext executeImmediate() throws RecognitionException {
      ExecuteImmediateContext _localctx = new ExecuteImmediateContext(this._ctx, this.getState());
      this.enterRule(_localctx, 62, 31);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1680);
         this.match(342);
         this.setState(1681);
         this.match(159);
         this.setState(1682);
         _localctx.queryParam = this.executeImmediateQueryParam();
         this.setState(1685);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 175) {
            this.setState(1683);
            this.match(175);
            this.setState(1684);
            _localctx.targetVariable = this.multipartIdentifierList();
         }

         this.setState(1688);
         this._errHandler.sync(this);
         _la = this._input.LA(1);
         if (_la == 366) {
            this.setState(1687);
            this.executeImmediateUsing();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExecuteImmediateUsingContext executeImmediateUsing() throws RecognitionException {
      ExecuteImmediateUsingContext _localctx = new ExecuteImmediateUsingContext(this._ctx, this.getState());
      this.enterRule(_localctx, 64, 32);

      try {
         this.setState(1697);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 174, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(1690);
               this.match(366);
               this.setState(1691);
               this.match(2);
               this.setState(1692);
               _localctx.params = this.namedExpressionSeq();
               this.setState(1693);
               this.match(3);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(1695);
               this.match(366);
               this.setState(1696);
               _localctx.params = this.namedExpressionSeq();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExecuteImmediateQueryParamContext executeImmediateQueryParam() throws RecognitionException {
      ExecuteImmediateQueryParamContext _localctx = new ExecuteImmediateQueryParamContext(this._ctx, this.getState());
      this.enterRule(_localctx, 66, 33);

      try {
         this.setState(1701);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 175, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(1699);
               this.stringLit();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(1700);
               this.multipartIdentifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExecuteImmediateArgumentContext executeImmediateArgument() throws RecognitionException {
      ExecuteImmediateArgumentContext _localctx = new ExecuteImmediateArgumentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 68, 34);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1705);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 176, this._ctx)) {
            case 1:
               this.setState(1703);
               this.constant();
               break;
            case 2:
               this.setState(1704);
               this.multipartIdentifier();
         }

         this.setState(1709);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 22) {
            this.setState(1707);
            this.match(22);
            this.setState(1708);
            _localctx.name = this.errorCapturingIdentifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExecuteImmediateArgumentSeqContext executeImmediateArgumentSeq() throws RecognitionException {
      ExecuteImmediateArgumentSeqContext _localctx = new ExecuteImmediateArgumentSeqContext(this._ctx, this.getState());
      this.enterRule(_localctx, 70, 35);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1711);
         this.executeImmediateArgument();
         this.setState(1716);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(1712);
            this.match(4);
            this.setState(1713);
            this.executeImmediateArgument();
            this.setState(1718);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TimezoneContext timezone() throws RecognitionException {
      TimezoneContext _localctx = new TimezoneContext(this._ctx, this.getState());
      this.enterRule(_localctx, 72, 36);

      try {
         this.setState(1721);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 179, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(1719);
               this.stringLit();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(1720);
               this.match(196);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ConfigKeyContext configKey() throws RecognitionException {
      ConfigKeyContext _localctx = new ConfigKeyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 74, 37);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1723);
         this.quotedIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ConfigValueContext configValue() throws RecognitionException {
      ConfigValueContext _localctx = new ConfigValueContext(this._ctx, this.getState());
      this.enterRule(_localctx, 76, 38);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1725);
         this.backQuotedIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() throws RecognitionException {
      UnsupportedHiveNativeCommandsContext _localctx = new UnsupportedHiveNativeCommandsContext(this._ctx, this.getState());
      this.enterRule(_localctx, 78, 39);

      try {
         this.setState(1895);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 187, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(1727);
               _localctx.kw1 = this.match(71);
               this.setState(1728);
               _localctx.kw2 = this.match(281);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(1729);
               _localctx.kw1 = this.match(110);
               this.setState(1730);
               _localctx.kw2 = this.match(281);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(1731);
               _localctx.kw1 = this.match(147);
               this.setState(1733);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 180, this._ctx)) {
                  case 1:
                     this.setState(1732);
                     _localctx.kw2 = this.match(281);
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(1735);
               _localctx.kw1 = this.match(278);
               this.setState(1737);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 181, this._ctx)) {
                  case 1:
                     this.setState(1736);
                     _localctx.kw2 = this.match(281);
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(1739);
               _localctx.kw1 = this.match(302);
               this.setState(1740);
               _localctx.kw2 = this.match(147);
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(1741);
               _localctx.kw1 = this.match(302);
               this.setState(1742);
               _localctx.kw2 = this.match(281);
               this.setState(1744);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 182, this._ctx)) {
                  case 1:
                     this.setState(1743);
                     _localctx.kw3 = this.match(147);
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(1746);
               _localctx.kw1 = this.match(302);
               this.setState(1747);
               _localctx.kw2 = this.match(253);
               break;
            case 8:
               this.enterOuterAlt(_localctx, 8);
               this.setState(1748);
               _localctx.kw1 = this.match(302);
               this.setState(1749);
               _localctx.kw2 = this.match(282);
               break;
            case 9:
               this.enterOuterAlt(_localctx, 9);
               this.setState(1750);
               _localctx.kw1 = this.match(302);
               this.setState(1751);
               _localctx.kw2 = this.match(74);
               this.setState(1752);
               _localctx.kw3 = this.match(282);
               break;
            case 10:
               this.enterOuterAlt(_localctx, 10);
               this.setState(1753);
               _localctx.kw1 = this.match(123);
               this.setState(1754);
               _localctx.kw2 = this.match(325);
               break;
            case 11:
               this.enterOuterAlt(_localctx, 11);
               this.setState(1755);
               _localctx.kw1 = this.match(160);
               this.setState(1756);
               _localctx.kw2 = this.match(325);
               break;
            case 12:
               this.enterOuterAlt(_localctx, 12);
               this.setState(1757);
               _localctx.kw1 = this.match(302);
               this.setState(1758);
               _localctx.kw2 = this.match(62);
               break;
            case 13:
               this.enterOuterAlt(_localctx, 13);
               this.setState(1759);
               _localctx.kw1 = this.match(302);
               this.setState(1760);
               _localctx.kw2 = this.match(71);
               this.setState(1761);
               _localctx.kw3 = this.match(325);
               break;
            case 14:
               this.enterOuterAlt(_localctx, 14);
               this.setState(1762);
               _localctx.kw1 = this.match(302);
               this.setState(1763);
               _localctx.kw2 = this.match(346);
               break;
            case 15:
               this.enterOuterAlt(_localctx, 15);
               this.setState(1764);
               _localctx.kw1 = this.match(302);
               this.setState(1765);
               _localctx.kw2 = this.match(165);
               break;
            case 16:
               this.enterOuterAlt(_localctx, 16);
               this.setState(1766);
               _localctx.kw1 = this.match(302);
               this.setState(1767);
               _localctx.kw2 = this.match(199);
               break;
            case 17:
               this.enterOuterAlt(_localctx, 17);
               this.setState(1768);
               _localctx.kw1 = this.match(71);
               this.setState(1769);
               _localctx.kw2 = this.match(164);
               break;
            case 18:
               this.enterOuterAlt(_localctx, 18);
               this.setState(1770);
               _localctx.kw1 = this.match(110);
               this.setState(1771);
               _localctx.kw2 = this.match(164);
               break;
            case 19:
               this.enterOuterAlt(_localctx, 19);
               this.setState(1772);
               _localctx.kw1 = this.match(13);
               this.setState(1773);
               _localctx.kw2 = this.match(164);
               break;
            case 20:
               this.enterOuterAlt(_localctx, 20);
               this.setState(1774);
               _localctx.kw1 = this.match(198);
               this.setState(1775);
               _localctx.kw2 = this.match(325);
               break;
            case 21:
               this.enterOuterAlt(_localctx, 21);
               this.setState(1776);
               _localctx.kw1 = this.match(198);
               this.setState(1777);
               _localctx.kw2 = this.match(84);
               break;
            case 22:
               this.enterOuterAlt(_localctx, 22);
               this.setState(1778);
               _localctx.kw1 = this.match(359);
               this.setState(1779);
               _localctx.kw2 = this.match(325);
               break;
            case 23:
               this.enterOuterAlt(_localctx, 23);
               this.setState(1780);
               _localctx.kw1 = this.match(359);
               this.setState(1781);
               _localctx.kw2 = this.match(84);
               break;
            case 24:
               this.enterOuterAlt(_localctx, 24);
               this.setState(1782);
               _localctx.kw1 = this.match(71);
               this.setState(1783);
               _localctx.kw2 = this.match(330);
               this.setState(1784);
               _localctx.kw3 = this.match(203);
               break;
            case 25:
               this.enterOuterAlt(_localctx, 25);
               this.setState(1785);
               _localctx.kw1 = this.match(110);
               this.setState(1786);
               _localctx.kw2 = this.match(330);
               this.setState(1787);
               _localctx.kw3 = this.match(203);
               break;
            case 26:
               this.enterOuterAlt(_localctx, 26);
               this.setState(1788);
               _localctx.kw1 = this.match(13);
               this.setState(1789);
               _localctx.kw2 = this.match(325);
               this.setState(1790);
               this.tableIdentifier();
               this.setState(1791);
               _localctx.kw3 = this.match(225);
               this.setState(1792);
               _localctx.kw4 = this.match(52);
               break;
            case 27:
               this.enterOuterAlt(_localctx, 27);
               this.setState(1794);
               _localctx.kw1 = this.match(13);
               this.setState(1795);
               _localctx.kw2 = this.match(325);
               this.setState(1796);
               this.tableIdentifier();
               this.setState(1797);
               _localctx.kw3 = this.match(52);
               this.setState(1798);
               _localctx.kw4 = this.match(36);
               break;
            case 28:
               this.enterOuterAlt(_localctx, 28);
               this.setState(1800);
               _localctx.kw1 = this.match(13);
               this.setState(1801);
               _localctx.kw2 = this.match(325);
               this.setState(1802);
               this.tableIdentifier();
               this.setState(1803);
               _localctx.kw3 = this.match(225);
               this.setState(1804);
               _localctx.kw4 = this.match(308);
               break;
            case 29:
               this.enterOuterAlt(_localctx, 29);
               this.setState(1806);
               _localctx.kw1 = this.match(13);
               this.setState(1807);
               _localctx.kw2 = this.match(325);
               this.setState(1808);
               this.tableIdentifier();
               this.setState(1809);
               _localctx.kw3 = this.match(304);
               this.setState(1810);
               _localctx.kw4 = this.match(36);
               break;
            case 30:
               this.enterOuterAlt(_localctx, 30);
               this.setState(1812);
               _localctx.kw1 = this.match(13);
               this.setState(1813);
               _localctx.kw2 = this.match(325);
               this.setState(1814);
               this.tableIdentifier();
               this.setState(1815);
               _localctx.kw3 = this.match(225);
               this.setState(1816);
               _localctx.kw4 = this.match(304);
               break;
            case 31:
               this.enterOuterAlt(_localctx, 31);
               this.setState(1818);
               _localctx.kw1 = this.match(13);
               this.setState(1819);
               _localctx.kw2 = this.match(325);
               this.setState(1820);
               this.tableIdentifier();
               this.setState(1821);
               _localctx.kw3 = this.match(225);
               this.setState(1822);
               _localctx.kw4 = this.match(316);
               this.setState(1823);
               _localctx.kw5 = this.match(22);
               this.setState(1824);
               _localctx.kw6 = this.match(103);
               break;
            case 32:
               this.enterOuterAlt(_localctx, 32);
               this.setState(1826);
               _localctx.kw1 = this.match(13);
               this.setState(1827);
               _localctx.kw2 = this.match(325);
               this.setState(1828);
               this.tableIdentifier();
               this.setState(1829);
               _localctx.kw3 = this.match(298);
               this.setState(1830);
               _localctx.kw4 = this.match(304);
               this.setState(1831);
               _localctx.kw5 = this.match(197);
               break;
            case 33:
               this.enterOuterAlt(_localctx, 33);
               this.setState(1833);
               _localctx.kw1 = this.match(13);
               this.setState(1834);
               _localctx.kw2 = this.match(325);
               this.setState(1835);
               this.tableIdentifier();
               this.setState(1836);
               _localctx.kw3 = this.match(118);
               this.setState(1837);
               _localctx.kw4 = this.match(244);
               break;
            case 34:
               this.enterOuterAlt(_localctx, 34);
               this.setState(1839);
               _localctx.kw1 = this.match(13);
               this.setState(1840);
               _localctx.kw2 = this.match(325);
               this.setState(1841);
               this.tableIdentifier();
               this.setState(1842);
               _localctx.kw3 = this.match(20);
               this.setState(1843);
               _localctx.kw4 = this.match(244);
               break;
            case 35:
               this.enterOuterAlt(_localctx, 35);
               this.setState(1845);
               _localctx.kw1 = this.match(13);
               this.setState(1846);
               _localctx.kw2 = this.match(325);
               this.setState(1847);
               this.tableIdentifier();
               this.setState(1848);
               _localctx.kw3 = this.match(353);
               this.setState(1849);
               _localctx.kw4 = this.match(244);
               break;
            case 36:
               this.enterOuterAlt(_localctx, 36);
               this.setState(1851);
               _localctx.kw1 = this.match(13);
               this.setState(1852);
               _localctx.kw2 = this.match(325);
               this.setState(1853);
               this.tableIdentifier();
               this.setState(1854);
               _localctx.kw3 = this.match(343);
               break;
            case 37:
               this.enterOuterAlt(_localctx, 37);
               this.setState(1856);
               _localctx.kw1 = this.match(13);
               this.setState(1857);
               _localctx.kw2 = this.match(325);
               this.setState(1858);
               this.tableIdentifier();
               this.setState(1860);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1859);
                  this.partitionSpec();
               }

               this.setState(1862);
               _localctx.kw3 = this.match(61);
               break;
            case 38:
               this.enterOuterAlt(_localctx, 38);
               this.setState(1864);
               _localctx.kw1 = this.match(13);
               this.setState(1865);
               _localctx.kw2 = this.match(325);
               this.setState(1866);
               this.tableIdentifier();
               this.setState(1868);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1867);
                  this.partitionSpec();
               }

               this.setState(1870);
               _localctx.kw3 = this.match(65);
               break;
            case 39:
               this.enterOuterAlt(_localctx, 39);
               this.setState(1872);
               _localctx.kw1 = this.match(13);
               this.setState(1873);
               _localctx.kw2 = this.match(325);
               this.setState(1874);
               this.tableIdentifier();
               this.setState(1876);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1875);
                  this.partitionSpec();
               }

               this.setState(1878);
               _localctx.kw3 = this.match(298);
               this.setState(1879);
               _localctx.kw4 = this.match(132);
               break;
            case 40:
               this.enterOuterAlt(_localctx, 40);
               this.setState(1881);
               _localctx.kw1 = this.match(13);
               this.setState(1882);
               _localctx.kw2 = this.match(325);
               this.setState(1883);
               this.tableIdentifier();
               this.setState(1885);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 244) {
                  this.setState(1884);
                  this.partitionSpec();
               }

               this.setState(1887);
               _localctx.kw3 = this.match(272);
               this.setState(1888);
               _localctx.kw4 = this.match(58);
               break;
            case 41:
               this.enterOuterAlt(_localctx, 41);
               this.setState(1890);
               _localctx.kw1 = this.match(314);
               this.setState(1891);
               _localctx.kw2 = this.match(345);
               break;
            case 42:
               this.enterOuterAlt(_localctx, 42);
               this.setState(1892);
               _localctx.kw1 = this.match(60);
               break;
            case 43:
               this.enterOuterAlt(_localctx, 43);
               this.setState(1893);
               _localctx.kw1 = this.match(283);
               break;
            case 44:
               this.enterOuterAlt(_localctx, 44);
               this.setState(1894);
               _localctx.kw1 = this.match(102);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CreateTableHeaderContext createTableHeader() throws RecognitionException {
      CreateTableHeaderContext _localctx = new CreateTableHeaderContext(this._ctx, this.getState());
      this.enterRule(_localctx, 80, 40);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1897);
         this.match(71);
         this.setState(1899);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 330) {
            this.setState(1898);
            this.match(330);
         }

         this.setState(1902);
         this._errHandler.sync(this);
         _la = this._input.LA(1);
         if (_la == 126) {
            this.setState(1901);
            this.match(126);
         }

         this.setState(1904);
         this.match(325);
         this.setState(1909);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 190, this._ctx)) {
            case 1:
               this.setState(1905);
               this.match(157);
               this.setState(1906);
               this.errorCapturingNot();
               this.setState(1907);
               this.match(120);
            default:
               this.setState(1911);
               this.identifierReference();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ReplaceTableHeaderContext replaceTableHeader() throws RecognitionException {
      ReplaceTableHeaderContext _localctx = new ReplaceTableHeaderContext(this._ctx, this.getState());
      this.enterRule(_localctx, 82, 41);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1915);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 71) {
            this.setState(1913);
            this.match(71);
            this.setState(1914);
            this.match(235);
         }

         this.setState(1917);
         this.match(272);
         this.setState(1918);
         this.match(325);
         this.setState(1919);
         this.identifierReference();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ClusterBySpecContext clusterBySpec() throws RecognitionException {
      ClusterBySpecContext _localctx = new ClusterBySpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 84, 42);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1921);
         this.match(51);
         this.setState(1922);
         this.match(36);
         this.setState(1923);
         this.match(2);
         this.setState(1924);
         this.multipartIdentifierList();
         this.setState(1925);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final BucketSpecContext bucketSpec() throws RecognitionException {
      BucketSpecContext _localctx = new BucketSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 86, 43);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1927);
         this.match(52);
         this.setState(1928);
         this.match(36);
         this.setState(1929);
         this.identifierList();
         this.setState(1933);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 308) {
            this.setState(1930);
            this.match(308);
            this.setState(1931);
            this.match(36);
            this.setState(1932);
            this.orderedIdentifierList();
         }

         this.setState(1935);
         this.match(175);
         this.setState(1936);
         this.match(422);
         this.setState(1937);
         this.match(35);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SkewSpecContext skewSpec() throws RecognitionException {
      SkewSpecContext _localctx = new SkewSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 88, 44);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1939);
         this.match(304);
         this.setState(1940);
         this.match(36);
         this.setState(1941);
         this.identifierList();
         this.setState(1942);
         this.match(231);
         this.setState(1945);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 193, this._ctx)) {
            case 1:
               this.setState(1943);
               this.constantList();
               break;
            case 2:
               this.setState(1944);
               this.nestedConstantList();
         }

         this.setState(1950);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 194, this._ctx)) {
            case 1:
               this.setState(1947);
               this.match(316);
               this.setState(1948);
               this.match(22);
               this.setState(1949);
               this.match(103);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final LocationSpecContext locationSpec() throws RecognitionException {
      LocationSpecContext _localctx = new LocationSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 90, 45);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1952);
         this.match(197);
         this.setState(1953);
         this.stringLit();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SchemaBindingContext schemaBinding() throws RecognitionException {
      SchemaBindingContext _localctx = new SchemaBindingContext(this._ctx, this.getState());
      this.enterRule(_localctx, 92, 46);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1955);
         this.match(383);
         this.setState(1956);
         this.match(289);
         this.setState(1962);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 31:
               this.setState(1957);
               this.match(31);
               break;
            case 63:
               this.setState(1958);
               this.match(63);
               break;
            case 116:
               this.setState(1959);
               this.match(116);
               break;
            case 352:
               this.setState(1960);
               this.match(352);
               this.setState(1961);
               this.match(116);
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CommentSpecContext commentSpec() throws RecognitionException {
      CommentSpecContext _localctx = new CommentSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 94, 47);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1964);
         this.match(59);
         this.setState(1965);
         this.stringLit();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SingleQueryContext singleQuery() throws RecognitionException {
      SingleQueryContext _localctx = new SingleQueryContext(this._ctx, this.getState());
      this.enterRule(_localctx, 96, 48);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1967);
         this.query();
         this.setState(1968);
         this.match(-1);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QueryContext query() throws RecognitionException {
      QueryContext _localctx = new QueryContext(this._ctx, this.getState());
      this.enterRule(_localctx, 98, 49);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(1971);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 383) {
            this.setState(1970);
            this.ctes();
         }

         this.setState(1973);
         this.queryTerm(0);
         this.setState(1974);
         this.queryOrganization();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final InsertIntoContext insertInto() throws RecognitionException {
      InsertIntoContext _localctx = new InsertIntoContext(this._ctx, this.getState());
      this.enterRule(_localctx, 100, 50);

      try {
         this.setState(2061);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 215, this._ctx)) {
            case 1:
               _localctx = new InsertOverwriteTableContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(1976);
               this.match(170);
               this.setState(1977);
               this.match(243);
               this.setState(1979);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 197, this._ctx)) {
                  case 1:
                     this.setState(1978);
                     this.match(325);
                  default:
                     this.setState(1981);
                     this.identifierReference();
                     this.setState(1983);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 198, this._ctx)) {
                        case 1:
                           this.setState(1982);
                           this.optionsClause();
                        default:
                           this.setState(1992);
                           this._errHandler.sync(this);
                           int _la = this._input.LA(1);
                           if (_la == 244) {
                              this.setState(1985);
                              this.partitionSpec();
                              this.setState(1990);
                              this._errHandler.sync(this);
                              _la = this._input.LA(1);
                              if (_la == 157) {
                                 this.setState(1986);
                                 this.match(157);
                                 this.setState(1987);
                                 this.errorCapturingNot();
                                 this.setState(1988);
                                 this.match(120);
                              }
                           }

                           this.setState(1997);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 201, this._ctx)) {
                              case 1:
                                 this.setState(1994);
                                 this.match(36);
                                 this.setState(1995);
                                 this.match(217);
                                 return _localctx;
                              case 2:
                                 this.setState(1996);
                                 this.identifierList();
                                 return _localctx;
                              default:
                                 return _localctx;
                           }
                     }
               }
            case 2:
               _localctx = new InsertIntoTableContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(1999);
               this.match(170);
               this.setState(2000);
               this.match(175);
               this.setState(2002);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 202, this._ctx)) {
                  case 1:
                     this.setState(2001);
                     this.match(325);
                  default:
                     this.setState(2004);
                     this.identifierReference();
                     this.setState(2006);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 203, this._ctx)) {
                        case 1:
                           this.setState(2005);
                           this.optionsClause();
                        default:
                           this.setState(2009);
                           this._errHandler.sync(this);
                           int _la = this._input.LA(1);
                           if (_la == 244) {
                              this.setState(2008);
                              this.partitionSpec();
                           }

                           this.setState(2015);
                           this._errHandler.sync(this);
                           _la = this._input.LA(1);
                           if (_la == 157) {
                              this.setState(2011);
                              this.match(157);
                              this.setState(2012);
                              this.errorCapturingNot();
                              this.setState(2013);
                              this.match(120);
                           }

                           this.setState(2020);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 206, this._ctx)) {
                              case 1:
                                 this.setState(2017);
                                 this.match(36);
                                 this.setState(2018);
                                 this.match(217);
                                 return _localctx;
                              case 2:
                                 this.setState(2019);
                                 this.identifierList();
                                 return _localctx;
                              default:
                                 return _localctx;
                           }
                     }
               }
            case 3:
               _localctx = new InsertIntoReplaceWhereContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(2022);
               this.match(170);
               this.setState(2023);
               this.match(175);
               this.setState(2025);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 207, this._ctx)) {
                  case 1:
                     this.setState(2024);
                     this.match(325);
                  default:
                     this.setState(2027);
                     this.identifierReference();
                     this.setState(2029);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 383) {
                        this.setState(2028);
                        this.optionsClause();
                     }

                     this.setState(2031);
                     this.match(272);
                     this.setState(2032);
                     this.whereClause();
                     return _localctx;
               }
            case 4:
               _localctx = new InsertOverwriteHiveDirContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(2034);
               this.match(170);
               this.setState(2035);
               this.match(243);
               this.setState(2037);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 196) {
                  this.setState(2036);
                  this.match(196);
               }

               this.setState(2039);
               this.match(104);
               this.setState(2040);
               ((InsertOverwriteHiveDirContext)_localctx).path = this.stringLit();
               this.setState(2042);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 285) {
                  this.setState(2041);
                  this.rowFormat();
               }

               this.setState(2045);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 316) {
                  this.setState(2044);
                  this.createFileFormat();
               }
               break;
            case 5:
               _localctx = new InsertOverwriteDirContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(2047);
               this.match(170);
               this.setState(2048);
               this.match(243);
               this.setState(2050);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 196) {
                  this.setState(2049);
                  this.match(196);
               }

               this.setState(2052);
               this.match(104);
               this.setState(2054);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 213, this._ctx)) {
                  case 1:
                     this.setState(2053);
                     ((InsertOverwriteDirContext)_localctx).path = this.stringLit();
                  default:
                     this.setState(2056);
                     this.tableProvider();
                     this.setState(2059);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
                     if (_la == 234) {
                        this.setState(2057);
                        this.match(234);
                        this.setState(2058);
                        ((InsertOverwriteDirContext)_localctx).options = this.propertyList();
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PartitionSpecLocationContext partitionSpecLocation() throws RecognitionException {
      PartitionSpecLocationContext _localctx = new PartitionSpecLocationContext(this._ctx, this.getState());
      this.enterRule(_localctx, 102, 51);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2063);
         this.partitionSpec();
         this.setState(2065);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 197) {
            this.setState(2064);
            this.locationSpec();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PartitionSpecContext partitionSpec() throws RecognitionException {
      PartitionSpecContext _localctx = new PartitionSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 104, 52);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2067);
         this.match(244);
         this.setState(2068);
         this.match(2);
         this.setState(2069);
         this.partitionVal();
         this.setState(2074);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2070);
            this.match(4);
            this.setState(2071);
            this.partitionVal();
            this.setState(2076);
            this._errHandler.sync(this);
         }

         this.setState(2077);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PartitionValContext partitionVal() throws RecognitionException {
      PartitionValContext _localctx = new PartitionValContext(this._ctx, this.getState());
      this.enterRule(_localctx, 106, 53);

      try {
         this.setState(2088);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 219, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2079);
               this.identifier();
               this.setState(2082);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 388) {
                  this.setState(2080);
                  this.match(388);
                  this.setState(2081);
                  this.constant();
               }
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2084);
               this.identifier();
               this.setState(2085);
               this.match(388);
               this.setState(2086);
               this.match(94);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NamespaceContext namespace() throws RecognitionException {
      NamespaceContext _localctx = new NamespaceContext(this._ctx, this.getState());
      this.enterRule(_localctx, 108, 54);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2090);
         int _la = this._input.LA(1);
         if (_la != 84 && _la != 218 && _la != 289) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NamespacesContext namespaces() throws RecognitionException {
      NamespacesContext _localctx = new NamespacesContext(this._ctx, this.getState());
      this.enterRule(_localctx, 110, 55);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2092);
         int _la = this._input.LA(1);
         if (_la != 85 && _la != 219 && _la != 290) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final VariableContext variable() throws RecognitionException {
      VariableContext _localctx = new VariableContext(this._ctx, this.getState());
      this.enterRule(_localctx, 112, 56);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2094);
         int _la = this._input.LA(1);
         if (_la != 370 && _la != 371) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DescribeFuncNameContext describeFuncName() throws RecognitionException {
      DescribeFuncNameContext _localctx = new DescribeFuncNameContext(this._ctx, this.getState());
      this.enterRule(_localctx, 114, 57);

      try {
         this.setState(2103);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 220, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2096);
               this.identifierReference();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2097);
               this.stringLit();
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(2098);
               this.comparisonOperator();
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(2099);
               this.arithmeticOperator();
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(2100);
               this.predicateOperator();
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(2101);
               this.shiftOperator();
               break;
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(2102);
               this.match(8);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DescribeColNameContext describeColName() throws RecognitionException {
      DescribeColNameContext _localctx = new DescribeColNameContext(this._ctx, this.getState());
      this.enterRule(_localctx, 116, 58);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2105);
         _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
         _localctx.nameParts.add(_localctx.errorCapturingIdentifier);
         this.setState(2110);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 5; _la = this._input.LA(1)) {
            this.setState(2106);
            this.match(5);
            this.setState(2107);
            _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
            _localctx.nameParts.add(_localctx.errorCapturingIdentifier);
            this.setState(2112);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CtesContext ctes() throws RecognitionException {
      CtesContext _localctx = new CtesContext(this._ctx, this.getState());
      this.enterRule(_localctx, 118, 59);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2113);
         this.match(383);
         this.setState(2115);
         this._errHandler.sync(this);
         int _la;
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 222, this._ctx)) {
            case 1:
               this.setState(2114);
               this.match(264);
            default:
               this.setState(2117);
               this.namedQuery();
               this.setState(2122);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
         }

         while(_la == 4) {
            this.setState(2118);
            this.match(4);
            this.setState(2119);
            this.namedQuery();
            this.setState(2124);
            this._errHandler.sync(this);
            _la = this._input.LA(1);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NamedQueryContext namedQuery() throws RecognitionException {
      NamedQueryContext _localctx = new NamedQueryContext(this._ctx, this.getState());
      this.enterRule(_localctx, 120, 60);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2125);
         _localctx.name = this.errorCapturingIdentifier();
         this.setState(2127);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 224, this._ctx)) {
            case 1:
               this.setState(2126);
               _localctx.columnAliases = this.identifierList();
            default:
               this.setState(2130);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 22) {
                  this.setState(2129);
                  this.match(22);
               }

               this.setState(2132);
               this.match(2);
               this.setState(2133);
               this.query();
               this.setState(2134);
               this.match(3);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TableProviderContext tableProvider() throws RecognitionException {
      TableProviderContext _localctx = new TableProviderContext(this._ctx, this.getState());
      this.enterRule(_localctx, 122, 61);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2136);
         this.match(366);
         this.setState(2137);
         this.multipartIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CreateTableClausesContext createTableClauses() throws RecognitionException {
      CreateTableClausesContext _localctx = new CreateTableClausesContext(this._ctx, this.getState());
      this.enterRule(_localctx, 124, 62);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2156);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); (_la - 51 & -64) == 0 && (1L << _la - 51 & 8796093022467L) != 0L || (_la - 197 & -64) == 0 && (1L << _la - 197 & 281612415664129L) != 0L || (_la - 285 & -64) == 0 && (1L << _la - 285 & 17594334052353L) != 0L; _la = this._input.LA(1)) {
            this.setState(2154);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
               case 51:
                  this.setState(2145);
                  this.clusterBySpec();
                  break;
               case 52:
                  this.setState(2146);
                  this.bucketSpec();
                  break;
               case 59:
                  this.setState(2150);
                  this.commentSpec();
                  break;
               case 94:
                  this.setState(2151);
                  this.collationSpec();
                  break;
               case 197:
                  this.setState(2149);
                  this.locationSpec();
                  break;
               case 234:
                  this.setState(2139);
                  this.match(234);
                  this.setState(2140);
                  _localctx.options = this.expressionPropertyList();
                  break;
               case 245:
                  this.setState(2141);
                  this.match(245);
                  this.setState(2142);
                  this.match(36);
                  this.setState(2143);
                  _localctx.partitioning = this.partitionFieldList();
                  break;
               case 285:
                  this.setState(2147);
                  this.rowFormat();
                  break;
               case 304:
                  this.setState(2144);
                  this.skewSpec();
                  break;
               case 316:
                  this.setState(2148);
                  this.createFileFormat();
                  break;
               case 329:
                  this.setState(2152);
                  this.match(329);
                  this.setState(2153);
                  _localctx.tableProps = this.propertyList();
                  break;
               default:
                  throw new NoViableAltException(this);
            }

            this.setState(2158);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PropertyListContext propertyList() throws RecognitionException {
      PropertyListContext _localctx = new PropertyListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 126, 63);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2159);
         this.match(2);
         this.setState(2160);
         this.property();
         this.setState(2165);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2161);
            this.match(4);
            this.setState(2162);
            this.property();
            this.setState(2167);
            this._errHandler.sync(this);
         }

         this.setState(2168);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PropertyContext property() throws RecognitionException {
      PropertyContext _localctx = new PropertyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 128, 64);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2170);
         _localctx.key = this.propertyKey();
         this.setState(2175);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 230, this._ctx)) {
            case 1:
               this.setState(2172);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 229, this._ctx)) {
                  case 1:
                     this.setState(2171);
                     this.match(388);
                  default:
                     this.setState(2174);
                     _localctx.value = this.propertyValue();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PropertyKeyContext propertyKey() throws RecognitionException {
      PropertyKeyContext _localctx = new PropertyKeyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 130, 65);

      try {
         this.setState(2186);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 232, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2177);
               this.errorCapturingIdentifier();
               this.setState(2182);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 231, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 231, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2178);
                     this.match(5);
                     this.setState(2179);
                     this.errorCapturingIdentifier();
                  }

                  this.setState(2184);
                  this._errHandler.sync(this);
               }
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2185);
               this.stringLit();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PropertyValueContext propertyValue() throws RecognitionException {
      PropertyValueContext _localctx = new PropertyValueContext(this._ctx, this.getState());
      this.enterRule(_localctx, 132, 66);

      try {
         this.setState(2192);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 233, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2188);
               this.match(422);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2189);
               this.match(424);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(2190);
               this.booleanValue();
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(2191);
               this.stringLit();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExpressionPropertyListContext expressionPropertyList() throws RecognitionException {
      ExpressionPropertyListContext _localctx = new ExpressionPropertyListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 134, 67);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2194);
         this.match(2);
         this.setState(2195);
         this.expressionProperty();
         this.setState(2200);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2196);
            this.match(4);
            this.setState(2197);
            this.expressionProperty();
            this.setState(2202);
            this._errHandler.sync(this);
         }

         this.setState(2203);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExpressionPropertyContext expressionProperty() throws RecognitionException {
      ExpressionPropertyContext _localctx = new ExpressionPropertyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 136, 68);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2205);
         _localctx.key = this.propertyKey();
         this.setState(2210);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 236, this._ctx)) {
            case 1:
               this.setState(2207);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 235, this._ctx)) {
                  case 1:
                     this.setState(2206);
                     this.match(388);
                  default:
                     this.setState(2209);
                     _localctx.value = this.expression();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ConstantListContext constantList() throws RecognitionException {
      ConstantListContext _localctx = new ConstantListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 138, 69);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2212);
         this.match(2);
         this.setState(2213);
         this.constant();
         this.setState(2218);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2214);
            this.match(4);
            this.setState(2215);
            this.constant();
            this.setState(2220);
            this._errHandler.sync(this);
         }

         this.setState(2221);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NestedConstantListContext nestedConstantList() throws RecognitionException {
      NestedConstantListContext _localctx = new NestedConstantListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 140, 70);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2223);
         this.match(2);
         this.setState(2224);
         this.constantList();
         this.setState(2229);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2225);
            this.match(4);
            this.setState(2226);
            this.constantList();
            this.setState(2231);
            this._errHandler.sync(this);
         }

         this.setState(2232);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CreateFileFormatContext createFileFormat() throws RecognitionException {
      CreateFileFormatContext _localctx = new CreateFileFormatContext(this._ctx, this.getState());
      this.enterRule(_localctx, 142, 71);

      try {
         this.setState(2240);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 239, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2234);
               this.match(316);
               this.setState(2235);
               this.match(22);
               this.setState(2236);
               this.fileFormat();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2237);
               this.match(316);
               this.setState(2238);
               this.match(36);
               this.setState(2239);
               this.storageHandler();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FileFormatContext fileFormat() throws RecognitionException {
      FileFormatContext _localctx = new FileFormatContext(this._ctx, this.getState());
      this.enterRule(_localctx, 144, 72);

      try {
         this.setState(2248);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 240, this._ctx)) {
            case 1:
               _localctx = new TableFileFormatContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(2242);
               this.match(169);
               this.setState(2243);
               ((TableFileFormatContext)_localctx).inFmt = this.stringLit();
               this.setState(2244);
               this.match(239);
               this.setState(2245);
               ((TableFileFormatContext)_localctx).outFmt = this.stringLit();
               break;
            case 2:
               _localctx = new GenericFileFormatContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(2247);
               this.identifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final StorageHandlerContext storageHandler() throws RecognitionException {
      StorageHandlerContext _localctx = new StorageHandlerContext(this._ctx, this.getState());
      this.enterRule(_localctx, 146, 73);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2250);
         this.stringLit();
         this.setState(2254);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 241, this._ctx)) {
            case 1:
               this.setState(2251);
               this.match(383);
               this.setState(2252);
               this.match(296);
               this.setState(2253);
               this.propertyList();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ResourceContext resource() throws RecognitionException {
      ResourceContext _localctx = new ResourceContext(this._ctx, this.getState());
      this.enterRule(_localctx, 148, 74);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2256);
         this.identifier();
         this.setState(2257);
         this.stringLit();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DmlStatementNoWithContext dmlStatementNoWith() throws RecognitionException {
      DmlStatementNoWithContext _localctx = new DmlStatementNoWithContext(this._ctx, this.getState());
      this.enterRule(_localctx, 150, 75);

      try {
         this.setState(2320);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 97:
               _localctx = new DeleteFromTableContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(2268);
               this.match(97);
               this.setState(2269);
               this.match(141);
               this.setState(2270);
               this.identifierReference();
               this.setState(2271);
               this.tableAlias();
               this.setState(2273);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 380) {
                  this.setState(2272);
                  this.whereClause();
               }
               break;
            case 141:
               _localctx = new MultiInsertQueryContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(2262);
               this.fromClause();
               this.setState(2264);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);

               do {
                  this.setState(2263);
                  this.multiInsertQueryBody();
                  this.setState(2266);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 170);

               return _localctx;
            case 170:
               _localctx = new SingleInsertQueryContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(2259);
               this.insertInto();
               this.setState(2260);
               this.query();
               break;
            case 206:
               _localctx = new MergeIntoTableContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(2282);
               this.match(206);
               this.setState(2286);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 383) {
                  this.setState(2283);
                  this.match(383);
                  this.setState(2284);
                  this.match(289);
                  this.setState(2285);
                  this.match(116);
               }

               this.setState(2288);
               this.match(175);
               this.setState(2289);
               ((MergeIntoTableContext)_localctx).target = this.identifierReference();
               this.setState(2290);
               ((MergeIntoTableContext)_localctx).targetAlias = this.tableAlias();
               this.setState(2291);
               this.match(366);
               this.setState(2297);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 246, this._ctx)) {
                  case 1:
                     this.setState(2292);
                     ((MergeIntoTableContext)_localctx).source = this.identifierReference();
                     break;
                  case 2:
                     this.setState(2293);
                     this.match(2);
                     this.setState(2294);
                     ((MergeIntoTableContext)_localctx).sourceQuery = this.query();
                     this.setState(2295);
                     this.match(3);
               }

               this.setState(2299);
               ((MergeIntoTableContext)_localctx).sourceAlias = this.tableAlias();
               this.setState(2300);
               this.match(231);
               this.setState(2301);
               ((MergeIntoTableContext)_localctx).mergeCondition = this.booleanExpression(0);
               this.setState(2305);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 247, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 247, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2302);
                     this.matchedClause();
                  }

                  this.setState(2307);
                  this._errHandler.sync(this);
               }

               this.setState(2311);
               this._errHandler.sync(this);

               for(int var14 = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 248, this._ctx); var14 != 2 && var14 != 0; var14 = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 248, this._ctx)) {
                  if (var14 == 1) {
                     this.setState(2308);
                     this.notMatchedClause();
                  }

                  this.setState(2313);
                  this._errHandler.sync(this);
               }

               this.setState(2317);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 379; _la = this._input.LA(1)) {
                  this.setState(2314);
                  this.notMatchedBySourceClause();
                  this.setState(2319);
                  this._errHandler.sync(this);
               }
               break;
            case 363:
               _localctx = new UpdateTableContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(2275);
               this.match(363);
               this.setState(2276);
               this.identifierReference();
               this.setState(2277);
               this.tableAlias();
               this.setState(2278);
               this.setClause();
               this.setState(2280);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 380) {
                  this.setState(2279);
                  this.whereClause();
               }
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IdentifierReferenceContext identifierReference() throws RecognitionException {
      IdentifierReferenceContext _localctx = new IdentifierReferenceContext(this._ctx, this.getState());
      this.enterRule(_localctx, 152, 76);

      try {
         this.setState(2328);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 251, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2322);
               this.match(155);
               this.setState(2323);
               this.match(2);
               this.setState(2324);
               this.expression();
               this.setState(2325);
               this.match(3);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2327);
               this.multipartIdentifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CatalogIdentifierReferenceContext catalogIdentifierReference() throws RecognitionException {
      CatalogIdentifierReferenceContext _localctx = new CatalogIdentifierReferenceContext(this._ctx, this.getState());
      this.enterRule(_localctx, 154, 77);

      try {
         this.setState(2337);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 252, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2330);
               this.match(155);
               this.setState(2331);
               this.match(2);
               this.setState(2332);
               this.expression();
               this.setState(2333);
               this.match(3);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2335);
               this.errorCapturingIdentifier();
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(2336);
               this.stringLit();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QueryOrganizationContext queryOrganization() throws RecognitionException {
      QueryOrganizationContext _localctx = new QueryOrganizationContext(this._ctx, this.getState());
      this.enterRule(_localctx, 156, 78);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2349);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 254, this._ctx)) {
            case 1:
               this.setState(2339);
               this.match(236);
               this.setState(2340);
               this.match(36);
               this.setState(2341);
               _localctx.sortItem = this.sortItem();
               _localctx.order.add(_localctx.sortItem);
               this.setState(2346);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 253, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 253, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2342);
                     this.match(4);
                     this.setState(2343);
                     _localctx.sortItem = this.sortItem();
                     _localctx.order.add(_localctx.sortItem);
                  }

                  this.setState(2348);
                  this._errHandler.sync(this);
               }
         }

         this.setState(2361);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 256, this._ctx)) {
            case 1:
               this.setState(2351);
               this.match(51);
               this.setState(2352);
               this.match(36);
               this.setState(2353);
               _localctx.expression = this.expression();
               _localctx.clusterBy.add(_localctx.expression);
               this.setState(2358);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 255, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 255, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2354);
                     this.match(4);
                     this.setState(2355);
                     _localctx.expression = this.expression();
                     _localctx.clusterBy.add(_localctx.expression);
                  }

                  this.setState(2360);
                  this._errHandler.sync(this);
               }
         }

         this.setState(2373);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 258, this._ctx)) {
            case 1:
               this.setState(2363);
               this.match(106);
               this.setState(2364);
               this.match(36);
               this.setState(2365);
               _localctx.expression = this.expression();
               _localctx.distributeBy.add(_localctx.expression);
               this.setState(2370);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 257, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 257, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2366);
                     this.match(4);
                     this.setState(2367);
                     _localctx.expression = this.expression();
                     _localctx.distributeBy.add(_localctx.expression);
                  }

                  this.setState(2372);
                  this._errHandler.sync(this);
               }
         }

         this.setState(2385);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 260, this._ctx)) {
            case 1:
               this.setState(2375);
               this.match(307);
               this.setState(2376);
               this.match(36);
               this.setState(2377);
               _localctx.sortItem = this.sortItem();
               _localctx.sort.add(_localctx.sortItem);
               this.setState(2382);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 259, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 259, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2378);
                     this.match(4);
                     this.setState(2379);
                     _localctx.sortItem = this.sortItem();
                     _localctx.sort.add(_localctx.sortItem);
                  }

                  this.setState(2384);
                  this._errHandler.sync(this);
               }
         }

         this.setState(2388);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 261, this._ctx)) {
            case 1:
               this.setState(2387);
               this.windowClause();
            default:
               this.setState(2395);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 263, this._ctx)) {
                  case 1:
                     this.setState(2390);
                     this.match(192);
                     this.setState(2393);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 262, this._ctx)) {
                        case 1:
                           this.setState(2391);
                           this.match(12);
                           break;
                        case 2:
                           this.setState(2392);
                           _localctx.limit = this.expression();
                     }
                  default:
                     this.setState(2399);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 264, this._ctx)) {
                        case 1:
                           this.setState(2397);
                           this.match(230);
                           this.setState(2398);
                           _localctx.offset = this.expression();
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MultiInsertQueryBodyContext multiInsertQueryBody() throws RecognitionException {
      MultiInsertQueryBodyContext _localctx = new MultiInsertQueryBodyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 158, 79);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2401);
         this.insertInto();
         this.setState(2402);
         this.fromStatementBody();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QueryTermContext queryTerm() throws RecognitionException {
      return this.queryTerm(0);
   }

   private QueryTermContext queryTerm(int _p) throws RecognitionException {
      ParserRuleContext _parentctx = this._ctx;
      int _parentState = this.getState();
      QueryTermContext _localctx = new QueryTermContext(this._ctx, _parentState);
      int _startState = 160;
      this.enterRecursionRule(_localctx, 160, 80, _p);

      try {
         this.enterOuterAlt(_localctx, 1);
         _localctx = new QueryTermDefaultContext(_localctx);
         this._ctx = _localctx;
         this.setState(2405);
         this.queryPrimary();
         this._ctx.stop = this._input.LT(-1);
         this.setState(2433);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 269, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 269, this._ctx)) {
            if (_alt == 1) {
               if (this._parseListeners != null) {
                  this.triggerExitRuleEvent();
               }

               QueryTermContext _prevctx = _localctx;
               this.setState(2431);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 268, this._ctx)) {
                  case 1:
                     _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                     ((SetOperationContext)_localctx).left = (QueryTermContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 80);
                     this.setState(2407);
                     if (!this.precpred(this._ctx, 4)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 4)");
                     }

                     this.setState(2408);
                     if (!this.legacy_setops_precedence_enabled) {
                        throw new FailedPredicateException(this, "legacy_setops_precedence_enabled");
                     }

                     this.setState(2409);
                     ((SetOperationContext)_localctx).operator = this._input.LT(1);
                     int _la = this._input.LA(1);
                     if (_la != 117 && _la != 171 && _la != 299 && _la != 356) {
                        ((SetOperationContext)_localctx).operator = this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }

                     this.setState(2411);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
                     if (_la == 12 || _la == 105) {
                        this.setState(2410);
                        this.setQuantifier();
                     }

                     this.setState(2413);
                     ((SetOperationContext)_localctx).right = this.queryTerm(5);
                     break;
                  case 2:
                     _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                     ((SetOperationContext)_localctx).left = (QueryTermContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 80);
                     this.setState(2414);
                     if (!this.precpred(this._ctx, 3)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                     }

                     this.setState(2415);
                     if (this.legacy_setops_precedence_enabled) {
                        throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
                     }

                     this.setState(2416);
                     ((SetOperationContext)_localctx).operator = this.match(171);
                     this.setState(2418);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 12 || _la == 105) {
                        this.setState(2417);
                        this.setQuantifier();
                     }

                     this.setState(2420);
                     ((SetOperationContext)_localctx).right = this.queryTerm(4);
                     break;
                  case 3:
                     _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                     ((SetOperationContext)_localctx).left = (QueryTermContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 80);
                     this.setState(2421);
                     if (!this.precpred(this._ctx, 2)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                     }

                     this.setState(2422);
                     if (this.legacy_setops_precedence_enabled) {
                        throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
                     }

                     this.setState(2423);
                     ((SetOperationContext)_localctx).operator = this._input.LT(1);
                     int _la = this._input.LA(1);
                     if (_la != 117 && _la != 299 && _la != 356) {
                        ((SetOperationContext)_localctx).operator = this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }

                     this.setState(2425);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
                     if (_la == 12 || _la == 105) {
                        this.setState(2424);
                        this.setQuantifier();
                     }

                     this.setState(2427);
                     ((SetOperationContext)_localctx).right = this.queryTerm(3);
                     break;
                  case 4:
                     _localctx = new OperatorPipeStatementContext(new QueryTermContext(_parentctx, _parentState));
                     ((OperatorPipeStatementContext)_localctx).left = (QueryTermContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 80);
                     this.setState(2428);
                     if (!this.precpred(this._ctx, 1)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                     }

                     this.setState(2429);
                     this.match(408);
                     this.setState(2430);
                     this.operatorPipeRightSide();
               }
            }

            this.setState(2435);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.unrollRecursionContexts(_parentctx);
      }

      return _localctx;
   }

   public final QueryPrimaryContext queryPrimary() throws RecognitionException {
      QueryPrimaryContext _localctx = new QueryPrimaryContext(this._ctx, this.getState());
      this.enterRule(_localctx, 162, 81);

      try {
         this.setState(2445);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 2:
               _localctx = new SubqueryContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(2441);
               this.match(2);
               this.setState(2442);
               this.query();
               this.setState(2443);
               this.match(3);
               break;
            case 141:
               _localctx = new FromStmtContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(2437);
               this.fromStatement();
               break;
            case 204:
            case 265:
            case 292:
               _localctx = new QueryPrimaryDefaultContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(2436);
               this.querySpecification();
               break;
            case 325:
               _localctx = new TableContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(2438);
               this.match(325);
               this.setState(2439);
               this.identifierReference();
               break;
            case 368:
               _localctx = new InlineTableDefault1Context(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(2440);
               this.inlineTable();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SortItemContext sortItem() throws RecognitionException {
      SortItemContext _localctx = new SortItemContext(this._ctx, this.getState());
      this.enterRule(_localctx, 164, 82);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2447);
         this.expression();
         this.setState(2449);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 271, this._ctx)) {
            case 1:
               this.setState(2448);
               _localctx.ordering = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 23 && _la != 99) {
                  _localctx.ordering = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
         }

         this.setState(2453);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 272, this._ctx)) {
            case 1:
               this.setState(2451);
               this.match(227);
               this.setState(2452);
               _localctx.nullOrder = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 133 && _la != 184) {
                  _localctx.nullOrder = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FromStatementContext fromStatement() throws RecognitionException {
      FromStatementContext _localctx = new FromStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 166, 83);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2455);
         this.fromClause();
         this.setState(2459);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 273, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 273, this._ctx)) {
            if (_alt == 1) {
               this.setState(2456);
               this.fromStatementBody();
            }

            this.setState(2461);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FromStatementBodyContext fromStatementBody() throws RecognitionException {
      FromStatementBodyContext _localctx = new FromStatementBodyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 168, 84);

      try {
         this.setState(2489);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 280, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2462);
               this.transformClause();
               this.setState(2464);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 274, this._ctx)) {
                  case 1:
                     this.setState(2463);
                     this.whereClause();
                  default:
                     this.setState(2466);
                     this.queryOrganization();
                     return _localctx;
               }
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2468);
               this.selectClause();
               this.setState(2472);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 275, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 275, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2469);
                     this.lateralView();
                  }

                  this.setState(2474);
                  this._errHandler.sync(this);
               }

               this.setState(2476);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 276, this._ctx)) {
                  case 1:
                     this.setState(2475);
                     this.whereClause();
                  default:
                     this.setState(2479);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 277, this._ctx)) {
                        case 1:
                           this.setState(2478);
                           this.aggregationClause();
                        default:
                           this.setState(2482);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 278, this._ctx)) {
                              case 1:
                                 this.setState(2481);
                                 this.havingClause();
                              default:
                                 this.setState(2485);
                                 this._errHandler.sync(this);
                                 switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 279, this._ctx)) {
                                    case 1:
                                       this.setState(2484);
                                       this.windowClause();
                                    default:
                                       this.setState(2487);
                                       this.queryOrganization();
                                 }
                           }
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QuerySpecificationContext querySpecification() throws RecognitionException {
      QuerySpecificationContext _localctx = new QuerySpecificationContext(this._ctx, this.getState());
      this.enterRule(_localctx, 170, 85);

      try {
         this.setState(2535);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 293, this._ctx)) {
            case 1:
               _localctx = new TransformQuerySpecificationContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(2491);
               this.transformClause();
               this.setState(2493);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 281, this._ctx)) {
                  case 1:
                     this.setState(2492);
                     this.fromClause();
                  default:
                     this.setState(2498);
                     this._errHandler.sync(this);

                     for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 282, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 282, this._ctx)) {
                        if (_alt == 1) {
                           this.setState(2495);
                           this.lateralView();
                        }

                        this.setState(2500);
                        this._errHandler.sync(this);
                     }

                     this.setState(2502);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 283, this._ctx)) {
                        case 1:
                           this.setState(2501);
                           this.whereClause();
                        default:
                           this.setState(2505);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 284, this._ctx)) {
                              case 1:
                                 this.setState(2504);
                                 this.aggregationClause();
                              default:
                                 this.setState(2508);
                                 this._errHandler.sync(this);
                                 switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 285, this._ctx)) {
                                    case 1:
                                       this.setState(2507);
                                       this.havingClause();
                                    default:
                                       this.setState(2511);
                                       this._errHandler.sync(this);
                                       switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 286, this._ctx)) {
                                          case 1:
                                             this.setState(2510);
                                             this.windowClause();
                                             return _localctx;
                                          default:
                                             return _localctx;
                                       }
                                 }
                           }
                     }
               }
            case 2:
               _localctx = new RegularQuerySpecificationContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(2513);
               this.selectClause();
               this.setState(2515);
               this._errHandler.sync(this);
               int _alt;
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 287, this._ctx)) {
                  case 1:
                     this.setState(2514);
                     this.fromClause();
                  default:
                     this.setState(2520);
                     this._errHandler.sync(this);
                     _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 288, this._ctx);
               }

               while(_alt != 2 && _alt != 0) {
                  if (_alt == 1) {
                     this.setState(2517);
                     this.lateralView();
                  }

                  this.setState(2522);
                  this._errHandler.sync(this);
                  _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 288, this._ctx);
               }

               this.setState(2524);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 289, this._ctx)) {
                  case 1:
                     this.setState(2523);
                     this.whereClause();
                  default:
                     this.setState(2527);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 290, this._ctx)) {
                        case 1:
                           this.setState(2526);
                           this.aggregationClause();
                        default:
                           this.setState(2530);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 291, this._ctx)) {
                              case 1:
                                 this.setState(2529);
                                 this.havingClause();
                              default:
                                 this.setState(2533);
                                 this._errHandler.sync(this);
                                 switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 292, this._ctx)) {
                                    case 1:
                                       this.setState(2532);
                                       this.windowClause();
                                 }
                           }
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TransformClauseContext transformClause() throws RecognitionException {
      TransformClauseContext _localctx = new TransformClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 172, 86);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2556);
         this._errHandler.sync(this);
         label137:
         switch (this._input.LA(1)) {
            case 204:
               this.setState(2546);
               _localctx.kind = this.match(204);
               this.setState(2548);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 295, this._ctx)) {
                  case 1:
                     this.setState(2547);
                     this.setQuantifier();
                  default:
                     this.setState(2550);
                     this.expressionSeq();
                     break label137;
               }
            case 265:
               this.setState(2551);
               _localctx.kind = this.match(265);
               this.setState(2553);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 296, this._ctx)) {
                  case 1:
                     this.setState(2552);
                     this.setQuantifier();
                  default:
                     this.setState(2555);
                     this.expressionSeq();
                     break label137;
               }
            case 292:
               this.setState(2537);
               this.match(292);
               this.setState(2538);
               _localctx.kind = this.match(347);
               this.setState(2539);
               this.match(2);
               this.setState(2541);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 294, this._ctx)) {
                  case 1:
                     this.setState(2540);
                     this.setQuantifier();
                  default:
                     this.setState(2543);
                     this.expressionSeq();
                     this.setState(2544);
                     this.match(3);
                     break label137;
               }
            default:
               throw new NoViableAltException(this);
         }

         this.setState(2559);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 285) {
            this.setState(2558);
            _localctx.inRowFormat = this.rowFormat();
         }

         this.setState(2563);
         this._errHandler.sync(this);
         _la = this._input.LA(1);
         if (_la == 262) {
            this.setState(2561);
            this.match(262);
            this.setState(2562);
            _localctx.recordWriter = this.stringLit();
         }

         this.setState(2565);
         this.match(366);
         this.setState(2566);
         _localctx.script = this.stringLit();
         this.setState(2579);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 302, this._ctx)) {
            case 1:
               this.setState(2567);
               this.match(22);
               this.setState(2577);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 301, this._ctx)) {
                  case 1:
                     this.setState(2568);
                     this.identifierSeq();
                     break;
                  case 2:
                     this.setState(2569);
                     this.colTypeList();
                     break;
                  case 3:
                     this.setState(2570);
                     this.match(2);
                     this.setState(2573);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 300, this._ctx)) {
                        case 1:
                           this.setState(2571);
                           this.identifierSeq();
                           break;
                        case 2:
                           this.setState(2572);
                           this.colTypeList();
                     }

                     this.setState(2575);
                     this.match(3);
               }
            default:
               this.setState(2582);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 303, this._ctx)) {
                  case 1:
                     this.setState(2581);
                     _localctx.outRowFormat = this.rowFormat();
                  default:
                     this.setState(2586);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 304, this._ctx)) {
                        case 1:
                           this.setState(2584);
                           this.match(261);
                           this.setState(2585);
                           _localctx.recordReader = this.stringLit();
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SelectClauseContext selectClause() throws RecognitionException {
      SelectClauseContext _localctx = new SelectClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 174, 87);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2588);
         this.match(292);
         this.setState(2592);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 305, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 305, this._ctx)) {
            if (_alt == 1) {
               this.setState(2589);
               _localctx.hint = this.hint();
               _localctx.hints.add(_localctx.hint);
            }

            this.setState(2594);
            this._errHandler.sync(this);
         }

         this.setState(2596);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 306, this._ctx)) {
            case 1:
               this.setState(2595);
               this.setQuantifier();
            default:
               this.setState(2598);
               this.namedExpressionSeq();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SetClauseContext setClause() throws RecognitionException {
      SetClauseContext _localctx = new SetClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 176, 88);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2600);
         this.match(298);
         this.setState(2601);
         this.assignmentList();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MatchedClauseContext matchedClause() throws RecognitionException {
      MatchedClauseContext _localctx = new MatchedClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 178, 89);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2603);
         this.match(379);
         this.setState(2604);
         this.match(205);
         this.setState(2607);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 16) {
            this.setState(2605);
            this.match(16);
            this.setState(2606);
            _localctx.matchedCond = this.booleanExpression(0);
         }

         this.setState(2609);
         this.match(332);
         this.setState(2610);
         this.matchedAction();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NotMatchedClauseContext notMatchedClause() throws RecognitionException {
      NotMatchedClauseContext _localctx = new NotMatchedClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 180, 90);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2612);
         this.match(379);
         this.setState(2613);
         this.errorCapturingNot();
         this.setState(2614);
         this.match(205);
         this.setState(2617);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 36) {
            this.setState(2615);
            this.match(36);
            this.setState(2616);
            this.match(328);
         }

         this.setState(2621);
         this._errHandler.sync(this);
         _la = this._input.LA(1);
         if (_la == 16) {
            this.setState(2619);
            this.match(16);
            this.setState(2620);
            _localctx.notMatchedCond = this.booleanExpression(0);
         }

         this.setState(2623);
         this.match(332);
         this.setState(2624);
         this.notMatchedAction();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NotMatchedBySourceClauseContext notMatchedBySourceClause() throws RecognitionException {
      NotMatchedBySourceClauseContext _localctx = new NotMatchedBySourceClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 182, 91);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2626);
         this.match(379);
         this.setState(2627);
         this.errorCapturingNot();
         this.setState(2628);
         this.match(205);
         this.setState(2629);
         this.match(36);
         this.setState(2630);
         this.match(309);
         this.setState(2633);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 16) {
            this.setState(2631);
            this.match(16);
            this.setState(2632);
            _localctx.notMatchedBySourceCond = this.booleanExpression(0);
         }

         this.setState(2635);
         this.match(332);
         this.setState(2636);
         this.notMatchedBySourceAction();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MatchedActionContext matchedAction() throws RecognitionException {
      MatchedActionContext _localctx = new MatchedActionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 184, 92);

      try {
         this.setState(2645);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 311, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2638);
               this.match(97);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2639);
               this.match(363);
               this.setState(2640);
               this.match(298);
               this.setState(2641);
               this.match(401);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(2642);
               this.match(363);
               this.setState(2643);
               this.match(298);
               this.setState(2644);
               this.assignmentList();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NotMatchedActionContext notMatchedAction() throws RecognitionException {
      NotMatchedActionContext _localctx = new NotMatchedActionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 186, 93);

      try {
         this.setState(2665);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 313, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2647);
               this.match(170);
               this.setState(2648);
               this.match(401);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2649);
               this.match(170);
               this.setState(2650);
               this.match(2);
               this.setState(2651);
               _localctx.columns = this.multipartIdentifierList();
               this.setState(2652);
               this.match(3);
               this.setState(2653);
               this.match(368);
               this.setState(2654);
               this.match(2);
               this.setState(2655);
               this.expression();
               this.setState(2660);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                  this.setState(2656);
                  this.match(4);
                  this.setState(2657);
                  this.expression();
                  this.setState(2662);
                  this._errHandler.sync(this);
               }

               this.setState(2663);
               this.match(3);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NotMatchedBySourceActionContext notMatchedBySourceAction() throws RecognitionException {
      NotMatchedBySourceActionContext _localctx = new NotMatchedBySourceActionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 188, 94);

      try {
         this.setState(2671);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 97:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2667);
               this.match(97);
               break;
            case 363:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2668);
               this.match(363);
               this.setState(2669);
               this.match(298);
               this.setState(2670);
               this.assignmentList();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExceptClauseContext exceptClause() throws RecognitionException {
      ExceptClauseContext _localctx = new ExceptClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 190, 95);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2673);
         this.match(117);
         this.setState(2674);
         this.match(2);
         this.setState(2675);
         _localctx.exceptCols = this.multipartIdentifierList();
         this.setState(2676);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final AssignmentListContext assignmentList() throws RecognitionException {
      AssignmentListContext _localctx = new AssignmentListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 192, 96);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2678);
         this.assignment();
         this.setState(2683);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2679);
            this.match(4);
            this.setState(2680);
            this.assignment();
            this.setState(2685);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final AssignmentContext assignment() throws RecognitionException {
      AssignmentContext _localctx = new AssignmentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 194, 97);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2686);
         _localctx.key = this.multipartIdentifier();
         this.setState(2687);
         this.match(388);
         this.setState(2688);
         _localctx.value = this.expression();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final WhereClauseContext whereClause() throws RecognitionException {
      WhereClauseContext _localctx = new WhereClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 196, 98);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2690);
         this.match(380);
         this.setState(2691);
         this.booleanExpression(0);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final HavingClauseContext havingClause() throws RecognitionException {
      HavingClauseContext _localctx = new HavingClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 198, 99);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2693);
         this.match(151);
         this.setState(2694);
         this.booleanExpression(0);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final HintContext hint() throws RecognitionException {
      HintContext _localctx = new HintContext(this._ctx, this.getState());
      this.enterRule(_localctx, 200, 100);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2696);
         this.match(414);
         this.setState(2697);
         _localctx.hintStatement = this.hintStatement();
         _localctx.hintStatements.add(_localctx.hintStatement);
         this.setState(2704);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 317, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 317, this._ctx)) {
            if (_alt == 1) {
               this.setState(2699);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 316, this._ctx)) {
                  case 1:
                     this.setState(2698);
                     this.match(4);
                  default:
                     this.setState(2701);
                     _localctx.hintStatement = this.hintStatement();
                     _localctx.hintStatements.add(_localctx.hintStatement);
               }
            }

            this.setState(2706);
            this._errHandler.sync(this);
         }

         this.setState(2707);
         this.match(415);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final HintStatementContext hintStatement() throws RecognitionException {
      HintStatementContext _localctx = new HintStatementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 202, 101);

      try {
         this.setState(2722);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 319, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2709);
               _localctx.hintName = this.identifier();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2710);
               _localctx.hintName = this.identifier();
               this.setState(2711);
               this.match(2);
               this.setState(2712);
               _localctx.primaryExpression = this.primaryExpression(0);
               _localctx.parameters.add(_localctx.primaryExpression);
               this.setState(2717);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                  this.setState(2713);
                  this.match(4);
                  this.setState(2714);
                  _localctx.primaryExpression = this.primaryExpression(0);
                  _localctx.parameters.add(_localctx.primaryExpression);
                  this.setState(2719);
                  this._errHandler.sync(this);
               }

               this.setState(2720);
               this.match(3);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FromClauseContext fromClause() throws RecognitionException {
      FromClauseContext _localctx = new FromClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 204, 102);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2724);
         this.match(141);
         this.setState(2725);
         this.relation();
         this.setState(2730);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 320, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 320, this._ctx)) {
            if (_alt == 1) {
               this.setState(2726);
               this.match(4);
               this.setState(2727);
               this.relation();
            }

            this.setState(2732);
            this._errHandler.sync(this);
         }

         this.setState(2736);
         this._errHandler.sync(this);

         for(int var8 = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 321, this._ctx); var8 != 2 && var8 != 0; var8 = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 321, this._ctx)) {
            if (var8 == 1) {
               this.setState(2733);
               this.lateralView();
            }

            this.setState(2738);
            this._errHandler.sync(this);
         }

         this.setState(2740);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 322, this._ctx)) {
            case 1:
               this.setState(2739);
               this.pivotClause();
            default:
               this.setState(2743);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 323, this._ctx)) {
                  case 1:
                     this.setState(2742);
                     this.unpivotClause();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TemporalClauseContext temporalClause() throws RecognitionException {
      TemporalClauseContext _localctx = new TemporalClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 206, 103);

      try {
         this.setState(2759);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 326, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2746);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 136) {
                  this.setState(2745);
                  this.match(136);
               }

               this.setState(2748);
               _la = this._input.LA(1);
               if (_la != 324 && _la != 373) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(2749);
               this.match(22);
               this.setState(2750);
               this.match(229);
               this.setState(2751);
               this.version();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2753);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 136) {
                  this.setState(2752);
                  this.match(136);
               }

               this.setState(2755);
               _la = this._input.LA(1);
               if (_la != 323 && _la != 335) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(2756);
               this.match(22);
               this.setState(2757);
               this.match(229);
               this.setState(2758);
               _localctx.timestamp = this.valueExpression(0);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final AggregationClauseContext aggregationClause() throws RecognitionException {
      AggregationClauseContext _localctx = new AggregationClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 208, 104);

      try {
         this.setState(2800);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 331, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2761);
               this.match(148);
               this.setState(2762);
               this.match(36);
               this.setState(2763);
               _localctx.groupByClause = this.groupByClause();
               _localctx.groupingExpressionsWithGroupingAnalytics.add(_localctx.groupByClause);
               this.setState(2768);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 327, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 327, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2764);
                     this.match(4);
                     this.setState(2765);
                     _localctx.groupByClause = this.groupByClause();
                     _localctx.groupingExpressionsWithGroupingAnalytics.add(_localctx.groupByClause);
                  }

                  this.setState(2770);
                  this._errHandler.sync(this);
               }
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2771);
               this.match(148);
               this.setState(2772);
               this.match(36);
               this.setState(2773);
               _localctx.namedExpression = this.namedExpression();
               _localctx.groupingExpressions.add(_localctx.namedExpression);
               this.setState(2778);
               this._errHandler.sync(this);

               for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 328, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 328, this._ctx)) {
                  if (_alt == 1) {
                     this.setState(2774);
                     this.match(4);
                     this.setState(2775);
                     _localctx.namedExpression = this.namedExpression();
                     _localctx.groupingExpressions.add(_localctx.namedExpression);
                  }

                  this.setState(2780);
                  this._errHandler.sync(this);
               }

               this.setState(2798);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 330, this._ctx)) {
                  case 1:
                     this.setState(2781);
                     this.match(383);
                     this.setState(2782);
                     _localctx.kind = this.match(284);
                     break;
                  case 2:
                     this.setState(2783);
                     this.match(383);
                     this.setState(2784);
                     _localctx.kind = this.match(73);
                     break;
                  case 3:
                     this.setState(2785);
                     _localctx.kind = this.match(149);
                     this.setState(2786);
                     this.match(300);
                     this.setState(2787);
                     this.match(2);
                     this.setState(2788);
                     this.groupingSet();
                     this.setState(2793);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                        this.setState(2789);
                        this.match(4);
                        this.setState(2790);
                        this.groupingSet();
                        this.setState(2795);
                        this._errHandler.sync(this);
                     }

                     this.setState(2796);
                     this.match(3);
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final GroupByClauseContext groupByClause() throws RecognitionException {
      GroupByClauseContext _localctx = new GroupByClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 210, 105);

      try {
         this.setState(2804);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 332, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2802);
               this.groupingAnalytics();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2803);
               this.expression();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final GroupingAnalyticsContext groupingAnalytics() throws RecognitionException {
      GroupingAnalyticsContext _localctx = new GroupingAnalyticsContext(this._ctx, this.getState());
      this.enterRule(_localctx, 212, 106);

      try {
         this.setState(2831);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 73:
            case 284:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2806);
               int _la = this._input.LA(1);
               if (_la != 73 && _la != 284) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(2807);
               this.match(2);
               this.setState(2808);
               this.groupingSet();
               this.setState(2813);
               this._errHandler.sync(this);

               for(int var10 = this._input.LA(1); var10 == 4; var10 = this._input.LA(1)) {
                  this.setState(2809);
                  this.match(4);
                  this.setState(2810);
                  this.groupingSet();
                  this.setState(2815);
                  this._errHandler.sync(this);
               }

               this.setState(2816);
               this.match(3);
               break;
            case 149:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2818);
               this.match(149);
               this.setState(2819);
               this.match(300);
               this.setState(2820);
               this.match(2);
               this.setState(2821);
               this.groupingElement();
               this.setState(2826);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                  this.setState(2822);
                  this.match(4);
                  this.setState(2823);
                  this.groupingElement();
                  this.setState(2828);
                  this._errHandler.sync(this);
               }

               this.setState(2829);
               this.match(3);
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final GroupingElementContext groupingElement() throws RecognitionException {
      GroupingElementContext _localctx = new GroupingElementContext(this._ctx, this.getState());
      this.enterRule(_localctx, 214, 107);

      try {
         this.setState(2835);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 336, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2833);
               this.groupingAnalytics();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2834);
               this.groupingSet();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final GroupingSetContext groupingSet() throws RecognitionException {
      GroupingSetContext _localctx = new GroupingSetContext(this._ctx, this.getState());
      this.enterRule(_localctx, 216, 108);

      try {
         this.setState(2850);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 339, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2837);
               this.match(2);
               this.setState(2846);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 338, this._ctx)) {
                  case 1:
                     this.setState(2838);
                     this.expression();
                     this.setState(2843);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                        this.setState(2839);
                        this.match(4);
                        this.setState(2840);
                        this.expression();
                        this.setState(2845);
                        this._errHandler.sync(this);
                     }
               }

               this.setState(2848);
               this.match(3);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2849);
               this.expression();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PivotClauseContext pivotClause() throws RecognitionException {
      PivotClauseContext _localctx = new PivotClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 218, 109);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2852);
         this.match(248);
         this.setState(2853);
         this.match(2);
         this.setState(2854);
         _localctx.aggregates = this.namedExpressionSeq();
         this.setState(2855);
         this.match(136);
         this.setState(2856);
         this.pivotColumn();
         this.setState(2857);
         this.match(161);
         this.setState(2858);
         this.match(2);
         this.setState(2859);
         _localctx.pivotValue = this.pivotValue();
         _localctx.pivotValues.add(_localctx.pivotValue);
         this.setState(2864);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2860);
            this.match(4);
            this.setState(2861);
            _localctx.pivotValue = this.pivotValue();
            _localctx.pivotValues.add(_localctx.pivotValue);
            this.setState(2866);
            this._errHandler.sync(this);
         }

         this.setState(2867);
         this.match(3);
         this.setState(2868);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PivotColumnContext pivotColumn() throws RecognitionException {
      PivotColumnContext _localctx = new PivotColumnContext(this._ctx, this.getState());
      this.enterRule(_localctx, 220, 110);

      try {
         this.setState(2882);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 342, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(2870);
               _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
               _localctx.identifiers.add(_localctx.errorCapturingIdentifier);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(2871);
               this.match(2);
               this.setState(2872);
               _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
               _localctx.identifiers.add(_localctx.errorCapturingIdentifier);
               this.setState(2877);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                  this.setState(2873);
                  this.match(4);
                  this.setState(2874);
                  _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
                  _localctx.identifiers.add(_localctx.errorCapturingIdentifier);
                  this.setState(2879);
                  this._errHandler.sync(this);
               }

               this.setState(2880);
               this.match(3);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PivotValueContext pivotValue() throws RecognitionException {
      PivotValueContext _localctx = new PivotValueContext(this._ctx, this.getState());
      this.enterRule(_localctx, 222, 111);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2884);
         this.expression();
         this.setState(2889);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 344, this._ctx)) {
            case 1:
               this.setState(2886);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 343, this._ctx)) {
                  case 1:
                     this.setState(2885);
                     this.match(22);
                  default:
                     this.setState(2888);
                     this.errorCapturingIdentifier();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotClauseContext unpivotClause() throws RecognitionException {
      UnpivotClauseContext _localctx = new UnpivotClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 224, 112);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2891);
         this.match(360);
         this.setState(2893);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 119 || _la == 162) {
            this.setState(2892);
            _localctx.nullOperator = this.unpivotNullClause();
         }

         this.setState(2895);
         this.match(2);
         this.setState(2896);
         _localctx.operator = this.unpivotOperator();
         this.setState(2897);
         this.match(3);
         this.setState(2902);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 347, this._ctx)) {
            case 1:
               this.setState(2899);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 346, this._ctx)) {
                  case 1:
                     this.setState(2898);
                     this.match(22);
                  default:
                     this.setState(2901);
                     this.errorCapturingIdentifier();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotNullClauseContext unpivotNullClause() throws RecognitionException {
      UnpivotNullClauseContext _localctx = new UnpivotNullClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 226, 113);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2904);
         int _la = this._input.LA(1);
         if (_la != 119 && _la != 162) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }

         this.setState(2905);
         this.match(227);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotOperatorContext unpivotOperator() throws RecognitionException {
      UnpivotOperatorContext _localctx = new UnpivotOperatorContext(this._ctx, this.getState());
      this.enterRule(_localctx, 228, 114);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2909);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 348, this._ctx)) {
            case 1:
               this.setState(2907);
               this.unpivotSingleValueColumnClause();
               break;
            case 2:
               this.setState(2908);
               this.unpivotMultiValueColumnClause();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() throws RecognitionException {
      UnpivotSingleValueColumnClauseContext _localctx = new UnpivotSingleValueColumnClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 230, 115);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2911);
         this.unpivotValueColumn();
         this.setState(2912);
         this.match(136);
         this.setState(2913);
         this.unpivotNameColumn();
         this.setState(2914);
         this.match(161);
         this.setState(2915);
         this.match(2);
         this.setState(2916);
         _localctx.unpivotColumnAndAlias = this.unpivotColumnAndAlias();
         _localctx.unpivotColumns.add(_localctx.unpivotColumnAndAlias);
         this.setState(2921);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2917);
            this.match(4);
            this.setState(2918);
            _localctx.unpivotColumnAndAlias = this.unpivotColumnAndAlias();
            _localctx.unpivotColumns.add(_localctx.unpivotColumnAndAlias);
            this.setState(2923);
            this._errHandler.sync(this);
         }

         this.setState(2924);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() throws RecognitionException {
      UnpivotMultiValueColumnClauseContext _localctx = new UnpivotMultiValueColumnClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 232, 116);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2926);
         this.match(2);
         this.setState(2927);
         _localctx.unpivotValueColumn = this.unpivotValueColumn();
         _localctx.unpivotValueColumns.add(_localctx.unpivotValueColumn);
         this.setState(2932);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2928);
            this.match(4);
            this.setState(2929);
            _localctx.unpivotValueColumn = this.unpivotValueColumn();
            _localctx.unpivotValueColumns.add(_localctx.unpivotValueColumn);
            this.setState(2934);
            this._errHandler.sync(this);
         }

         this.setState(2935);
         this.match(3);
         this.setState(2936);
         this.match(136);
         this.setState(2937);
         this.unpivotNameColumn();
         this.setState(2938);
         this.match(161);
         this.setState(2939);
         this.match(2);
         this.setState(2940);
         _localctx.unpivotColumnSet = this.unpivotColumnSet();
         _localctx.unpivotColumnSets.add(_localctx.unpivotColumnSet);
         this.setState(2945);
         this._errHandler.sync(this);

         for(int var9 = this._input.LA(1); var9 == 4; var9 = this._input.LA(1)) {
            this.setState(2941);
            this.match(4);
            this.setState(2942);
            _localctx.unpivotColumnSet = this.unpivotColumnSet();
            _localctx.unpivotColumnSets.add(_localctx.unpivotColumnSet);
            this.setState(2947);
            this._errHandler.sync(this);
         }

         this.setState(2948);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotColumnSetContext unpivotColumnSet() throws RecognitionException {
      UnpivotColumnSetContext _localctx = new UnpivotColumnSetContext(this._ctx, this.getState());
      this.enterRule(_localctx, 234, 117);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2950);
         this.match(2);
         this.setState(2951);
         _localctx.unpivotColumn = this.unpivotColumn();
         _localctx.unpivotColumns.add(_localctx.unpivotColumn);
         this.setState(2956);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(2952);
            this.match(4);
            this.setState(2953);
            _localctx.unpivotColumn = this.unpivotColumn();
            _localctx.unpivotColumns.add(_localctx.unpivotColumn);
            this.setState(2958);
            this._errHandler.sync(this);
         }

         this.setState(2959);
         this.match(3);
         this.setState(2961);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 353, this._ctx)) {
            case 1:
               this.setState(2960);
               this.unpivotAlias();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotValueColumnContext unpivotValueColumn() throws RecognitionException {
      UnpivotValueColumnContext _localctx = new UnpivotValueColumnContext(this._ctx, this.getState());
      this.enterRule(_localctx, 236, 118);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2963);
         this.identifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotNameColumnContext unpivotNameColumn() throws RecognitionException {
      UnpivotNameColumnContext _localctx = new UnpivotNameColumnContext(this._ctx, this.getState());
      this.enterRule(_localctx, 238, 119);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2965);
         this.identifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotColumnAndAliasContext unpivotColumnAndAlias() throws RecognitionException {
      UnpivotColumnAndAliasContext _localctx = new UnpivotColumnAndAliasContext(this._ctx, this.getState());
      this.enterRule(_localctx, 240, 120);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2967);
         this.unpivotColumn();
         this.setState(2969);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 354, this._ctx)) {
            case 1:
               this.setState(2968);
               this.unpivotAlias();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotColumnContext unpivotColumn() throws RecognitionException {
      UnpivotColumnContext _localctx = new UnpivotColumnContext(this._ctx, this.getState());
      this.enterRule(_localctx, 242, 121);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2971);
         this.multipartIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnpivotAliasContext unpivotAlias() throws RecognitionException {
      UnpivotAliasContext _localctx = new UnpivotAliasContext(this._ctx, this.getState());
      this.enterRule(_localctx, 244, 122);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2974);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 355, this._ctx)) {
            case 1:
               this.setState(2973);
               this.match(22);
            default:
               this.setState(2976);
               this.errorCapturingIdentifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final LateralViewContext lateralView() throws RecognitionException {
      LateralViewContext _localctx = new LateralViewContext(this._ctx, this.getState());
      this.enterRule(_localctx, 246, 123);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(2978);
         this.match(185);
         this.setState(2979);
         this.match(374);
         this.setState(2981);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 356, this._ctx)) {
            case 1:
               this.setState(2980);
               this.match(238);
         }

         this.setState(2983);
         this.qualifiedName();
         this.setState(2984);
         this.match(2);
         this.setState(2993);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 358, this._ctx)) {
            case 1:
               this.setState(2985);
               this.expression();
               this.setState(2990);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                  this.setState(2986);
                  this.match(4);
                  this.setState(2987);
                  this.expression();
                  this.setState(2992);
                  this._errHandler.sync(this);
               }
         }

         this.setState(2995);
         this.match(3);
         this.setState(2996);
         _localctx.tblName = this.identifier();
         this.setState(3008);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 361, this._ctx)) {
            case 1:
               this.setState(2998);
               this._errHandler.sync(this);
               int _alt;
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 359, this._ctx)) {
                  case 1:
                     this.setState(2997);
                     this.match(22);
                  default:
                     this.setState(3000);
                     _localctx.identifier = this.identifier();
                     _localctx.colName.add(_localctx.identifier);
                     this.setState(3005);
                     this._errHandler.sync(this);
                     _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 360, this._ctx);
               }

               while(_alt != 2 && _alt != 0) {
                  if (_alt == 1) {
                     this.setState(3001);
                     this.match(4);
                     this.setState(3002);
                     _localctx.identifier = this.identifier();
                     _localctx.colName.add(_localctx.identifier);
                  }

                  this.setState(3007);
                  this._errHandler.sync(this);
                  _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 360, this._ctx);
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SetQuantifierContext setQuantifier() throws RecognitionException {
      SetQuantifierContext _localctx = new SetQuantifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 248, 124);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3010);
         int _la = this._input.LA(1);
         if (_la != 12 && _la != 105) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RelationContext relation() throws RecognitionException {
      RelationContext _localctx = new RelationContext(this._ctx, this.getState());
      this.enterRule(_localctx, 250, 125);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3013);
         this._errHandler.sync(this);
         int _alt;
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 362, this._ctx)) {
            case 1:
               this.setState(3012);
               this.match(185);
            default:
               this.setState(3015);
               this.relationPrimary();
               this.setState(3019);
               this._errHandler.sync(this);
               _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 363, this._ctx);
         }

         while(_alt != 2 && _alt != 0) {
            if (_alt == 1) {
               this.setState(3016);
               this.relationExtension();
            }

            this.setState(3021);
            this._errHandler.sync(this);
            _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 363, this._ctx);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RelationExtensionContext relationExtension() throws RecognitionException {
      RelationExtensionContext _localctx = new RelationExtensionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 252, 126);

      try {
         this.setState(3025);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 17:
            case 72:
            case 142:
            case 166:
            case 180:
            case 189:
            case 222:
            case 279:
            case 293:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3022);
               this.joinRelation();
               break;
            case 248:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3023);
               this.pivotClause();
               break;
            case 360:
               this.enterOuterAlt(_localctx, 3);
               this.setState(3024);
               this.unpivotClause();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final JoinRelationContext joinRelation() throws RecognitionException {
      JoinRelationContext _localctx = new JoinRelationContext(this._ctx, this.getState());
      this.enterRule(_localctx, 254, 127);

      try {
         this.setState(3044);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 17:
            case 72:
            case 142:
            case 166:
            case 180:
            case 189:
            case 279:
            case 293:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3027);
               this.joinType();
               this.setState(3028);
               this.match(180);
               this.setState(3030);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 365, this._ctx)) {
                  case 1:
                     this.setState(3029);
                     this.match(185);
                  default:
                     this.setState(3032);
                     _localctx.right = this.relationPrimary();
                     this.setState(3034);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 366, this._ctx)) {
                        case 1:
                           this.setState(3033);
                           this.joinCriteria();
                           return _localctx;
                        default:
                           return _localctx;
                     }
               }
            case 222:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3036);
               this.match(222);
               this.setState(3037);
               this.joinType();
               this.setState(3038);
               this.match(180);
               this.setState(3040);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 367, this._ctx)) {
                  case 1:
                     this.setState(3039);
                     this.match(185);
                  default:
                     this.setState(3042);
                     _localctx.right = this.relationPrimary();
                     return _localctx;
               }
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final JoinTypeContext joinType() throws RecognitionException {
      JoinTypeContext _localctx = new JoinTypeContext(this._ctx, this.getState());
      this.enterRule(_localctx, 256, 128);

      try {
         this.setState(3070);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 375, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3047);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 166) {
                  this.setState(3046);
                  this.match(166);
               }
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3049);
               this.match(72);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(3050);
               this.match(189);
               this.setState(3052);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 238) {
                  this.setState(3051);
                  this.match(238);
               }
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(3055);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 189) {
                  this.setState(3054);
                  this.match(189);
               }

               this.setState(3057);
               this.match(293);
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(3058);
               this.match(279);
               this.setState(3060);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 238) {
                  this.setState(3059);
                  this.match(238);
               }
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(3062);
               this.match(142);
               this.setState(3064);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 238) {
                  this.setState(3063);
                  this.match(238);
               }
               break;
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(3067);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 189) {
                  this.setState(3066);
                  this.match(189);
               }

               this.setState(3069);
               this.match(17);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final JoinCriteriaContext joinCriteria() throws RecognitionException {
      JoinCriteriaContext _localctx = new JoinCriteriaContext(this._ctx, this.getState());
      this.enterRule(_localctx, 258, 129);

      try {
         this.setState(3076);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 231:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3072);
               this.match(231);
               this.setState(3073);
               this.booleanExpression(0);
               break;
            case 366:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3074);
               this.match(366);
               this.setState(3075);
               this.identifierList();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SampleContext sample() throws RecognitionException {
      SampleContext _localctx = new SampleContext(this._ctx, this.getState());
      this.enterRule(_localctx, 260, 130);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3078);
         this.match(327);
         this.setState(3079);
         this.match(2);
         this.setState(3081);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 377, this._ctx)) {
            case 1:
               this.setState(3080);
               this.sampleMethod();
            default:
               this.setState(3083);
               this.match(3);
               this.setState(3088);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 378, this._ctx)) {
                  case 1:
                     this.setState(3084);
                     this.match(271);
                     this.setState(3085);
                     this.match(2);
                     this.setState(3086);
                     _localctx.seed = this.match(422);
                     this.setState(3087);
                     this.match(3);
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SampleMethodContext sampleMethod() throws RecognitionException {
      SampleMethodContext _localctx = new SampleMethodContext(this._ctx, this.getState());
      this.enterRule(_localctx, 262, 131);

      try {
         this.setState(3114);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 382, this._ctx)) {
            case 1:
               _localctx = new SampleByPercentileContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(3091);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(3090);
                  ((SampleByPercentileContext)_localctx).negativeSign = this.match(400);
               }

               this.setState(3093);
               ((SampleByPercentileContext)_localctx).percentage = this._input.LT(1);
               _la = this._input.LA(1);
               if (_la != 422 && _la != 424) {
                  ((SampleByPercentileContext)_localctx).percentage = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3094);
               this.match(247);
               break;
            case 2:
               _localctx = new SampleByRowsContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(3095);
               this.expression();
               this.setState(3096);
               this.match(286);
               break;
            case 3:
               _localctx = new SampleByBucketContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(3098);
               ((SampleByBucketContext)_localctx).sampleType = this.match(34);
               this.setState(3099);
               ((SampleByBucketContext)_localctx).numerator = this.match(422);
               this.setState(3100);
               this.match(237);
               this.setState(3101);
               this.match(229);
               this.setState(3102);
               ((SampleByBucketContext)_localctx).denominator = this.match(422);
               this.setState(3111);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 231) {
                  this.setState(3103);
                  this.match(231);
                  this.setState(3109);
                  this._errHandler.sync(this);
                  switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 380, this._ctx)) {
                     case 1:
                        this.setState(3104);
                        this.identifier();
                        break;
                     case 2:
                        this.setState(3105);
                        this.qualifiedName();
                        this.setState(3106);
                        this.match(2);
                        this.setState(3107);
                        this.match(3);
                  }
               }
               break;
            case 4:
               _localctx = new SampleByBytesContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(3113);
               ((SampleByBytesContext)_localctx).bytes = this.expression();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IdentifierListContext identifierList() throws RecognitionException {
      IdentifierListContext _localctx = new IdentifierListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 264, 132);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3116);
         this.match(2);
         this.setState(3117);
         this.identifierSeq();
         this.setState(3118);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IdentifierSeqContext identifierSeq() throws RecognitionException {
      IdentifierSeqContext _localctx = new IdentifierSeqContext(this._ctx, this.getState());
      this.enterRule(_localctx, 266, 133);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3120);
         _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
         _localctx.ident.add(_localctx.errorCapturingIdentifier);
         this.setState(3125);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 383, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 383, this._ctx)) {
            if (_alt == 1) {
               this.setState(3121);
               this.match(4);
               this.setState(3122);
               _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
               _localctx.ident.add(_localctx.errorCapturingIdentifier);
            }

            this.setState(3127);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final OrderedIdentifierListContext orderedIdentifierList() throws RecognitionException {
      OrderedIdentifierListContext _localctx = new OrderedIdentifierListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 268, 134);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3128);
         this.match(2);
         this.setState(3129);
         this.orderedIdentifier();
         this.setState(3134);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(3130);
            this.match(4);
            this.setState(3131);
            this.orderedIdentifier();
            this.setState(3136);
            this._errHandler.sync(this);
         }

         this.setState(3137);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final OrderedIdentifierContext orderedIdentifier() throws RecognitionException {
      OrderedIdentifierContext _localctx = new OrderedIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 270, 135);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3139);
         _localctx.ident = this.errorCapturingIdentifier();
         this.setState(3141);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 23 || _la == 99) {
            this.setState(3140);
            _localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if (_la != 23 && _la != 99) {
               _localctx.ordering = this._errHandler.recoverInline(this);
            } else {
               if (this._input.LA(1) == -1) {
                  this.matchedEOF = true;
               }

               this._errHandler.reportMatch(this);
               this.consume();
            }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IdentifierCommentListContext identifierCommentList() throws RecognitionException {
      IdentifierCommentListContext _localctx = new IdentifierCommentListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 272, 136);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3143);
         this.match(2);
         this.setState(3144);
         this.identifierComment();
         this.setState(3149);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(3145);
            this.match(4);
            this.setState(3146);
            this.identifierComment();
            this.setState(3151);
            this._errHandler.sync(this);
         }

         this.setState(3152);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IdentifierCommentContext identifierComment() throws RecognitionException {
      IdentifierCommentContext _localctx = new IdentifierCommentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 274, 137);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3154);
         this.identifier();
         this.setState(3156);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 59) {
            this.setState(3155);
            this.commentSpec();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RelationPrimaryContext relationPrimary() throws RecognitionException {
      RelationPrimaryContext _localctx = new RelationPrimaryContext(this._ctx, this.getState());
      this.enterRule(_localctx, 276, 138);

      try {
         this.setState(3188);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 393, this._ctx)) {
            case 1:
               _localctx = new TableNameContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(3158);
               this.identifierReference();
               this.setState(3160);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 388, this._ctx)) {
                  case 1:
                     this.setState(3159);
                     this.temporalClause();
                  default:
                     this.setState(3163);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 389, this._ctx)) {
                        case 1:
                           this.setState(3162);
                           this.optionsClause();
                        default:
                           this.setState(3166);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 390, this._ctx)) {
                              case 1:
                                 this.setState(3165);
                                 this.sample();
                              default:
                                 this.setState(3168);
                                 this.tableAlias();
                                 return _localctx;
                           }
                     }
               }
            case 2:
               _localctx = new AliasedQueryContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(3170);
               this.match(2);
               this.setState(3171);
               this.query();
               this.setState(3172);
               this.match(3);
               this.setState(3174);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 391, this._ctx)) {
                  case 1:
                     this.setState(3173);
                     this.sample();
                  default:
                     this.setState(3176);
                     this.tableAlias();
                     return _localctx;
               }
            case 3:
               _localctx = new AliasedRelationContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(3178);
               this.match(2);
               this.setState(3179);
               this.relation();
               this.setState(3180);
               this.match(3);
               this.setState(3182);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 392, this._ctx)) {
                  case 1:
                     this.setState(3181);
                     this.sample();
                  default:
                     this.setState(3184);
                     this.tableAlias();
                     return _localctx;
               }
            case 4:
               _localctx = new InlineTableDefault2Context(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(3186);
               this.inlineTable();
               break;
            case 5:
               _localctx = new TableValuedFunctionContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(3187);
               this.functionTable();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final OptionsClauseContext optionsClause() throws RecognitionException {
      OptionsClauseContext _localctx = new OptionsClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 278, 139);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3190);
         this.match(383);
         this.setState(3191);
         _localctx.options = this.propertyList();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final InlineTableContext inlineTable() throws RecognitionException {
      InlineTableContext _localctx = new InlineTableContext(this._ctx, this.getState());
      this.enterRule(_localctx, 280, 140);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3193);
         this.match(368);
         this.setState(3194);
         this.expression();
         this.setState(3199);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 394, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 394, this._ctx)) {
            if (_alt == 1) {
               this.setState(3195);
               this.match(4);
               this.setState(3196);
               this.expression();
            }

            this.setState(3201);
            this._errHandler.sync(this);
         }

         this.setState(3202);
         this.tableAlias();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() throws RecognitionException {
      FunctionTableSubqueryArgumentContext _localctx = new FunctionTableSubqueryArgumentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 282, 141);

      try {
         this.setState(3223);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 398, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3204);
               this.match(325);
               this.setState(3205);
               this.identifierReference();
               this.setState(3207);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 106 || _la == 244 || _la == 383) {
                  this.setState(3206);
                  this.tableArgumentPartitioning();
               }
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3209);
               this.match(325);
               this.setState(3210);
               this.match(2);
               this.setState(3211);
               this.identifierReference();
               this.setState(3212);
               this.match(3);
               this.setState(3214);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 106 || _la == 244 || _la == 383) {
                  this.setState(3213);
                  this.tableArgumentPartitioning();
               }
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(3216);
               this.match(325);
               this.setState(3217);
               this.match(2);
               this.setState(3218);
               this.query();
               this.setState(3219);
               this.match(3);
               this.setState(3221);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 106 || _la == 244 || _la == 383) {
                  this.setState(3220);
                  this.tableArgumentPartitioning();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TableArgumentPartitioningContext tableArgumentPartitioning() throws RecognitionException {
      TableArgumentPartitioningContext _localctx = new TableArgumentPartitioningContext(this._ctx, this.getState());
      this.enterRule(_localctx, 284, 142);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3251);
         this._errHandler.sync(this);
         label228:
         switch (this._input.LA(1)) {
            case 106:
            case 244:
               this.setState(3228);
               int _la = this._input.LA(1);
               if (_la != 106 && _la != 244) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3229);
               this.match(36);
               this.setState(3249);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 401, this._ctx)) {
                  case 1:
                     this.setState(3230);
                     this.match(2);
                     this.setState(3231);
                     _localctx.expression = this.expression();
                     _localctx.partition.add(_localctx.expression);
                     this.setState(3236);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                        this.setState(3232);
                        this.match(4);
                        this.setState(3233);
                        _localctx.expression = this.expression();
                        _localctx.partition.add(_localctx.expression);
                        this.setState(3238);
                        this._errHandler.sync(this);
                     }

                     this.setState(3239);
                     this.match(3);
                     break label228;
                  case 2:
                     this.setState(3241);
                     this.expression();
                     this.setState(3244);
                     this._errHandler.sync(this);
                     int _alt = 1;

                     while(true) {
                        switch (_alt) {
                           case 1:
                              this.setState(3242);
                              this.match(4);
                              this.setState(3243);
                              _localctx.invalidMultiPartitionExpression = this.expression();
                              this.setState(3246);
                              this._errHandler.sync(this);
                              _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 400, this._ctx);
                              if (_alt == 2 || _alt == 0) {
                                 break label228;
                              }
                              break;
                           default:
                              throw new NoViableAltException(this);
                        }
                     }
                  case 3:
                     this.setState(3248);
                     _localctx.expression = this.expression();
                     _localctx.partition.add(_localctx.expression);
                  default:
                     break label228;
               }
            case 383:
               this.setState(3225);
               this.match(383);
               this.setState(3226);
               this.match(303);
               this.setState(3227);
               this.match(244);
               break;
            default:
               throw new NoViableAltException(this);
         }

         this.setState(3276);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 236 || _la == 307) {
            this.setState(3253);
            _la = this._input.LA(1);
            if (_la != 236 && _la != 307) {
               this._errHandler.recoverInline(this);
            } else {
               if (this._input.LA(1) == -1) {
                  this.matchedEOF = true;
               }

               this._errHandler.reportMatch(this);
               this.consume();
            }

            this.setState(3254);
            this.match(36);
            this.setState(3274);
            this._errHandler.sync(this);
            switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 405, this._ctx)) {
               case 1:
                  this.setState(3255);
                  this.match(2);
                  this.setState(3256);
                  this.sortItem();
                  this.setState(3261);
                  this._errHandler.sync(this);

                  for(int var12 = this._input.LA(1); var12 == 4; var12 = this._input.LA(1)) {
                     this.setState(3257);
                     this.match(4);
                     this.setState(3258);
                     this.sortItem();
                     this.setState(3263);
                     this._errHandler.sync(this);
                  }

                  this.setState(3264);
                  this.match(3);
                  break;
               case 2:
                  this.setState(3266);
                  this.sortItem();
                  this.setState(3269);
                  this._errHandler.sync(this);
                  int _alt = 1;

                  while(true) {
                     switch (_alt) {
                        case 1:
                           this.setState(3267);
                           this.match(4);
                           this.setState(3268);
                           _localctx.invalidMultiSortItem = this.sortItem();
                           this.setState(3271);
                           this._errHandler.sync(this);
                           _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 404, this._ctx);
                           if (_alt == 2 || _alt == 0) {
                              return _localctx;
                           }
                           break;
                        default:
                           throw new NoViableAltException(this);
                     }
                  }
               case 3:
                  this.setState(3273);
                  this.sortItem();
            }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() throws RecognitionException {
      FunctionTableNamedArgumentExpressionContext _localctx = new FunctionTableNamedArgumentExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 286, 143);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3278);
         _localctx.key = this.identifier();
         this.setState(3279);
         this.match(413);
         this.setState(3280);
         _localctx.table = this.functionTableSubqueryArgument();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionTableReferenceArgumentContext functionTableReferenceArgument() throws RecognitionException {
      FunctionTableReferenceArgumentContext _localctx = new FunctionTableReferenceArgumentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 288, 144);

      try {
         this.setState(3284);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 407, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3282);
               this.functionTableSubqueryArgument();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3283);
               this.functionTableNamedArgumentExpression();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionTableArgumentContext functionTableArgument() throws RecognitionException {
      FunctionTableArgumentContext _localctx = new FunctionTableArgumentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 290, 145);

      try {
         this.setState(3288);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 408, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3286);
               this.functionTableReferenceArgument();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3287);
               this.functionArgument();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionTableContext functionTable() throws RecognitionException {
      FunctionTableContext _localctx = new FunctionTableContext(this._ctx, this.getState());
      this.enterRule(_localctx, 292, 146);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3290);
         _localctx.funcName = this.functionName();
         this.setState(3291);
         this.match(2);
         this.setState(3300);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 410, this._ctx)) {
            case 1:
               this.setState(3292);
               this.functionTableArgument();
               this.setState(3297);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                  this.setState(3293);
                  this.match(4);
                  this.setState(3294);
                  this.functionTableArgument();
                  this.setState(3299);
                  this._errHandler.sync(this);
               }
         }

         this.setState(3302);
         this.match(3);
         this.setState(3303);
         this.tableAlias();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TableAliasContext tableAlias() throws RecognitionException {
      TableAliasContext _localctx = new TableAliasContext(this._ctx, this.getState());
      this.enterRule(_localctx, 294, 147);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3312);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 413, this._ctx)) {
            case 1:
               this.setState(3306);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 411, this._ctx)) {
                  case 1:
                     this.setState(3305);
                     this.match(22);
                  default:
                     this.setState(3308);
                     this.strictIdentifier();
                     this.setState(3310);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 412, this._ctx)) {
                        case 1:
                           this.setState(3309);
                           this.identifierList();
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RowFormatContext rowFormat() throws RecognitionException {
      RowFormatContext _localctx = new RowFormatContext(this._ctx, this.getState());
      this.enterRule(_localctx, 296, 148);

      try {
         this.setState(3363);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 421, this._ctx)) {
            case 1:
               _localctx = new RowFormatSerdeContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(3314);
               this.match(285);
               this.setState(3315);
               this.match(138);
               this.setState(3316);
               this.match(295);
               this.setState(3317);
               ((RowFormatSerdeContext)_localctx).name = this.stringLit();
               this.setState(3321);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 414, this._ctx)) {
                  case 1:
                     this.setState(3318);
                     this.match(383);
                     this.setState(3319);
                     this.match(296);
                     this.setState(3320);
                     ((RowFormatSerdeContext)_localctx).props = this.propertyList();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 2:
               _localctx = new RowFormatDelimitedContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(3323);
               this.match(285);
               this.setState(3324);
               this.match(138);
               this.setState(3325);
               this.match(98);
               this.setState(3335);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 416, this._ctx)) {
                  case 1:
                     this.setState(3326);
                     this.match(130);
                     this.setState(3327);
                     this.match(331);
                     this.setState(3328);
                     this.match(36);
                     this.setState(3329);
                     ((RowFormatDelimitedContext)_localctx).fieldsTerminatedBy = this.stringLit();
                     this.setState(3333);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 415, this._ctx)) {
                        case 1:
                           this.setState(3330);
                           this.match(115);
                           this.setState(3331);
                           this.match(36);
                           this.setState(3332);
                           ((RowFormatDelimitedContext)_localctx).escapedBy = this.stringLit();
                     }
                  default:
                     this.setState(3342);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 417, this._ctx)) {
                        case 1:
                           this.setState(3337);
                           this.match(56);
                           this.setState(3338);
                           this.match(178);
                           this.setState(3339);
                           this.match(331);
                           this.setState(3340);
                           this.match(36);
                           this.setState(3341);
                           ((RowFormatDelimitedContext)_localctx).collectionItemsTerminatedBy = this.stringLit();
                        default:
                           this.setState(3349);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 418, this._ctx)) {
                              case 1:
                                 this.setState(3344);
                                 this.match(204);
                                 this.setState(3345);
                                 this.match(182);
                                 this.setState(3346);
                                 this.match(331);
                                 this.setState(3347);
                                 this.match(36);
                                 this.setState(3348);
                                 ((RowFormatDelimitedContext)_localctx).keysTerminatedBy = this.stringLit();
                              default:
                                 this.setState(3355);
                                 this._errHandler.sync(this);
                                 switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 419, this._ctx)) {
                                    case 1:
                                       this.setState(3351);
                                       this.match(193);
                                       this.setState(3352);
                                       this.match(331);
                                       this.setState(3353);
                                       this.match(36);
                                       this.setState(3354);
                                       ((RowFormatDelimitedContext)_localctx).linesSeparatedBy = this.stringLit();
                                    default:
                                       this.setState(3361);
                                       this._errHandler.sync(this);
                                       switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 420, this._ctx)) {
                                          case 1:
                                             this.setState(3357);
                                             this.match(226);
                                             this.setState(3358);
                                             this.match(95);
                                             this.setState(3359);
                                             this.match(22);
                                             this.setState(3360);
                                             ((RowFormatDelimitedContext)_localctx).nullDefinedAs = this.stringLit();
                                       }
                                 }
                           }
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MultipartIdentifierListContext multipartIdentifierList() throws RecognitionException {
      MultipartIdentifierListContext _localctx = new MultipartIdentifierListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 298, 149);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3365);
         this.multipartIdentifier();
         this.setState(3370);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(3366);
            this.match(4);
            this.setState(3367);
            this.multipartIdentifier();
            this.setState(3372);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MultipartIdentifierContext multipartIdentifier() throws RecognitionException {
      MultipartIdentifierContext _localctx = new MultipartIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 300, 150);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3373);
         _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
         _localctx.parts.add(_localctx.errorCapturingIdentifier);
         this.setState(3378);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 423, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 423, this._ctx)) {
            if (_alt == 1) {
               this.setState(3374);
               this.match(5);
               this.setState(3375);
               _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
               _localctx.parts.add(_localctx.errorCapturingIdentifier);
            }

            this.setState(3380);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() throws RecognitionException {
      MultipartIdentifierPropertyListContext _localctx = new MultipartIdentifierPropertyListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 302, 151);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3381);
         this.multipartIdentifierProperty();
         this.setState(3386);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(3382);
            this.match(4);
            this.setState(3383);
            this.multipartIdentifierProperty();
            this.setState(3388);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MultipartIdentifierPropertyContext multipartIdentifierProperty() throws RecognitionException {
      MultipartIdentifierPropertyContext _localctx = new MultipartIdentifierPropertyContext(this._ctx, this.getState());
      this.enterRule(_localctx, 304, 152);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3389);
         this.multipartIdentifier();
         this.setState(3392);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 234) {
            this.setState(3390);
            this.match(234);
            this.setState(3391);
            _localctx.options = this.propertyList();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TableIdentifierContext tableIdentifier() throws RecognitionException {
      TableIdentifierContext _localctx = new TableIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 306, 153);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3397);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 426, this._ctx)) {
            case 1:
               this.setState(3394);
               _localctx.db = this.errorCapturingIdentifier();
               this.setState(3395);
               this.match(5);
            default:
               this.setState(3399);
               _localctx.table = this.errorCapturingIdentifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
      FunctionIdentifierContext _localctx = new FunctionIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 308, 154);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3404);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 427, this._ctx)) {
            case 1:
               this.setState(3401);
               _localctx.db = this.errorCapturingIdentifier();
               this.setState(3402);
               this.match(5);
            default:
               this.setState(3406);
               _localctx.function = this.errorCapturingIdentifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NamedExpressionContext namedExpression() throws RecognitionException {
      NamedExpressionContext _localctx = new NamedExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 310, 155);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3408);
         this.expression();
         this.setState(3416);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 430, this._ctx)) {
            case 1:
               this.setState(3410);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 428, this._ctx)) {
                  case 1:
                     this.setState(3409);
                     this.match(22);
                  default:
                     this.setState(3414);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 429, this._ctx)) {
                        case 1:
                           this.setState(3412);
                           _localctx.name = this.errorCapturingIdentifier();
                           break;
                        case 2:
                           this.setState(3413);
                           this.identifierList();
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NamedExpressionSeqContext namedExpressionSeq() throws RecognitionException {
      NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(this._ctx, this.getState());
      this.enterRule(_localctx, 312, 156);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3418);
         this.namedExpression();
         this.setState(3423);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 431, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 431, this._ctx)) {
            if (_alt == 1) {
               this.setState(3419);
               this.match(4);
               this.setState(3420);
               this.namedExpression();
            }

            this.setState(3425);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PartitionFieldListContext partitionFieldList() throws RecognitionException {
      PartitionFieldListContext _localctx = new PartitionFieldListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 314, 157);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3426);
         this.match(2);
         this.setState(3427);
         _localctx.partitionField = this.partitionField();
         _localctx.fields.add(_localctx.partitionField);
         this.setState(3432);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(3428);
            this.match(4);
            this.setState(3429);
            _localctx.partitionField = this.partitionField();
            _localctx.fields.add(_localctx.partitionField);
            this.setState(3434);
            this._errHandler.sync(this);
         }

         this.setState(3435);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PartitionFieldContext partitionField() throws RecognitionException {
      PartitionFieldContext _localctx = new PartitionFieldContext(this._ctx, this.getState());
      this.enterRule(_localctx, 316, 158);

      try {
         this.setState(3439);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 433, this._ctx)) {
            case 1:
               _localctx = new PartitionTransformContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(3437);
               this.transform();
               break;
            case 2:
               _localctx = new PartitionColumnContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(3438);
               this.colType();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TransformContext transform() throws RecognitionException {
      TransformContext _localctx = new TransformContext(this._ctx, this.getState());
      this.enterRule(_localctx, 318, 159);

      try {
         this.setState(3454);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 435, this._ctx)) {
            case 1:
               _localctx = new IdentityTransformContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(3441);
               this.qualifiedName();
               break;
            case 2:
               _localctx = new ApplyTransformContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(3442);
               ((ApplyTransformContext)_localctx).transformName = this.identifier();
               this.setState(3443);
               this.match(2);
               this.setState(3444);
               ((ApplyTransformContext)_localctx).transformArgument = this.transformArgument();
               ((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
               this.setState(3449);
               this._errHandler.sync(this);

               for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                  this.setState(3445);
                  this.match(4);
                  this.setState(3446);
                  ((ApplyTransformContext)_localctx).transformArgument = this.transformArgument();
                  ((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
                  this.setState(3451);
                  this._errHandler.sync(this);
               }

               this.setState(3452);
               this.match(3);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TransformArgumentContext transformArgument() throws RecognitionException {
      TransformArgumentContext _localctx = new TransformArgumentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 320, 160);

      try {
         this.setState(3458);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 436, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3456);
               this.qualifiedName();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3457);
               this.constant();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExpressionContext expression() throws RecognitionException {
      ExpressionContext _localctx = new ExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 322, 161);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3460);
         this.booleanExpression(0);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NamedArgumentExpressionContext namedArgumentExpression() throws RecognitionException {
      NamedArgumentExpressionContext _localctx = new NamedArgumentExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 324, 162);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3462);
         _localctx.key = this.identifier();
         this.setState(3463);
         this.match(413);
         this.setState(3464);
         _localctx.value = this.expression();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionArgumentContext functionArgument() throws RecognitionException {
      FunctionArgumentContext _localctx = new FunctionArgumentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 326, 163);

      try {
         this.setState(3468);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 437, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3466);
               this.expression();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3467);
               this.namedArgumentExpression();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ExpressionSeqContext expressionSeq() throws RecognitionException {
      ExpressionSeqContext _localctx = new ExpressionSeqContext(this._ctx, this.getState());
      this.enterRule(_localctx, 328, 164);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3470);
         this.expression();
         this.setState(3475);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(3471);
            this.match(4);
            this.setState(3472);
            this.expression();
            this.setState(3477);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final BooleanExpressionContext booleanExpression() throws RecognitionException {
      return this.booleanExpression(0);
   }

   private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
      ParserRuleContext _parentctx = this._ctx;
      int _parentState = this.getState();
      BooleanExpressionContext _localctx = new BooleanExpressionContext(this._ctx, _parentState);
      int _startState = 330;
      this.enterRecursionRule(_localctx, 330, 165, _p);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3490);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 440, this._ctx)) {
            case 1:
               _localctx = new LogicalNotContext(_localctx);
               this._ctx = _localctx;
               this.setState(3479);
               int _la = this._input.LA(1);
               if (_la != 8 && _la != 225) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3480);
               this.booleanExpression(5);
               break;
            case 2:
               _localctx = new ExistsContext(_localctx);
               this._ctx = _localctx;
               this.setState(3481);
               this.match(120);
               this.setState(3482);
               this.match(2);
               this.setState(3483);
               this.query();
               this.setState(3484);
               this.match(3);
               break;
            case 3:
               _localctx = new PredicatedContext(_localctx);
               this._ctx = _localctx;
               this.setState(3486);
               this.valueExpression(0);
               this.setState(3488);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 439, this._ctx)) {
                  case 1:
                     this.setState(3487);
                     this.predicate();
               }
         }

         this._ctx.stop = this._input.LT(-1);
         this.setState(3500);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 442, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 442, this._ctx)) {
            if (_alt == 1) {
               if (this._parseListeners != null) {
                  this.triggerExitRuleEvent();
               }

               BooleanExpressionContext _prevctx = _localctx;
               this.setState(3498);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 441, this._ctx)) {
                  case 1:
                     _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                     ((LogicalBinaryContext)_localctx).left = (BooleanExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 165);
                     this.setState(3492);
                     if (!this.precpred(this._ctx, 2)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                     }

                     this.setState(3493);
                     ((LogicalBinaryContext)_localctx).operator = this.match(16);
                     this.setState(3494);
                     ((LogicalBinaryContext)_localctx).right = this.booleanExpression(3);
                     break;
                  case 2:
                     _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                     ((LogicalBinaryContext)_localctx).left = (BooleanExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 165);
                     this.setState(3495);
                     if (!this.precpred(this._ctx, 1)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                     }

                     this.setState(3496);
                     ((LogicalBinaryContext)_localctx).operator = this.match(235);
                     this.setState(3497);
                     ((LogicalBinaryContext)_localctx).right = this.booleanExpression(2);
               }
            }

            this.setState(3502);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.unrollRecursionContexts(_parentctx);
      }

      return _localctx;
   }

   public final PredicateContext predicate() throws RecognitionException {
      PredicateContext _localctx = new PredicateContext(this._ctx, this.getState());
      this.enterRule(_localctx, 332, 166);

      try {
         this.setState(3585);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 456, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3504);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3503);
                  this.errorCapturingNot();
               }

               this.setState(3506);
               _localctx.kind = this.match(28);
               this.setState(3507);
               _localctx.lower = this.valueExpression(0);
               this.setState(3508);
               this.match(16);
               this.setState(3509);
               _localctx.upper = this.valueExpression(0);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3512);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3511);
                  this.errorCapturingNot();
               }

               this.setState(3514);
               _localctx.kind = this.match(161);
               this.setState(3515);
               this.match(2);
               this.setState(3516);
               this.expression();
               this.setState(3521);
               this._errHandler.sync(this);

               for(int var21 = this._input.LA(1); var21 == 4; var21 = this._input.LA(1)) {
                  this.setState(3517);
                  this.match(4);
                  this.setState(3518);
                  this.expression();
                  this.setState(3523);
                  this._errHandler.sync(this);
               }

               this.setState(3524);
               this.match(3);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(3527);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3526);
                  this.errorCapturingNot();
               }

               this.setState(3529);
               _localctx.kind = this.match(161);
               this.setState(3530);
               this.match(2);
               this.setState(3531);
               this.query();
               this.setState(3532);
               this.match(3);
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(3535);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3534);
                  this.errorCapturingNot();
               }

               this.setState(3537);
               _localctx.kind = this.match(280);
               this.setState(3538);
               _localctx.pattern = this.valueExpression(0);
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(3540);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3539);
                  this.errorCapturingNot();
               }

               this.setState(3542);
               _localctx.kind = this._input.LT(1);
               _la = this._input.LA(1);
               if (_la != 190 && _la != 191) {
                  _localctx.kind = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3543);
               _localctx.quantifier = this._input.LT(1);
               _la = this._input.LA(1);
               if (_la != 12 && _la != 18 && _la != 306) {
                  _localctx.quantifier = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3557);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 450, this._ctx)) {
                  case 1:
                     this.setState(3544);
                     this.match(2);
                     this.setState(3545);
                     this.match(3);
                     return _localctx;
                  case 2:
                     this.setState(3546);
                     this.match(2);
                     this.setState(3547);
                     this.expression();
                     this.setState(3552);
                     this._errHandler.sync(this);

                     for(int var17 = this._input.LA(1); var17 == 4; var17 = this._input.LA(1)) {
                        this.setState(3548);
                        this.match(4);
                        this.setState(3549);
                        this.expression();
                        this.setState(3554);
                        this._errHandler.sync(this);
                     }

                     this.setState(3555);
                     this.match(3);
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(3560);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3559);
                  this.errorCapturingNot();
               }

               this.setState(3562);
               _localctx.kind = this._input.LT(1);
               _la = this._input.LA(1);
               if (_la != 190 && _la != 191) {
                  _localctx.kind = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3563);
               _localctx.pattern = this.valueExpression(0);
               this.setState(3566);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 452, this._ctx)) {
                  case 1:
                     this.setState(3564);
                     this.match(114);
                     this.setState(3565);
                     _localctx.escapeChar = this.stringLit();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(3568);
               this.match(177);
               this.setState(3570);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3569);
                  this.errorCapturingNot();
               }

               this.setState(3572);
               _localctx.kind = this.match(226);
               break;
            case 8:
               this.enterOuterAlt(_localctx, 8);
               this.setState(3573);
               this.match(177);
               this.setState(3575);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3574);
                  this.errorCapturingNot();
               }

               this.setState(3577);
               _localctx.kind = this._input.LT(1);
               _la = this._input.LA(1);
               if (_la != 128 && _la != 349 && _la != 358) {
                  _localctx.kind = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
               break;
            case 9:
               this.enterOuterAlt(_localctx, 9);
               this.setState(3578);
               this.match(177);
               this.setState(3580);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 8 || _la == 225) {
                  this.setState(3579);
                  this.errorCapturingNot();
               }

               this.setState(3582);
               _localctx.kind = this.match(105);
               this.setState(3583);
               this.match(141);
               this.setState(3584);
               _localctx.right = this.valueExpression(0);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ErrorCapturingNotContext errorCapturingNot() throws RecognitionException {
      ErrorCapturingNotContext _localctx = new ErrorCapturingNotContext(this._ctx, this.getState());
      this.enterRule(_localctx, 334, 167);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3587);
         int _la = this._input.LA(1);
         if (_la != 8 && _la != 225) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ValueExpressionContext valueExpression() throws RecognitionException {
      return this.valueExpression(0);
   }

   private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
      ParserRuleContext _parentctx = this._ctx;
      int _parentState = this.getState();
      ValueExpressionContext _localctx = new ValueExpressionContext(this._ctx, _parentState);
      int _startState = 336;
      this.enterRecursionRule(_localctx, 336, 168, _p);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3593);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 457, this._ctx)) {
            case 1:
               _localctx = new ValueExpressionDefaultContext(_localctx);
               this._ctx = _localctx;
               this.setState(3590);
               this.primaryExpression(0);
               break;
            case 2:
               _localctx = new ArithmeticUnaryContext(_localctx);
               this._ctx = _localctx;
               this.setState(3591);
               ((ArithmeticUnaryContext)_localctx).operator = this._input.LT(1);
               int _la = this._input.LA(1);
               if ((_la - 399 & -64) == 0 && (1L << _la - 399 & 35L) != 0L) {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               } else {
                  ((ArithmeticUnaryContext)_localctx).operator = this._errHandler.recoverInline(this);
               }

               this.setState(3592);
               this.valueExpression(8);
         }

         this._ctx.stop = this._input.LT(-1);
         this.setState(3620);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 459, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 459, this._ctx)) {
            if (_alt == 1) {
               if (this._parseListeners != null) {
                  this.triggerExitRuleEvent();
               }

               ValueExpressionContext _prevctx = _localctx;
               this.setState(3618);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 458, this._ctx)) {
                  case 1:
                     _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                     ((ArithmeticBinaryContext)_localctx).left = (ValueExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 168);
                     this.setState(3595);
                     if (!this.precpred(this._ctx, 7)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 7)");
                     }

                     this.setState(3596);
                     ((ArithmeticBinaryContext)_localctx).operator = this._input.LT(1);
                     int _la = this._input.LA(1);
                     if (_la == 107 || (_la - 401 & -64) == 0 && (1L << _la - 401 & 7L) != 0L) {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     } else {
                        ((ArithmeticBinaryContext)_localctx).operator = this._errHandler.recoverInline(this);
                     }

                     this.setState(3597);
                     ((ArithmeticBinaryContext)_localctx).right = this.valueExpression(8);
                     break;
                  case 2:
                     _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                     ((ArithmeticBinaryContext)_localctx).left = (ValueExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 168);
                     this.setState(3598);
                     if (!this.precpred(this._ctx, 6)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 6)");
                     }

                     this.setState(3599);
                     ((ArithmeticBinaryContext)_localctx).operator = this._input.LT(1);
                     int _la = this._input.LA(1);
                     if ((_la - 399 & -64) == 0 && (1L << _la - 399 & 259L) != 0L) {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     } else {
                        ((ArithmeticBinaryContext)_localctx).operator = this._errHandler.recoverInline(this);
                     }

                     this.setState(3600);
                     ((ArithmeticBinaryContext)_localctx).right = this.valueExpression(7);
                     break;
                  case 3:
                     _localctx = new ShiftExpressionContext(new ValueExpressionContext(_parentctx, _parentState));
                     ((ShiftExpressionContext)_localctx).left = (ValueExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 168);
                     this.setState(3601);
                     if (!this.precpred(this._ctx, 5)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 5)");
                     }

                     this.setState(3602);
                     this.shiftOperator();
                     this.setState(3603);
                     ((ShiftExpressionContext)_localctx).right = this.valueExpression(6);
                     break;
                  case 4:
                     _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                     ((ArithmeticBinaryContext)_localctx).left = (ValueExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 168);
                     this.setState(3605);
                     if (!this.precpred(this._ctx, 4)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 4)");
                     }

                     this.setState(3606);
                     ((ArithmeticBinaryContext)_localctx).operator = this.match(405);
                     this.setState(3607);
                     ((ArithmeticBinaryContext)_localctx).right = this.valueExpression(5);
                     break;
                  case 5:
                     _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                     ((ArithmeticBinaryContext)_localctx).left = (ValueExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 168);
                     this.setState(3608);
                     if (!this.precpred(this._ctx, 3)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                     }

                     this.setState(3609);
                     ((ArithmeticBinaryContext)_localctx).operator = this.match(409);
                     this.setState(3610);
                     ((ArithmeticBinaryContext)_localctx).right = this.valueExpression(4);
                     break;
                  case 6:
                     _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                     ((ArithmeticBinaryContext)_localctx).left = (ValueExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 168);
                     this.setState(3611);
                     if (!this.precpred(this._ctx, 2)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                     }

                     this.setState(3612);
                     ((ArithmeticBinaryContext)_localctx).operator = this.match(406);
                     this.setState(3613);
                     ((ArithmeticBinaryContext)_localctx).right = this.valueExpression(3);
                     break;
                  case 7:
                     _localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
                     ((ComparisonContext)_localctx).left = (ValueExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 168);
                     this.setState(3614);
                     if (!this.precpred(this._ctx, 1)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                     }

                     this.setState(3615);
                     this.comparisonOperator();
                     this.setState(3616);
                     ((ComparisonContext)_localctx).right = this.valueExpression(2);
               }
            }

            this.setState(3622);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.unrollRecursionContexts(_parentctx);
      }

      return _localctx;
   }

   public final ShiftOperatorContext shiftOperator() throws RecognitionException {
      ShiftOperatorContext _localctx = new ShiftOperatorContext(this._ctx, this.getState());
      this.enterRule(_localctx, 338, 169);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3623);
         int _la = this._input.LA(1);
         if ((_la - 396 & -64) == 0 && (1L << _la - 396 & 7L) != 0L) {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         } else {
            this._errHandler.recoverInline(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DatetimeUnitContext datetimeUnit() throws RecognitionException {
      DatetimeUnitContext _localctx = new DatetimeUnitContext(this._ctx, this.getState());
      this.enterRule(_localctx, 340, 170);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3625);
         int _la = this._input.LA(1);
         if (_la != 79 && _la != 81 && ((_la - 153 & -64) != 0 || (1L << _la - 153 & 2684145377912815617L) == 0L) && _la != 256 && _la != 287 && _la != 377 && _la != 385) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
      return this.primaryExpression(0);
   }

   private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
      ParserRuleContext _parentctx = this._ctx;
      int _parentState = this.getState();
      PrimaryExpressionContext _localctx = new PrimaryExpressionContext(this._ctx, _parentState);
      int _startState = 342;
      this.enterRecursionRule(_localctx, 342, 171, _p);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3870);
         this._errHandler.sync(this);
         label719:
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 487, this._ctx)) {
            case 1:
               _localctx = new CurrentLikeContext(_localctx);
               this._ctx = _localctx;
               this.setState(3628);
               ((CurrentLikeContext)_localctx).name = this._input.LT(1);
               int _la = this._input.LA(1);
               if (((_la - 75 & -64) != 0 || (1L << _la - 75 & 13L) == 0L) && _la != 297 && _la != 365) {
                  ((CurrentLikeContext)_localctx).name = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
               break;
            case 2:
               _localctx = new TimestampaddContext(_localctx);
               this._ctx = _localctx;
               this.setState(3629);
               ((TimestampaddContext)_localctx).name = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 86 && _la != 87 && _la != 338) {
                  ((TimestampaddContext)_localctx).name = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3630);
               this.match(2);
               this.setState(3633);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 460, this._ctx)) {
                  case 1:
                     this.setState(3631);
                     ((TimestampaddContext)_localctx).unit = this.datetimeUnit();
                     break;
                  case 2:
                     this.setState(3632);
                     ((TimestampaddContext)_localctx).invalidUnit = this.stringLit();
               }

               this.setState(3635);
               this.match(4);
               this.setState(3636);
               ((TimestampaddContext)_localctx).unitsAmount = this.valueExpression(0);
               this.setState(3637);
               this.match(4);
               this.setState(3638);
               ((TimestampaddContext)_localctx).timestamp = this.valueExpression(0);
               this.setState(3639);
               this.match(3);
               break;
            case 3:
               _localctx = new TimestampdiffContext(_localctx);
               this._ctx = _localctx;
               this.setState(3641);
               ((TimestampdiffContext)_localctx).name = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 88 && _la != 89 && _la != 334 && _la != 339) {
                  ((TimestampdiffContext)_localctx).name = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3642);
               this.match(2);
               this.setState(3645);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 461, this._ctx)) {
                  case 1:
                     this.setState(3643);
                     ((TimestampdiffContext)_localctx).unit = this.datetimeUnit();
                     break;
                  case 2:
                     this.setState(3644);
                     ((TimestampdiffContext)_localctx).invalidUnit = this.stringLit();
               }

               this.setState(3647);
               this.match(4);
               this.setState(3648);
               ((TimestampdiffContext)_localctx).startTimestamp = this.valueExpression(0);
               this.setState(3649);
               this.match(4);
               this.setState(3650);
               ((TimestampdiffContext)_localctx).endTimestamp = this.valueExpression(0);
               this.setState(3651);
               this.match(3);
               break;
            case 4:
               _localctx = new SearchedCaseContext(_localctx);
               this._ctx = _localctx;
               this.setState(3653);
               this.match(42);
               this.setState(3655);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);

               do {
                  this.setState(3654);
                  this.whenClause();
                  this.setState(3657);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 379);

               this.setState(3661);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 111) {
                  this.setState(3659);
                  this.match(111);
                  this.setState(3660);
                  ((SearchedCaseContext)_localctx).elseExpression = this.expression();
               }

               this.setState(3663);
               this.match(113);
               break;
            case 5:
               _localctx = new SimpleCaseContext(_localctx);
               this._ctx = _localctx;
               this.setState(3665);
               this.match(42);
               this.setState(3666);
               ((SimpleCaseContext)_localctx).value = this.expression();
               this.setState(3668);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);

               do {
                  this.setState(3667);
                  this.whenClause();
                  this.setState(3670);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 379);

               this.setState(3674);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 111) {
                  this.setState(3672);
                  this.match(111);
                  this.setState(3673);
                  ((SimpleCaseContext)_localctx).elseExpression = this.expression();
               }

               this.setState(3676);
               this.match(113);
               break;
            case 6:
               _localctx = new CastContext(_localctx);
               this._ctx = _localctx;
               this.setState(3678);
               ((CastContext)_localctx).name = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 43 && _la != 351) {
                  ((CastContext)_localctx).name = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3679);
               this.match(2);
               this.setState(3680);
               this.expression();
               this.setState(3681);
               this.match(22);
               this.setState(3682);
               this.dataType();
               this.setState(3683);
               this.match(3);
               break;
            case 7:
               _localctx = new StructContext(_localctx);
               this._ctx = _localctx;
               this.setState(3685);
               this.match(319);
               this.setState(3686);
               this.match(2);
               this.setState(3695);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 467, this._ctx)) {
                  case 1:
                     this.setState(3687);
                     ((StructContext)_localctx).namedExpression = this.namedExpression();
                     ((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
                     this.setState(3692);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                        this.setState(3688);
                        this.match(4);
                        this.setState(3689);
                        ((StructContext)_localctx).namedExpression = this.namedExpression();
                        ((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
                        this.setState(3694);
                        this._errHandler.sync(this);
                     }
                  default:
                     this.setState(3697);
                     this.match(3);
                     break label719;
               }
            case 8:
               _localctx = new FirstContext(_localctx);
               this._ctx = _localctx;
               this.setState(3698);
               this.match(133);
               this.setState(3699);
               this.match(2);
               this.setState(3700);
               this.expression();
               this.setState(3703);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 158) {
                  this.setState(3701);
                  this.match(158);
                  this.setState(3702);
                  this.match(227);
               }

               this.setState(3705);
               this.match(3);
               break;
            case 9:
               _localctx = new Any_valueContext(_localctx);
               this._ctx = _localctx;
               this.setState(3707);
               this.match(19);
               this.setState(3708);
               this.match(2);
               this.setState(3709);
               this.expression();
               this.setState(3712);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 158) {
                  this.setState(3710);
                  this.match(158);
                  this.setState(3711);
                  this.match(227);
               }

               this.setState(3714);
               this.match(3);
               break;
            case 10:
               _localctx = new LastContext(_localctx);
               this._ctx = _localctx;
               this.setState(3716);
               this.match(184);
               this.setState(3717);
               this.match(2);
               this.setState(3718);
               this.expression();
               this.setState(3721);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 158) {
                  this.setState(3719);
                  this.match(158);
                  this.setState(3720);
                  this.match(227);
               }

               this.setState(3723);
               this.match(3);
               break;
            case 11:
               _localctx = new PositionContext(_localctx);
               this._ctx = _localctx;
               this.setState(3725);
               this.match(250);
               this.setState(3726);
               this.match(2);
               this.setState(3727);
               ((PositionContext)_localctx).substr = this.valueExpression(0);
               this.setState(3728);
               this.match(161);
               this.setState(3729);
               ((PositionContext)_localctx).str = this.valueExpression(0);
               this.setState(3730);
               this.match(3);
               break;
            case 12:
               _localctx = new ConstantDefaultContext(_localctx);
               this._ctx = _localctx;
               this.setState(3732);
               this.constant();
               break;
            case 13:
               _localctx = new StarContext(_localctx);
               this._ctx = _localctx;
               this.setState(3733);
               this.match(401);
               this.setState(3735);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 471, this._ctx)) {
                  case 1:
                     this.setState(3734);
                     this.exceptClause();
                  default:
                     break label719;
               }
            case 14:
               _localctx = new StarContext(_localctx);
               this._ctx = _localctx;
               this.setState(3737);
               this.qualifiedName();
               this.setState(3738);
               this.match(5);
               this.setState(3739);
               this.match(401);
               this.setState(3741);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 472, this._ctx)) {
                  case 1:
                     this.setState(3740);
                     this.exceptClause();
                  default:
                     break label719;
               }
            case 15:
               _localctx = new RowConstructorContext(_localctx);
               this._ctx = _localctx;
               this.setState(3743);
               this.match(2);
               this.setState(3744);
               this.namedExpression();
               this.setState(3747);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);

               do {
                  this.setState(3745);
                  this.match(4);
                  this.setState(3746);
                  this.namedExpression();
                  this.setState(3749);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 4);

               this.setState(3751);
               this.match(3);
               break;
            case 16:
               _localctx = new SubqueryExpressionContext(_localctx);
               this._ctx = _localctx;
               this.setState(3753);
               this.match(2);
               this.setState(3754);
               this.query();
               this.setState(3755);
               this.match(3);
               break;
            case 17:
               _localctx = new FunctionCallContext(_localctx);
               this._ctx = _localctx;
               this.setState(3757);
               this.functionName();
               this.setState(3758);
               this.match(2);
               this.setState(3770);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 476, this._ctx)) {
                  case 1:
                     this.setState(3760);
                     this._errHandler.sync(this);
                     int _la;
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 474, this._ctx)) {
                        case 1:
                           this.setState(3759);
                           this.setQuantifier();
                        default:
                           this.setState(3762);
                           ((FunctionCallContext)_localctx).functionArgument = this.functionArgument();
                           ((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).functionArgument);
                           this.setState(3767);
                           this._errHandler.sync(this);
                           _la = this._input.LA(1);
                     }

                     while(_la == 4) {
                        this.setState(3763);
                        this.match(4);
                        this.setState(3764);
                        ((FunctionCallContext)_localctx).functionArgument = this.functionArgument();
                        ((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).functionArgument);
                        this.setState(3769);
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                     }
                  default:
                     this.setState(3772);
                     this.match(3);
                     this.setState(3788);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 478, this._ctx)) {
                        case 1:
                           this.setState(3773);
                           this.match(384);
                           this.setState(3774);
                           this.match(148);
                           this.setState(3775);
                           this.match(2);
                           this.setState(3776);
                           this.match(236);
                           this.setState(3777);
                           this.match(36);
                           this.setState(3778);
                           this.sortItem();
                           this.setState(3783);
                           this._errHandler.sync(this);

                           for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                              this.setState(3779);
                              this.match(4);
                              this.setState(3780);
                              this.sortItem();
                              this.setState(3785);
                              this._errHandler.sync(this);
                           }

                           this.setState(3786);
                           this.match(3);
                        default:
                           this.setState(3796);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 479, this._ctx)) {
                              case 1:
                                 this.setState(3790);
                                 this.match(131);
                                 this.setState(3791);
                                 this.match(2);
                                 this.setState(3792);
                                 this.match(380);
                                 this.setState(3793);
                                 ((FunctionCallContext)_localctx).where = this.booleanExpression(0);
                                 this.setState(3794);
                                 this.match(3);
                           }

                           this.setState(3800);
                           this._errHandler.sync(this);
                           switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 480, this._ctx)) {
                              case 1:
                                 this.setState(3798);
                                 ((FunctionCallContext)_localctx).nullsOption = this._input.LT(1);
                                 int _la = this._input.LA(1);
                                 if (_la != 158 && _la != 274) {
                                    ((FunctionCallContext)_localctx).nullsOption = this._errHandler.recoverInline(this);
                                 } else {
                                    if (this._input.LA(1) == -1) {
                                       this.matchedEOF = true;
                                    }

                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                 }

                                 this.setState(3799);
                                 this.match(227);
                              default:
                                 this.setState(3804);
                                 this._errHandler.sync(this);
                                 switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 481, this._ctx)) {
                                    case 1:
                                       this.setState(3802);
                                       this.match(240);
                                       this.setState(3803);
                                       this.windowSpec();
                                    default:
                                       break label719;
                                 }
                           }
                     }
               }
            case 18:
               _localctx = new LambdaContext(_localctx);
               this._ctx = _localctx;
               this.setState(3806);
               this.identifier();
               this.setState(3807);
               this.match(412);
               this.setState(3808);
               this.expression();
               break;
            case 19:
               _localctx = new LambdaContext(_localctx);
               this._ctx = _localctx;
               this.setState(3810);
               this.match(2);
               this.setState(3811);
               this.identifier();
               this.setState(3814);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);

               do {
                  this.setState(3812);
                  this.match(4);
                  this.setState(3813);
                  this.identifier();
                  this.setState(3816);
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
               } while(_la == 4);

               this.setState(3818);
               this.match(3);
               this.setState(3819);
               this.match(412);
               this.setState(3820);
               this.expression();
               break;
            case 20:
               _localctx = new ColumnReferenceContext(_localctx);
               this._ctx = _localctx;
               this.setState(3822);
               this.identifier();
               break;
            case 21:
               _localctx = new ParenthesizedExpressionContext(_localctx);
               this._ctx = _localctx;
               this.setState(3823);
               this.match(2);
               this.setState(3824);
               this.expression();
               this.setState(3825);
               this.match(3);
               break;
            case 22:
               _localctx = new ExtractContext(_localctx);
               this._ctx = _localctx;
               this.setState(3827);
               this.match(127);
               this.setState(3828);
               this.match(2);
               this.setState(3829);
               ((ExtractContext)_localctx).field = this.identifier();
               this.setState(3830);
               this.match(141);
               this.setState(3831);
               ((ExtractContext)_localctx).source = this.valueExpression(0);
               this.setState(3832);
               this.match(3);
               break;
            case 23:
               _localctx = new SubstringContext(_localctx);
               this._ctx = _localctx;
               this.setState(3834);
               int _la = this._input.LA(1);
               if (_la != 320 && _la != 321) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3835);
               this.match(2);
               this.setState(3836);
               ((SubstringContext)_localctx).str = this.valueExpression(0);
               this.setState(3837);
               _la = this._input.LA(1);
               if (_la != 4 && _la != 141) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(3838);
               ((SubstringContext)_localctx).pos = this.valueExpression(0);
               this.setState(3841);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 4 || _la == 136) {
                  this.setState(3839);
                  _la = this._input.LA(1);
                  if (_la != 4 && _la != 136) {
                     this._errHandler.recoverInline(this);
                  } else {
                     if (this._input.LA(1) == -1) {
                        this.matchedEOF = true;
                     }

                     this._errHandler.reportMatch(this);
                     this.consume();
                  }

                  this.setState(3840);
                  ((SubstringContext)_localctx).len = this.valueExpression(0);
               }

               this.setState(3843);
               this.match(3);
               break;
            case 24:
               _localctx = new TrimContext(_localctx);
               this._ctx = _localctx;
               this.setState(3845);
               this.match(348);
               this.setState(3846);
               this.match(2);
               this.setState(3848);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 484, this._ctx)) {
                  case 1:
                     this.setState(3847);
                     ((TrimContext)_localctx).trimOption = this._input.LT(1);
                     int _la = this._input.LA(1);
                     if (_la != 33 && _la != 187 && _la != 344) {
                        ((TrimContext)_localctx).trimOption = this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }
                  default:
                     this.setState(3851);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 485, this._ctx)) {
                        case 1:
                           this.setState(3850);
                           ((TrimContext)_localctx).trimStr = this.valueExpression(0);
                        default:
                           this.setState(3853);
                           this.match(141);
                           this.setState(3854);
                           ((TrimContext)_localctx).srcStr = this.valueExpression(0);
                           this.setState(3855);
                           this.match(3);
                           break label719;
                     }
               }
            case 25:
               _localctx = new OverlayContext(_localctx);
               this._ctx = _localctx;
               this.setState(3857);
               this.match(242);
               this.setState(3858);
               this.match(2);
               this.setState(3859);
               ((OverlayContext)_localctx).input = this.valueExpression(0);
               this.setState(3860);
               this.match(249);
               this.setState(3861);
               ((OverlayContext)_localctx).replace = this.valueExpression(0);
               this.setState(3862);
               this.match(141);
               this.setState(3863);
               ((OverlayContext)_localctx).position = this.valueExpression(0);
               this.setState(3866);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 136) {
                  this.setState(3864);
                  this.match(136);
                  this.setState(3865);
                  ((OverlayContext)_localctx).length = this.valueExpression(0);
               }

               this.setState(3868);
               this.match(3);
         }

         this._ctx.stop = this._input.LT(-1);
         this.setState(3887);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 489, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 489, this._ctx)) {
            if (_alt == 1) {
               if (this._parseListeners != null) {
                  this.triggerExitRuleEvent();
               }

               PrimaryExpressionContext _prevctx = _localctx;
               this.setState(3885);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 488, this._ctx)) {
                  case 1:
                     _localctx = new CollateContext(new PrimaryExpressionContext(_parentctx, _parentState));
                     this.pushNewRecursionContext(_localctx, _startState, 171);
                     this.setState(3872);
                     if (!this.precpred(this._ctx, 23)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 23)");
                     }

                     this.setState(3873);
                     this.collateClause();
                     break;
                  case 2:
                     _localctx = new CastByColonContext(new PrimaryExpressionContext(_parentctx, _parentState));
                     this.pushNewRecursionContext(_localctx, _startState, 171);
                     this.setState(3874);
                     if (!this.precpred(this._ctx, 22)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 22)");
                     }

                     this.setState(3875);
                     this.match(411);
                     this.setState(3876);
                     this.dataType();
                     break;
                  case 3:
                     _localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
                     ((SubscriptContext)_localctx).value = (PrimaryExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 171);
                     this.setState(3877);
                     if (!this.precpred(this._ctx, 8)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 8)");
                     }

                     this.setState(3878);
                     this.match(6);
                     this.setState(3879);
                     ((SubscriptContext)_localctx).index = this.valueExpression(0);
                     this.setState(3880);
                     this.match(7);
                     break;
                  case 4:
                     _localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
                     ((DereferenceContext)_localctx).base = (PrimaryExpressionContext)_prevctx;
                     this.pushNewRecursionContext(_localctx, _startState, 171);
                     this.setState(3882);
                     if (!this.precpred(this._ctx, 6)) {
                        throw new FailedPredicateException(this, "precpred(_ctx, 6)");
                     }

                     this.setState(3883);
                     this.match(5);
                     this.setState(3884);
                     ((DereferenceContext)_localctx).fieldName = this.identifier();
               }
            }

            this.setState(3889);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.unrollRecursionContexts(_parentctx);
      }

      return _localctx;
   }

   public final LiteralTypeContext literalType() throws RecognitionException {
      LiteralTypeContext _localctx = new LiteralTypeContext(this._ctx, this.getState());
      this.enterRule(_localctx, 344, 172);

      try {
         this.setState(3897);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 490, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3890);
               this.match(83);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3891);
               this.match(335);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(3892);
               this.match(336);
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(3893);
               this.match(337);
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(3894);
               this.match(172);
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(3895);
               this.match(152);
               break;
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(3896);
               _localctx.unsupportedType = this.identifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ConstantContext constant() throws RecognitionException {
      ConstantContext _localctx = new ConstantContext(this._ctx, this.getState());
      this.enterRule(_localctx, 346, 173);

      try {
         this.setState(3914);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 492, this._ctx)) {
            case 1:
               _localctx = new NullLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(3899);
               this.match(226);
               break;
            case 2:
               _localctx = new PosParameterLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(3900);
               this.match(416);
               break;
            case 3:
               _localctx = new NamedParameterLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(3901);
               this.match(410);
               this.setState(3902);
               this.identifier();
               break;
            case 4:
               _localctx = new IntervalLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(3903);
               this.interval();
               break;
            case 5:
               _localctx = new TypeConstructorContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(3904);
               this.literalType();
               this.setState(3905);
               this.stringLit();
               break;
            case 6:
               _localctx = new NumericLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 6);
               this.setState(3907);
               this.number();
               break;
            case 7:
               _localctx = new BooleanLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 7);
               this.setState(3908);
               this.booleanValue();
               break;
            case 8:
               _localctx = new StringLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 8);
               this.setState(3910);
               this._errHandler.sync(this);
               int _alt = 1;

               while(true) {
                  switch (_alt) {
                     case 1:
                        this.setState(3909);
                        this.stringLit();
                        this.setState(3912);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 491, this._ctx);
                        if (_alt == 2 || _alt == 0) {
                           return _localctx;
                        }
                        break;
                     default:
                        throw new NoViableAltException(this);
                  }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
      ComparisonOperatorContext _localctx = new ComparisonOperatorContext(this._ctx, this.getState());
      this.enterRule(_localctx, 348, 174);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3916);
         int _la = this._input.LA(1);
         if ((_la - 388 & -64) == 0 && (1L << _la - 388 & 255L) != 0L) {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         } else {
            this._errHandler.recoverInline(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ArithmeticOperatorContext arithmeticOperator() throws RecognitionException {
      ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(this._ctx, this.getState());
      this.enterRule(_localctx, 350, 175);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3918);
         int _la = this._input.LA(1);
         if (_la == 107 || (_la - 399 & -64) == 0 && (1L << _la - 399 & 1535L) != 0L) {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         } else {
            this._errHandler.recoverInline(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final PredicateOperatorContext predicateOperator() throws RecognitionException {
      PredicateOperatorContext _localctx = new PredicateOperatorContext(this._ctx, this.getState());
      this.enterRule(_localctx, 352, 176);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3920);
         int _la = this._input.LA(1);
         if (_la != 16 && _la != 161 && _la != 225 && _la != 235) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final BooleanValueContext booleanValue() throws RecognitionException {
      BooleanValueContext _localctx = new BooleanValueContext(this._ctx, this.getState());
      this.enterRule(_localctx, 354, 177);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3922);
         int _la = this._input.LA(1);
         if (_la != 128 && _la != 349) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IntervalContext interval() throws RecognitionException {
      IntervalContext _localctx = new IntervalContext(this._ctx, this.getState());
      this.enterRule(_localctx, 356, 178);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3924);
         this.match(172);
         this.setState(3927);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 493, this._ctx)) {
            case 1:
               this.setState(3925);
               this.errorCapturingMultiUnitsInterval();
               break;
            case 2:
               this.setState(3926);
               this.errorCapturingUnitToUnitInterval();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() throws RecognitionException {
      ErrorCapturingMultiUnitsIntervalContext _localctx = new ErrorCapturingMultiUnitsIntervalContext(this._ctx, this.getState());
      this.enterRule(_localctx, 358, 179);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3929);
         _localctx.body = this.multiUnitsInterval();
         this.setState(3931);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 494, this._ctx)) {
            case 1:
               this.setState(3930);
               this.unitToUnitInterval();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final MultiUnitsIntervalContext multiUnitsInterval() throws RecognitionException {
      MultiUnitsIntervalContext _localctx = new MultiUnitsIntervalContext(this._ctx, this.getState());
      this.enterRule(_localctx, 360, 180);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3936);
         this._errHandler.sync(this);
         int _alt = 1;

         while(true) {
            switch (_alt) {
               case 1:
                  this.setState(3933);
                  this.intervalValue();
                  this.setState(3934);
                  _localctx.unitInMultiUnits = this.unitInMultiUnits();
                  _localctx.unit.add(_localctx.unitInMultiUnits);
                  this.setState(3938);
                  this._errHandler.sync(this);
                  _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 495, this._ctx);
                  if (_alt == 2 || _alt == 0) {
                     return _localctx;
                  }
                  break;
               default:
                  throw new NoViableAltException(this);
            }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() throws RecognitionException {
      ErrorCapturingUnitToUnitIntervalContext _localctx = new ErrorCapturingUnitToUnitIntervalContext(this._ctx, this.getState());
      this.enterRule(_localctx, 362, 181);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3940);
         _localctx.body = this.unitToUnitInterval();
         this.setState(3943);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 496, this._ctx)) {
            case 1:
               this.setState(3941);
               _localctx.error1 = this.multiUnitsInterval();
               break;
            case 2:
               this.setState(3942);
               _localctx.error2 = this.unitToUnitInterval();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnitToUnitIntervalContext unitToUnitInterval() throws RecognitionException {
      UnitToUnitIntervalContext _localctx = new UnitToUnitIntervalContext(this._ctx, this.getState());
      this.enterRule(_localctx, 364, 182);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3945);
         _localctx.value = this.intervalValue();
         this.setState(3946);
         _localctx.from = this.unitInUnitToUnit();
         this.setState(3947);
         this.match(341);
         this.setState(3948);
         _localctx.to = this.unitInUnitToUnit();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IntervalValueContext intervalValue() throws RecognitionException {
      IntervalValueContext _localctx = new IntervalValueContext(this._ctx, this.getState());
      this.enterRule(_localctx, 366, 183);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3951);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 497, this._ctx)) {
            case 1:
               this.setState(3950);
               int _la = this._input.LA(1);
               if (_la != 399 && _la != 400) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
         }

         this.setState(3956);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 498, this._ctx)) {
            case 1:
               this.setState(3953);
               this.match(422);
               break;
            case 2:
               this.setState(3954);
               this.match(424);
               break;
            case 3:
               this.setState(3955);
               this.stringLit();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnitInMultiUnitsContext unitInMultiUnits() throws RecognitionException {
      UnitInMultiUnitsContext _localctx = new UnitInMultiUnitsContext(this._ctx, this.getState());
      this.enterRule(_localctx, 368, 184);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3958);
         int _la = this._input.LA(1);
         if (_la == 79 || _la == 80 || (_la - 153 & -64) == 0 && (1L << _la - 153 & 8052436133738446851L) != 0L || _la == 220 || _la == 221 || _la == 287 || _la == 288 || (_la - 377 & -64) == 0 && (1L << _la - 377 & 771L) != 0L) {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         } else {
            this._errHandler.recoverInline(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final UnitInUnitToUnitContext unitInUnitToUnit() throws RecognitionException {
      UnitInUnitToUnitContext _localctx = new UnitInUnitToUnitContext(this._ctx, this.getState());
      this.enterRule(_localctx, 370, 185);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3960);
         int _la = this._input.LA(1);
         if (_la != 79 && ((_la - 153 & -64) != 0 || (1L << _la - 153 & 2594073385365405697L) == 0L) && _la != 287 && _la != 385) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ColPositionContext colPosition() throws RecognitionException {
      ColPositionContext _localctx = new ColPositionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 372, 186);

      try {
         this.setState(3965);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 10:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3963);
               _localctx.position = this.match(10);
               this.setState(3964);
               _localctx.afterCol = this.errorCapturingIdentifier();
               break;
            case 133:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3962);
               _localctx.position = this.match(133);
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CollationSpecContext collationSpec() throws RecognitionException {
      CollationSpecContext _localctx = new CollationSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 374, 187);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3967);
         this.match(94);
         this.setState(3968);
         this.match(55);
         this.setState(3969);
         _localctx.collationName = this.identifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CollateClauseContext collateClause() throws RecognitionException {
      CollateClauseContext _localctx = new CollateClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 376, 188);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(3971);
         this.match(54);
         this.setState(3972);
         _localctx.collationName = this.multipartIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final TypeContext type() throws RecognitionException {
      TypeContext _localctx = new TypeContext(this._ctx, this.getState());
      this.enterRule(_localctx, 378, 189);

      try {
         this.setState(4008);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 501, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(3974);
               this.match(32);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(3975);
               this.match(340);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(3976);
               this.match(37);
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(3977);
               this.match(305);
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(3978);
               this.match(301);
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(3979);
               this.match(173);
               break;
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(3980);
               this.match(174);
               break;
            case 8:
               this.enterOuterAlt(_localctx, 8);
               this.setState(3981);
               this.match(29);
               break;
            case 9:
               this.enterOuterAlt(_localctx, 9);
               this.setState(3982);
               this.match(201);
               break;
            case 10:
               this.enterOuterAlt(_localctx, 10);
               this.setState(3983);
               this.match(134);
               break;
            case 11:
               this.enterOuterAlt(_localctx, 11);
               this.setState(3984);
               this.match(260);
               break;
            case 12:
               this.enterOuterAlt(_localctx, 12);
               this.setState(3985);
               this.match(109);
               break;
            case 13:
               this.enterOuterAlt(_localctx, 13);
               this.setState(3986);
               this.match(83);
               break;
            case 14:
               this.enterOuterAlt(_localctx, 14);
               this.setState(3987);
               this.match(335);
               break;
            case 15:
               this.enterOuterAlt(_localctx, 15);
               this.setState(3988);
               this.match(337);
               break;
            case 16:
               this.enterOuterAlt(_localctx, 16);
               this.setState(3989);
               this.match(336);
               break;
            case 17:
               this.enterOuterAlt(_localctx, 17);
               this.setState(3990);
               this.match(318);
               this.setState(3992);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 500, this._ctx)) {
                  case 1:
                     this.setState(3991);
                     this.collateClause();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 18:
               this.enterOuterAlt(_localctx, 18);
               this.setState(3994);
               this.match(48);
               break;
            case 19:
               this.enterOuterAlt(_localctx, 19);
               this.setState(3995);
               this.match(47);
               break;
            case 20:
               this.enterOuterAlt(_localctx, 20);
               this.setState(3996);
               this.match(369);
               break;
            case 21:
               this.enterOuterAlt(_localctx, 21);
               this.setState(3997);
               this.match(30);
               break;
            case 22:
               this.enterOuterAlt(_localctx, 22);
               this.setState(3998);
               this.match(92);
               break;
            case 23:
               this.enterOuterAlt(_localctx, 23);
               this.setState(3999);
               this.match(91);
               break;
            case 24:
               this.enterOuterAlt(_localctx, 24);
               this.setState(4000);
               this.match(228);
               break;
            case 25:
               this.enterOuterAlt(_localctx, 25);
               this.setState(4001);
               this.match(376);
               break;
            case 26:
               this.enterOuterAlt(_localctx, 26);
               this.setState(4002);
               this.match(172);
               break;
            case 27:
               this.enterOuterAlt(_localctx, 27);
               this.setState(4003);
               this.match(372);
               break;
            case 28:
               this.enterOuterAlt(_localctx, 28);
               this.setState(4004);
               this.match(21);
               break;
            case 29:
               this.enterOuterAlt(_localctx, 29);
               this.setState(4005);
               this.match(319);
               break;
            case 30:
               this.enterOuterAlt(_localctx, 30);
               this.setState(4006);
               this.match(204);
               break;
            case 31:
               this.enterOuterAlt(_localctx, 31);
               this.setState(4007);
               _localctx.unsupportedType = this.identifier();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DataTypeContext dataType() throws RecognitionException {
      DataTypeContext _localctx = new DataTypeContext(this._ctx, this.getState());
      this.enterRule(_localctx, 380, 190);

      try {
         this.setState(4056);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 508, this._ctx)) {
            case 1:
               _localctx = new ComplexDataTypeContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(4010);
               ((ComplexDataTypeContext)_localctx).complex = this.match(21);
               this.setState(4011);
               this.match(392);
               this.setState(4012);
               this.dataType();
               this.setState(4013);
               this.match(394);
               break;
            case 2:
               _localctx = new ComplexDataTypeContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(4015);
               ((ComplexDataTypeContext)_localctx).complex = this.match(204);
               this.setState(4016);
               this.match(392);
               this.setState(4017);
               this.dataType();
               this.setState(4018);
               this.match(4);
               this.setState(4019);
               this.dataType();
               this.setState(4020);
               this.match(394);
               break;
            case 3:
               _localctx = new ComplexDataTypeContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(4022);
               ((ComplexDataTypeContext)_localctx).complex = this.match(319);
               this.setState(4029);
               this._errHandler.sync(this);
               switch (this._input.LA(1)) {
                  case 390:
                     this.setState(4028);
                     this.match(390);
                     return _localctx;
                  case 392:
                     this.setState(4023);
                     this.match(392);
                     this.setState(4025);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 502, this._ctx)) {
                        case 1:
                           this.setState(4024);
                           this.complexColTypeList();
                        default:
                           this.setState(4027);
                           this.match(394);
                           return _localctx;
                     }
                  default:
                     throw new NoViableAltException(this);
               }
            case 4:
               _localctx = new YearMonthIntervalDataTypeContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(4031);
               this.match(172);
               this.setState(4032);
               ((YearMonthIntervalDataTypeContext)_localctx).from = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 214 && _la != 385) {
                  ((YearMonthIntervalDataTypeContext)_localctx).from = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(4035);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 504, this._ctx)) {
                  case 1:
                     this.setState(4033);
                     this.match(341);
                     this.setState(4034);
                     ((YearMonthIntervalDataTypeContext)_localctx).to = this.match(214);
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 5:
               _localctx = new DayTimeIntervalDataTypeContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(4037);
               this.match(172);
               this.setState(4038);
               ((DayTimeIntervalDataTypeContext)_localctx).from = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 79 && _la != 153 && _la != 211 && _la != 287) {
                  ((DayTimeIntervalDataTypeContext)_localctx).from = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(4041);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 505, this._ctx)) {
                  case 1:
                     this.setState(4039);
                     this.match(341);
                     this.setState(4040);
                     ((DayTimeIntervalDataTypeContext)_localctx).to = this._input.LT(1);
                     _la = this._input.LA(1);
                     if (_la != 153 && _la != 211 && _la != 287) {
                        ((DayTimeIntervalDataTypeContext)_localctx).to = this._errHandler.recoverInline(this);
                     } else {
                        if (this._input.LA(1) == -1) {
                           this.matchedEOF = true;
                        }

                        this._errHandler.reportMatch(this);
                        this.consume();
                     }

                     return _localctx;
                  default:
                     return _localctx;
               }
            case 6:
               _localctx = new PrimitiveDataTypeContext(_localctx);
               this.enterOuterAlt(_localctx, 6);
               this.setState(4043);
               this.type();
               this.setState(4054);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 507, this._ctx)) {
                  case 1:
                     this.setState(4044);
                     this.match(2);
                     this.setState(4045);
                     this.match(422);
                     this.setState(4050);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                        this.setState(4046);
                        this.match(4);
                        this.setState(4047);
                        this.match(422);
                        this.setState(4052);
                        this._errHandler.sync(this);
                     }

                     this.setState(4053);
                     this.match(3);
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() throws RecognitionException {
      QualifiedColTypeWithPositionListContext _localctx = new QualifiedColTypeWithPositionListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 382, 191);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4058);
         this.qualifiedColTypeWithPosition();
         this.setState(4063);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(4059);
            this.match(4);
            this.setState(4060);
            this.qualifiedColTypeWithPosition();
            this.setState(4065);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition() throws RecognitionException {
      QualifiedColTypeWithPositionContext _localctx = new QualifiedColTypeWithPositionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 384, 192);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4066);
         _localctx.name = this.multipartIdentifier();
         this.setState(4067);
         this.dataType();
         this.setState(4071);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); (_la & -64) == 0 && (1L << _la & 576460752303424768L) != 0L || _la == 94 || _la == 133 || _la == 225; _la = this._input.LA(1)) {
            this.setState(4068);
            this.colDefinitionDescriptorWithPosition();
            this.setState(4073);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition() throws RecognitionException {
      ColDefinitionDescriptorWithPositionContext _localctx = new ColDefinitionDescriptorWithPositionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 386, 193);

      try {
         this.setState(4080);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 8:
            case 225:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4074);
               this.errorCapturingNot();
               this.setState(4075);
               this.match(226);
               break;
            case 10:
            case 133:
               this.enterOuterAlt(_localctx, 4);
               this.setState(4079);
               this.colPosition();
               break;
            case 59:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4078);
               this.commentSpec();
               break;
            case 94:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4077);
               this.defaultExpression();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DefaultExpressionContext defaultExpression() throws RecognitionException {
      DefaultExpressionContext _localctx = new DefaultExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 388, 194);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4082);
         this.match(94);
         this.setState(4083);
         this.expression();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final VariableDefaultExpressionContext variableDefaultExpression() throws RecognitionException {
      VariableDefaultExpressionContext _localctx = new VariableDefaultExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 390, 195);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4085);
         int _la = this._input.LA(1);
         if (_la != 94 && _la != 388) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }

         this.setState(4086);
         this.expression();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ColTypeListContext colTypeList() throws RecognitionException {
      ColTypeListContext _localctx = new ColTypeListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 392, 196);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4088);
         this.colType();
         this.setState(4093);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 512, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 512, this._ctx)) {
            if (_alt == 1) {
               this.setState(4089);
               this.match(4);
               this.setState(4090);
               this.colType();
            }

            this.setState(4095);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ColTypeContext colType() throws RecognitionException {
      ColTypeContext _localctx = new ColTypeContext(this._ctx, this.getState());
      this.enterRule(_localctx, 394, 197);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4096);
         _localctx.colName = this.errorCapturingIdentifier();
         this.setState(4097);
         this.dataType();
         this.setState(4101);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 513, this._ctx)) {
            case 1:
               this.setState(4098);
               this.errorCapturingNot();
               this.setState(4099);
               this.match(226);
            default:
               this.setState(4104);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 514, this._ctx)) {
                  case 1:
                     this.setState(4103);
                     this.commentSpec();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ColDefinitionListContext colDefinitionList() throws RecognitionException {
      ColDefinitionListContext _localctx = new ColDefinitionListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 396, 198);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4106);
         this.colDefinition();
         this.setState(4111);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(4107);
            this.match(4);
            this.setState(4108);
            this.colDefinition();
            this.setState(4113);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ColDefinitionContext colDefinition() throws RecognitionException {
      ColDefinitionContext _localctx = new ColDefinitionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 398, 199);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4114);
         _localctx.colName = this.errorCapturingIdentifier();
         this.setState(4115);
         this.dataType();
         this.setState(4119);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 8 || _la == 59 || _la == 94 || _la == 145 || _la == 225; _la = this._input.LA(1)) {
            this.setState(4116);
            this.colDefinitionOption();
            this.setState(4121);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ColDefinitionOptionContext colDefinitionOption() throws RecognitionException {
      ColDefinitionOptionContext _localctx = new ColDefinitionOptionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 400, 200);

      try {
         this.setState(4128);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 8:
            case 225:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4122);
               this.errorCapturingNot();
               this.setState(4123);
               this.match(226);
               break;
            case 59:
               this.enterOuterAlt(_localctx, 4);
               this.setState(4127);
               this.commentSpec();
               break;
            case 94:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4125);
               this.defaultExpression();
               break;
            case 145:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4126);
               this.generationExpression();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final GenerationExpressionContext generationExpression() throws RecognitionException {
      GenerationExpressionContext _localctx = new GenerationExpressionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 402, 201);

      try {
         this.setState(4148);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 520, this._ctx)) {
            case 1:
               _localctx = new GeneratedColumnContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(4130);
               this.match(145);
               this.setState(4131);
               this.match(14);
               this.setState(4132);
               this.match(22);
               this.setState(4133);
               this.match(2);
               this.setState(4134);
               this.expression();
               this.setState(4135);
               this.match(3);
               break;
            case 2:
               _localctx = new IdentityColumnContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(4137);
               this.match(145);
               this.setState(4141);
               this._errHandler.sync(this);
               switch (this._input.LA(1)) {
                  case 14:
                     this.setState(4138);
                     this.match(14);
                     break;
                  case 36:
                     this.setState(4139);
                     this.match(36);
                     this.setState(4140);
                     this.match(94);
                     break;
                  default:
                     throw new NoViableAltException(this);
               }

               this.setState(4143);
               this.match(22);
               this.setState(4144);
               this.match(156);
               this.setState(4146);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 2) {
                  this.setState(4145);
                  this.identityColSpec();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IdentityColSpecContext identityColSpec() throws RecognitionException {
      IdentityColSpecContext _localctx = new IdentityColSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 404, 202);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4150);
         this.match(2);
         this.setState(4154);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 163 || _la == 314; _la = this._input.LA(1)) {
            this.setState(4151);
            this.sequenceGeneratorOption();
            this.setState(4156);
            this._errHandler.sync(this);
         }

         this.setState(4157);
         this.match(3);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SequenceGeneratorOptionContext sequenceGeneratorOption() throws RecognitionException {
      SequenceGeneratorOptionContext _localctx = new SequenceGeneratorOptionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 406, 203);

      try {
         this.setState(4165);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 163:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4162);
               this.match(163);
               this.setState(4163);
               this.match(36);
               this.setState(4164);
               _localctx.step = this.sequenceGeneratorStartOrStep();
               break;
            case 314:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4159);
               this.match(314);
               this.setState(4160);
               this.match(383);
               this.setState(4161);
               _localctx.start = this.sequenceGeneratorStartOrStep();
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SequenceGeneratorStartOrStepContext sequenceGeneratorStartOrStep() throws RecognitionException {
      SequenceGeneratorStartOrStepContext _localctx = new SequenceGeneratorStartOrStepContext(this._ctx, this.getState());
      this.enterRule(_localctx, 408, 204);

      try {
         this.setState(4175);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 525, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4168);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4167);
                  this.match(400);
               }

               this.setState(4170);
               this.match(422);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4172);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4171);
                  this.match(400);
               }

               this.setState(4174);
               this.match(419);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ComplexColTypeListContext complexColTypeList() throws RecognitionException {
      ComplexColTypeListContext _localctx = new ComplexColTypeListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 410, 205);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4177);
         this.complexColType();
         this.setState(4182);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(4178);
            this.match(4);
            this.setState(4179);
            this.complexColType();
            this.setState(4184);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ComplexColTypeContext complexColType() throws RecognitionException {
      ComplexColTypeContext _localctx = new ComplexColTypeContext(this._ctx, this.getState());
      this.enterRule(_localctx, 412, 206);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4185);
         this.errorCapturingIdentifier();
         this.setState(4187);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 527, this._ctx)) {
            case 1:
               this.setState(4186);
               this.match(410);
         }

         this.setState(4189);
         this.dataType();
         this.setState(4193);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 8 || _la == 225) {
            this.setState(4190);
            this.errorCapturingNot();
            this.setState(4191);
            this.match(226);
         }

         this.setState(4196);
         this._errHandler.sync(this);
         _la = this._input.LA(1);
         if (_la == 59) {
            this.setState(4195);
            this.commentSpec();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RoutineCharacteristicsContext routineCharacteristics() throws RecognitionException {
      RoutineCharacteristicsContext _localctx = new RoutineCharacteristicsContext(this._ctx, this.getState());
      this.enterRule(_localctx, 414, 207);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4207);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); (_la & -64) == 0 && (1L << _la & 576461851815051520L) != 0L || _la == 68 || _la == 101 || (_la - 183 & -64) == 0 && (1L << _la - 183 & 5498631880705L) != 0L || (_la - 259 & -64) == 0 && (1L << _la - 259 & 6755399441317889L) != 0L; _la = this._input.LA(1)) {
            this.setState(4205);
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
               case 8:
               case 101:
               case 225:
                  this.setState(4200);
                  this.deterministic();
                  break;
               case 40:
               case 277:
                  this.setState(4202);
                  this.nullCall();
                  break;
               case 59:
                  this.setState(4203);
                  this.commentSpec();
                  break;
               case 68:
               case 213:
               case 223:
               case 259:
                  this.setState(4201);
                  this.sqlDataAccess();
                  break;
               case 183:
                  this.setState(4198);
                  this.routineLanguage();
                  break;
               case 310:
                  this.setState(4199);
                  this.specificName();
                  break;
               case 311:
                  this.setState(4204);
                  this.rightsClause();
                  break;
               default:
                  throw new NoViableAltException(this);
            }

            this.setState(4209);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RoutineLanguageContext routineLanguage() throws RecognitionException {
      RoutineLanguageContext _localctx = new RoutineLanguageContext(this._ctx, this.getState());
      this.enterRule(_localctx, 416, 208);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4210);
         this.match(183);
         this.setState(4211);
         int _la = this._input.LA(1);
         if (_la != 311 && _la != 428) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SpecificNameContext specificName() throws RecognitionException {
      SpecificNameContext _localctx = new SpecificNameContext(this._ctx, this.getState());
      this.enterRule(_localctx, 418, 209);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4213);
         this.match(310);
         this.setState(4214);
         _localctx.specific = this.errorCapturingIdentifier();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final DeterministicContext deterministic() throws RecognitionException {
      DeterministicContext _localctx = new DeterministicContext(this._ctx, this.getState());
      this.enterRule(_localctx, 420, 210);

      try {
         this.setState(4220);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 8:
            case 225:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4217);
               this.errorCapturingNot();
               this.setState(4218);
               this.match(101);
               break;
            case 101:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4216);
               this.match(101);
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final SqlDataAccessContext sqlDataAccess() throws RecognitionException {
      SqlDataAccessContext _localctx = new SqlDataAccessContext(this._ctx, this.getState());
      this.enterRule(_localctx, 422, 211);

      try {
         this.setState(4232);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 68:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4224);
               _localctx.access = this.match(68);
               this.setState(4225);
               this.match(311);
               break;
            case 213:
               this.enterOuterAlt(_localctx, 4);
               this.setState(4229);
               _localctx.access = this.match(213);
               this.setState(4230);
               this.match(311);
               this.setState(4231);
               this.match(82);
               break;
            case 223:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4222);
               _localctx.access = this.match(223);
               this.setState(4223);
               this.match(311);
               break;
            case 259:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4226);
               _localctx.access = this.match(259);
               this.setState(4227);
               this.match(311);
               this.setState(4228);
               this.match(82);
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NullCallContext nullCall() throws RecognitionException {
      NullCallContext _localctx = new NullCallContext(this._ctx, this.getState());
      this.enterRule(_localctx, 424, 212);

      try {
         this.setState(4243);
         this._errHandler.sync(this);
         switch (this._input.LA(1)) {
            case 40:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4239);
               this.match(40);
               this.setState(4240);
               this.match(231);
               this.setState(4241);
               this.match(226);
               this.setState(4242);
               this.match(168);
               break;
            case 277:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4234);
               this.match(277);
               this.setState(4235);
               this.match(226);
               this.setState(4236);
               this.match(231);
               this.setState(4237);
               this.match(226);
               this.setState(4238);
               this.match(168);
               break;
            default:
               throw new NoViableAltException(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final RightsClauseContext rightsClause() throws RecognitionException {
      RightsClauseContext _localctx = new RightsClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 426, 213);

      try {
         this.setState(4251);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 535, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4245);
               this.match(311);
               this.setState(4246);
               this.match(291);
               this.setState(4247);
               this.match(176);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4248);
               this.match(311);
               this.setState(4249);
               this.match(291);
               this.setState(4250);
               this.match(96);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final WhenClauseContext whenClause() throws RecognitionException {
      WhenClauseContext _localctx = new WhenClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 428, 214);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4253);
         this.match(379);
         this.setState(4254);
         _localctx.condition = this.expression();
         this.setState(4255);
         this.match(332);
         this.setState(4256);
         _localctx.result = this.expression();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final WindowClauseContext windowClause() throws RecognitionException {
      WindowClauseContext _localctx = new WindowClauseContext(this._ctx, this.getState());
      this.enterRule(_localctx, 430, 215);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4258);
         this.match(382);
         this.setState(4259);
         this.namedWindow();
         this.setState(4264);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 536, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 536, this._ctx)) {
            if (_alt == 1) {
               this.setState(4260);
               this.match(4);
               this.setState(4261);
               this.namedWindow();
            }

            this.setState(4266);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NamedWindowContext namedWindow() throws RecognitionException {
      NamedWindowContext _localctx = new NamedWindowContext(this._ctx, this.getState());
      this.enterRule(_localctx, 432, 216);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4267);
         _localctx.name = this.errorCapturingIdentifier();
         this.setState(4268);
         this.match(22);
         this.setState(4269);
         this.windowSpec();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final WindowSpecContext windowSpec() throws RecognitionException {
      WindowSpecContext _localctx = new WindowSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 434, 217);

      try {
         this.setState(4317);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 544, this._ctx)) {
            case 1:
               _localctx = new WindowRefContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(4271);
               ((WindowRefContext)_localctx).name = this.errorCapturingIdentifier();
               break;
            case 2:
               _localctx = new WindowRefContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(4272);
               this.match(2);
               this.setState(4273);
               ((WindowRefContext)_localctx).name = this.errorCapturingIdentifier();
               this.setState(4274);
               this.match(3);
               break;
            case 3:
               _localctx = new WindowDefContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(4276);
               this.match(2);
               this.setState(4311);
               this._errHandler.sync(this);
               switch (this._input.LA(1)) {
                  case 3:
                  case 106:
                  case 236:
                  case 244:
                  case 258:
                  case 286:
                  case 307:
                     this.setState(4297);
                     this._errHandler.sync(this);
                     int _la = this._input.LA(1);
                     if (_la == 106 || _la == 244) {
                        this.setState(4287);
                        _la = this._input.LA(1);
                        if (_la != 106 && _la != 244) {
                           this._errHandler.recoverInline(this);
                        } else {
                           if (this._input.LA(1) == -1) {
                              this.matchedEOF = true;
                           }

                           this._errHandler.reportMatch(this);
                           this.consume();
                        }

                        this.setState(4288);
                        this.match(36);
                        this.setState(4289);
                        ((WindowDefContext)_localctx).expression = this.expression();
                        ((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
                        this.setState(4294);
                        this._errHandler.sync(this);

                        for(int var11 = this._input.LA(1); var11 == 4; var11 = this._input.LA(1)) {
                           this.setState(4290);
                           this.match(4);
                           this.setState(4291);
                           ((WindowDefContext)_localctx).expression = this.expression();
                           ((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
                           this.setState(4296);
                           this._errHandler.sync(this);
                        }
                     }

                     this.setState(4309);
                     this._errHandler.sync(this);
                     _la = this._input.LA(1);
                     if (_la == 236 || _la == 307) {
                        this.setState(4299);
                        _la = this._input.LA(1);
                        if (_la != 236 && _la != 307) {
                           this._errHandler.recoverInline(this);
                        } else {
                           if (this._input.LA(1) == -1) {
                              this.matchedEOF = true;
                           }

                           this._errHandler.reportMatch(this);
                           this.consume();
                        }

                        this.setState(4300);
                        this.match(36);
                        this.setState(4301);
                        this.sortItem();
                        this.setState(4306);
                        this._errHandler.sync(this);

                        for(int var14 = this._input.LA(1); var14 == 4; var14 = this._input.LA(1)) {
                           this.setState(4302);
                           this.match(4);
                           this.setState(4303);
                           this.sortItem();
                           this.setState(4308);
                           this._errHandler.sync(this);
                        }
                     }
                     break;
                  case 51:
                     this.setState(4277);
                     this.match(51);
                     this.setState(4278);
                     this.match(36);
                     this.setState(4279);
                     ((WindowDefContext)_localctx).expression = this.expression();
                     ((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
                     this.setState(4284);
                     this._errHandler.sync(this);

                     for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
                        this.setState(4280);
                        this.match(4);
                        this.setState(4281);
                        ((WindowDefContext)_localctx).expression = this.expression();
                        ((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
                        this.setState(4286);
                        this._errHandler.sync(this);
                     }
                     break;
                  default:
                     throw new NoViableAltException(this);
               }

               this.setState(4314);
               this._errHandler.sync(this);
               int var15 = this._input.LA(1);
               if (var15 == 258 || var15 == 286) {
                  this.setState(4313);
                  this.windowFrame();
               }

               this.setState(4316);
               this.match(3);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final WindowFrameContext windowFrame() throws RecognitionException {
      WindowFrameContext _localctx = new WindowFrameContext(this._ctx, this.getState());
      this.enterRule(_localctx, 436, 218);

      try {
         this.setState(4335);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 545, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4319);
               _localctx.frameType = this.match(258);
               this.setState(4320);
               _localctx.start = this.frameBound();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4321);
               _localctx.frameType = this.match(286);
               this.setState(4322);
               _localctx.start = this.frameBound();
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4323);
               _localctx.frameType = this.match(258);
               this.setState(4324);
               this.match(28);
               this.setState(4325);
               _localctx.start = this.frameBound();
               this.setState(4326);
               this.match(16);
               this.setState(4327);
               _localctx.end = this.frameBound();
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(4329);
               _localctx.frameType = this.match(286);
               this.setState(4330);
               this.match(28);
               this.setState(4331);
               _localctx.start = this.frameBound();
               this.setState(4332);
               this.match(16);
               this.setState(4333);
               _localctx.end = this.frameBound();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FrameBoundContext frameBound() throws RecognitionException {
      FrameBoundContext _localctx = new FrameBoundContext(this._ctx, this.getState());
      this.enterRule(_localctx, 438, 219);

      try {
         this.setState(4344);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 546, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4337);
               this.match(354);
               this.setState(4338);
               _localctx.boundType = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 135 && _la != 251) {
                  _localctx.boundType = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4339);
               _localctx.boundType = this.match(74);
               this.setState(4340);
               this.match(285);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4341);
               this.expression();
               this.setState(4342);
               _localctx.boundType = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 135 && _la != 251) {
                  _localctx.boundType = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
      QualifiedNameListContext _localctx = new QualifiedNameListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 440, 220);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4346);
         this.qualifiedName();
         this.setState(4351);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(4347);
            this.match(4);
            this.setState(4348);
            this.qualifiedName();
            this.setState(4353);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final FunctionNameContext functionName() throws RecognitionException {
      FunctionNameContext _localctx = new FunctionNameContext(this._ctx, this.getState());
      this.enterRule(_localctx, 442, 221);

      try {
         this.setState(4364);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 548, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4354);
               this.match(155);
               this.setState(4355);
               this.match(2);
               this.setState(4356);
               this.expression();
               this.setState(4357);
               this.match(3);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4359);
               _localctx.identFunc = this.match(155);
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4360);
               this.qualifiedName();
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(4361);
               this.match(131);
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(4362);
               this.match(189);
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(4363);
               this.match(279);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QualifiedNameContext qualifiedName() throws RecognitionException {
      QualifiedNameContext _localctx = new QualifiedNameContext(this._ctx, this.getState());
      this.enterRule(_localctx, 444, 222);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4366);
         this.identifier();
         this.setState(4371);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 549, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 549, this._ctx)) {
            if (_alt == 1) {
               this.setState(4367);
               this.match(5);
               this.setState(4368);
               this.identifier();
            }

            this.setState(4373);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ErrorCapturingIdentifierContext errorCapturingIdentifier() throws RecognitionException {
      ErrorCapturingIdentifierContext _localctx = new ErrorCapturingIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 446, 223);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4374);
         this.identifier();
         this.setState(4375);
         this.errorCapturingIdentifierExtra();
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() throws RecognitionException {
      ErrorCapturingIdentifierExtraContext _localctx = new ErrorCapturingIdentifierExtraContext(this._ctx, this.getState());
      this.enterRule(_localctx, 448, 224);

      try {
         this.setState(4384);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 551, this._ctx)) {
            case 1:
               _localctx = new ErrorIdentContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(4379);
               this._errHandler.sync(this);
               int _alt = 1;

               while(true) {
                  switch (_alt) {
                     case 1:
                        this.setState(4377);
                        this.match(400);
                        this.setState(4378);
                        this.identifier();
                        this.setState(4381);
                        this._errHandler.sync(this);
                        _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 550, this._ctx);
                        if (_alt == 2 || _alt == 0) {
                           return _localctx;
                        }
                        break;
                     default:
                        throw new NoViableAltException(this);
                  }
               }
            case 2:
               _localctx = new RealIdentContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final IdentifierContext identifier() throws RecognitionException {
      IdentifierContext _localctx = new IdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 450, 225);

      try {
         this.setState(4389);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 552, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4386);
               this.strictIdentifier();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4387);
               if (this.SQL_standard_keyword_behavior) {
                  throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
               }

               this.setState(4388);
               this.strictNonReserved();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final StrictIdentifierContext strictIdentifier() throws RecognitionException {
      StrictIdentifierContext _localctx = new StrictIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 452, 226);

      try {
         this.setState(4397);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 553, this._ctx)) {
            case 1:
               _localctx = new UnquotedIdentifierContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(4391);
               this.match(428);
               break;
            case 2:
               _localctx = new QuotedIdentifierAlternativeContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(4392);
               this.quotedIdentifier();
               break;
            case 3:
               _localctx = new UnquotedIdentifierContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(4393);
               if (!this.SQL_standard_keyword_behavior) {
                  throw new FailedPredicateException(this, "SQL_standard_keyword_behavior");
               }

               this.setState(4394);
               this.ansiNonReserved();
               break;
            case 4:
               _localctx = new UnquotedIdentifierContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(4395);
               if (this.SQL_standard_keyword_behavior) {
                  throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
               }

               this.setState(4396);
               this.nonReserved();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final QuotedIdentifierContext quotedIdentifier() throws RecognitionException {
      QuotedIdentifierContext _localctx = new QuotedIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 454, 227);

      try {
         this.setState(4402);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 554, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4399);
               this.match(429);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4400);
               if (!this.double_quoted_identifiers) {
                  throw new FailedPredicateException(this, "double_quoted_identifiers");
               }

               this.setState(4401);
               this.match(418);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final BackQuotedIdentifierContext backQuotedIdentifier() throws RecognitionException {
      BackQuotedIdentifierContext _localctx = new BackQuotedIdentifierContext(this._ctx, this.getState());
      this.enterRule(_localctx, 456, 228);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4404);
         this.match(429);
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NumberContext number() throws RecognitionException {
      NumberContext _localctx = new NumberContext(this._ctx, this.getState());
      this.enterRule(_localctx, 458, 229);

      try {
         this.setState(4449);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 565, this._ctx)) {
            case 1:
               _localctx = new ExponentLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 1);
               this.setState(4406);
               if (this.legacy_exponent_literal_as_decimal_enabled) {
                  throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
               }

               this.setState(4408);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4407);
                  this.match(400);
               }

               this.setState(4410);
               this.match(423);
               break;
            case 2:
               _localctx = new DecimalLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 2);
               this.setState(4411);
               if (this.legacy_exponent_literal_as_decimal_enabled) {
                  throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
               }

               this.setState(4413);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4412);
                  this.match(400);
               }

               this.setState(4415);
               this.match(424);
               break;
            case 3:
               _localctx = new LegacyDecimalLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 3);
               this.setState(4416);
               if (!this.legacy_exponent_literal_as_decimal_enabled) {
                  throw new FailedPredicateException(this, "legacy_exponent_literal_as_decimal_enabled");
               }

               this.setState(4418);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4417);
                  this.match(400);
               }

               this.setState(4420);
               _la = this._input.LA(1);
               if (_la != 423 && _la != 424) {
                  this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }
               break;
            case 4:
               _localctx = new IntegerLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 4);
               this.setState(4422);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4421);
                  this.match(400);
               }

               this.setState(4424);
               this.match(422);
               break;
            case 5:
               _localctx = new BigIntLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 5);
               this.setState(4426);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4425);
                  this.match(400);
               }

               this.setState(4428);
               this.match(419);
               break;
            case 6:
               _localctx = new SmallIntLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 6);
               this.setState(4430);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4429);
                  this.match(400);
               }

               this.setState(4432);
               this.match(420);
               break;
            case 7:
               _localctx = new TinyIntLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 7);
               this.setState(4434);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4433);
                  this.match(400);
               }

               this.setState(4436);
               this.match(421);
               break;
            case 8:
               _localctx = new DoubleLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 8);
               this.setState(4438);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4437);
                  this.match(400);
               }

               this.setState(4440);
               this.match(426);
               break;
            case 9:
               _localctx = new FloatLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 9);
               this.setState(4442);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4441);
                  this.match(400);
               }

               this.setState(4444);
               this.match(425);
               break;
            case 10:
               _localctx = new BigDecimalLiteralContext(_localctx);
               this.enterOuterAlt(_localctx, 10);
               this.setState(4446);
               this._errHandler.sync(this);
               int _la = this._input.LA(1);
               if (_la == 400) {
                  this.setState(4445);
                  this.match(400);
               }

               this.setState(4448);
               this.match(427);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final AlterColumnSpecListContext alterColumnSpecList() throws RecognitionException {
      AlterColumnSpecListContext _localctx = new AlterColumnSpecListContext(this._ctx, this.getState());
      this.enterRule(_localctx, 460, 230);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4451);
         this.alterColumnSpec();
         this.setState(4456);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 4; _la = this._input.LA(1)) {
            this.setState(4452);
            this.match(4);
            this.setState(4453);
            this.alterColumnSpec();
            this.setState(4458);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final AlterColumnSpecContext alterColumnSpec() throws RecognitionException {
      AlterColumnSpecContext _localctx = new AlterColumnSpecContext(this._ctx, this.getState());
      this.enterRule(_localctx, 462, 231);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4459);
         _localctx.column = this.multipartIdentifier();
         this.setState(4461);
         this._errHandler.sync(this);
         int _la = this._input.LA(1);
         if (_la == 10 || _la == 59 || _la == 110 || _la == 133 || _la == 298 || _la == 352) {
            this.setState(4460);
            this.alterColumnAction();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
      AlterColumnActionContext _localctx = new AlterColumnActionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 464, 232);

      try {
         this.setState(4475);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 568, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4463);
               this.match(352);
               this.setState(4464);
               this.dataType();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4465);
               this.commentSpec();
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4466);
               this.colPosition();
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(4467);
               _localctx.setOrDrop = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 110 && _la != 298) {
                  _localctx.setOrDrop = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(4468);
               this.errorCapturingNot();
               this.setState(4469);
               this.match(226);
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(4471);
               this.match(298);
               this.setState(4472);
               this.defaultExpression();
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(4473);
               _localctx.dropDefault = this.match(110);
               this.setState(4474);
               this.match(94);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final StringLitContext stringLit() throws RecognitionException {
      StringLitContext _localctx = new StringLitContext(this._ctx, this.getState());
      this.enterRule(_localctx, 466, 233);

      try {
         this.setState(4480);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 569, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4477);
               this.match(417);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4478);
               if (this.double_quoted_identifiers) {
                  throw new FailedPredicateException(this, "!double_quoted_identifiers");
               }

               this.setState(4479);
               this.match(418);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final CommentContext comment() throws RecognitionException {
      CommentContext _localctx = new CommentContext(this._ctx, this.getState());
      this.enterRule(_localctx, 468, 234);

      try {
         this.setState(4484);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 570, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4482);
               this.stringLit();
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4483);
               this.match(226);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final VersionContext version() throws RecognitionException {
      VersionContext _localctx = new VersionContext(this._ctx, this.getState());
      this.enterRule(_localctx, 470, 235);

      try {
         this.setState(4488);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 571, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4486);
               this.match(422);
               break;
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4487);
               this.stringLit();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final OperatorPipeRightSideContext operatorPipeRightSide() throws RecognitionException {
      OperatorPipeRightSideContext _localctx = new OperatorPipeRightSideContext(this._ctx, this.getState());
      this.enterRule(_localctx, 472, 236);

      try {
         this.setState(4529);
         this._errHandler.sync(this);
         switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 579, this._ctx)) {
            case 1:
               this.enterOuterAlt(_localctx, 1);
               this.setState(4490);
               this.selectClause();
               this.setState(4492);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 572, this._ctx)) {
                  case 1:
                     this.setState(4491);
                     this.windowClause();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 2:
               this.enterOuterAlt(_localctx, 2);
               this.setState(4494);
               this.match(124);
               this.setState(4495);
               _localctx.extendList = this.namedExpressionSeq();
               break;
            case 3:
               this.enterOuterAlt(_localctx, 3);
               this.setState(4496);
               this.match(298);
               this.setState(4497);
               this.operatorPipeSetAssignmentSeq();
               break;
            case 4:
               this.enterOuterAlt(_localctx, 4);
               this.setState(4498);
               this.match(110);
               this.setState(4499);
               this.identifierSeq();
               break;
            case 5:
               this.enterOuterAlt(_localctx, 5);
               this.setState(4500);
               this.match(22);
               this.setState(4501);
               this.errorCapturingIdentifier();
               break;
            case 6:
               this.enterOuterAlt(_localctx, 6);
               this.setState(4502);
               this.whereClause();
               this.setState(4504);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 573, this._ctx)) {
                  case 1:
                     this.setState(4503);
                     this.windowClause();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 7:
               this.enterOuterAlt(_localctx, 7);
               this.setState(4506);
               this.pivotClause();
               this.setState(4508);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 574, this._ctx)) {
                  case 1:
                     this.setState(4507);
                     this.unpivotClause();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 8:
               this.enterOuterAlt(_localctx, 8);
               this.setState(4510);
               this.unpivotClause();
               this.setState(4512);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 575, this._ctx)) {
                  case 1:
                     this.setState(4511);
                     this.pivotClause();
                     return _localctx;
                  default:
                     return _localctx;
               }
            case 9:
               this.enterOuterAlt(_localctx, 9);
               this.setState(4514);
               this.sample();
               break;
            case 10:
               this.enterOuterAlt(_localctx, 10);
               this.setState(4515);
               this.joinRelation();
               break;
            case 11:
               this.enterOuterAlt(_localctx, 11);
               this.setState(4516);
               _localctx.operator = this._input.LT(1);
               int _la = this._input.LA(1);
               if (_la != 117 && _la != 171 && _la != 299 && _la != 356) {
                  _localctx.operator = this._errHandler.recoverInline(this);
               } else {
                  if (this._input.LA(1) == -1) {
                     this.matchedEOF = true;
                  }

                  this._errHandler.reportMatch(this);
                  this.consume();
               }

               this.setState(4518);
               this._errHandler.sync(this);
               _la = this._input.LA(1);
               if (_la == 12 || _la == 105) {
                  this.setState(4517);
                  this.setQuantifier();
               }

               this.setState(4520);
               _localctx.right = this.queryPrimary();
               break;
            case 12:
               this.enterOuterAlt(_localctx, 12);
               this.setState(4521);
               this.queryOrganization();
               break;
            case 13:
               this.enterOuterAlt(_localctx, 13);
               this.setState(4522);
               this.match(11);
               this.setState(4524);
               this._errHandler.sync(this);
               switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 577, this._ctx)) {
                  case 1:
                     this.setState(4523);
                     this.namedExpressionSeq();
                  default:
                     this.setState(4527);
                     this._errHandler.sync(this);
                     switch (((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 578, this._ctx)) {
                        case 1:
                           this.setState(4526);
                           this.aggregationClause();
                     }
               }
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final OperatorPipeSetAssignmentSeqContext operatorPipeSetAssignmentSeq() throws RecognitionException {
      OperatorPipeSetAssignmentSeqContext _localctx = new OperatorPipeSetAssignmentSeqContext(this._ctx, this.getState());
      this.enterRule(_localctx, 474, 237);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4531);
         _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
         _localctx.ident.add(_localctx.errorCapturingIdentifier);
         this.setState(4536);
         this._errHandler.sync(this);

         for(int _la = this._input.LA(1); _la == 5; _la = this._input.LA(1)) {
            this.setState(4532);
            this.match(5);
            this.setState(4533);
            this.errorCapturingIdentifier();
            this.setState(4538);
            this._errHandler.sync(this);
         }

         this.setState(4539);
         this.match(388);
         this.setState(4540);
         this.expression();
         this.setState(4555);
         this._errHandler.sync(this);

         for(int _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 582, this._ctx); _alt != 2 && _alt != 0; _alt = ((ParserATNSimulator)this.getInterpreter()).adaptivePredict(this._input, 582, this._ctx)) {
            if (_alt == 1) {
               this.setState(4541);
               this.match(4);
               this.setState(4542);
               _localctx.errorCapturingIdentifier = this.errorCapturingIdentifier();
               _localctx.ident.add(_localctx.errorCapturingIdentifier);
               this.setState(4547);
               this._errHandler.sync(this);

               for(int var9 = this._input.LA(1); var9 == 5; var9 = this._input.LA(1)) {
                  this.setState(4543);
                  this.match(5);
                  this.setState(4544);
                  this.errorCapturingIdentifier();
                  this.setState(4549);
                  this._errHandler.sync(this);
               }

               this.setState(4550);
               this.match(388);
               this.setState(4551);
               this.expression();
            }

            this.setState(4557);
            this._errHandler.sync(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final AnsiNonReservedContext ansiNonReserved() throws RecognitionException {
      AnsiNonReservedContext _localctx = new AnsiNonReservedContext(this._ctx, this.getState());
      this.enterRule(_localctx, 476, 238);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4558);
         int _la = this._input.LA(1);
         if ((_la - 9 & -64) == 0 && (1L << _la - 9 & 4323067487810608503L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & 8827034099752370115L) != 0L || (_la - 138 & -64) == 0 && (1L << _la - 138 & -2960581363508761L) != 0L || (_la - 202 & -64) == 0 && (1L << _la - 202 & -4612812564484587521L) != 0L || (_la - 267 & -64) == 0 && (1L << _la - 267 & -288248519200870401L) != 0L || (_la - 331 & -64) == 0 && (1L << _la - 331 & 129759912489112569L) != 0L) {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         } else {
            this._errHandler.recoverInline(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final StrictNonReservedContext strictNonReserved() throws RecognitionException {
      StrictNonReservedContext _localctx = new StrictNonReservedContext(this._ctx, this.getState());
      this.enterRule(_localctx, 478, 239);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4560);
         int _la = this._input.LA(1);
         if (_la != 17 && _la != 72 && ((_la - 117 & -64) != 0 || (1L << _la - 117 & -9204794688358318079L) == 0L) && ((_la - 185 & -64) != 0 || (1L << _la - 185 & 70506183131153L) == 0L) && ((_la - 279 & -64) != 0 || (1L << _la - 279 & 1064961L) == 0L) && _la != 356 && _la != 366) {
            this._errHandler.recoverInline(this);
         } else {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public final NonReservedContext nonReserved() throws RecognitionException {
      NonReservedContext _localctx = new NonReservedContext(this._ctx, this.getState());
      this.enterRule(_localctx, 480, 240);

      try {
         this.enterOuterAlt(_localctx, 1);
         this.setState(4562);
         int _la = this._input.LA(1);
         if ((_la - 9 & -64) == 0 && (1L << _la - 9 & 9223372036854775551L) != 0L || (_la - 73 & -64) == 0 && (1L << _la - 73 & -17592186044417L) != 0L || (_la - 137 & -64) == 0 && (1L << _la - 137 & -4793888413843489L) != 0L || (_la - 201 & -64) == 0 && (1L << _la - 201 & -1075838977L) != 0L || (_la - 265 & -64) == 0 && (1L << _la - 265 & -17448321025L) != 0L || (_la - 329 & -64) == 0 && (1L << _la - 329 & 576460614730252287L) != 0L) {
            if (this._input.LA(1) == -1) {
               this.matchedEOF = true;
            }

            this._errHandler.reportMatch(this);
            this.consume();
         } else {
            this._errHandler.recoverInline(this);
         }
      } catch (RecognitionException re) {
         _localctx.exception = re;
         this._errHandler.reportError(this, re);
         this._errHandler.recover(this, re);
      } finally {
         this.exitRule();
      }

      return _localctx;
   }

   public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
      switch (ruleIndex) {
         case 80 -> {
            return this.queryTerm_sempred((QueryTermContext)_localctx, predIndex);
         }
         case 165 -> {
            return this.booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
         }
         case 168 -> {
            return this.valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
         }
         case 171 -> {
            return this.primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
         }
         case 225 -> {
            return this.identifier_sempred((IdentifierContext)_localctx, predIndex);
         }
         case 226 -> {
            return this.strictIdentifier_sempred((StrictIdentifierContext)_localctx, predIndex);
         }
         case 227 -> {
            return this.quotedIdentifier_sempred((QuotedIdentifierContext)_localctx, predIndex);
         }
         case 229 -> {
            return this.number_sempred((NumberContext)_localctx, predIndex);
         }
         case 233 -> {
            return this.stringLit_sempred((StringLitContext)_localctx, predIndex);
         }
         default -> {
            return true;
         }
      }
   }

   private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
      switch (predIndex) {
         case 0 -> {
            return this.precpred(this._ctx, 4);
         }
         case 1 -> {
            return this.legacy_setops_precedence_enabled;
         }
         case 2 -> {
            return this.precpred(this._ctx, 3);
         }
         case 3 -> {
            return !this.legacy_setops_precedence_enabled;
         }
         case 4 -> {
            return this.precpred(this._ctx, 2);
         }
         case 5 -> {
            return !this.legacy_setops_precedence_enabled;
         }
         case 6 -> {
            return this.precpred(this._ctx, 1);
         }
         default -> {
            return true;
         }
      }
   }

   private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
      switch (predIndex) {
         case 7 -> {
            return this.precpred(this._ctx, 2);
         }
         case 8 -> {
            return this.precpred(this._ctx, 1);
         }
         default -> {
            return true;
         }
      }
   }

   private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
      switch (predIndex) {
         case 9 -> {
            return this.precpred(this._ctx, 7);
         }
         case 10 -> {
            return this.precpred(this._ctx, 6);
         }
         case 11 -> {
            return this.precpred(this._ctx, 5);
         }
         case 12 -> {
            return this.precpred(this._ctx, 4);
         }
         case 13 -> {
            return this.precpred(this._ctx, 3);
         }
         case 14 -> {
            return this.precpred(this._ctx, 2);
         }
         case 15 -> {
            return this.precpred(this._ctx, 1);
         }
         default -> {
            return true;
         }
      }
   }

   private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
      switch (predIndex) {
         case 16 -> {
            return this.precpred(this._ctx, 23);
         }
         case 17 -> {
            return this.precpred(this._ctx, 22);
         }
         case 18 -> {
            return this.precpred(this._ctx, 8);
         }
         case 19 -> {
            return this.precpred(this._ctx, 6);
         }
         default -> {
            return true;
         }
      }
   }

   private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
      switch (predIndex) {
         case 20 -> {
            return !this.SQL_standard_keyword_behavior;
         }
         default -> {
            return true;
         }
      }
   }

   private boolean strictIdentifier_sempred(StrictIdentifierContext _localctx, int predIndex) {
      switch (predIndex) {
         case 21 -> {
            return this.SQL_standard_keyword_behavior;
         }
         case 22 -> {
            return !this.SQL_standard_keyword_behavior;
         }
         default -> {
            return true;
         }
      }
   }

   private boolean quotedIdentifier_sempred(QuotedIdentifierContext _localctx, int predIndex) {
      switch (predIndex) {
         case 23 -> {
            return this.double_quoted_identifiers;
         }
         default -> {
            return true;
         }
      }
   }

   private boolean number_sempred(NumberContext _localctx, int predIndex) {
      switch (predIndex) {
         case 24 -> {
            return !this.legacy_exponent_literal_as_decimal_enabled;
         }
         case 25 -> {
            return !this.legacy_exponent_literal_as_decimal_enabled;
         }
         case 26 -> {
            return this.legacy_exponent_literal_as_decimal_enabled;
         }
         default -> {
            return true;
         }
      }
   }

   private boolean stringLit_sempred(StringLitContext _localctx, int predIndex) {
      switch (predIndex) {
         case 27 -> {
            return !this.double_quoted_identifiers;
         }
         default -> {
            return true;
         }
      }
   }

   static {
      RuntimeMetaData.checkVersion("4.13.1", "4.13.1");
      _sharedContextCache = new PredictionContextCache();
      ruleNames = makeRuleNames();
      _LITERAL_NAMES = makeLiteralNames();
      _SYMBOLIC_NAMES = makeSymbolicNames();
      VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
      tokenNames = new String[_SYMBOLIC_NAMES.length];

      for(int i = 0; i < tokenNames.length; ++i) {
         tokenNames[i] = VOCABULARY.getLiteralName(i);
         if (tokenNames[i] == null) {
            tokenNames[i] = VOCABULARY.getSymbolicName(i);
         }

         if (tokenNames[i] == null) {
            tokenNames[i] = "<INVALID>";
         }
      }

      _serializedATN = Utils.join(new String[]{"\u0004\u0001Ʊᇕ\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002'\u0007'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u00071\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u00076\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007;\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007\u009e\u0002\u009f\u0007\u009f\u0002 \u0007 \u0002¡\u0007¡\u0002¢\u0007¢\u0002£\u0007£\u0002¤\u0007¤\u0002¥\u0007¥\u0002¦\u0007¦\u0002§\u0007§\u0002¨\u0007¨\u0002©\u0007©\u0002ª\u0007ª\u0002«\u0007«\u0002¬\u0007¬\u0002\u00ad\u0007\u00ad\u0002®\u0007®\u0002¯\u0007¯\u0002°\u0007°\u0002±\u0007±\u0002²\u0007²\u0002³\u0007³\u0002´\u0007´\u0002µ\u0007µ\u0002¶\u0007¶\u0002·\u0007·\u0002¸\u0007¸\u0002¹\u0007¹\u0002º\u0007º\u0002»\u0007»\u0002¼\u0007¼\u0002½\u0007½\u0002¾\u0007¾\u0002¿\u0007¿\u0002À\u0007À\u0002Á\u0007Á\u0002Â\u0007Â\u0002Ã\u0007Ã\u0002Ä\u0007Ä\u0002Å\u0007Å\u0002Æ\u0007Æ\u0002Ç\u0007Ç\u0002È\u0007È\u0002É\u0007É\u0002Ê\u0007Ê\u0002Ë\u0007Ë\u0002Ì\u0007Ì\u0002Í\u0007Í\u0002Î\u0007Î\u0002Ï\u0007Ï\u0002Ð\u0007Ð\u0002Ñ\u0007Ñ\u0002Ò\u0007Ò\u0002Ó\u0007Ó\u0002Ô\u0007Ô\u0002Õ\u0007Õ\u0002Ö\u0007Ö\u0002×\u0007×\u0002Ø\u0007Ø\u0002Ù\u0007Ù\u0002Ú\u0007Ú\u0002Û\u0007Û\u0002Ü\u0007Ü\u0002Ý\u0007Ý\u0002Þ\u0007Þ\u0002ß\u0007ß\u0002à\u0007à\u0002á\u0007á\u0002â\u0007â\u0002ã\u0007ã\u0002ä\u0007ä\u0002å\u0007å\u0002æ\u0007æ\u0002ç\u0007ç\u0002è\u0007è\u0002é\u0007é\u0002ê\u0007ê\u0002ë\u0007ë\u0002ì\u0007ì\u0002í\u0007í\u0002î\u0007î\u0002ï\u0007ï\u0002ð\u0007ð\u0001\u0000\u0001\u0000\u0003\u0000ǥ\b\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001Ǫ\b\u0001\u0001\u0001\u0003\u0001ǭ\b\u0001\u0001\u0001\u0001\u0001\u0003\u0001Ǳ\b\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0003\u0002Ƕ\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002ǻ\b\u0002\u0001\u0002\u0003\u0002Ǿ\b\u0002\u0001\u0002\u0001\u0002\u0003\u0002Ȃ\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0004\u0003ȇ\b\u0003\u000b\u0003\f\u0003Ȉ\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004Ș\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005ȥ\b\u0005\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007ȯ\b\u0007\u0001\u0007\u0003\u0007Ȳ\b\u0007\u0001\b\u0001\b\u0003\bȶ\b\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\bȽ\b\b\u0001\t\u0001\t\u0001\t\u0005\tɂ\b\t\n\t\f\tɅ\t\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\nɏ\b\n\u0001\u000b\u0003\u000bɒ\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000bɛ\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0005\fɦ\b\f\n\f\f\fɩ\t\f\u0001\f\u0001\f\u0003\fɭ\b\f\u0001\f\u0001\f\u0001\f\u0001\r\u0003\rɳ\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\rɼ\b\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0004\u0010ʊ\b\u0010\u000b\u0010\f\u0010ʋ\u0001\u0010\u0001\u0010\u0003\u0010ʐ\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0004\u0010ʜ\b\u0010\u000b\u0010\f\u0010ʝ\u0001\u0010\u0001\u0010\u0003\u0010ʢ\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010ʧ\b\u0010\u0001\u0011\u0003\u0011ʪ\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011ʱ\b\u0011\u0001\u0012\u0003\u0012ʴ\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012ʺ\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012˂\b\u0012\u0001\u0013\u0001\u0013\u0003\u0013ˆ\b\u0013\u0001\u0013\u0005\u0013ˉ\b\u0013\n\u0013\f\u0013ˌ\t\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d˭\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d˿\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001ḋ\b\u001d\n\u001d\f\u001d̊\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d̤\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d̨\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d̮\b\u001d\u0001\u001d\u0003\u001ḏ\b\u001d\u0001\u001d\u0003\u001d̴\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d̻\b\u001d\u0001\u001d\u0003\u001d̾\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d͂\b\u001d\u0001\u001d\u0003\u001dͅ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d͍\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d͘\b\u001d\n\u001d\f\u001d͛\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d͢\b\u001d\u0001\u001d\u0003\u001dͥ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dͩ\b\u001d\u0001\u001d\u0003\u001dͬ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dͲ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dͽ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0383\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dΈ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dΪ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dη\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϐ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϙ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϡ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dϥ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϪ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϰ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dϼ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dЄ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dЊ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dИ\b\u001d\u0001\u001d\u0004\u001dЛ\b\u001d\u000b\u001d\f\u001dМ\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dЭ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dв\b\u001d\n\u001d\f\u001dе\t\u001d\u0001\u001d\u0003\u001dи\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dо\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѐ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dћ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dџ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѥ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѫ\b\u001d\u0001\u001d\u0003\u001dѮ\b\u001d\u0001\u001d\u0003\u001dѱ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dѸ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dѼ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d҆\b\u001d\n\u001d\f\u001d҉\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dґ\b\u001d\u0001\u001d\u0003\u001dҔ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҝ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҢ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҨ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҴ\b\u001d\u0001\u001d\u0003\u001dҷ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dҾ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dӇ\b\u001d\n\u001d\f\u001dӊ\t\u001d\u0003\u001dӌ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӑ\b\u001d\u0001\u001d\u0003\u001dӔ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӛ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӠ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӪ\b\u001d\u0003\u001dӬ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӲ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dӶ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dӻ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԁ\b\u001d\u0001\u001d\u0003\u001dԄ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dԈ\b\u001d\u0001\u001d\u0003\u001dԋ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԒ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԘ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dԜ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԢ\b\u001d\u0001\u001d\u0003\u001dԥ\b\u001d\u0001\u001d\u0003\u001dԨ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԯ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԴ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dԽ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dՅ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dՋ\b\u001d\u0001\u001d\u0003\u001dՎ\b\u001d\u0001\u001d\u0003\u001dՑ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0557\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d՛\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dՠ\b\u001d\u0001\u001d\u0003\u001dգ\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dէ\b\u001d\u0003\u001dթ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dձ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dչ\b\u001d\u0001\u001d\u0003\u001dռ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dց\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dև\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d֍\b\u001d\u0001\u001d\u0003\u001d\u0590\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֔\b\u001d\u0001\u001d\u0003\u001d֗\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֛\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d֟\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dֹ\b\u001d\n\u001d\f\u001dּ\t\u001d\u0003\u001d־\b\u001d\u0001\u001d\u0001\u001d\u0003\u001dׂ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u05c8\b\u001d\u0001\u001d\u0003\u001d\u05cb\b\u001d\u0001\u001d\u0003\u001d\u05ce\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dה\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dל\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dס\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dק\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u05ed\b\u001d\u0001\u001d\u0003\u001dװ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u05f7\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u05fc\b\u001d\n\u001d\f\u001d\u05ff\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d؇\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d،\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dؑ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dؘ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d؞\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001dأ\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dح\b\u001d\n\u001d\f\u001dذ\t\u001d\u0003\u001dز\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001dظ\b\u001d\n\u001d\f\u001dػ\t\u001d\u0003\u001dؽ\b\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eق\b\u001e\n\u001e\f\u001eم\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eٓ\b\u001e\n\u001e\f\u001eٖ\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eٯ\b\u001e\n\u001e\f\u001eٲ\t\u001e\u0003\u001eٴ\b\u001e\u0001\u001e\u0001\u001e\u0005\u001eٸ\b\u001e\n\u001e\f\u001eٻ\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eځ\b\u001e\n\u001e\f\u001eڄ\t\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001eڊ\b\u001e\n\u001e\f\u001eڍ\t\u001e\u0003\u001eڏ\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001fږ\b\u001f\u0001\u001f\u0003\u001fڙ\b\u001f\u0001 \u0001 \u0001 \u0001 \u0001 \u0001 \u0001 \u0003 ڢ\b \u0001!\u0001!\u0003!ڦ\b!\u0001\"\u0001\"\u0003\"ڪ\b\"\u0001\"\u0001\"\u0003\"ڮ\b\"\u0001#\u0001#\u0001#\u0005#ڳ\b#\n#\f#ڶ\t#\u0001$\u0001$\u0003$ں\b$\u0001%\u0001%\u0001&\u0001&\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ۆ\b'\u0001'\u0001'\u0003'ۊ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ۑ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'݅\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݍ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݕ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݞ\b'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0001'\u0003'ݨ\b'\u0001(\u0001(\u0003(ݬ\b(\u0001(\u0003(ݯ\b(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(ݶ\b(\u0001(\u0001(\u0001)\u0001)\u0003)ݼ\b)\u0001)\u0001)\u0001)\u0001)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003+ގ\b+\u0001+\u0001+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,ޚ\b,\u0001,\u0001,\u0001,\u0003,ޟ\b,\u0001-\u0001-\u0001-\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.ޫ\b.\u0001/\u0001/\u0001/\u00010\u00010\u00010\u00011\u00031\u07b4\b1\u00011\u00011\u00011\u00012\u00012\u00012\u00032\u07bc\b2\u00012\u00012\u00032߀\b2\u00012\u00012\u00012\u00012\u00012\u00032߇\b2\u00032߉\b2\u00012\u00012\u00012\u00032ߎ\b2\u00012\u00012\u00012\u00032ߓ\b2\u00012\u00012\u00032ߗ\b2\u00012\u00032ߚ\b2\u00012\u00012\u00012\u00012\u00032ߠ\b2\u00012\u00012\u00012\u00032ߥ\b2\u00012\u00012\u00012\u00032ߪ\b2\u00012\u00012\u00032߮\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00032߶\b2\u00012\u00012\u00012\u00032\u07fb\b2\u00012\u00032߾\b2\u00012\u00012\u00012\u00032ࠃ\b2\u00012\u00012\u00032ࠇ\b2\u00012\u00012\u00012\u00032ࠌ\b2\u00032ࠎ\b2\u00013\u00013\u00033ࠒ\b3\u00014\u00014\u00014\u00014\u00014\u00054࠙\b4\n4\f4ࠜ\t4\u00014\u00014\u00015\u00015\u00015\u00035ࠣ\b5\u00015\u00015\u00015\u00015\u00035ࠩ\b5\u00016\u00016\u00017\u00017\u00018\u00018\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00039࠸\b9\u0001:\u0001:\u0001:\u0005:࠽\b:\n:\f:ࡀ\t:\u0001;\u0001;\u0003;ࡄ\b;\u0001;\u0001;\u0001;\u0005;ࡉ\b;\n;\f;ࡌ\t;\u0001<\u0001<\u0003<ࡐ\b<\u0001<\u0003<ࡓ\b<\u0001<\u0001<\u0001<\u0001<\u0001=\u0001=\u0001=\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0005>\u086b\b>\n>\f>\u086e\t>\u0001?\u0001?\u0001?\u0001?\u0005?\u0874\b?\n?\f?\u0877\t?\u0001?\u0001?\u0001@\u0001@\u0003@\u087d\b@\u0001@\u0003@\u0880\b@\u0001A\u0001A\u0001A\u0005A\u0885\bA\nA\fA\u0888\tA\u0001A\u0003A\u088b\bA\u0001B\u0001B\u0001B\u0001B\u0003B\u0891\bB\u0001C\u0001C\u0001C\u0001C\u0005C\u0897\bC\nC\fC\u089a\tC\u0001C\u0001C\u0001D\u0001D\u0003Dࢠ\bD\u0001D\u0003Dࢣ\bD\u0001E\u0001E\u0001E\u0001E\u0005Eࢩ\bE\nE\fEࢬ\tE\u0001E\u0001E\u0001F\u0001F\u0001F\u0001F\u0005Fࢴ\bF\nF\fFࢷ\tF\u0001F\u0001F\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0003Gࣁ\bG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003H\u08c9\bH\u0001I\u0001I\u0001I\u0001I\u0003I\u08cf\bI\u0001J\u0001J\u0001J\u0001K\u0001K\u0001K\u0001K\u0001K\u0004Kࣙ\bK\u000bK\fKࣚ\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u08e2\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0003Kࣩ\bK\u0001K\u0001K\u0001K\u0001K\u0003K࣯\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003Kࣺ\bK\u0001K\u0001K\u0001K\u0001K\u0005Kऀ\bK\nK\fKः\tK\u0001K\u0005Kआ\bK\nK\fKउ\tK\u0001K\u0005Kऌ\bK\nK\fKए\tK\u0003Kऑ\bK\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0003Lङ\bL\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003Mढ\bM\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nऩ\bN\nN\fNब\tN\u0003Nम\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nव\bN\nN\fNस\tN\u0003Nऺ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0005Nु\bN\nN\fNॄ\tN\u0003Nॆ\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0005N्\bN\nN\fNॐ\tN\u0003N॒\bN\u0001N\u0003Nॕ\bN\u0001N\u0001N\u0001N\u0003Nग़\bN\u0003Nड़\bN\u0001N\u0001N\u0003Nॠ\bN\u0001O\u0001O\u0001O\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P६\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0003Pॳ\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0003Pॺ\bP\u0001P\u0001P\u0001P\u0001P\u0005Pঀ\bP\nP\fPঃ\tP\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u098e\bQ\u0001R\u0001R\u0003R\u0992\bR\u0001R\u0001R\u0003Rখ\bR\u0001S\u0001S\u0005Sচ\bS\nS\fSঝ\tS\u0001T\u0001T\u0003Tড\bT\u0001T\u0001T\u0001T\u0001T\u0005Tধ\bT\nT\fTপ\tT\u0001T\u0003Tভ\bT\u0001T\u0003Tর\bT\u0001T\u0003T\u09b3\bT\u0001T\u0003Tশ\bT\u0001T\u0001T\u0003T\u09ba\bT\u0001U\u0001U\u0003Uা\bU\u0001U\u0005Uু\bU\nU\fUৄ\tU\u0001U\u0003Uে\bU\u0001U\u0003U\u09ca\bU\u0001U\u0003U্\bU\u0001U\u0003U\u09d0\bU\u0001U\u0001U\u0003U\u09d4\bU\u0001U\u0005Uৗ\bU\nU\fU\u09da\tU\u0001U\u0003Uঢ়\bU\u0001U\u0003Uৠ\bU\u0001U\u0003Uৣ\bU\u0001U\u0003U০\bU\u0003U২\bU\u0001V\u0001V\u0001V\u0001V\u0003V৮\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V৵\bV\u0001V\u0001V\u0001V\u0003V৺\bV\u0001V\u0003V৽\bV\u0001V\u0003V\u0a00\bV\u0001V\u0001V\u0003V\u0a04\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0a0e\bV\u0001V\u0001V\u0003V\u0a12\bV\u0003Vਔ\bV\u0001V\u0003Vਗ\bV\u0001V\u0001V\u0003Vਛ\bV\u0001W\u0001W\u0005Wਟ\bW\nW\fWਢ\tW\u0001W\u0003Wਥ\bW\u0001W\u0001W\u0001X\u0001X\u0001X\u0001Y\u0001Y\u0001Y\u0001Y\u0003Yਰ\bY\u0001Y\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0a3a\bZ\u0001Z\u0001Z\u0003Zਾ\bZ\u0001Z\u0001Z\u0001Z\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0003[\u0a4a\b[\u0001[\u0001[\u0001[\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0a56\b\\\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0005]\u0a63\b]\n]\f]੦\t]\u0001]\u0001]\u0003]੪\b]\u0001^\u0001^\u0001^\u0001^\u0003^ੰ\b^\u0001_\u0001_\u0001_\u0001_\u0001_\u0001`\u0001`\u0001`\u0005`\u0a7a\b`\n`\f`\u0a7d\t`\u0001a\u0001a\u0001a\u0001a\u0001b\u0001b\u0001b\u0001c\u0001c\u0001c\u0001d\u0001d\u0001d\u0003dઌ\bd\u0001d\u0005dએ\bd\nd\fd\u0a92\td\u0001d\u0001d\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0005eજ\be\ne\feટ\te\u0001e\u0001e\u0003eણ\be\u0001f\u0001f\u0001f\u0001f\u0005f\u0aa9\bf\nf\ffબ\tf\u0001f\u0005fય\bf\nf\ffલ\tf\u0001f\u0003fવ\bf\u0001f\u0003fસ\bf\u0001g\u0003g\u0abb\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0003gૂ\bg\u0001g\u0001g\u0001g\u0001g\u0003gૈ\bg\u0001h\u0001h\u0001h\u0001h\u0001h\u0005h\u0acf\bh\nh\fh\u0ad2\th\u0001h\u0001h\u0001h\u0001h\u0001h\u0005h\u0ad9\bh\nh\fh\u0adc\th\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0005h૨\bh\nh\fh૫\th\u0001h\u0001h\u0003h૯\bh\u0003h૱\bh\u0001i\u0001i\u0003i\u0af5\bi\u0001j\u0001j\u0001j\u0001j\u0001j\u0005jૼ\bj\nj\fj૿\tj\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0005jଉ\bj\nj\fjଌ\tj\u0001j\u0001j\u0003jଐ\bj\u0001k\u0001k\u0003kଔ\bk\u0001l\u0001l\u0001l\u0001l\u0005lଚ\bl\nl\flଝ\tl\u0003lଟ\bl\u0001l\u0001l\u0003lଣ\bl\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0005mଯ\bm\nm\fmଲ\tm\u0001m\u0001m\u0001m\u0001n\u0001n\u0001n\u0001n\u0001n\u0005n଼\bn\nn\fnି\tn\u0001n\u0001n\u0003nୃ\bn\u0001o\u0001o\u0003oେ\bo\u0001o\u0003o\u0b4a\bo\u0001p\u0001p\u0003p\u0b4e\bp\u0001p\u0001p\u0001p\u0001p\u0003p\u0b54\bp\u0001p\u0003pୗ\bp\u0001q\u0001q\u0001q\u0001r\u0001r\u0003r\u0b5e\br\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0005s୨\bs\ns\fs୫\ts\u0001s\u0001s\u0001t\u0001t\u0001t\u0001t\u0005t୳\bt\nt\ft୶\tt\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0005t\u0b80\bt\nt\ftஃ\tt\u0001t\u0001t\u0001u\u0001u\u0001u\u0001u\u0005u\u0b8b\bu\nu\fuஎ\tu\u0001u\u0001u\u0003uஒ\bu\u0001v\u0001v\u0001w\u0001w\u0001x\u0001x\u0003xச\bx\u0001y\u0001y\u0001z\u0003zட\bz\u0001z\u0001z\u0001{\u0001{\u0001{\u0003{\u0ba6\b{\u0001{\u0001{\u0001{\u0001{\u0001{\u0005{\u0bad\b{\n{\f{ர\t{\u0003{ல\b{\u0001{\u0001{\u0001{\u0003{ஷ\b{\u0001{\u0001{\u0001{\u0005{\u0bbc\b{\n{\f{ி\t{\u0003{ு\b{\u0001|\u0001|\u0001}\u0003}ெ\b}\u0001}\u0001}\u0005}ொ\b}\n}\f}்\t}\u0001~\u0001~\u0001~\u0003~\u0bd2\b~\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007fௗ\b\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0bdb\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0be1\b\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0be5\b\u007f\u0001\u0080\u0003\u0080௨\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080௭\b\u0080\u0001\u0080\u0003\u0080௰\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080௵\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080௹\b\u0080\u0001\u0080\u0003\u0080\u0bfc\b\u0080\u0001\u0080\u0003\u0080\u0bff\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081అ\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082ఊ\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c11\b\u0082\u0001\u0083\u0003\u0083ఔ\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083ద\b\u0083\u0003\u0083న\b\u0083\u0001\u0083\u0003\u0083ఫ\b\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0005\u0085ఴ\b\u0085\n\u0085\f\u0085ష\t\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0005\u0086ఽ\b\u0086\n\u0086\f\u0086ీ\t\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0003\u0087ె\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0005\u0088ౌ\b\u0088\n\u0088\f\u0088\u0c4f\t\u0088\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0003\u0089ౕ\b\u0089\u0001\u008a\u0001\u008a\u0003\u008aౙ\b\u008a\u0001\u008a\u0003\u008a\u0c5c\b\u008a\u0001\u008a\u0003\u008a\u0c5f\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a౧\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a౯\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u0c75\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0005\u008c౾\b\u008c\n\u008c\f\u008cಁ\t\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dಈ\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dಏ\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008dಖ\b\u008d\u0003\u008dಘ\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0005\u008eಣ\b\u008e\n\u008e\f\u008eದ\t\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0004\u008eಭ\b\u008e\u000b\u008e\f\u008eಮ\u0001\u008e\u0003\u008eಲ\b\u008e\u0003\u008e\u0cb4\b\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0005\u008e಼\b\u008e\n\u008e\f\u008eಿ\t\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0004\u008eೆ\b\u008e\u000b\u008e\f\u008eೇ\u0001\u008e\u0003\u008eೋ\b\u008e\u0003\u008e್\b\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u0090\u0001\u0090\u0003\u0090ೕ\b\u0090\u0001\u0091\u0001\u0091\u0003\u0091\u0cd9\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0005\u0092ೠ\b\u0092\n\u0092\f\u0092ೣ\t\u0092\u0003\u0092\u0ce5\b\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0003\u0093೫\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093೯\b\u0093\u0003\u0093ೱ\b\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094\u0cfa\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ആ\b\u0094\u0003\u0094ഈ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ഏ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ഖ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ജ\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094ഢ\b\u0094\u0003\u0094ത\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0005\u0095ഩ\b\u0095\n\u0095\f\u0095ബ\t\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0005\u0096റ\b\u0096\n\u0096\f\u0096ഴ\t\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0005\u0097ഹ\b\u0097\n\u0097\f\u0097഼\t\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098ു\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099െ\b\u0099\u0001\u0099\u0001\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a്\b\u009a\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b\u0003\u009b\u0d53\b\u009b\u0001\u009b\u0001\u009b\u0003\u009bൗ\b\u009b\u0003\u009b൙\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c൞\b\u009c\n\u009c\f\u009cൡ\t\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0005\u009d൧\b\u009d\n\u009d\f\u009d൪\t\u009d\u0001\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0003\u009e൰\b\u009e\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0005\u009f൸\b\u009f\n\u009f\f\u009fൻ\t\u009f\u0001\u009f\u0001\u009f\u0003\u009fൿ\b\u009f\u0001 \u0001 \u0003 ඃ\b \u0001¡\u0001¡\u0001¢\u0001¢\u0001¢\u0001¢\u0001£\u0001£\u0003£ඍ\b£\u0001¤\u0001¤\u0001¤\u0005¤ඒ\b¤\n¤\f¤ඕ\t¤\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0003¥ඡ\b¥\u0003¥ඣ\b¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0001¥\u0005¥ණ\b¥\n¥\f¥ථ\t¥\u0001¦\u0003¦න\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0003¦ඹ\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0005¦ව\b¦\n¦\f¦ස\t¦\u0001¦\u0001¦\u0001¦\u0003¦\u0dc8\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0003¦ැ\b¦\u0001¦\u0001¦\u0001¦\u0003¦\u0dd5\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0001¦\u0005¦ෟ\b¦\n¦\f¦\u0de2\t¦\u0001¦\u0001¦\u0003¦෦\b¦\u0001¦\u0003¦෩\b¦\u0001¦\u0001¦\u0001¦\u0001¦\u0003¦෯\b¦\u0001¦\u0001¦\u0003¦ෳ\b¦\u0001¦\u0001¦\u0001¦\u0003¦\u0df8\b¦\u0001¦\u0001¦\u0001¦\u0003¦\u0dfd\b¦\u0001¦\u0001¦\u0001¦\u0003¦ข\b¦\u0001§\u0001§\u0001¨\u0001¨\u0001¨\u0001¨\u0003¨ช\b¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0001¨\u0005¨ร\b¨\n¨\f¨ฦ\t¨\u0001©\u0001©\u0001ª\u0001ª\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«า\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«\u0e3e\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0004«่\b«\u000b«\f«้\u0001«\u0001«\u0003«๎\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0004«๕\b«\u000b«\f«๖\u0001«\u0001«\u0003«๛\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«\u0e6b\b«\n«\f«\u0e6e\t«\u0003«\u0e70\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«\u0e78\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ກ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ຊ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ຘ\b«\u0001«\u0001«\u0001«\u0001«\u0003«ພ\b«\u0001«\u0001«\u0001«\u0001«\u0004«\u0ea4\b«\u000b«\f«ລ\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«ັ\b«\u0001«\u0001«\u0001«\u0005«ຶ\b«\n«\f«ູ\t«\u0003«ົ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«ໆ\b«\n«\f«້\t«\u0001«\u0001«\u0003«ໍ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«໕\b«\u0001«\u0001«\u0003«໙\b«\u0001«\u0001«\u0003«ໝ\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0004«\u0ee7\b«\u000b«\f«\u0ee8\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«༂\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«༉\b«\u0001«\u0003«༌\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0003«༛\b«\u0001«\u0001«\u0003«༟\b«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0001«\u0005«༮\b«\n«\f«༱\t«\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0001¬\u0003¬༺\b¬\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0004\u00adཇ\b\u00ad\u000b\u00ad\f\u00ad\u0f48\u0003\u00adཋ\b\u00ad\u0001®\u0001®\u0001¯\u0001¯\u0001°\u0001°\u0001±\u0001±\u0001²\u0001²\u0001²\u0003²མ\b²\u0001³\u0001³\u0003³ཛྷ\b³\u0001´\u0001´\u0001´\u0004´ཡ\b´\u000b´\f´ར\u0001µ\u0001µ\u0001µ\u0003µཨ\bµ\u0001¶\u0001¶\u0001¶\u0001¶\u0001¶\u0001·\u0003·\u0f70\b·\u0001·\u0001·\u0001·\u0003·ཱུ\b·\u0001¸\u0001¸\u0001¹\u0001¹\u0001º\u0001º\u0001º\u0003ºཾ\bº\u0001»\u0001»\u0001»\u0001»\u0001¼\u0001¼\u0001¼\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0003½ྙ\b½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0001½\u0003½ྩ\b½\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾ྺ\b¾\u0001¾\u0001¾\u0003¾྾\b¾\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾࿄\b¾\u0001¾\u0001¾\u0001¾\u0001¾\u0003¾࿊\b¾\u0001¾\u0001¾\u0001¾\u0001¾\u0001¾\u0005¾࿑\b¾\n¾\f¾࿔\t¾\u0001¾\u0003¾࿗\b¾\u0003¾࿙\b¾\u0001¿\u0001¿\u0001¿\u0005¿\u0fde\b¿\n¿\f¿\u0fe1\t¿\u0001À\u0001À\u0001À\u0005À\u0fe6\bÀ\nÀ\fÀ\u0fe9\tÀ\u0001Á\u0001Á\u0001Á\u0001Á\u0001Á\u0001Á\u0003Á\u0ff1\bÁ\u0001Â\u0001Â\u0001Â\u0001Ã\u0001Ã\u0001Ã\u0001Ä\u0001Ä\u0001Ä\u0005Ä\u0ffc\bÄ\nÄ\fÄ\u0fff\tÄ\u0001Å\u0001Å\u0001Å\u0001Å\u0001Å\u0003Åဆ\bÅ\u0001Å\u0003Åဉ\bÅ\u0001Æ\u0001Æ\u0001Æ\u0005Æဎ\bÆ\nÆ\fÆထ\tÆ\u0001Ç\u0001Ç\u0001Ç\u0005Çဖ\bÇ\nÇ\fÇမ\tÇ\u0001È\u0001È\u0001È\u0001È\u0001È\u0001È\u0003Èအ\bÈ\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0001É\u0003Éီ\bÉ\u0001É\u0001É\u0001É\u0003Éဳ\bÉ\u0003Éဵ\bÉ\u0001Ê\u0001Ê\u0005Ê္\bÊ\nÊ\fÊြ\tÊ\u0001Ê\u0001Ê\u0001Ë\u0001Ë\u0001Ë\u0001Ë\u0001Ë\u0001Ë\u0003Ë၆\bË\u0001Ì\u0003Ì၉\bÌ\u0001Ì\u0001Ì\u0003Ì၍\bÌ\u0001Ì\u0003Ìၐ\bÌ\u0001Í\u0001Í\u0001Í\u0005Íၕ\bÍ\nÍ\fÍၘ\tÍ\u0001Î\u0001Î\u0003Îၜ\bÎ\u0001Î\u0001Î\u0001Î\u0001Î\u0003Îၢ\bÎ\u0001Î\u0003Îၥ\bÎ\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0001Ï\u0005Ïၮ\bÏ\nÏ\fÏၱ\tÏ\u0001Ð\u0001Ð\u0001Ð\u0001Ñ\u0001Ñ\u0001Ñ\u0001Ò\u0001Ò\u0001Ò\u0001Ò\u0003Òၽ\bÒ\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0001Ó\u0003Óႉ\bÓ\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0001Ô\u0003Ô႔\bÔ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0001Õ\u0003Õႜ\bÕ\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001Ö\u0001×\u0001×\u0001×\u0001×\u0005×Ⴇ\b×\n×\f×Ⴊ\t×\u0001Ø\u0001Ø\u0001Ø\u0001Ø\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0005ÙႻ\bÙ\nÙ\fÙႾ\tÙ\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0005ÙჅ\bÙ\nÙ\fÙ\u10c8\tÙ\u0003Ù\u10ca\bÙ\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0001Ù\u0005Ùბ\bÙ\nÙ\fÙე\tÙ\u0003Ùზ\bÙ\u0003Ùი\bÙ\u0001Ù\u0003Ùმ\bÙ\u0001Ù\u0003Ùპ\bÙ\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0001Ú\u0003Úჰ\bÚ\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0001Û\u0003Ûჹ\bÛ\u0001Ü\u0001Ü\u0001Ü\u0005Üჾ\bÜ\nÜ\fÜᄁ\tÜ\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0001Ý\u0003Ýᄍ\bÝ\u0001Þ\u0001Þ\u0001Þ\u0005Þᄒ\bÞ\nÞ\fÞᄕ\tÞ\u0001ß\u0001ß\u0001ß\u0001à\u0001à\u0004àᄜ\bà\u000bà\fàᄝ\u0001à\u0003àᄡ\bà\u0001á\u0001á\u0001á\u0003áᄦ\bá\u0001â\u0001â\u0001â\u0001â\u0001â\u0001â\u0003âᄮ\bâ\u0001ã\u0001ã\u0001ã\u0003ãᄳ\bã\u0001ä\u0001ä\u0001å\u0001å\u0003åᄹ\bå\u0001å\u0001å\u0001å\u0003åᄾ\bå\u0001å\u0001å\u0001å\u0003åᅃ\bå\u0001å\u0001å\u0003åᅇ\bå\u0001å\u0001å\u0003åᅋ\bå\u0001å\u0001å\u0003åᅏ\bå\u0001å\u0001å\u0003åᅓ\bå\u0001å\u0001å\u0003åᅗ\bå\u0001å\u0001å\u0003åᅛ\bå\u0001å\u0001å\u0003åᅟ\bå\u0001å\u0003åᅢ\bå\u0001æ\u0001æ\u0001æ\u0005æᅧ\bæ\næ\fæᅪ\tæ\u0001ç\u0001ç\u0003çᅮ\bç\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0001è\u0003èᅼ\bè\u0001é\u0001é\u0001é\u0003éᆁ\bé\u0001ê\u0001ê\u0003êᆅ\bê\u0001ë\u0001ë\u0003ëᆉ\bë\u0001ì\u0001ì\u0003ìᆍ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᆙ\bì\u0001ì\u0001ì\u0003ìᆝ\bì\u0001ì\u0001ì\u0003ìᆡ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᆧ\bì\u0001ì\u0001ì\u0001ì\u0001ì\u0003ìᆭ\bì\u0001ì\u0003ìᆰ\bì\u0003ìᆲ\bì\u0001í\u0001í\u0001í\u0005íᆷ\bí\ní\fíᆺ\tí\u0001í\u0001í\u0001í\u0001í\u0001í\u0001í\u0005íᇂ\bí\ní\fíᇅ\tí\u0001í\u0001í\u0001í\u0005íᇊ\bí\ní\fíᇍ\tí\u0001î\u0001î\u0001ï\u0001ï\u0001ð\u0001ð\u0001ð\tֺ\u05fdعكٰٔٹڂڋ\u0004 ŊŐŖñ\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e ¢¤¦¨ª¬®°²´¶¸º¼¾ÀÂÄÆÈÊÌÎÐÒÔÖØÚÜÞàâäæèêìîðòôöøúüþĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĸĺļľŀłńņňŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸźżžƀƂƄƆƈƊƌƎƐƒƔƖƘƚƜƞƠƢƤƦƨƪƬƮưƲƴƶƸƺƼƾǀǂǄǆǈǊǌǎǐǒǔǖǘǚǜǞǠ\u0000?\u0002\u0000EEyy\u0002\u0000ZZþþ\u0002\u0000))ēē\u0002\u0000\u008d\u008d¡¡\u0001\u00009:\u0002\u0000ŅŅŶŶ\u0002\u0000\r\r..\u0005\u000055FF}}\u008b\u008bÈÈ\u0001\u0000cd\u0002\u0000}}\u008b\u008b\u0003\u0000\t\tnnłł\u0002\u0000\t\tÂÂ\u0003\u0000TTÚÚġġ\u0003\u0000UUÛÛĢĢ\u0001\u0000Ųų\u0004\u0000uu««īīŤŤ\u0003\u0000uuīīŤŤ\u0002\u0000\u0017\u0017cc\u0002\u0000\u0085\u0085¸¸\u0002\u0000ńńŵŵ\u0002\u0000ŃŃŏŏ\u0002\u0000IIĜĜ\u0002\u0000ww¢¢\u0002\u0000\f\fii\u0002\u0000ƦƦƨƨ\u0002\u0000jjôô\u0002\u0000ììĳĳ\u0002\u0000\b\báá\u0001\u0000¾¿\u0003\u0000\f\f\u0012\u0012ĲĲ\u0003\u0000\u0080\u0080ŝŝŦŦ\u0002\u0000ƏƐƔƔ\u0002\u0000kkƑƓ\u0002\u0000ƏƐƗƗ\u0001\u0000ƌƎ\u000b\u0000OOQQ\u0099\u0099ÏÏÑÑÓÓÖÖĀĀğğŹŹƁƁ\u0004\u0000KKMNĩĩŭŭ\u0002\u0000VWŒŒ\u0003\u0000XYŎŎœœ\u0002\u0000++şş\u0002\u0000\u009e\u009eĒĒ\u0001\u0000ŀŁ\u0002\u0000\u0004\u0004\u008d\u008d\u0002\u0000\u0004\u0004\u0088\u0088\u0003\u0000!!»»ŘŘ\u0001\u0000ƄƋ\u0003\u0000kkƏƗƙƙ\u0004\u0000\u0010\u0010¡¡ááëë\u0002\u0000\u0080\u0080ŝŝ\u0001\u0000ƏƐ\b\u0000OP\u0099\u009aÏÔÖ×ÜÝğĠŹźƁƂ\u0006\u0000OO\u0099\u0099ÓÓÖÖğğƁƁ\u0002\u0000ÖÖƁƁ\u0004\u0000OO\u0099\u0099ÓÓğğ\u0003\u0000\u0099\u0099ÓÓğğ\u0002\u0000^^ƄƄ\u0002\u0000ķķƬƬ\u0002\u0000\u0087\u0087ûû\u0001\u0000Ƨƨ\u0002\u0000nnĪĪ8\u0000\t\u000b\r\u000f\u0011\u0011\u0013\u0015\u0017\u0019\u001b \"&(),02588:BDFIJOhjnppstv\u007f\u0082\u0082\u0084\u0087\u008a\u008c\u008f\u0092\u0095\u0096\u0098 ¢¥§ª¬®°°²³µ¸ºº¼¼¾ÝßàãåéêííïðòûýćĉĉċĖĘģĥĨĪıĳĶĸńņŋŎŔŗŗřţŧŬůźŽžƁƃ\u0010\u0000\u0011\u0011HHuu\u008e\u008e¦¦««´´¹¹½½ÞÞççėėĥĥīīŤŤŮŮ\u0011\u0000\t\u0010\u0012GItv\u008d\u008f¥§ª¬³µ¸º¼¾ÝßæèĖĘĤĦĪĬţťŭůƃᑵ\u0000Ǥ\u0001\u0000\u0000\u0000\u0002Ǧ\u0001\u0000\u0000\u0000\u0004ǵ\u0001\u0000\u0000\u0000\u0006Ȇ\u0001\u0000\u0000\u0000\bȗ\u0001\u0000\u0000\u0000\nȤ\u0001\u0000\u0000\u0000\fȦ\u0001\u0000\u0000\u0000\u000eȨ\u0001\u0000\u0000\u0000\u0010ȼ\u0001\u0000\u0000\u0000\u0012Ⱦ\u0001\u0000\u0000\u0000\u0014Ɇ\u0001\u0000\u0000\u0000\u0016ɑ\u0001\u0000\u0000\u0000\u0018ɜ\u0001\u0000\u0000\u0000\u001aɲ\u0001\u0000\u0000\u0000\u001cɽ\u0001\u0000\u0000\u0000\u001eʀ\u0001\u0000\u0000\u0000 ʦ\u0001\u0000\u0000\u0000\"ʩ\u0001\u0000\u0000\u0000$ʳ\u0001\u0000\u0000\u0000&˅\u0001\u0000\u0000\u0000(ˏ\u0001\u0000\u0000\u0000*˒\u0001\u0000\u0000\u0000,˔\u0001\u0000\u0000\u0000.˗\u0001\u0000\u0000\u00000˚\u0001\u0000\u0000\u00002˝\u0001\u0000\u0000\u00004ˠ\u0001\u0000\u0000\u00006ˣ\u0001\u0000\u0000\u00008˦\u0001\u0000\u0000\u0000:ؼ\u0001\u0000\u0000\u0000<ڎ\u0001\u0000\u0000\u0000>ڐ\u0001\u0000\u0000\u0000@ڡ\u0001\u0000\u0000\u0000Bڥ\u0001\u0000\u0000\u0000Dک\u0001\u0000\u0000\u0000Fگ\u0001\u0000\u0000\u0000Hڹ\u0001\u0000\u0000\u0000Jڻ\u0001\u0000\u0000\u0000Lڽ\u0001\u0000\u0000\u0000Nݧ\u0001\u0000\u0000\u0000Pݩ\u0001\u0000\u0000\u0000Rݻ\u0001\u0000\u0000\u0000Tށ\u0001\u0000\u0000\u0000Vއ\u0001\u0000\u0000\u0000Xޓ\u0001\u0000\u0000\u0000Zޠ\u0001\u0000\u0000\u0000\\ޣ\u0001\u0000\u0000\u0000^ެ\u0001\u0000\u0000\u0000`ޯ\u0001\u0000\u0000\u0000b\u07b3\u0001\u0000\u0000\u0000dࠍ\u0001\u0000\u0000\u0000fࠏ\u0001\u0000\u0000\u0000hࠓ\u0001\u0000\u0000\u0000jࠨ\u0001\u0000\u0000\u0000lࠪ\u0001\u0000\u0000\u0000nࠬ\u0001\u0000\u0000\u0000p\u082e\u0001\u0000\u0000\u0000r࠷\u0001\u0000\u0000\u0000t࠹\u0001\u0000\u0000\u0000vࡁ\u0001\u0000\u0000\u0000xࡍ\u0001\u0000\u0000\u0000zࡘ\u0001\u0000\u0000\u0000|\u086c\u0001\u0000\u0000\u0000~\u086f\u0001\u0000\u0000\u0000\u0080\u087a\u0001\u0000\u0000\u0000\u0082\u088a\u0001\u0000\u0000\u0000\u0084\u0890\u0001\u0000\u0000\u0000\u0086\u0892\u0001\u0000\u0000\u0000\u0088\u089d\u0001\u0000\u0000\u0000\u008aࢤ\u0001\u0000\u0000\u0000\u008cࢯ\u0001\u0000\u0000\u0000\u008eࣀ\u0001\u0000\u0000\u0000\u0090\u08c8\u0001\u0000\u0000\u0000\u0092\u08ca\u0001\u0000\u0000\u0000\u0094\u08d0\u0001\u0000\u0000\u0000\u0096ऐ\u0001\u0000\u0000\u0000\u0098घ\u0001\u0000\u0000\u0000\u009aड\u0001\u0000\u0000\u0000\u009cभ\u0001\u0000\u0000\u0000\u009eॡ\u0001\u0000\u0000\u0000 ।\u0001\u0000\u0000\u0000¢\u098d\u0001\u0000\u0000\u0000¤এ\u0001\u0000\u0000\u0000¦গ\u0001\u0000\u0000\u0000¨হ\u0001\u0000\u0000\u0000ª১\u0001\u0000\u0000\u0000¬ৼ\u0001\u0000\u0000\u0000®ਜ\u0001\u0000\u0000\u0000°ਨ\u0001\u0000\u0000\u0000²ਫ\u0001\u0000\u0000\u0000´\u0a34\u0001\u0000\u0000\u0000¶ੂ\u0001\u0000\u0000\u0000¸\u0a55\u0001\u0000\u0000\u0000º੩\u0001\u0000\u0000\u0000¼੯\u0001\u0000\u0000\u0000¾ੱ\u0001\u0000\u0000\u0000À੶\u0001\u0000\u0000\u0000Â\u0a7e\u0001\u0000\u0000\u0000Äં\u0001\u0000\u0000\u0000Æઅ\u0001\u0000\u0000\u0000Èઈ\u0001\u0000\u0000\u0000Êઢ\u0001\u0000\u0000\u0000Ìત\u0001\u0000\u0000\u0000Îે\u0001\u0000\u0000\u0000Ð૰\u0001\u0000\u0000\u0000Ò\u0af4\u0001\u0000\u0000\u0000Ôଏ\u0001\u0000\u0000\u0000Öଓ\u0001\u0000\u0000\u0000Øଢ\u0001\u0000\u0000\u0000Úତ\u0001\u0000\u0000\u0000Üୂ\u0001\u0000\u0000\u0000Þୄ\u0001\u0000\u0000\u0000àୋ\u0001\u0000\u0000\u0000â\u0b58\u0001\u0000\u0000\u0000äଢ଼\u0001\u0000\u0000\u0000æୟ\u0001\u0000\u0000\u0000è୮\u0001\u0000\u0000\u0000êஆ\u0001\u0000\u0000\u0000ìஓ\u0001\u0000\u0000\u0000îக\u0001\u0000\u0000\u0000ð\u0b97\u0001\u0000\u0000\u0000ò\u0b9b\u0001\u0000\u0000\u0000ôஞ\u0001\u0000\u0000\u0000ö\u0ba2\u0001\u0000\u0000\u0000øூ\u0001\u0000\u0000\u0000ú\u0bc5\u0001\u0000\u0000\u0000ü\u0bd1\u0001\u0000\u0000\u0000þ\u0be4\u0001\u0000\u0000\u0000Ā\u0bfe\u0001\u0000\u0000\u0000Ăఄ\u0001\u0000\u0000\u0000Ąఆ\u0001\u0000\u0000\u0000Ćప\u0001\u0000\u0000\u0000Ĉబ\u0001\u0000\u0000\u0000Ċర\u0001\u0000\u0000\u0000Čస\u0001\u0000\u0000\u0000Ďృ\u0001\u0000\u0000\u0000Đే\u0001\u0000\u0000\u0000Ē\u0c52\u0001\u0000\u0000\u0000Ĕ\u0c74\u0001\u0000\u0000\u0000Ė\u0c76\u0001\u0000\u0000\u0000Ę౹\u0001\u0000\u0000\u0000Ěಗ\u0001\u0000\u0000\u0000Ĝಳ\u0001\u0000\u0000\u0000Ğ\u0cce\u0001\u0000\u0000\u0000Ġ\u0cd4\u0001\u0000\u0000\u0000Ģ\u0cd8\u0001\u0000\u0000\u0000Ĥ\u0cda\u0001\u0000\u0000\u0000Ħ\u0cf0\u0001\u0000\u0000\u0000Ĩണ\u0001\u0000\u0000\u0000Īഥ\u0001\u0000\u0000\u0000Ĭഭ\u0001\u0000\u0000\u0000Įവ\u0001\u0000\u0000\u0000İഽ\u0001\u0000\u0000\u0000Ĳ\u0d45\u0001\u0000\u0000\u0000Ĵൌ\u0001\u0000\u0000\u0000Ķ\u0d50\u0001\u0000\u0000\u0000ĸ൚\u0001\u0000\u0000\u0000ĺൢ\u0001\u0000\u0000\u0000ļ൯\u0001\u0000\u0000\u0000ľൾ\u0001\u0000\u0000\u0000ŀං\u0001\u0000\u0000\u0000ł\u0d84\u0001\u0000\u0000\u0000ńආ\u0001\u0000\u0000\u0000ņඌ\u0001\u0000\u0000\u0000ňඎ\u0001\u0000\u0000\u0000Ŋජ\u0001\u0000\u0000\u0000Ōก\u0001\u0000\u0000\u0000Ŏฃ\u0001\u0000\u0000\u0000Őฉ\u0001\u0000\u0000\u0000Œว\u0001\u0000\u0000\u0000Ŕษ\u0001\u0000\u0000\u0000Ŗ༞\u0001\u0000\u0000\u0000Ř༹\u0001\u0000\u0000\u0000Śཊ\u0001\u0000\u0000\u0000Ŝཌ\u0001\u0000\u0000\u0000Şཎ\u0001\u0000\u0000\u0000Šཐ\u0001\u0000\u0000\u0000Ţདྷ\u0001\u0000\u0000\u0000Ťཔ\u0001\u0000\u0000\u0000Ŧཙ\u0001\u0000\u0000\u0000Ũའ\u0001\u0000\u0000\u0000Ūཤ\u0001\u0000\u0000\u0000Ŭཀྵ\u0001\u0000\u0000\u0000Ů\u0f6f\u0001\u0000\u0000\u0000Űྲྀ\u0001\u0000\u0000\u0000Ųླྀ\u0001\u0000\u0000\u0000Ŵཽ\u0001\u0000\u0000\u0000Ŷཿ\u0001\u0000\u0000\u0000Ÿྃ\u0001\u0000\u0000\u0000źྨ\u0001\u0000\u0000\u0000ż࿘\u0001\u0000\u0000\u0000ž࿚\u0001\u0000\u0000\u0000ƀ\u0fe2\u0001\u0000\u0000\u0000Ƃ\u0ff0\u0001\u0000\u0000\u0000Ƅ\u0ff2\u0001\u0000\u0000\u0000Ɔ\u0ff5\u0001\u0000\u0000\u0000ƈ\u0ff8\u0001\u0000\u0000\u0000Ɗက\u0001\u0000\u0000\u0000ƌည\u0001\u0000\u0000\u0000Ǝဒ\u0001\u0000\u0000\u0000Ɛဠ\u0001\u0000\u0000\u0000ƒဴ\u0001\u0000\u0000\u0000Ɣံ\u0001\u0000\u0000\u0000Ɩ၅\u0001\u0000\u0000\u0000Ƙ၏\u0001\u0000\u0000\u0000ƚၑ\u0001\u0000\u0000\u0000Ɯၙ\u0001\u0000\u0000\u0000ƞၯ\u0001\u0000\u0000\u0000Ơၲ\u0001\u0000\u0000\u0000Ƣၵ\u0001\u0000\u0000\u0000Ƥၼ\u0001\u0000\u0000\u0000Ʀႈ\u0001\u0000\u0000\u0000ƨ႓\u0001\u0000\u0000\u0000ƪႛ\u0001\u0000\u0000\u0000Ƭႝ\u0001\u0000\u0000\u0000ƮႢ\u0001\u0000\u0000\u0000ưႫ\u0001\u0000\u0000\u0000Ʋო\u0001\u0000\u0000\u0000ƴჯ\u0001\u0000\u0000\u0000ƶჸ\u0001\u0000\u0000\u0000Ƹჺ\u0001\u0000\u0000\u0000ƺᄌ\u0001\u0000\u0000\u0000Ƽᄎ\u0001\u0000\u0000\u0000ƾᄖ\u0001\u0000\u0000\u0000ǀᄠ\u0001\u0000\u0000\u0000ǂᄥ\u0001\u0000\u0000\u0000Ǆᄭ\u0001\u0000\u0000\u0000ǆᄲ\u0001\u0000\u0000\u0000ǈᄴ\u0001\u0000\u0000\u0000Ǌᅡ\u0001\u0000\u0000\u0000ǌᅣ\u0001\u0000\u0000\u0000ǎᅫ\u0001\u0000\u0000\u0000ǐᅻ\u0001\u0000\u0000\u0000ǒᆀ\u0001\u0000\u0000\u0000ǔᆄ\u0001\u0000\u0000\u0000ǖᆈ\u0001\u0000\u0000\u0000ǘᆱ\u0001\u0000\u0000\u0000ǚᆳ\u0001\u0000\u0000\u0000ǜᇎ\u0001\u0000\u0000\u0000Ǟᇐ\u0001\u0000\u0000\u0000Ǡᇒ\u0001\u0000\u0000\u0000Ǣǥ\u0003&\u0013\u0000ǣǥ\u0003\u0002\u0001\u0000ǤǢ\u0001\u0000\u0000\u0000Ǥǣ\u0001\u0000\u0000\u0000ǥ\u0001\u0001\u0000\u0000\u0000Ǧǩ\u0005\u001b\u0000\u0000ǧǨ\u0005á\u0000\u0000ǨǪ\u0005\u0019\u0000\u0000ǩǧ\u0001\u0000\u0000\u0000ǩǪ\u0001\u0000\u0000\u0000ǪǬ\u0001\u0000\u0000\u0000ǫǭ\u0003\u0006\u0003\u0000Ǭǫ\u0001\u0000\u0000\u0000Ǭǭ\u0001\u0000\u0000\u0000ǭǮ\u0001\u0000\u0000\u0000Ǯǰ\u0005q\u0000\u0000ǯǱ\u0005\u0001\u0000\u0000ǰǯ\u0001\u0000\u0000\u0000ǰǱ\u0001\u0000\u0000\u0000Ǳǲ\u0001\u0000\u0000\u0000ǲǳ\u0005\u0000\u0000\u0001ǳ\u0003\u0001\u0000\u0000\u0000ǴǶ\u0003(\u0014\u0000ǵǴ\u0001\u0000\u0000\u0000ǵǶ\u0001\u0000\u0000\u0000ǶǷ\u0001\u0000\u0000\u0000ǷǺ\u0005\u001b\u0000\u0000Ǹǹ\u0005á\u0000\u0000ǹǻ\u0005\u0019\u0000\u0000ǺǸ\u0001\u0000\u0000\u0000Ǻǻ\u0001\u0000\u0000\u0000ǻǽ\u0001\u0000\u0000\u0000ǼǾ\u0003\u0006\u0003\u0000ǽǼ\u0001\u0000\u0000\u0000ǽǾ\u0001\u0000\u0000\u0000Ǿǿ\u0001\u0000\u0000\u0000ǿȁ\u0005q\u0000\u0000ȀȂ\u0003*\u0015\u0000ȁȀ\u0001\u0000\u0000\u0000ȁȂ\u0001\u0000\u0000\u0000Ȃ\u0005\u0001\u0000\u0000\u0000ȃȄ\u0003\b\u0004\u0000Ȅȅ\u0005\u0001\u0000\u0000ȅȇ\u0001\u0000\u0000\u0000Ȇȃ\u0001\u0000\u0000\u0000ȇȈ\u0001\u0000\u0000\u0000ȈȆ\u0001\u0000\u0000\u0000Ȉȉ\u0001\u0000\u0000\u0000ȉ\u0007\u0001\u0000\u0000\u0000ȊȘ\u0003\u000e\u0007\u0000ȋȘ\u0003:\u001d\u0000ȌȘ\u0003\n\u0005\u0000ȍȘ\u0003\u0004\u0002\u0000ȎȘ\u0003\u0014\n\u0000ȏȘ\u0003\u0018\f\u0000ȐȘ\u0003 \u0010\u0000ȑȘ\u0003\u0016\u000b\u0000ȒȘ\u0003\u001a\r\u0000ȓȘ\u0003\u001c\u000e\u0000ȔȘ\u0003\u001e\u000f\u0000ȕȘ\u0003\"\u0011\u0000ȖȘ\u0003$\u0012\u0000ȗȊ\u0001\u0000\u0000\u0000ȗȋ\u0001\u0000\u0000\u0000ȗȌ\u0001\u0000\u0000\u0000ȗȍ\u0001\u0000\u0000\u0000ȗȎ\u0001\u0000\u0000\u0000ȗȏ\u0001\u0000\u0000\u0000ȗȐ\u0001\u0000\u0000\u0000ȗȑ\u0001\u0000\u0000\u0000ȗȒ\u0001\u0000\u0000\u0000ȗȓ\u0001\u0000\u0000\u0000ȗȔ\u0001\u0000\u0000\u0000ȗȕ\u0001\u0000\u0000\u0000ȗȖ\u0001\u0000\u0000\u0000Ș\t\u0001\u0000\u0000\u0000șȚ\u0005Ī\u0000\u0000Țȥ\u0003À`\u0000țȜ\u0005Ī\u0000\u0000Ȝȝ\u0005\u0002\u0000\u0000ȝȞ\u0003Ī\u0095\u0000Ȟȟ\u0005\u0003\u0000\u0000ȟȠ\u0005Ƅ\u0000\u0000Ƞȡ\u0005\u0002\u0000\u0000ȡȢ\u0003b1\u0000Ȣȣ\u0005\u0003\u0000\u0000ȣȥ\u0001\u0000\u0000\u0000Ȥș\u0001\u0000\u0000\u0000Ȥț\u0001\u0000\u0000\u0000ȥ\u000b\u0001\u0000\u0000\u0000Ȧȧ\u0003ǒé\u0000ȧ\r\u0001\u0000\u0000\u0000Ȩȩ\u0005]\u0000\u0000ȩȪ\u0003Ĭ\u0096\u0000Ȫȱ\u0005B\u0000\u0000ȫȬ\u0005\u0088\u0000\u0000ȬȮ\u0005Ĺ\u0000\u0000ȭȯ\u0005ů\u0000\u0000Ȯȭ\u0001\u0000\u0000\u0000Ȯȯ\u0001\u0000\u0000\u0000ȯȰ\u0001\u0000\u0000\u0000ȰȲ\u0003\f\u0006\u0000ȱȫ\u0001\u0000\u0000\u0000ȱȲ\u0001\u0000\u0000\u0000Ȳ\u000f\u0001\u0000\u0000\u0000ȳȵ\u0005Ĺ\u0000\u0000ȴȶ\u0005ů\u0000\u0000ȵȴ\u0001\u0000\u0000\u0000ȵȶ\u0001\u0000\u0000\u0000ȶȷ\u0001\u0000\u0000\u0000ȷȽ\u0003\f\u0006\u0000ȸȽ\u0005ĸ\u0000\u0000ȹȺ\u0005á\u0000\u0000ȺȽ\u0005\u008c\u0000\u0000ȻȽ\u0003Ĭ\u0096\u0000ȼȳ\u0001\u0000\u0000\u0000ȼȸ\u0001\u0000\u0000\u0000ȼȹ\u0001\u0000\u0000\u0000ȼȻ\u0001\u0000\u0000\u0000Ƚ\u0011\u0001\u0000\u0000\u0000ȾɃ\u0003\u0010\b\u0000ȿɀ\u0005\u0004\u0000\u0000ɀɂ\u0003\u0010\b\u0000Ɂȿ\u0001\u0000\u0000\u0000ɂɅ\u0001\u0000\u0000\u0000ɃɁ\u0001\u0000\u0000\u0000ɃɄ\u0001\u0000\u0000\u0000Ʉ\u0013\u0001\u0000\u0000\u0000ɅɃ\u0001\u0000\u0000\u0000Ɇɇ\u0005]\u0000\u0000ɇɈ\u0007\u0000\u0000\u0000Ɉɉ\u0005\u0096\u0000\u0000ɉɊ\u0005\u0088\u0000\u0000ɊɎ\u0003\u0012\t\u0000ɋɏ\u0003\u0004\u0002\u0000Ɍɏ\u0003:\u001d\u0000ɍɏ\u0003\n\u0005\u0000Ɏɋ\u0001\u0000\u0000\u0000ɎɌ\u0001\u0000\u0000\u0000Ɏɍ\u0001\u0000\u0000\u0000ɏ\u0015\u0001\u0000\u0000\u0000ɐɒ\u0003(\u0014\u0000ɑɐ\u0001\u0000\u0000\u0000ɑɒ\u0001\u0000\u0000\u0000ɒɓ\u0001\u0000\u0000\u0000ɓɔ\u0005Ž\u0000\u0000ɔɕ\u0003Ŋ¥\u0000ɕɖ\u0005l\u0000\u0000ɖɗ\u0003\u0006\u0003\u0000ɗɘ\u0005q\u0000\u0000ɘɚ\u0005Ž\u0000\u0000əɛ\u0003*\u0015\u0000ɚə\u0001\u0000\u0000\u0000ɚɛ\u0001\u0000\u0000\u0000ɛ\u0017\u0001\u0000\u0000\u0000ɜɝ\u0005\u009d\u0000\u0000ɝɞ\u0003Ŋ¥\u0000ɞɟ\u0005Ō\u0000\u0000ɟɧ\u0003\u0006\u0003\u0000ɠɡ\u0005p\u0000\u0000ɡɢ\u0003Ŋ¥\u0000ɢɣ\u0005Ō\u0000\u0000ɣɤ\u0003\u0006\u0003\u0000ɤɦ\u0001\u0000\u0000\u0000ɥɠ\u0001\u0000\u0000\u0000ɦɩ\u0001\u0000\u0000\u0000ɧɥ\u0001\u0000\u0000\u0000ɧɨ\u0001\u0000\u0000\u0000ɨɬ\u0001\u0000\u0000\u0000ɩɧ\u0001\u0000\u0000\u0000ɪɫ\u0005o\u0000\u0000ɫɭ\u0003\u0006\u0003\u0000ɬɪ\u0001\u0000\u0000\u0000ɬɭ\u0001\u0000\u0000\u0000ɭɮ\u0001\u0000\u0000\u0000ɮɯ\u0005q\u0000\u0000ɯɰ\u0005\u009d\u0000\u0000ɰ\u0019\u0001\u0000\u0000\u0000ɱɳ\u0003(\u0014\u0000ɲɱ\u0001\u0000\u0000\u0000ɲɳ\u0001\u0000\u0000\u0000ɳɴ\u0001\u0000\u0000\u0000ɴɵ\u0005Ď\u0000\u0000ɵɶ\u0003\u0006\u0003\u0000ɶɷ\u0005Ū\u0000\u0000ɷɸ\u0003Ŋ¥\u0000ɸɹ\u0005q\u0000\u0000ɹɻ\u0005Ď\u0000\u0000ɺɼ\u0003*\u0015\u0000ɻɺ\u0001\u0000\u0000\u0000ɻɼ\u0001\u0000\u0000\u0000ɼ\u001b\u0001\u0000\u0000\u0000ɽɾ\u0005¼\u0000\u0000ɾɿ\u0003Ĭ\u0096\u0000ɿ\u001d\u0001\u0000\u0000\u0000ʀʁ\u0005³\u0000\u0000ʁʂ\u0003Ĭ\u0096\u0000ʂ\u001f\u0001\u0000\u0000\u0000ʃʉ\u0005*\u0000\u0000ʄʅ\u0005Ż\u0000\u0000ʅʆ\u0003Ŋ¥\u0000ʆʇ\u0005Ō\u0000\u0000ʇʈ\u0003\u0006\u0003\u0000ʈʊ\u0001\u0000\u0000\u0000ʉʄ\u0001\u0000\u0000\u0000ʊʋ\u0001\u0000\u0000\u0000ʋʉ\u0001\u0000\u0000\u0000ʋʌ\u0001\u0000\u0000\u0000ʌʏ\u0001\u0000\u0000\u0000ʍʎ\u0005o\u0000\u0000ʎʐ\u0003\u0006\u0003\u0000ʏʍ\u0001\u0000\u0000\u0000ʏʐ\u0001\u0000\u0000\u0000ʐʑ\u0001\u0000\u0000\u0000ʑʒ\u0005q\u0000\u0000ʒʓ\u0005*\u0000\u0000ʓʧ\u0001\u0000\u0000\u0000ʔʕ\u0005*\u0000\u0000ʕʛ\u0003ł¡\u0000ʖʗ\u0005Ż\u0000\u0000ʗʘ\u0003ł¡\u0000ʘʙ\u0005Ō\u0000\u0000ʙʚ\u0003\u0006\u0003\u0000ʚʜ\u0001\u0000\u0000\u0000ʛʖ\u0001\u0000\u0000\u0000ʜʝ\u0001\u0000\u0000\u0000ʝʛ\u0001\u0000\u0000\u0000ʝʞ\u0001\u0000\u0000\u0000ʞʡ\u0001\u0000\u0000\u0000ʟʠ\u0005o\u0000\u0000ʠʢ\u0003\u0006\u0003\u0000ʡʟ\u0001\u0000\u0000\u0000ʡʢ\u0001\u0000\u0000\u0000ʢʣ\u0001\u0000\u0000\u0000ʣʤ\u0005q\u0000\u0000ʤʥ\u0005*\u0000\u0000ʥʧ\u0001\u0000\u0000\u0000ʦʃ\u0001\u0000\u0000\u0000ʦʔ\u0001\u0000\u0000\u0000ʧ!\u0001\u0000\u0000\u0000ʨʪ\u0003(\u0014\u0000ʩʨ\u0001\u0000\u0000\u0000ʩʪ\u0001\u0000\u0000\u0000ʪʫ\u0001\u0000\u0000\u0000ʫʬ\u0005Ê\u0000\u0000ʬʭ\u0003\u0006\u0003\u0000ʭʮ\u0005q\u0000\u0000ʮʰ\u0005Ê\u0000\u0000ʯʱ\u0003*\u0015\u0000ʰʯ\u0001\u0000\u0000\u0000ʰʱ\u0001\u0000\u0000\u0000ʱ#\u0001\u0000\u0000\u0000ʲʴ\u0003(\u0014\u0000ʳʲ\u0001\u0000\u0000\u0000ʳʴ\u0001\u0000\u0000\u0000ʴʵ\u0001\u0000\u0000\u0000ʵʹ\u0005\u0088\u0000\u0000ʶʷ\u0003Ĭ\u0096\u0000ʷʸ\u0005\u0016\u0000\u0000ʸʺ\u0001\u0000\u0000\u0000ʹʶ\u0001\u0000\u0000\u0000ʹʺ\u0001\u0000\u0000\u0000ʺʻ\u0001\u0000\u0000\u0000ʻʼ\u0003b1\u0000ʼʽ\u0005l\u0000\u0000ʽʾ\u0003\u0006\u0003\u0000ʾʿ\u0005q\u0000\u0000ʿˁ\u0005\u0088\u0000\u0000ˀ˂\u0003*\u0015\u0000ˁˀ\u0001\u0000\u0000\u0000ˁ˂\u0001\u0000\u0000\u0000˂%\u0001\u0000\u0000\u0000˃ˆ\u0003:\u001d\u0000˄ˆ\u0003<\u001e\u0000˅˃\u0001\u0000\u0000\u0000˅˄\u0001\u0000\u0000\u0000ˆˊ\u0001\u0000\u0000\u0000ˇˉ\u0005\u0001\u0000\u0000ˈˇ\u0001\u0000\u0000\u0000ˉˌ\u0001\u0000\u0000\u0000ˊˈ\u0001\u0000\u0000\u0000ˊˋ\u0001\u0000\u0000\u0000ˋˍ\u0001\u0000\u0000\u0000ˌˊ\u0001\u0000\u0000\u0000ˍˎ\u0005\u0000\u0000\u0001ˎ'\u0001\u0000\u0000\u0000ˏː\u0003Ĭ\u0096\u0000ːˑ\u0005ƚ\u0000\u0000ˑ)\u0001\u0000\u0000\u0000˒˓\u0003Ĭ\u0096\u0000˓+\u0001\u0000\u0000\u0000˔˕\u0003Ķ\u009b\u0000˕˖\u0005\u0000\u0000\u0001˖-\u0001\u0000\u0000\u0000˗˘\u0003Ĳ\u0099\u0000˘˙\u0005\u0000\u0000\u0001˙/\u0001\u0000\u0000\u0000˚˛\u0003Ĭ\u0096\u0000˛˜\u0005\u0000\u0000\u0001˜1\u0001\u0000\u0000\u0000˝˞\u0003Ĵ\u009a\u0000˞˟\u0005\u0000\u0000\u0001˟3\u0001\u0000\u0000\u0000ˠˡ\u0003ż¾\u0000ˡˢ\u0005\u0000\u0000\u0001ˢ5\u0001\u0000\u0000\u0000ˣˤ\u0003ƈÄ\u0000ˤ˥\u0005\u0000\u0000\u0001˥7\u0001\u0000\u0000\u0000˦˧\u0003ƌÆ\u0000˧˨\u0005\u0000\u0000\u0001˨9\u0001\u0000\u0000\u0000˩ؽ\u0003b1\u0000˪ؽ\u0003>\u001f\u0000˫˭\u0003v;\u0000ˬ˫\u0001\u0000\u0000\u0000ˬ˭\u0001\u0000\u0000\u0000˭ˮ\u0001\u0000\u0000\u0000ˮؽ\u0003\u0096K\u0000˯˰\u0005Ŭ\u0000\u0000˰ؽ\u0003\u0098L\u0000˱˲\u0005Ŭ\u0000\u0000˲˳\u0003l6\u0000˳˴\u0003\u0098L\u0000˴ؽ\u0001\u0000\u0000\u0000˵˶\u0005Ī\u0000\u0000˶˷\u0005,\u0000\u0000˷ؽ\u0003\u009aM\u0000˸˹\u0005G\u0000\u0000˹˾\u0003l6\u0000˺˻\u0005\u009d\u0000\u0000˻˼\u0003Ŏ§\u0000˼˽\u0005x\u0000\u0000˽˿\u0001\u0000\u0000\u0000˾˺\u0001\u0000\u0000\u0000˾˿\u0001\u0000\u0000\u0000˿̀\u0001\u0000\u0000\u0000̀̈\u0003\u0098L\u0000́̇\u0003^/\u0000̂̇\u0003Z-\u0000̃̄\u0005ſ\u0000\u0000̄̅\u0007\u0001\u0000\u0000̅̇\u0003~?\u0000̆́\u0001\u0000\u0000\u0000̆̂\u0001\u0000\u0000\u0000̆̃\u0001\u0000\u0000\u0000̇̊\u0001\u0000\u0000\u0000̈̆\u0001\u0000\u0000\u0000̈̉\u0001\u0000\u0000\u0000̉ؽ\u0001\u0000\u0000\u0000̊̈\u0001\u0000\u0000\u0000̋̌\u0005\r\u0000\u0000̌̍\u0003l6\u0000̍̎\u0003\u0098L\u0000̎̏\u0005Ī\u0000\u0000̏̐\u0007\u0001\u0000\u0000̐̑\u0003~?\u0000̑ؽ\u0001\u0000\u0000\u0000̒̓\u0005\r\u0000\u0000̓̔\u0003l6\u0000̔̕\u0003\u0098L\u0000̖̕\u0005ũ\u0000\u0000̖̗\u0007\u0001\u0000\u0000̗̘\u0003~?\u0000̘ؽ\u0001\u0000\u0000\u0000̙̚\u0005\r\u0000\u0000̛̚\u0003l6\u0000̛̜\u0003\u0098L\u0000̜̝\u0005Ī\u0000\u0000̝̞\u0003Z-\u0000̞ؽ\u0001\u0000\u0000\u0000̟̠\u0005n\u0000\u0000̠̣\u0003l6\u0000̡̢\u0005\u009d\u0000\u0000̢̤\u0005x\u0000\u0000̡̣\u0001\u0000\u0000\u0000̣̤\u0001\u0000\u0000\u0000̤̥\u0001\u0000\u0000\u0000̧̥\u0003\u0098L\u0000̨̦\u0007\u0002\u0000\u0000̧̦\u0001\u0000\u0000\u0000̧̨\u0001\u0000\u0000\u0000̨ؽ\u0001\u0000\u0000\u0000̩̪\u0005Į\u0000\u0000̪̭\u0003n7\u0000̫̬\u0007\u0003\u0000\u0000̬̮\u0003Ĭ\u0096\u0000̭̫\u0001\u0000\u0000\u0000̭̮\u0001\u0000\u0000\u0000̮̳\u0001\u0000\u0000\u0000̯̱\u0005¾\u0000\u0000̰̯\u0001\u0000\u0000\u0000̰̱\u0001\u0000\u0000\u0000̱̲\u0001\u0000\u0000\u0000̴̲\u0003ǒé\u0000̳̰\u0001\u0000\u0000\u0000̴̳\u0001\u0000\u0000\u0000̴ؽ\u0001\u0000\u0000\u0000̵̺\u0003P(\u0000̶̷\u0005\u0002\u0000\u0000̷̸\u0003ƌÆ\u0000̸̹\u0005\u0003\u0000\u0000̹̻\u0001\u0000\u0000\u0000̶̺\u0001\u0000\u0000\u0000̺̻\u0001\u0000\u0000\u0000̻̽\u0001\u0000\u0000\u0000̼̾\u0003z=\u0000̼̽\u0001\u0000\u0000\u0000̽̾\u0001\u0000\u0000\u0000̾̿\u0001\u0000\u0000\u0000̿̈́\u0003|>\u0000̀͂\u0005\u0016\u0000\u0000́̀\u0001\u0000\u0000\u0000́͂\u0001\u0000\u0000\u0000͂̓\u0001\u0000\u0000\u0000̓ͅ\u0003b1\u0000̈́́\u0001\u0000\u0000\u0000̈́ͅ\u0001\u0000\u0000\u0000ͅؽ\u0001\u0000\u0000\u0000͇͆\u0005G\u0000\u0000͇͌\u0005Ņ\u0000\u0000͈͉\u0005\u009d\u0000\u0000͉͊\u0003Ŏ§\u0000͊͋\u0005x\u0000\u0000͍͋\u0001\u0000\u0000\u0000͈͌\u0001\u0000\u0000\u0000͍͌\u0001\u0000\u0000\u0000͍͎\u0001\u0000\u0000\u0000͎͏\u0003Ĳ\u0099\u0000͏͐\u0005¾\u0000\u0000͙͐\u0003Ĳ\u0099\u0000͑͘\u0003z=\u0000͒͘\u0003Ĩ\u0094\u0000͓͘\u0003\u008eG\u0000͔͘\u0003Z-\u0000͕͖\u0005ŉ\u0000\u0000͖͘\u0003~?\u0000͗͑\u0001\u0000\u0000\u0000͗͒\u0001\u0000\u0000\u0000͓͗\u0001\u0000\u0000\u0000͔͗\u0001\u0000\u0000\u0000͕͗\u0001\u0000\u0000\u0000͛͘\u0001\u0000\u0000\u0000͙͗\u0001\u0000\u0000\u0000͙͚\u0001\u0000\u0000\u0000͚ؽ\u0001\u0000\u0000\u0000͙͛\u0001\u0000\u0000\u0000͜͡\u0003R)\u0000͝͞\u0005\u0002\u0000\u0000͟͞\u0003ƌÆ\u0000͟͠\u0005\u0003\u0000\u0000͢͠\u0001\u0000\u0000\u0000͡͝\u0001\u0000\u0000\u0000͢͡\u0001\u0000\u0000\u0000ͤ͢\u0001\u0000\u0000\u0000ͣͥ\u0003z=\u0000ͤͣ\u0001\u0000\u0000\u0000ͤͥ\u0001\u0000\u0000\u0000ͥͦ\u0001\u0000\u0000\u0000ͦͫ\u0003|>\u0000ͧͩ\u0005\u0016\u0000\u0000ͨͧ\u0001\u0000\u0000\u0000ͨͩ\u0001\u0000\u0000\u0000ͩͪ\u0001\u0000\u0000\u0000ͪͬ\u0003b1\u0000ͫͨ\u0001\u0000\u0000\u0000ͫͬ\u0001\u0000\u0000\u0000ͬؽ\u0001\u0000\u0000\u0000ͭͮ\u0005\u000f\u0000\u0000ͮͯ\u0005Ņ\u0000\u0000ͯͱ\u0003\u0098L\u0000ͰͲ\u0003h4\u0000ͱͰ\u0001\u0000\u0000\u0000ͱͲ\u0001\u0000\u0000\u0000Ͳͳ\u0001\u0000\u0000\u0000ͳʹ\u0005@\u0000\u0000ʹͼ\u0005Ļ\u0000\u0000͵ͽ\u0003ǂá\u0000Ͷͷ\u0005\u0088\u0000\u0000ͷ\u0378\u0005:\u0000\u0000\u0378ͽ\u0003Ċ\u0085\u0000\u0379ͺ\u0005\u0088\u0000\u0000ͺͻ\u0005\f\u0000\u0000ͻͽ\u0005:\u0000\u0000ͼ͵\u0001\u0000\u0000\u0000ͼͶ\u0001\u0000\u0000\u0000ͼ\u0379\u0001\u0000\u0000\u0000ͼͽ\u0001\u0000\u0000\u0000ͽؽ\u0001\u0000\u0000\u0000;Ϳ\u0005\u000f\u0000\u0000Ϳ\u0382\u0005ņ\u0000\u0000\u0380\u0381\u0007\u0003\u0000\u0000\u0381\u0383\u0003\u0098L\u0000\u0382\u0380\u0001\u0000\u0000\u0000\u0382\u0383\u0001\u0000\u0000\u0000\u0383΄\u0001\u0000\u0000\u0000΄΅\u0005@\u0000\u0000΅·\u0005Ļ\u0000\u0000ΆΈ\u0003ǂá\u0000·Ά\u0001\u0000\u0000\u0000·Έ\u0001\u0000\u0000\u0000Έؽ\u0001\u0000\u0000\u0000ΉΊ\u0005\r\u0000\u0000Ί\u038b\u0005Ņ\u0000\u0000\u038bΌ\u0003\u0098L\u0000Ό\u038d\u0005\t\u0000\u0000\u038dΎ\u0007\u0004\u0000\u0000ΎΏ\u0003ž¿\u0000Ώؽ\u0001\u0000\u0000\u0000ΐΑ\u0005\r\u0000\u0000ΑΒ\u0005Ņ\u0000\u0000ΒΓ\u0003\u0098L\u0000ΓΔ\u0005\t\u0000\u0000ΔΕ\u0007\u0004\u0000\u0000ΕΖ\u0005\u0002\u0000\u0000ΖΗ\u0003ž¿\u0000ΗΘ\u0005\u0003\u0000\u0000Θؽ\u0001\u0000\u0000\u0000ΙΚ\u0005\r\u0000\u0000ΚΛ\u0005Ņ\u0000\u0000ΛΜ\u0003\u0098L\u0000ΜΝ\u0005Č\u0000\u0000ΝΞ\u00059\u0000\u0000ΞΟ\u0003Ĭ\u0096\u0000ΟΠ\u0005ŕ\u0000\u0000ΠΡ\u0003ƾß\u0000Ρؽ\u0001\u0000\u0000\u0000\u03a2Σ\u0005\r\u0000\u0000ΣΤ\u0005Ņ\u0000\u0000ΤΥ\u0003\u0098L\u0000ΥΦ\u0005n\u0000\u0000ΦΩ\u0007\u0004\u0000\u0000ΧΨ\u0005\u009d\u0000\u0000ΨΪ\u0005x\u0000\u0000ΩΧ\u0001\u0000\u0000\u0000ΩΪ\u0001\u0000\u0000\u0000ΪΫ\u0001\u0000\u0000\u0000Ϋά\u0005\u0002\u0000\u0000άέ\u0003Ī\u0095\u0000έή\u0005\u0003\u0000\u0000ήؽ\u0001\u0000\u0000\u0000ίΰ\u0005\r\u0000\u0000ΰα\u0005Ņ\u0000\u0000αβ\u0003\u0098L\u0000βγ\u0005n\u0000\u0000γζ\u0007\u0004\u0000\u0000δε\u0005\u009d\u0000\u0000εη\u0005x\u0000\u0000ζδ\u0001\u0000\u0000\u0000ζη\u0001\u0000\u0000\u0000ηθ\u0001\u0000\u0000\u0000θι\u0003Ī\u0095\u0000ιؽ\u0001\u0000\u0000\u0000κλ\u0005\r\u0000\u0000λμ\u0007\u0005\u0000\u0000μν\u0003\u0098L\u0000νξ\u0005Č\u0000\u0000ξο\u0005ŕ\u0000\u0000οπ\u0003Ĭ\u0096\u0000πؽ\u0001\u0000\u0000\u0000ρς\u0005\r\u0000\u0000ςσ\u0007\u0005\u0000\u0000στ\u0003\u0098L\u0000τυ\u0005Ī\u0000\u0000υφ\u0005ŉ\u0000\u0000φχ\u0003~?\u0000χؽ\u0001\u0000\u0000\u0000ψω\u0005\r\u0000\u0000ωϊ\u0007\u0005\u0000\u0000ϊϋ\u0003\u0098L\u0000ϋό\u0005ũ\u0000\u0000όϏ\u0005ŉ\u0000\u0000ύώ\u0005\u009d\u0000\u0000ώϐ\u0005x\u0000\u0000Ϗύ\u0001\u0000\u0000\u0000Ϗϐ\u0001\u0000\u0000\u0000ϐϑ\u0001\u0000\u0000\u0000ϑϒ\u0003~?\u0000ϒؽ\u0001\u0000\u0000\u0000ϓϔ\u0005\r\u0000\u0000ϔϕ\u0005Ņ\u0000\u0000ϕϖ\u0003\u0098L\u0000ϖϘ\u0007\u0006\u0000\u0000ϗϙ\u00059\u0000\u0000Ϙϗ\u0001\u0000\u0000\u0000Ϙϙ\u0001\u0000\u0000\u0000ϙϚ\u0001\u0000\u0000\u0000Ϛϛ\u0003ǌæ\u0000ϛؽ\u0001\u0000\u0000\u0000Ϝϝ\u0005\r\u0000\u0000ϝϞ\u0005Ņ\u0000\u0000ϞϠ\u0003\u0098L\u0000ϟϡ\u0003h4\u0000Ϡϟ\u0001\u0000\u0000\u0000Ϡϡ\u0001\u0000\u0000\u0000ϡϢ\u0001\u0000\u0000\u0000ϢϤ\u0005.\u0000\u0000ϣϥ\u00059\u0000\u0000Ϥϣ\u0001\u0000\u0000\u0000Ϥϥ\u0001\u0000\u0000\u0000ϥϦ\u0001\u0000\u0000\u0000Ϧϧ\u0003Ĭ\u0096\u0000ϧϩ\u0003ƊÅ\u0000ϨϪ\u0003Ŵº\u0000ϩϨ\u0001\u0000\u0000\u0000ϩϪ\u0001\u0000\u0000\u0000Ϫؽ\u0001\u0000\u0000\u0000ϫϬ\u0005\r\u0000\u0000Ϭϭ\u0005Ņ\u0000\u0000ϭϯ\u0003\u0098L\u0000Ϯϰ\u0003h4\u0000ϯϮ\u0001\u0000\u0000\u0000ϯϰ\u0001\u0000\u0000\u0000ϰϱ\u0001\u0000\u0000\u0000ϱϲ\u0005Đ\u0000\u0000ϲϳ\u0005:\u0000\u0000ϳϴ\u0005\u0002\u0000\u0000ϴϵ\u0003ž¿\u0000ϵ϶\u0005\u0003\u0000\u0000϶ؽ\u0001\u0000\u0000\u0000Ϸϸ\u0005\r\u0000\u0000ϸϹ\u0005Ņ\u0000\u0000Ϲϻ\u0003\u0098L\u0000Ϻϼ\u0003h4\u0000ϻϺ\u0001\u0000\u0000\u0000ϻϼ\u0001\u0000\u0000\u0000ϼϽ\u0001\u0000\u0000\u0000ϽϾ\u0005Ī\u0000\u0000ϾϿ\u0005ħ\u0000\u0000ϿЃ\u0003ǒé\u0000ЀЁ\u0005ſ\u0000\u0000ЁЂ\u0005Ĩ\u0000\u0000ЂЄ\u0003~?\u0000ЃЀ\u0001\u0000\u0000\u0000ЃЄ\u0001\u0000\u0000\u0000Єؽ\u0001\u0000\u0000\u0000ЅІ\u0005\r\u0000\u0000ІЇ\u0005Ņ\u0000\u0000ЇЉ\u0003\u0098L\u0000ЈЊ\u0003h4\u0000ЉЈ\u0001\u0000\u0000\u0000ЉЊ\u0001\u0000\u0000\u0000ЊЋ\u0001\u0000\u0000\u0000ЋЌ\u0005Ī\u0000\u0000ЌЍ\u0005Ĩ\u0000\u0000ЍЎ\u0003~?\u0000Ўؽ\u0001\u0000\u0000\u0000ЏА\u0005\r\u0000\u0000АБ\u0007\u0005\u0000\u0000БВ\u0003\u0098L\u0000ВЗ\u0005\t\u0000\u0000ГД\u0005\u009d\u0000\u0000ДЕ\u0003Ŏ§\u0000ЕЖ\u0005x\u0000\u0000ЖИ\u0001\u0000\u0000\u0000ЗГ\u0001\u0000\u0000\u0000ЗИ\u0001\u0000\u0000\u0000ИК\u0001\u0000\u0000\u0000ЙЛ\u0003f3\u0000КЙ\u0001\u0000\u0000\u0000ЛМ\u0001\u0000\u0000\u0000МК\u0001\u0000\u0000\u0000МН\u0001\u0000\u0000\u0000Нؽ\u0001\u0000\u0000\u0000ОП\u0005\r\u0000\u0000ПР\u0005Ņ\u0000\u0000РС\u0003\u0098L\u0000СТ\u0003h4\u0000ТУ\u0005Č\u0000\u0000УФ\u0005ŕ\u0000\u0000ФХ\u0003h4\u0000Хؽ\u0001\u0000\u0000\u0000ЦЧ\u0005\r\u0000\u0000ЧШ\u0007\u0005\u0000\u0000ШЩ\u0003\u0098L\u0000ЩЬ\u0005n\u0000\u0000ЪЫ\u0005\u009d\u0000\u0000ЫЭ\u0005x\u0000\u0000ЬЪ\u0001\u0000\u0000\u0000ЬЭ\u0001\u0000\u0000\u0000ЭЮ\u0001\u0000\u0000\u0000Юг\u0003h4\u0000Яа\u0005\u0004\u0000\u0000ав\u0003h4\u0000бЯ\u0001\u0000\u0000\u0000ве\u0001\u0000\u0000\u0000гб\u0001\u0000\u0000\u0000гд\u0001\u0000\u0000\u0000дз\u0001\u0000\u0000\u0000ег\u0001\u0000\u0000\u0000жи\u0005ÿ\u0000\u0000зж\u0001\u0000\u0000\u0000зи\u0001\u0000\u0000\u0000иؽ\u0001\u0000\u0000\u0000йк\u0005\r\u0000\u0000кл\u0005Ņ\u0000\u0000лн\u0003\u0098L\u0000мо\u0003h4\u0000нм\u0001\u0000\u0000\u0000но\u0001\u0000\u0000\u0000оп\u0001\u0000\u0000\u0000пр\u0005Ī\u0000\u0000рс\u0003Z-\u0000сؽ\u0001\u0000\u0000\u0000ту\u0005\r\u0000\u0000уф\u0005Ņ\u0000\u0000фх\u0003\u0098L\u0000хц\u0005ć\u0000\u0000цч\u0005ö\u0000\u0000чؽ\u0001\u0000\u0000\u0000шщ\u0005\r\u0000\u0000щъ\u0005Ņ\u0000\u0000ъя\u0003\u0098L\u0000ыѐ\u0003T*\u0000ьэ\u00053\u0000\u0000эю\u0005$\u0000\u0000юѐ\u0005à\u0000\u0000яы\u0001\u0000\u0000\u0000яь\u0001\u0000\u0000\u0000ѐؽ\u0001\u0000\u0000\u0000ёђ\u0005\r\u0000\u0000ђѓ\u0005Ņ\u0000\u0000ѓє\u0003\u0098L\u0000єѕ\u0003Ŷ»\u0000ѕؽ\u0001\u0000\u0000\u0000ії\u0005n\u0000\u0000їњ\u0005Ņ\u0000\u0000јљ\u0005\u009d\u0000\u0000љћ\u0005x\u0000\u0000њј\u0001\u0000\u0000\u0000њћ\u0001\u0000\u0000\u0000ћќ\u0001\u0000\u0000\u0000ќў\u0003\u0098L\u0000ѝџ\u0005ÿ\u0000\u0000ўѝ\u0001\u0000\u0000\u0000ўџ\u0001\u0000\u0000\u0000џؽ\u0001\u0000\u0000\u0000Ѡѡ\u0005n\u0000\u0000ѡѤ\u0005Ŷ\u0000\u0000Ѣѣ\u0005\u009d\u0000\u0000ѣѥ\u0005x\u0000\u0000ѤѢ\u0001\u0000\u0000\u0000Ѥѥ\u0001\u0000\u0000\u0000ѥѦ\u0001\u0000\u0000\u0000Ѧؽ\u0003\u0098L\u0000ѧѪ\u0005G\u0000\u0000Ѩѩ\u0005ë\u0000\u0000ѩѫ\u0005Đ\u0000\u0000ѪѨ\u0001\u0000\u0000\u0000Ѫѫ\u0001\u0000\u0000\u0000ѫѰ\u0001\u0000\u0000\u0000ѬѮ\u0005\u0092\u0000\u0000ѭѬ\u0001\u0000\u0000\u0000ѭѮ\u0001\u0000\u0000\u0000Ѯѯ\u0001\u0000\u0000\u0000ѯѱ\u0005Ŋ\u0000\u0000Ѱѭ\u0001\u0000\u0000\u0000Ѱѱ\u0001\u0000\u0000\u0000ѱѲ\u0001\u0000\u0000\u0000Ѳѷ\u0005Ŷ\u0000\u0000ѳѴ\u0005\u009d\u0000\u0000Ѵѵ\u0003Ŏ§\u0000ѵѶ\u0005x\u0000\u0000ѶѸ\u0001\u0000\u0000\u0000ѷѳ\u0001\u0000\u0000\u0000ѷѸ\u0001\u0000\u0000\u0000Ѹѹ\u0001\u0000\u0000\u0000ѹѻ\u0003\u0098L\u0000ѺѼ\u0003Đ\u0088\u0000ѻѺ\u0001\u0000\u0000\u0000ѻѼ\u0001\u0000\u0000\u0000Ѽ҇\u0001\u0000\u0000\u0000ѽ҆\u0003^/\u0000Ѿ҆\u0003\\.\u0000ѿ҆\u0003Ŷ»\u0000Ҁҁ\u0005õ\u0000\u0000ҁ҂\u0005ç\u0000\u0000҂҆\u0003Ĉ\u0084\u0000҃҄\u0005ŉ\u0000\u0000҄҆\u0003~?\u0000҅ѽ\u0001\u0000\u0000\u0000҅Ѿ\u0001\u0000\u0000\u0000҅ѿ\u0001\u0000\u0000\u0000҅Ҁ\u0001\u0000\u0000\u0000҅҃\u0001\u0000\u0000\u0000҆҉\u0001\u0000\u0000\u0000҇҅\u0001\u0000\u0000\u0000҇҈\u0001\u0000\u0000\u0000҈Ҋ\u0001\u0000\u0000\u0000҉҇\u0001\u0000\u0000\u0000Ҋҋ\u0005\u0016\u0000\u0000ҋҌ\u0003b1\u0000Ҍؽ\u0001\u0000\u0000\u0000ҍҐ\u0005G\u0000\u0000Ҏҏ\u0005ë\u0000\u0000ҏґ\u0005Đ\u0000\u0000ҐҎ\u0001\u0000\u0000\u0000Ґґ\u0001\u0000\u0000\u0000ґғ\u0001\u0000\u0000\u0000ҒҔ\u0005\u0092\u0000\u0000ғҒ\u0001\u0000\u0000\u0000ғҔ\u0001\u0000\u0000\u0000Ҕҕ\u0001\u0000\u0000\u0000ҕҖ\u0005Ŋ\u0000\u0000Җҗ\u0005Ŷ\u0000\u0000җҜ\u0003Ĳ\u0099\u0000Ҙҙ\u0005\u0002\u0000\u0000ҙҚ\u0003ƈÄ\u0000Ққ\u0005\u0003\u0000\u0000қҝ\u0001\u0000\u0000\u0000ҜҘ\u0001\u0000\u0000\u0000Ҝҝ\u0001\u0000\u0000\u0000ҝҞ\u0001\u0000\u0000\u0000Ҟҡ\u0003z=\u0000ҟҠ\u0005ê\u0000\u0000ҠҢ\u0003~?\u0000ҡҟ\u0001\u0000\u0000\u0000ҡҢ\u0001\u0000\u0000\u0000Ңؽ\u0001\u0000\u0000\u0000ңҤ\u0005\r\u0000\u0000Ҥҥ\u0005Ŷ\u0000\u0000ҥҧ\u0003\u0098L\u0000ҦҨ\u0005\u0016\u0000\u0000ҧҦ\u0001\u0000\u0000\u0000ҧҨ\u0001\u0000\u0000\u0000Ҩҩ\u0001\u0000\u0000\u0000ҩҪ\u0003b1\u0000Ҫؽ\u0001\u0000\u0000\u0000ҫҬ\u0005\r\u0000\u0000Ҭҭ\u0005Ŷ\u0000\u0000ҭҮ\u0003\u0098L\u0000Үү\u0003\\.\u0000үؽ\u0001\u0000\u0000\u0000Ұҳ\u0005G\u0000\u0000ұҲ\u0005ë\u0000\u0000ҲҴ\u0005Đ\u0000\u0000ҳұ\u0001\u0000\u0000\u0000ҳҴ\u0001\u0000\u0000\u0000ҴҶ\u0001\u0000\u0000\u0000ҵҷ\u0005Ŋ\u0000\u0000Ҷҵ\u0001\u0000\u0000\u0000Ҷҷ\u0001\u0000\u0000\u0000ҷҸ\u0001\u0000\u0000\u0000Ҹҽ\u0005\u008f\u0000\u0000ҹҺ\u0005\u009d\u0000\u0000Һһ\u0003Ŏ§\u0000һҼ\u0005x\u0000\u0000ҼҾ\u0001\u0000\u0000\u0000ҽҹ\u0001\u0000\u0000\u0000ҽҾ\u0001\u0000\u0000\u0000Ҿҿ\u0001\u0000\u0000\u0000ҿӀ\u0003\u0098L\u0000ӀӁ\u0005\u0016\u0000\u0000ӁӋ\u0003ǒé\u0000ӂӃ\u0005Ů\u0000\u0000Ӄӈ\u0003\u0094J\u0000ӄӅ\u0005\u0004\u0000\u0000ӅӇ\u0003\u0094J\u0000ӆӄ\u0001\u0000\u0000\u0000Ӈӊ\u0001\u0000\u0000\u0000ӈӆ\u0001\u0000\u0000\u0000ӈӉ\u0001\u0000\u0000\u0000Ӊӌ\u0001\u0000\u0000\u0000ӊӈ\u0001\u0000\u0000\u0000Ӌӂ\u0001\u0000\u0000\u0000Ӌӌ\u0001\u0000\u0000\u0000ӌؽ\u0001\u0000\u0000\u0000ӍӐ\u0005G\u0000\u0000ӎӏ\u0005ë\u0000\u0000ӏӑ\u0005Đ\u0000\u0000Ӑӎ\u0001\u0000\u0000\u0000Ӑӑ\u0001\u0000\u0000\u0000ӑӓ\u0001\u0000\u0000\u0000ӒӔ\u0005Ŋ\u0000\u0000ӓӒ\u0001\u0000\u0000\u0000ӓӔ\u0001\u0000\u0000\u0000Ӕӕ\u0001\u0000\u0000\u0000ӕӚ\u0005\u008f\u0000\u0000Ӗӗ\u0005\u009d\u0000\u0000ӗӘ\u0003Ŏ§\u0000Әә\u0005x\u0000\u0000әӛ\u0001\u0000\u0000\u0000ӚӖ\u0001\u0000\u0000\u0000Ӛӛ\u0001\u0000\u0000\u0000ӛӜ\u0001\u0000\u0000\u0000Ӝӝ\u0003\u0098L\u0000ӝӟ\u0005\u0002\u0000\u0000ӞӠ\u0003ƌÆ\u0000ӟӞ\u0001\u0000\u0000\u0000ӟӠ\u0001\u0000\u0000\u0000Ӡӡ\u0001\u0000\u0000\u0000ӡӫ\u0005\u0003\u0000\u0000Ӣө\u0005ĕ\u0000\u0000ӣӪ\u0003ż¾\u0000Ӥӥ\u0005Ņ\u0000\u0000ӥӦ\u0005\u0002\u0000\u0000Ӧӧ\u0003ƈÄ\u0000ӧӨ\u0005\u0003\u0000\u0000ӨӪ\u0001\u0000\u0000\u0000өӣ\u0001\u0000\u0000\u0000өӤ\u0001\u0000\u0000\u0000ӪӬ\u0001\u0000\u0000\u0000ӫӢ\u0001\u0000\u0000\u0000ӫӬ\u0001\u0000\u0000\u0000Ӭӭ\u0001\u0000\u0000\u0000ӭӮ\u0003ƞÏ\u0000Ӯӱ\u0005Ĕ\u0000\u0000ӯӲ\u0003b1\u0000ӰӲ\u0003ł¡\u0000ӱӯ\u0001\u0000\u0000\u0000ӱӰ\u0001\u0000\u0000\u0000Ӳؽ\u0001\u0000\u0000\u0000ӳӵ\u0005n\u0000\u0000ӴӶ\u0005Ŋ\u0000\u0000ӵӴ\u0001\u0000\u0000\u0000ӵӶ\u0001\u0000\u0000\u0000Ӷӷ\u0001\u0000\u0000\u0000ӷӺ\u0005\u008f\u0000\u0000Ӹӹ\u0005\u009d\u0000\u0000ӹӻ\u0005x\u0000\u0000ӺӸ\u0001\u0000\u0000\u0000Ӻӻ\u0001\u0000\u0000\u0000ӻӼ\u0001\u0000\u0000\u0000Ӽؽ\u0003\u0098L\u0000ӽԀ\u0005]\u0000\u0000Ӿӿ\u0005ë\u0000\u0000ӿԁ\u0005Đ\u0000\u0000ԀӾ\u0001\u0000\u0000\u0000Ԁԁ\u0001\u0000\u0000\u0000ԁԃ\u0001\u0000\u0000\u0000ԂԄ\u0003p8\u0000ԃԂ\u0001\u0000\u0000\u0000ԃԄ\u0001\u0000\u0000\u0000Ԅԅ\u0001\u0000\u0000\u0000ԅԇ\u0003\u0098L\u0000ԆԈ\u0003ż¾\u0000ԇԆ\u0001\u0000\u0000\u0000ԇԈ\u0001\u0000\u0000\u0000ԈԊ\u0001\u0000\u0000\u0000ԉԋ\u0003ƆÃ\u0000Ԋԉ\u0001\u0000\u0000\u0000Ԋԋ\u0001\u0000\u0000\u0000ԋؽ\u0001\u0000\u0000\u0000Ԍԍ\u0005n\u0000\u0000ԍԎ\u0005Ŋ\u0000\u0000Ԏԑ\u0003p8\u0000ԏԐ\u0005\u009d\u0000\u0000ԐԒ\u0005x\u0000\u0000ԑԏ\u0001\u0000\u0000\u0000ԑԒ\u0001\u0000\u0000\u0000Ԓԓ\u0001\u0000\u0000\u0000ԓԔ\u0003\u0098L\u0000Ԕؽ\u0001\u0000\u0000\u0000ԕԗ\u0005z\u0000\u0000ԖԘ\u0007\u0007\u0000\u0000ԗԖ\u0001\u0000\u0000\u0000ԗԘ\u0001\u0000\u0000\u0000Ԙԛ\u0001\u0000\u0000\u0000ԙԜ\u0003:\u001d\u0000ԚԜ\u0003<\u001e\u0000ԛԙ\u0001\u0000\u0000\u0000ԛԚ\u0001\u0000\u0000\u0000Ԝؽ\u0001\u0000\u0000\u0000ԝԞ\u0005Į\u0000\u0000Ԟԡ\u0005ņ\u0000\u0000ԟԠ\u0007\u0003\u0000\u0000ԠԢ\u0003\u0098L\u0000ԡԟ\u0001\u0000\u0000\u0000ԡԢ\u0001\u0000\u0000\u0000Ԣԧ\u0001\u0000\u0000\u0000ԣԥ\u0005¾\u0000\u0000Ԥԣ\u0001\u0000\u0000\u0000Ԥԥ\u0001\u0000\u0000\u0000ԥԦ\u0001\u0000\u0000\u0000ԦԨ\u0003ǒé\u0000ԧԤ\u0001\u0000\u0000\u0000ԧԨ\u0001\u0000\u0000\u0000Ԩؽ\u0001\u0000\u0000\u0000ԩԪ\u0005Į\u0000\u0000Ԫԫ\u0005Ņ\u0000\u0000ԫԮ\u0005}\u0000\u0000Ԭԭ\u0007\u0003\u0000\u0000ԭԯ\u0003\u0098L\u0000ԮԬ\u0001\u0000\u0000\u0000Ԯԯ\u0001\u0000\u0000\u0000ԯ\u0530\u0001\u0000\u0000\u0000\u0530Ա\u0005¾\u0000\u0000ԱԳ\u0003ǒé\u0000ԲԴ\u0003h4\u0000ԳԲ\u0001\u0000\u0000\u0000ԳԴ\u0001\u0000\u0000\u0000Դؽ\u0001\u0000\u0000\u0000ԵԶ\u0005Į\u0000\u0000ԶԷ\u0005ŉ\u0000\u0000ԷԼ\u0003\u0098L\u0000ԸԹ\u0005\u0002\u0000\u0000ԹԺ\u0003\u0082A\u0000ԺԻ\u0005\u0003\u0000\u0000ԻԽ\u0001\u0000\u0000\u0000ԼԸ\u0001\u0000\u0000\u0000ԼԽ\u0001\u0000\u0000\u0000Խؽ\u0001\u0000\u0000\u0000ԾԿ\u0005Į\u0000\u0000ԿՀ\u0005:\u0000\u0000ՀՁ\u0007\u0003\u0000\u0000ՁՄ\u0003\u0098L\u0000ՂՃ\u0007\u0003\u0000\u0000ՃՅ\u0003Ĭ\u0096\u0000ՄՂ\u0001\u0000\u0000\u0000ՄՅ\u0001\u0000\u0000\u0000Յؽ\u0001\u0000\u0000\u0000ՆՇ\u0005Į\u0000\u0000ՇՊ\u0005ŷ\u0000\u0000ՈՉ\u0007\u0003\u0000\u0000ՉՋ\u0003\u0098L\u0000ՊՈ\u0001\u0000\u0000\u0000ՊՋ\u0001\u0000\u0000\u0000ՋՐ\u0001\u0000\u0000\u0000ՌՎ\u0005¾\u0000\u0000ՍՌ\u0001\u0000\u0000\u0000ՍՎ\u0001\u0000\u0000\u0000ՎՏ\u0001\u0000\u0000\u0000ՏՑ\u0003ǒé\u0000ՐՍ\u0001\u0000\u0000\u0000ՐՑ\u0001\u0000\u0000\u0000Ցؽ\u0001\u0000\u0000\u0000ՒՓ\u0005Į\u0000\u0000ՓՔ\u0005ö\u0000\u0000ՔՖ\u0003\u0098L\u0000Օ\u0557\u0003h4\u0000ՖՕ\u0001\u0000\u0000\u0000Ֆ\u0557\u0001\u0000\u0000\u0000\u0557ؽ\u0001\u0000\u0000\u0000\u0558՚\u0005Į\u0000\u0000ՙ՛\u0003ǂá\u0000՚ՙ\u0001\u0000\u0000\u0000՚՛\u0001\u0000\u0000\u0000՛՜\u0001\u0000\u0000\u0000՜՟\u0005\u0090\u0000\u0000՝՞\u0007\u0003\u0000\u0000՞ՠ\u0003\u0098L\u0000՟՝\u0001\u0000\u0000\u0000՟ՠ\u0001\u0000\u0000\u0000ՠը\u0001\u0000\u0000\u0000ագ\u0005¾\u0000\u0000բա\u0001\u0000\u0000\u0000բգ\u0001\u0000\u0000\u0000գզ\u0001\u0000\u0000\u0000դէ\u0003Ĭ\u0096\u0000եէ\u0003ǒé\u0000զդ\u0001\u0000\u0000\u0000զե\u0001\u0000\u0000\u0000էթ\u0001\u0000\u0000\u0000ըբ\u0001\u0000\u0000\u0000ըթ\u0001\u0000\u0000\u0000թؽ\u0001\u0000\u0000\u0000ժի\u0005Į\u0000\u0000իլ\u0005G\u0000\u0000լխ\u0005Ņ\u0000\u0000խհ\u0003\u0098L\u0000ծկ\u0005\u0016\u0000\u0000կձ\u0005ħ\u0000\u0000հծ\u0001\u0000\u0000\u0000հձ\u0001\u0000\u0000\u0000ձؽ\u0001\u0000\u0000\u0000ղճ\u0005Į\u0000\u0000ճմ\u0005J\u0000\u0000մؽ\u0003l6\u0000յն\u0005Į\u0000\u0000նջ\u0005-\u0000\u0000շչ\u0005¾\u0000\u0000ոշ\u0001\u0000\u0000\u0000ոչ\u0001\u0000\u0000\u0000չպ\u0001\u0000\u0000\u0000պռ\u0003ǒé\u0000ջո\u0001\u0000\u0000\u0000ջռ\u0001\u0000\u0000\u0000ռؽ\u0001\u0000\u0000\u0000սվ\u0007\b\u0000\u0000վր\u0005\u008f\u0000\u0000տց\u0005}\u0000\u0000րտ\u0001\u0000\u0000\u0000րց\u0001\u0000\u0000\u0000ցւ\u0001\u0000\u0000\u0000ւؽ\u0003r9\u0000փք\u0007\b\u0000\u0000քֆ\u0003l6\u0000օև\u0005}\u0000\u0000ֆօ\u0001\u0000\u0000\u0000ֆև\u0001\u0000\u0000\u0000ևֈ\u0001\u0000\u0000\u0000ֈ։\u0003\u0098L\u0000։ؽ\u0001\u0000\u0000\u0000֊\u058c\u0007\b\u0000\u0000\u058b֍\u0005Ņ\u0000\u0000\u058c\u058b\u0001\u0000\u0000\u0000\u058c֍\u0001\u0000\u0000\u0000֍֏\u0001\u0000\u0000\u0000֎\u0590\u0007\t\u0000\u0000֏֎\u0001\u0000\u0000\u0000֏\u0590\u0001\u0000\u0000\u0000\u0590֑\u0001\u0000\u0000\u0000֑֓\u0003\u0098L\u0000֒֔\u0003h4\u0000֓֒\u0001\u0000\u0000\u0000֓֔\u0001\u0000\u0000\u0000֖֔\u0001\u0000\u0000\u0000֕֗\u0003t:\u0000֖֕\u0001\u0000\u0000\u0000֖֗\u0001\u0000\u0000\u0000֚֗\u0001\u0000\u0000\u0000֘֙\u0005\u0016\u0000\u0000֛֙\u0005µ\u0000\u0000֚֘\u0001\u0000\u0000\u0000֛֚\u0001\u0000\u0000\u0000֛ؽ\u0001\u0000\u0000\u0000֜֞\u0007\b\u0000\u0000֝֟\u0005ā\u0000\u0000֞֝\u0001\u0000\u0000\u0000֞֟\u0001\u0000\u0000\u0000֟֠\u0001\u0000\u0000\u0000֠ؽ\u0003b1\u0000֢֡\u0005;\u0000\u0000֢֣\u0005ç\u0000\u0000֣֤\u0003l6\u0000֤֥\u0003\u0098L\u0000֥֦\u0005±\u0000\u0000֦֧\u0003ǔê\u0000֧ؽ\u0001\u0000\u0000\u0000֨֩\u0005;\u0000\u0000֪֩\u0005ç\u0000\u0000֪֫\u0005Ņ\u0000\u0000֫֬\u0003\u0098L\u0000֭֬\u0005±\u0000\u0000֭֮\u0003ǔê\u0000֮ؽ\u0001\u0000\u0000\u0000ְ֯\u0005ċ\u0000\u0000ְֱ\u0005Ņ\u0000\u0000ֱؽ\u0003\u0098L\u0000ֲֳ\u0005ċ\u0000\u0000ֳִ\u0005\u008f\u0000\u0000ִؽ\u0003\u0098L\u0000ֵֽ\u0005ċ\u0000\u0000ֶ־\u0003ǒé\u0000ַֹ\t\u0000\u0000\u0000ַָ\u0001\u0000\u0000\u0000ֹּ\u0001\u0000\u0000\u0000ֺֻ\u0001\u0000\u0000\u0000ָֺ\u0001\u0000\u0000\u0000ֻ־\u0001\u0000\u0000\u0000ֺּ\u0001\u0000\u0000\u0000ֶֽ\u0001\u0000\u0000\u0000ֺֽ\u0001\u0000\u0000\u0000־ؽ\u0001\u0000\u0000\u0000ֿׁ\u0005&\u0000\u0000׀ׂ\u0005º\u0000\u0000ׁ׀\u0001\u0000\u0000\u0000ׁׂ\u0001\u0000\u0000\u0000ׂ׃\u0001\u0000\u0000\u0000׃ׄ\u0005Ņ\u0000\u0000ׇׄ\u0003\u0098L\u0000ׅ׆\u0005ê\u0000\u0000׆\u05c8\u0003~?\u0000ׇׅ\u0001\u0000\u0000\u0000ׇ\u05c8\u0001\u0000\u0000\u0000\u05c8\u05cd\u0001\u0000\u0000\u0000\u05c9\u05cb\u0005\u0016\u0000\u0000\u05ca\u05c9\u0001\u0000\u0000\u0000\u05ca\u05cb\u0001\u0000\u0000\u0000\u05cb\u05cc\u0001\u0000\u0000\u0000\u05cc\u05ce\u0003b1\u0000\u05cd\u05ca\u0001\u0000\u0000\u0000\u05cd\u05ce\u0001\u0000\u0000\u0000\u05ceؽ\u0001\u0000\u0000\u0000\u05cfא\u0005ţ\u0000\u0000אד\u0005Ņ\u0000\u0000בג\u0005\u009d\u0000\u0000גה\u0005x\u0000\u0000דב\u0001\u0000\u0000\u0000דה\u0001\u0000\u0000\u0000הו\u0001\u0000\u0000\u0000וؽ\u0003\u0098L\u0000זח\u00052\u0000\u0000חؽ\u0005&\u0000\u0000טי\u0005Ã\u0000\u0000יכ\u0005R\u0000\u0000ךל\u0005Ä\u0000\u0000כך\u0001\u0000\u0000\u0000כל\u0001\u0000\u0000\u0000לם\u0001\u0000\u0000\u0000םמ\u0005§\u0000\u0000מנ\u0003ǒé\u0000ןס\u0005ó\u0000\u0000נן\u0001\u0000\u0000\u0000נס\u0001\u0000\u0000\u0000סע\u0001\u0000\u0000\u0000עף\u0005¯\u0000\u0000ףפ\u0005Ņ\u0000\u0000פצ\u0003\u0098L\u0000ץק\u0003h4\u0000צץ\u0001\u0000\u0000\u0000צק\u0001\u0000\u0000\u0000קؽ\u0001\u0000\u0000\u0000רש\u0005Ş\u0000\u0000שת\u0005Ņ\u0000\u0000ת\u05ec\u0003\u0098L\u0000\u05eb\u05ed\u0003h4\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001\u0000\u0000\u0000\u05edؽ\u0001\u0000\u0000\u0000\u05eeװ\u0005Ø\u0000\u0000ׯ\u05ee\u0001\u0000\u0000\u0000ׯװ\u0001\u0000\u0000\u0000װױ\u0001\u0000\u0000\u0000ױײ\u0005č\u0000\u0000ײ׳\u0005Ņ\u0000\u0000׳\u05f6\u0003\u0098L\u0000״\u05f5\u0007\n\u0000\u0000\u05f5\u05f7\u0005ö\u0000\u0000\u05f6״\u0001\u0000\u0000\u0000\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f7ؽ\u0001\u0000\u0000\u0000\u05f8\u05f9\u0007\u000b\u0000\u0000\u05f9\u05fd\u0003ǂá\u0000\u05fa\u05fc\t\u0000\u0000\u0000\u05fb\u05fa\u0001\u0000\u0000\u0000\u05fc\u05ff\u0001\u0000\u0000\u0000\u05fd\u05fe\u0001\u0000\u0000\u0000\u05fd\u05fb\u0001\u0000\u0000\u0000\u05feؽ\u0001\u0000\u0000\u0000\u05ff\u05fd\u0001\u0000\u0000\u0000\u0600\u0601\u0005G\u0000\u0000\u0601؆\u0005¤\u0000\u0000\u0602\u0603\u0005\u009d\u0000\u0000\u0603\u0604\u0003Ŏ§\u0000\u0604\u0605\u0005x\u0000\u0000\u0605؇\u0001\u0000\u0000\u0000؆\u0602\u0001\u0000\u0000\u0000؆؇\u0001\u0000\u0000\u0000؇؈\u0001\u0000\u0000\u0000؈؉\u0003ǂá\u0000؉؋\u0005ç\u0000\u0000؊،\u0005Ņ\u0000\u0000؋؊\u0001\u0000\u0000\u0000؋،\u0001\u0000\u0000\u0000،؍\u0001\u0000\u0000\u0000؍ؐ\u0003\u0098L\u0000؎؏\u0005Ů\u0000\u0000؏ؑ\u0003ǂá\u0000ؐ؎\u0001\u0000\u0000\u0000ؐؑ\u0001\u0000\u0000\u0000ؑؒ\u0001\u0000\u0000\u0000ؒؓ\u0005\u0002\u0000\u0000ؓؔ\u0003Į\u0097\u0000ؔؗ\u0005\u0003\u0000\u0000ؕؖ\u0005ê\u0000\u0000ؘؖ\u0003~?\u0000ؗؕ\u0001\u0000\u0000\u0000ؘؗ\u0001\u0000\u0000\u0000ؘؽ\u0001\u0000\u0000\u0000ؙؚ\u0005n\u0000\u0000ؚ\u061d\u0005¤\u0000\u0000؛\u061c\u0005\u009d\u0000\u0000\u061c؞\u0005x\u0000\u0000\u061d؛\u0001\u0000\u0000\u0000\u061d؞\u0001\u0000\u0000\u0000؞؟\u0001\u0000\u0000\u0000؟ؠ\u0003ǂá\u0000ؠآ\u0005ç\u0000\u0000ءأ\u0005Ņ\u0000\u0000آء\u0001\u0000\u0000\u0000آأ\u0001\u0000\u0000\u0000أؤ\u0001\u0000\u0000\u0000ؤإ\u0003\u0098L\u0000إؽ\u0001\u0000\u0000\u0000ئا\u0005'\u0000\u0000اب\u0003\u0098L\u0000بر\u0005\u0002\u0000\u0000ةخ\u0003ņ£\u0000تث\u0005\u0004\u0000\u0000ثح\u0003ņ£\u0000جت\u0001\u0000\u0000\u0000حذ\u0001\u0000\u0000\u0000خج\u0001\u0000\u0000\u0000خد\u0001\u0000\u0000\u0000دز\u0001\u0000\u0000\u0000ذخ\u0001\u0000\u0000\u0000رة\u0001\u0000\u0000\u0000رز\u0001\u0000\u0000\u0000زس\u0001\u0000\u0000\u0000سش\u0005\u0003\u0000\u0000شؽ\u0001\u0000\u0000\u0000صع\u0003N'\u0000ضظ\t\u0000\u0000\u0000طض\u0001\u0000\u0000\u0000ظػ\u0001\u0000\u0000\u0000عغ\u0001\u0000\u0000\u0000عط\u0001\u0000\u0000\u0000غؽ\u0001\u0000\u0000\u0000ػع\u0001\u0000\u0000\u0000ؼ˩\u0001\u0000\u0000\u0000ؼ˪\u0001\u0000\u0000\u0000ؼˬ\u0001\u0000\u0000\u0000ؼ˯\u0001\u0000\u0000\u0000ؼ˱\u0001\u0000\u0000\u0000ؼ˵\u0001\u0000\u0000\u0000ؼ˸\u0001\u0000\u0000\u0000ؼ̋\u0001\u0000\u0000\u0000ؼ̒\u0001\u0000\u0000\u0000ؼ̙\u0001\u0000\u0000\u0000ؼ̟\u0001\u0000\u0000\u0000ؼ̩\u0001\u0000\u0000\u0000ؼ̵\u0001\u0000\u0000\u0000ؼ͆\u0001\u0000\u0000\u0000ؼ͜\u0001\u0000\u0000\u0000ؼͭ\u0001\u0000\u0000\u0000ؼ;\u0001\u0000\u0000\u0000ؼΉ\u0001\u0000\u0000\u0000ؼΐ\u0001\u0000\u0000\u0000ؼΙ\u0001\u0000\u0000\u0000ؼ\u03a2\u0001\u0000\u0000\u0000ؼί\u0001\u0000\u0000\u0000ؼκ\u0001\u0000\u0000\u0000ؼρ\u0001\u0000\u0000\u0000ؼψ\u0001\u0000\u0000\u0000ؼϓ\u0001\u0000\u0000\u0000ؼϜ\u0001\u0000\u0000\u0000ؼϫ\u0001\u0000\u0000\u0000ؼϷ\u0001\u0000\u0000\u0000ؼЅ\u0001\u0000\u0000\u0000ؼЏ\u0001\u0000\u0000\u0000ؼО\u0001\u0000\u0000\u0000ؼЦ\u0001\u0000\u0000\u0000ؼй\u0001\u0000\u0000\u0000ؼт\u0001\u0000\u0000\u0000ؼш\u0001\u0000\u0000\u0000ؼё\u0001\u0000\u0000\u0000ؼі\u0001\u0000\u0000\u0000ؼѠ\u0001\u0000\u0000\u0000ؼѧ\u0001\u0000\u0000\u0000ؼҍ\u0001\u0000\u0000\u0000ؼң\u0001\u0000\u0000\u0000ؼҫ\u0001\u0000\u0000\u0000ؼҰ\u0001\u0000\u0000\u0000ؼӍ\u0001\u0000\u0000\u0000ؼӳ\u0001\u0000\u0000\u0000ؼӽ\u0001\u0000\u0000\u0000ؼԌ\u0001\u0000\u0000\u0000ؼԕ\u0001\u0000\u0000\u0000ؼԝ\u0001\u0000\u0000\u0000ؼԩ\u0001\u0000\u0000\u0000ؼԵ\u0001\u0000\u0000\u0000ؼԾ\u0001\u0000\u0000\u0000ؼՆ\u0001\u0000\u0000\u0000ؼՒ\u0001\u0000\u0000\u0000ؼ\u0558\u0001\u0000\u0000\u0000ؼժ\u0001\u0000\u0000\u0000ؼղ\u0001\u0000\u0000\u0000ؼյ\u0001\u0000\u0000\u0000ؼս\u0001\u0000\u0000\u0000ؼփ\u0001\u0000\u0000\u0000ؼ֊\u0001\u0000\u0000\u0000ؼ֜\u0001\u0000\u0000\u0000ؼ֡\u0001\u0000\u0000\u0000ؼ֨\u0001\u0000\u0000\u0000ؼ֯\u0001\u0000\u0000\u0000ؼֲ\u0001\u0000\u0000\u0000ؼֵ\u0001\u0000\u0000\u0000ؼֿ\u0001\u0000\u0000\u0000ؼ\u05cf\u0001\u0000\u0000\u0000ؼז\u0001\u0000\u0000\u0000ؼט\u0001\u0000\u0000\u0000ؼר\u0001\u0000\u0000\u0000ؼׯ\u0001\u0000\u0000\u0000ؼ\u05f8\u0001\u0000\u0000\u0000ؼ\u0600\u0001\u0000\u0000\u0000ؼؙ\u0001\u0000\u0000\u0000ؼئ\u0001\u0000\u0000\u0000ؼص\u0001\u0000\u0000\u0000ؽ;\u0001\u0000\u0000\u0000ؾؿ\u0005Ī\u0000\u0000ؿك\u0005ę\u0000\u0000ـق\t\u0000\u0000\u0000فـ\u0001\u0000\u0000\u0000قم\u0001\u0000\u0000\u0000كل\u0001\u0000\u0000\u0000كف\u0001\u0000\u0000\u0000لڏ\u0001\u0000\u0000\u0000مك\u0001\u0000\u0000\u0000نه\u0005Ī\u0000\u0000هو\u0005ō\u0000\u0000وى\u0005ƃ\u0000\u0000ىڏ\u0003Ť²\u0000يً\u0005Ī\u0000\u0000ًٌ\u0005ō\u0000\u0000ٌٍ\u0005ƃ\u0000\u0000ٍڏ\u0003H$\u0000َُ\u0005Ī\u0000\u0000ُِ\u0005ō\u0000\u0000ِٔ\u0005ƃ\u0000\u0000ّٓ\t\u0000\u0000\u0000ّْ\u0001\u0000\u0000\u0000ٖٓ\u0001\u0000\u0000\u0000ٕٔ\u0001\u0000\u0000\u0000ْٔ\u0001\u0000\u0000\u0000ٕڏ\u0001\u0000\u0000\u0000ٖٔ\u0001\u0000\u0000\u0000ٗ٘\u0005Ī\u0000\u0000٘ٙ\u0003p8\u0000ٙٚ\u0003À`\u0000ٚڏ\u0001\u0000\u0000\u0000ٜٛ\u0005Ī\u0000\u0000ٜٝ\u0003p8\u0000ٝٞ\u0005\u0002\u0000\u0000ٟٞ\u0003Ī\u0095\u0000ٟ٠\u0005\u0003\u0000\u0000٠١\u0005Ƅ\u0000\u0000١٢\u0005\u0002\u0000\u0000٢٣\u0003b1\u0000٣٤\u0005\u0003\u0000\u0000٤ڏ\u0001\u0000\u0000\u0000٥٦\u0005Ī\u0000\u0000٦٧\u0003J%\u0000٧٨\u0005Ƅ\u0000\u0000٨٩\u0003L&\u0000٩ڏ\u0001\u0000\u0000\u0000٪٫\u0005Ī\u0000\u0000٫ٳ\u0003J%\u0000٬ٰ\u0005Ƅ\u0000\u0000٭ٯ\t\u0000\u0000\u0000ٮ٭\u0001\u0000\u0000\u0000ٯٲ\u0001\u0000\u0000\u0000ٰٱ\u0001\u0000\u0000\u0000ٰٮ\u0001\u0000\u0000\u0000ٱٴ\u0001\u0000\u0000\u0000ٲٰ\u0001\u0000\u0000\u0000ٳ٬\u0001\u0000\u0000\u0000ٳٴ\u0001\u0000\u0000\u0000ٴڏ\u0001\u0000\u0000\u0000ٵٹ\u0005Ī\u0000\u0000ٶٸ\t\u0000\u0000\u0000ٷٶ\u0001\u0000\u0000\u0000ٸٻ\u0001\u0000\u0000\u0000ٹٺ\u0001\u0000\u0000\u0000ٹٷ\u0001\u0000\u0000\u0000ٺټ\u0001\u0000\u0000\u0000ٻٹ\u0001\u0000\u0000\u0000ټٽ\u0005Ƅ\u0000\u0000ٽڏ\u0003L&\u0000پڂ\u0005Ī\u0000\u0000ٿځ\t\u0000\u0000\u0000ڀٿ\u0001\u0000\u0000\u0000ځڄ\u0001\u0000\u0000\u0000ڂڃ\u0001\u0000\u0000\u0000ڂڀ\u0001\u0000\u0000\u0000ڃڏ\u0001\u0000\u0000\u0000ڄڂ\u0001\u0000\u0000\u0000څچ\u0005đ\u0000\u0000چڏ\u0003J%\u0000ڇڋ\u0005đ\u0000\u0000ڈڊ\t\u0000\u0000\u0000ډڈ\u0001\u0000\u0000\u0000ڊڍ\u0001\u0000\u0000\u0000ڋڌ\u0001\u0000\u0000\u0000ڋډ\u0001\u0000\u0000\u0000ڌڏ\u0001\u0000\u0000\u0000ڍڋ\u0001\u0000\u0000\u0000ڎؾ\u0001\u0000\u0000\u0000ڎن\u0001\u0000\u0000\u0000ڎي\u0001\u0000\u0000\u0000ڎَ\u0001\u0000\u0000\u0000ڎٗ\u0001\u0000\u0000\u0000ڎٛ\u0001\u0000\u0000\u0000ڎ٥\u0001\u0000\u0000\u0000ڎ٪\u0001\u0000\u0000\u0000ڎٵ\u0001\u0000\u0000\u0000ڎپ\u0001\u0000\u0000\u0000ڎڅ\u0001\u0000\u0000\u0000ڎڇ\u0001\u0000\u0000\u0000ڏ=\u0001\u0000\u0000\u0000ڐڑ\u0005Ŗ\u0000\u0000ڑڒ\u0005\u009f\u0000\u0000ڒڕ\u0003B!\u0000ړڔ\u0005¯\u0000\u0000ڔږ\u0003Ī\u0095\u0000ڕړ\u0001\u0000\u0000\u0000ڕږ\u0001\u0000\u0000\u0000ږژ\u0001\u0000\u0000\u0000ڗڙ\u0003@ \u0000ژڗ\u0001\u0000\u0000\u0000ژڙ\u0001\u0000\u0000\u0000ڙ?\u0001\u0000\u0000\u0000ښڛ\u0005Ů\u0000\u0000ڛڜ\u0005\u0002\u0000\u0000ڜڝ\u0003ĸ\u009c\u0000ڝڞ\u0005\u0003\u0000\u0000ڞڢ\u0001\u0000\u0000\u0000ڟڠ\u0005Ů\u0000\u0000ڠڢ\u0003ĸ\u009c\u0000ڡښ\u0001\u0000\u0000\u0000ڡڟ\u0001\u0000\u0000\u0000ڢA\u0001\u0000\u0000\u0000ڣڦ\u0003ǒé\u0000ڤڦ\u0003Ĭ\u0096\u0000ڥڣ\u0001\u0000\u0000\u0000ڥڤ\u0001\u0000\u0000\u0000ڦC\u0001\u0000\u0000\u0000ڧڪ\u0003Ś\u00ad\u0000ڨڪ\u0003Ĭ\u0096\u0000کڧ\u0001\u0000\u0000\u0000کڨ\u0001\u0000\u0000\u0000ڪڭ\u0001\u0000\u0000\u0000ګڬ\u0005\u0016\u0000\u0000ڬڮ\u0003ƾß\u0000ڭګ\u0001\u0000\u0000\u0000ڭڮ\u0001\u0000\u0000\u0000ڮE\u0001\u0000\u0000\u0000گڴ\u0003D\"\u0000ڰڱ\u0005\u0004\u0000\u0000ڱڳ\u0003D\"\u0000ڲڰ\u0001\u0000\u0000\u0000ڳڶ\u0001\u0000\u0000\u0000ڴڲ\u0001\u0000\u0000\u0000ڴڵ\u0001\u0000\u0000\u0000ڵG\u0001\u0000\u0000\u0000ڶڴ\u0001\u0000\u0000\u0000ڷں\u0003ǒé\u0000ڸں\u0005Ä\u0000\u0000ڹڷ\u0001\u0000\u0000\u0000ڹڸ\u0001\u0000\u0000\u0000ںI\u0001\u0000\u0000\u0000ڻڼ\u0003ǆã\u0000ڼK\u0001\u0000\u0000\u0000ڽھ\u0003ǈä\u0000ھM\u0001\u0000\u0000\u0000ڿۀ\u0005G\u0000\u0000ۀݨ\u0005ę\u0000\u0000ہۂ\u0005n\u0000\u0000ۂݨ\u0005ę\u0000\u0000ۃۅ\u0005\u0093\u0000\u0000ۄۆ\u0005ę\u0000\u0000ۅۄ\u0001\u0000\u0000\u0000ۅۆ\u0001\u0000\u0000\u0000ۆݨ\u0001\u0000\u0000\u0000ۇۉ\u0005Ė\u0000\u0000ۈۊ\u0005ę\u0000\u0000ۉۈ\u0001\u0000\u0000\u0000ۉۊ\u0001\u0000\u0000\u0000ۊݨ\u0001\u0000\u0000\u0000ۋی\u0005Į\u0000\u0000یݨ\u0005\u0093\u0000\u0000ۍێ\u0005Į\u0000\u0000ێې\u0005ę\u0000\u0000ۏۑ\u0005\u0093\u0000\u0000ېۏ\u0001\u0000\u0000\u0000ېۑ\u0001\u0000\u0000\u0000ۑݨ\u0001\u0000\u0000\u0000ےۓ\u0005Į\u0000\u0000ۓݨ\u0005ý\u0000\u0000۔ە\u0005Į\u0000\u0000ەݨ\u0005Ě\u0000\u0000ۖۗ\u0005Į\u0000\u0000ۗۘ\u0005J\u0000\u0000ۘݨ\u0005Ě\u0000\u0000ۙۚ\u0005{\u0000\u0000ۚݨ\u0005Ņ\u0000\u0000ۛۜ\u0005 \u0000\u0000ۜݨ\u0005Ņ\u0000\u0000\u06dd۞\u0005Į\u0000\u0000۞ݨ\u0005>\u0000\u0000۟۠\u0005Į\u0000\u0000۠ۡ\u0005G\u0000\u0000ۡݨ\u0005Ņ\u0000\u0000ۣۢ\u0005Į\u0000\u0000ۣݨ\u0005Ś\u0000\u0000ۤۥ\u0005Į\u0000\u0000ۥݨ\u0005¥\u0000\u0000ۦۧ\u0005Į\u0000\u0000ۧݨ\u0005Ç\u0000\u0000ۨ۩\u0005G\u0000\u0000۩ݨ\u0005¤\u0000\u0000۪۫\u0005n\u0000\u0000۫ݨ\u0005¤\u0000\u0000ۭ۬\u0005\r\u0000\u0000ۭݨ\u0005¤\u0000\u0000ۮۯ\u0005Æ\u0000\u0000ۯݨ\u0005Ņ\u0000\u0000۰۱\u0005Æ\u0000\u0000۱ݨ\u0005T\u0000\u0000۲۳\u0005ŧ\u0000\u0000۳ݨ\u0005Ņ\u0000\u0000۴۵\u0005ŧ\u0000\u0000۵ݨ\u0005T\u0000\u0000۶۷\u0005G\u0000\u0000۷۸\u0005Ŋ\u0000\u0000۸ݨ\u0005Ë\u0000\u0000۹ۺ\u0005n\u0000\u0000ۺۻ\u0005Ŋ\u0000\u0000ۻݨ\u0005Ë\u0000\u0000ۼ۽\u0005\r\u0000\u0000۽۾\u0005Ņ\u0000\u0000۾ۿ\u0003Ĳ\u0099\u0000ۿ܀\u0005á\u0000\u0000܀܁\u00054\u0000\u0000܁ݨ\u0001\u0000\u0000\u0000܂܃\u0005\r\u0000\u0000܃܄\u0005Ņ\u0000\u0000܄܅\u0003Ĳ\u0099\u0000܅܆\u00054\u0000\u0000܆܇\u0005$\u0000\u0000܇ݨ\u0001\u0000\u0000\u0000܈܉\u0005\r\u0000\u0000܉܊\u0005Ņ\u0000\u0000܊܋\u0003Ĳ\u0099\u0000܋܌\u0005á\u0000\u0000܌܍\u0005Ĵ\u0000\u0000܍ݨ\u0001\u0000\u0000\u0000\u070e\u070f\u0005\r\u0000\u0000", "\u070fܐ\u0005Ņ\u0000\u0000ܐܑ\u0003Ĳ\u0099\u0000ܑܒ\u0005İ\u0000\u0000ܒܓ\u0005$\u0000\u0000ܓݨ\u0001\u0000\u0000\u0000ܔܕ\u0005\r\u0000\u0000ܕܖ\u0005Ņ\u0000\u0000ܖܗ\u0003Ĳ\u0099\u0000ܗܘ\u0005á\u0000\u0000ܘܙ\u0005İ\u0000\u0000ܙݨ\u0001\u0000\u0000\u0000ܚܛ\u0005\r\u0000\u0000ܛܜ\u0005Ņ\u0000\u0000ܜܝ\u0003Ĳ\u0099\u0000ܝܞ\u0005á\u0000\u0000ܞܟ\u0005ļ\u0000\u0000ܟܠ\u0005\u0016\u0000\u0000ܠܡ\u0005g\u0000\u0000ܡݨ\u0001\u0000\u0000\u0000ܢܣ\u0005\r\u0000\u0000ܣܤ\u0005Ņ\u0000\u0000ܤܥ\u0003Ĳ\u0099\u0000ܥܦ\u0005Ī\u0000\u0000ܦܧ\u0005İ\u0000\u0000ܧܨ\u0005Å\u0000\u0000ܨݨ\u0001\u0000\u0000\u0000ܩܪ\u0005\r\u0000\u0000ܪܫ\u0005Ņ\u0000\u0000ܫܬ\u0003Ĳ\u0099\u0000ܬܭ\u0005v\u0000\u0000ܭܮ\u0005ô\u0000\u0000ܮݨ\u0001\u0000\u0000\u0000ܯܰ\u0005\r\u0000\u0000ܱܰ\u0005Ņ\u0000\u0000ܱܲ\u0003Ĳ\u0099\u0000ܲܳ\u0005\u0014\u0000\u0000ܴܳ\u0005ô\u0000\u0000ܴݨ\u0001\u0000\u0000\u0000ܵܶ\u0005\r\u0000\u0000ܷܶ\u0005Ņ\u0000\u0000ܷܸ\u0003Ĳ\u0099\u0000ܸܹ\u0005š\u0000\u0000ܹܺ\u0005ô\u0000\u0000ܺݨ\u0001\u0000\u0000\u0000ܻܼ\u0005\r\u0000\u0000ܼܽ\u0005Ņ\u0000\u0000ܾܽ\u0003Ĳ\u0099\u0000ܾܿ\u0005ŗ\u0000\u0000ܿݨ\u0001\u0000\u0000\u0000݀݁\u0005\r\u0000\u0000݂݁\u0005Ņ\u0000\u0000݂݄\u0003Ĳ\u0099\u0000݃݅\u0003h4\u0000݄݃\u0001\u0000\u0000\u0000݄݅\u0001\u0000\u0000\u0000݆݅\u0001\u0000\u0000\u0000݆݇\u0005=\u0000\u0000݇ݨ\u0001\u0000\u0000\u0000݈݉\u0005\r\u0000\u0000݉݊\u0005Ņ\u0000\u0000݊\u074c\u0003Ĳ\u0099\u0000\u074bݍ\u0003h4\u0000\u074c\u074b\u0001\u0000\u0000\u0000\u074cݍ\u0001\u0000\u0000\u0000ݍݎ\u0001\u0000\u0000\u0000ݎݏ\u0005A\u0000\u0000ݏݨ\u0001\u0000\u0000\u0000ݐݑ\u0005\r\u0000\u0000ݑݒ\u0005Ņ\u0000\u0000ݒݔ\u0003Ĳ\u0099\u0000ݓݕ\u0003h4\u0000ݔݓ\u0001\u0000\u0000\u0000ݔݕ\u0001\u0000\u0000\u0000ݕݖ\u0001\u0000\u0000\u0000ݖݗ\u0005Ī\u0000\u0000ݗݘ\u0005\u0084\u0000\u0000ݘݨ\u0001\u0000\u0000\u0000ݙݚ\u0005\r\u0000\u0000ݚݛ\u0005Ņ\u0000\u0000ݛݝ\u0003Ĳ\u0099\u0000ݜݞ\u0003h4\u0000ݝݜ\u0001\u0000\u0000\u0000ݝݞ\u0001\u0000\u0000\u0000ݞݟ\u0001\u0000\u0000\u0000ݟݠ\u0005Đ\u0000\u0000ݠݡ\u0005:\u0000\u0000ݡݨ\u0001\u0000\u0000\u0000ݢݣ\u0005ĺ\u0000\u0000ݣݨ\u0005ř\u0000\u0000ݤݨ\u0005<\u0000\u0000ݥݨ\u0005ě\u0000\u0000ݦݨ\u0005f\u0000\u0000ݧڿ\u0001\u0000\u0000\u0000ݧہ\u0001\u0000\u0000\u0000ݧۃ\u0001\u0000\u0000\u0000ݧۇ\u0001\u0000\u0000\u0000ݧۋ\u0001\u0000\u0000\u0000ݧۍ\u0001\u0000\u0000\u0000ݧے\u0001\u0000\u0000\u0000ݧ۔\u0001\u0000\u0000\u0000ݧۖ\u0001\u0000\u0000\u0000ݧۙ\u0001\u0000\u0000\u0000ݧۛ\u0001\u0000\u0000\u0000ݧ\u06dd\u0001\u0000\u0000\u0000ݧ۟\u0001\u0000\u0000\u0000ݧۢ\u0001\u0000\u0000\u0000ݧۤ\u0001\u0000\u0000\u0000ݧۦ\u0001\u0000\u0000\u0000ݧۨ\u0001\u0000\u0000\u0000ݧ۪\u0001\u0000\u0000\u0000ݧ۬\u0001\u0000\u0000\u0000ݧۮ\u0001\u0000\u0000\u0000ݧ۰\u0001\u0000\u0000\u0000ݧ۲\u0001\u0000\u0000\u0000ݧ۴\u0001\u0000\u0000\u0000ݧ۶\u0001\u0000\u0000\u0000ݧ۹\u0001\u0000\u0000\u0000ݧۼ\u0001\u0000\u0000\u0000ݧ܂\u0001\u0000\u0000\u0000ݧ܈\u0001\u0000\u0000\u0000ݧ\u070e\u0001\u0000\u0000\u0000ݧܔ\u0001\u0000\u0000\u0000ݧܚ\u0001\u0000\u0000\u0000ݧܢ\u0001\u0000\u0000\u0000ݧܩ\u0001\u0000\u0000\u0000ݧܯ\u0001\u0000\u0000\u0000ݧܵ\u0001\u0000\u0000\u0000ݧܻ\u0001\u0000\u0000\u0000ݧ݀\u0001\u0000\u0000\u0000ݧ݈\u0001\u0000\u0000\u0000ݧݐ\u0001\u0000\u0000\u0000ݧݙ\u0001\u0000\u0000\u0000ݧݢ\u0001\u0000\u0000\u0000ݧݤ\u0001\u0000\u0000\u0000ݧݥ\u0001\u0000\u0000\u0000ݧݦ\u0001\u0000\u0000\u0000ݨO\u0001\u0000\u0000\u0000ݩݫ\u0005G\u0000\u0000ݪݬ\u0005Ŋ\u0000\u0000ݫݪ\u0001\u0000\u0000\u0000ݫݬ\u0001\u0000\u0000\u0000ݬݮ\u0001\u0000\u0000\u0000ݭݯ\u0005~\u0000\u0000ݮݭ\u0001\u0000\u0000\u0000ݮݯ\u0001\u0000\u0000\u0000ݯݰ\u0001\u0000\u0000\u0000ݰݵ\u0005Ņ\u0000\u0000ݱݲ\u0005\u009d\u0000\u0000ݲݳ\u0003Ŏ§\u0000ݳݴ\u0005x\u0000\u0000ݴݶ\u0001\u0000\u0000\u0000ݵݱ\u0001\u0000\u0000\u0000ݵݶ\u0001\u0000\u0000\u0000ݶݷ\u0001\u0000\u0000\u0000ݷݸ\u0003\u0098L\u0000ݸQ\u0001\u0000\u0000\u0000ݹݺ\u0005G\u0000\u0000ݺݼ\u0005ë\u0000\u0000ݻݹ\u0001\u0000\u0000\u0000ݻݼ\u0001\u0000\u0000\u0000ݼݽ\u0001\u0000\u0000\u0000ݽݾ\u0005Đ\u0000\u0000ݾݿ\u0005Ņ\u0000\u0000ݿހ\u0003\u0098L\u0000ހS\u0001\u0000\u0000\u0000ށނ\u00053\u0000\u0000ނރ\u0005$\u0000\u0000ރބ\u0005\u0002\u0000\u0000ބޅ\u0003Ī\u0095\u0000ޅކ\u0005\u0003\u0000\u0000ކU\u0001\u0000\u0000\u0000އވ\u00054\u0000\u0000ވމ\u0005$\u0000\u0000މލ\u0003Ĉ\u0084\u0000ފދ\u0005Ĵ\u0000\u0000ދތ\u0005$\u0000\u0000ތގ\u0003Č\u0086\u0000ލފ\u0001\u0000\u0000\u0000ލގ\u0001\u0000\u0000\u0000ގޏ\u0001\u0000\u0000\u0000ޏސ\u0005¯\u0000\u0000ސޑ\u0005Ʀ\u0000\u0000ޑޒ\u0005#\u0000\u0000ޒW\u0001\u0000\u0000\u0000ޓޔ\u0005İ\u0000\u0000ޔޕ\u0005$\u0000\u0000ޕޖ\u0003Ĉ\u0084\u0000ޖޙ\u0005ç\u0000\u0000ޗޚ\u0003\u008aE\u0000ޘޚ\u0003\u008cF\u0000ޙޗ\u0001\u0000\u0000\u0000ޙޘ\u0001\u0000\u0000\u0000ޚޞ\u0001\u0000\u0000\u0000ޛޜ\u0005ļ\u0000\u0000ޜޝ\u0005\u0016\u0000\u0000ޝޟ\u0005g\u0000\u0000ޞޛ\u0001\u0000\u0000\u0000ޞޟ\u0001\u0000\u0000\u0000ޟY\u0001\u0000\u0000\u0000ޠޡ\u0005Å\u0000\u0000ޡޢ\u0003ǒé\u0000ޢ[\u0001\u0000\u0000\u0000ޣޤ\u0005ſ\u0000\u0000ޤު\u0005ġ\u0000\u0000ޥޫ\u0005\u001f\u0000\u0000ަޫ\u0005?\u0000\u0000ާޫ\u0005t\u0000\u0000ިީ\u0005Š\u0000\u0000ީޫ\u0005t\u0000\u0000ުޥ\u0001\u0000\u0000\u0000ުަ\u0001\u0000\u0000\u0000ުާ\u0001\u0000\u0000\u0000ުި\u0001\u0000\u0000\u0000ޫ]\u0001\u0000\u0000\u0000ެޭ\u0005;\u0000\u0000ޭޮ\u0003ǒé\u0000ޮ_\u0001\u0000\u0000\u0000ޯް\u0003b1\u0000ްޱ\u0005\u0000\u0000\u0001ޱa\u0001\u0000\u0000\u0000\u07b2\u07b4\u0003v;\u0000\u07b3\u07b2\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5\u07b6\u0003 P\u0000\u07b6\u07b7\u0003\u009cN\u0000\u07b7c\u0001\u0000\u0000\u0000\u07b8\u07b9\u0005ª\u0000\u0000\u07b9\u07bb\u0005ó\u0000\u0000\u07ba\u07bc\u0005Ņ\u0000\u0000\u07bb\u07ba\u0001\u0000\u0000\u0000\u07bb\u07bc\u0001\u0000\u0000\u0000\u07bc\u07bd\u0001\u0000\u0000\u0000\u07bd\u07bf\u0003\u0098L\u0000\u07be߀\u0003Ė\u008b\u0000\u07bf\u07be\u0001\u0000\u0000\u0000\u07bf߀\u0001\u0000\u0000\u0000߀߈\u0001\u0000\u0000\u0000߁߆\u0003h4\u0000߂߃\u0005\u009d\u0000\u0000߃߄\u0003Ŏ§\u0000߄߅\u0005x\u0000\u0000߅߇\u0001\u0000\u0000\u0000߆߂\u0001\u0000\u0000\u0000߆߇\u0001\u0000\u0000\u0000߇߉\u0001\u0000\u0000\u0000߈߁\u0001\u0000\u0000\u0000߈߉\u0001\u0000\u0000\u0000߉ߍ\u0001\u0000\u0000\u0000ߊߋ\u0005$\u0000\u0000ߋߎ\u0005Ù\u0000\u0000ߌߎ\u0003Ĉ\u0084\u0000ߍߊ\u0001\u0000\u0000\u0000ߍߌ\u0001\u0000\u0000\u0000ߍߎ\u0001\u0000\u0000\u0000ߎࠎ\u0001\u0000\u0000\u0000ߏߐ\u0005ª\u0000\u0000ߐߒ\u0005¯\u0000\u0000ߑߓ\u0005Ņ\u0000\u0000ߒߑ\u0001\u0000\u0000\u0000ߒߓ\u0001\u0000\u0000\u0000ߓߔ\u0001\u0000\u0000\u0000ߔߖ\u0003\u0098L\u0000ߕߗ\u0003Ė\u008b\u0000ߖߕ\u0001\u0000\u0000\u0000ߖߗ\u0001\u0000\u0000\u0000ߗߙ\u0001\u0000\u0000\u0000ߘߚ\u0003h4\u0000ߙߘ\u0001\u0000\u0000\u0000ߙߚ\u0001\u0000\u0000\u0000ߚߟ\u0001\u0000\u0000\u0000ߛߜ\u0005\u009d\u0000\u0000ߜߝ\u0003Ŏ§\u0000ߝߞ\u0005x\u0000\u0000ߞߠ\u0001\u0000\u0000\u0000ߟߛ\u0001\u0000\u0000\u0000ߟߠ\u0001\u0000\u0000\u0000ߠߤ\u0001\u0000\u0000\u0000ߡߢ\u0005$\u0000\u0000ߢߥ\u0005Ù\u0000\u0000ߣߥ\u0003Ĉ\u0084\u0000ߤߡ\u0001\u0000\u0000\u0000ߤߣ\u0001\u0000\u0000\u0000ߤߥ\u0001\u0000\u0000\u0000ߥࠎ\u0001\u0000\u0000\u0000ߦߧ\u0005ª\u0000\u0000ߧߩ\u0005¯\u0000\u0000ߨߪ\u0005Ņ\u0000\u0000ߩߨ\u0001\u0000\u0000\u0000ߩߪ\u0001\u0000\u0000\u0000ߪ߫\u0001\u0000\u0000\u0000߫߭\u0003\u0098L\u0000߬߮\u0003Ė\u008b\u0000߭߬\u0001\u0000\u0000\u0000߭߮\u0001\u0000\u0000\u0000߮߯\u0001\u0000\u0000\u0000߯߰\u0005Đ\u0000\u0000߰߱\u0003Äb\u0000߱ࠎ\u0001\u0000\u0000\u0000߲߳\u0005ª\u0000\u0000߳ߵ\u0005ó\u0000\u0000ߴ߶\u0005Ä\u0000\u0000ߵߴ\u0001\u0000\u0000\u0000ߵ߶\u0001\u0000\u0000\u0000߶߷\u0001\u0000\u0000\u0000߷߸\u0005h\u0000\u0000߸ߺ\u0003ǒé\u0000߹\u07fb\u0003Ĩ\u0094\u0000ߺ߹\u0001\u0000\u0000\u0000ߺ\u07fb\u0001\u0000\u0000\u0000\u07fb߽\u0001\u0000\u0000\u0000\u07fc߾\u0003\u008eG\u0000߽\u07fc\u0001\u0000\u0000\u0000߽߾\u0001\u0000\u0000\u0000߾ࠎ\u0001\u0000\u0000\u0000߿ࠀ\u0005ª\u0000\u0000ࠀࠂ\u0005ó\u0000\u0000ࠁࠃ\u0005Ä\u0000\u0000ࠂࠁ\u0001\u0000\u0000\u0000ࠂࠃ\u0001\u0000\u0000\u0000ࠃࠄ\u0001\u0000\u0000\u0000ࠄࠆ\u0005h\u0000\u0000ࠅࠇ\u0003ǒé\u0000ࠆࠅ\u0001\u0000\u0000\u0000ࠆࠇ\u0001\u0000\u0000\u0000ࠇࠈ\u0001\u0000\u0000\u0000ࠈࠋ\u0003z=\u0000ࠉࠊ\u0005ê\u0000\u0000ࠊࠌ\u0003~?\u0000ࠋࠉ\u0001\u0000\u0000\u0000ࠋࠌ\u0001\u0000\u0000\u0000ࠌࠎ\u0001\u0000\u0000\u0000ࠍ\u07b8\u0001\u0000\u0000\u0000ࠍߏ\u0001\u0000\u0000\u0000ࠍߦ\u0001\u0000\u0000\u0000ࠍ߲\u0001\u0000\u0000\u0000ࠍ߿\u0001\u0000\u0000\u0000ࠎe\u0001\u0000\u0000\u0000ࠏࠑ\u0003h4\u0000ࠐࠒ\u0003Z-\u0000ࠑࠐ\u0001\u0000\u0000\u0000ࠑࠒ\u0001\u0000\u0000\u0000ࠒg\u0001\u0000\u0000\u0000ࠓࠔ\u0005ô\u0000\u0000ࠔࠕ\u0005\u0002\u0000\u0000ࠕࠚ\u0003j5\u0000ࠖࠗ\u0005\u0004\u0000\u0000ࠗ࠙\u0003j5\u0000࠘ࠖ\u0001\u0000\u0000\u0000࠙ࠜ\u0001\u0000\u0000\u0000ࠚ࠘\u0001\u0000\u0000\u0000ࠚࠛ\u0001\u0000\u0000\u0000ࠛࠝ\u0001\u0000\u0000\u0000ࠜࠚ\u0001\u0000\u0000\u0000ࠝࠞ\u0005\u0003\u0000\u0000ࠞi\u0001\u0000\u0000\u0000ࠟࠢ\u0003ǂá\u0000ࠠࠡ\u0005Ƅ\u0000\u0000ࠡࠣ\u0003Ś\u00ad\u0000ࠢࠠ\u0001\u0000\u0000\u0000ࠢࠣ\u0001\u0000\u0000\u0000ࠣࠩ\u0001\u0000\u0000\u0000ࠤࠥ\u0003ǂá\u0000ࠥࠦ\u0005Ƅ\u0000\u0000ࠦࠧ\u0005^\u0000\u0000ࠧࠩ\u0001\u0000\u0000\u0000ࠨࠟ\u0001\u0000\u0000\u0000ࠨࠤ\u0001\u0000\u0000\u0000ࠩk\u0001\u0000\u0000\u0000ࠪࠫ\u0007\f\u0000\u0000ࠫm\u0001\u0000\u0000\u0000ࠬ࠭\u0007\r\u0000\u0000࠭o\u0001\u0000\u0000\u0000\u082e\u082f\u0007\u000e\u0000\u0000\u082fq\u0001\u0000\u0000\u0000࠰࠸\u0003\u0098L\u0000࠱࠸\u0003ǒé\u0000࠲࠸\u0003Ŝ®\u0000࠳࠸\u0003Ş¯\u0000࠴࠸\u0003Š°\u0000࠵࠸\u0003Œ©\u0000࠶࠸\u0005\b\u0000\u0000࠷࠰\u0001\u0000\u0000\u0000࠷࠱\u0001\u0000\u0000\u0000࠷࠲\u0001\u0000\u0000\u0000࠷࠳\u0001\u0000\u0000\u0000࠷࠴\u0001\u0000\u0000\u0000࠷࠵\u0001\u0000\u0000\u0000࠷࠶\u0001\u0000\u0000\u0000࠸s\u0001\u0000\u0000\u0000࠹࠾\u0003ƾß\u0000࠺࠻\u0005\u0005\u0000\u0000࠻࠽\u0003ƾß\u0000࠼࠺\u0001\u0000\u0000\u0000࠽ࡀ\u0001\u0000\u0000\u0000࠾࠼\u0001\u0000\u0000\u0000࠾\u083f\u0001\u0000\u0000\u0000\u083fu\u0001\u0000\u0000\u0000ࡀ࠾\u0001\u0000\u0000\u0000ࡁࡃ\u0005ſ\u0000\u0000ࡂࡄ\u0005Ĉ\u0000\u0000ࡃࡂ\u0001\u0000\u0000\u0000ࡃࡄ\u0001\u0000\u0000\u0000ࡄࡅ\u0001\u0000\u0000\u0000ࡅࡊ\u0003x<\u0000ࡆࡇ\u0005\u0004\u0000\u0000ࡇࡉ\u0003x<\u0000ࡈࡆ\u0001\u0000\u0000\u0000ࡉࡌ\u0001\u0000\u0000\u0000ࡊࡈ\u0001\u0000\u0000\u0000ࡊࡋ\u0001\u0000\u0000\u0000ࡋw\u0001\u0000\u0000\u0000ࡌࡊ\u0001\u0000\u0000\u0000ࡍࡏ\u0003ƾß\u0000ࡎࡐ\u0003Ĉ\u0084\u0000ࡏࡎ\u0001\u0000\u0000\u0000ࡏࡐ\u0001\u0000\u0000\u0000ࡐࡒ\u0001\u0000\u0000\u0000ࡑࡓ\u0005\u0016\u0000\u0000ࡒࡑ\u0001\u0000\u0000\u0000ࡒࡓ\u0001\u0000\u0000\u0000ࡓࡔ\u0001\u0000\u0000\u0000ࡔࡕ\u0005\u0002\u0000\u0000ࡕࡖ\u0003b1\u0000ࡖࡗ\u0005\u0003\u0000\u0000ࡗy\u0001\u0000\u0000\u0000ࡘ࡙\u0005Ů\u0000\u0000࡙࡚\u0003Ĭ\u0096\u0000࡚{\u0001\u0000\u0000\u0000࡛\u085c\u0005ê\u0000\u0000\u085c\u086b\u0003\u0086C\u0000\u085d࡞\u0005õ\u0000\u0000࡞\u085f\u0005$\u0000\u0000\u085f\u086b\u0003ĺ\u009d\u0000ࡠ\u086b\u0003X,\u0000ࡡ\u086b\u0003T*\u0000ࡢ\u086b\u0003V+\u0000ࡣ\u086b\u0003Ĩ\u0094\u0000ࡤ\u086b\u0003\u008eG\u0000ࡥ\u086b\u0003Z-\u0000ࡦ\u086b\u0003^/\u0000ࡧ\u086b\u0003Ŷ»\u0000ࡨࡩ\u0005ŉ\u0000\u0000ࡩ\u086b\u0003~?\u0000ࡪ࡛\u0001\u0000\u0000\u0000ࡪ\u085d\u0001\u0000\u0000\u0000ࡪࡠ\u0001\u0000\u0000\u0000ࡪࡡ\u0001\u0000\u0000\u0000ࡪࡢ\u0001\u0000\u0000\u0000ࡪࡣ\u0001\u0000\u0000\u0000ࡪࡤ\u0001\u0000\u0000\u0000ࡪࡥ\u0001\u0000\u0000\u0000ࡪࡦ\u0001\u0000\u0000\u0000ࡪࡧ\u0001\u0000\u0000\u0000ࡪࡨ\u0001\u0000\u0000\u0000\u086b\u086e\u0001\u0000\u0000\u0000\u086cࡪ\u0001\u0000\u0000\u0000\u086c\u086d\u0001\u0000\u0000\u0000\u086d}\u0001\u0000\u0000\u0000\u086e\u086c\u0001\u0000\u0000\u0000\u086f\u0870\u0005\u0002\u0000\u0000\u0870\u0875\u0003\u0080@\u0000\u0871\u0872\u0005\u0004\u0000\u0000\u0872\u0874\u0003\u0080@\u0000\u0873\u0871\u0001\u0000\u0000\u0000\u0874\u0877\u0001\u0000\u0000\u0000\u0875\u0873\u0001\u0000\u0000\u0000\u0875\u0876\u0001\u0000\u0000\u0000\u0876\u0878\u0001\u0000\u0000\u0000\u0877\u0875\u0001\u0000\u0000\u0000\u0878\u0879\u0005\u0003\u0000\u0000\u0879\u007f\u0001\u0000\u0000\u0000\u087a\u087f\u0003\u0082A\u0000\u087b\u087d\u0005Ƅ\u0000\u0000\u087c\u087b\u0001\u0000\u0000\u0000\u087c\u087d\u0001\u0000\u0000\u0000\u087d\u087e\u0001\u0000\u0000\u0000\u087e\u0880\u0003\u0084B\u0000\u087f\u087c\u0001\u0000\u0000\u0000\u087f\u0880\u0001\u0000\u0000\u0000\u0880\u0081\u0001\u0000\u0000\u0000\u0881\u0886\u0003ƾß\u0000\u0882\u0883\u0005\u0005\u0000\u0000\u0883\u0885\u0003ƾß\u0000\u0884\u0882\u0001\u0000\u0000\u0000\u0885\u0888\u0001\u0000\u0000\u0000\u0886\u0884\u0001\u0000\u0000\u0000\u0886\u0887\u0001\u0000\u0000\u0000\u0887\u088b\u0001\u0000\u0000\u0000\u0888\u0886\u0001\u0000\u0000\u0000\u0889\u088b\u0003ǒé\u0000\u088a\u0881\u0001\u0000\u0000\u0000\u088a\u0889\u0001\u0000\u0000\u0000\u088b\u0083\u0001\u0000\u0000\u0000\u088c\u0891\u0005Ʀ\u0000\u0000\u088d\u0891\u0005ƨ\u0000\u0000\u088e\u0891\u0003Ţ±\u0000\u088f\u0891\u0003ǒé\u0000\u0890\u088c\u0001\u0000\u0000\u0000\u0890\u088d\u0001\u0000\u0000\u0000\u0890\u088e\u0001\u0000\u0000\u0000\u0890\u088f\u0001\u0000\u0000\u0000\u0891\u0085\u0001\u0000\u0000\u0000\u0892\u0893\u0005\u0002\u0000\u0000\u0893\u0898\u0003\u0088D\u0000\u0894\u0895\u0005\u0004\u0000\u0000\u0895\u0897\u0003\u0088D\u0000\u0896\u0894\u0001\u0000\u0000\u0000\u0897\u089a\u0001\u0000\u0000\u0000\u0898\u0896\u0001\u0000\u0000\u0000\u0898\u0899\u0001\u0000\u0000\u0000\u0899\u089b\u0001\u0000\u0000\u0000\u089a\u0898\u0001\u0000\u0000\u0000\u089b\u089c\u0005\u0003\u0000\u0000\u089c\u0087\u0001\u0000\u0000\u0000\u089dࢢ\u0003\u0082A\u0000\u089eࢠ\u0005Ƅ\u0000\u0000\u089f\u089e\u0001\u0000\u0000\u0000\u089fࢠ\u0001\u0000\u0000\u0000ࢠࢡ\u0001\u0000\u0000\u0000ࢡࢣ\u0003ł¡\u0000ࢢ\u089f\u0001\u0000\u0000\u0000ࢢࢣ\u0001\u0000\u0000\u0000ࢣ\u0089\u0001\u0000\u0000\u0000ࢤࢥ\u0005\u0002\u0000\u0000ࢥࢪ\u0003Ś\u00ad\u0000ࢦࢧ\u0005\u0004\u0000\u0000ࢧࢩ\u0003Ś\u00ad\u0000ࢨࢦ\u0001\u0000\u0000\u0000ࢩࢬ\u0001\u0000\u0000\u0000ࢪࢨ\u0001\u0000\u0000\u0000ࢪࢫ\u0001\u0000\u0000\u0000ࢫࢭ\u0001\u0000\u0000\u0000ࢬࢪ\u0001\u0000\u0000\u0000ࢭࢮ\u0005\u0003\u0000\u0000ࢮ\u008b\u0001\u0000\u0000\u0000ࢯࢰ\u0005\u0002\u0000\u0000ࢰ\u08b5\u0003\u008aE\u0000ࢱࢲ\u0005\u0004\u0000\u0000ࢲࢴ\u0003\u008aE\u0000ࢳࢱ\u0001\u0000\u0000\u0000ࢴࢷ\u0001\u0000\u0000\u0000\u08b5ࢳ\u0001\u0000\u0000\u0000\u08b5ࢶ\u0001\u0000\u0000\u0000ࢶࢸ\u0001\u0000\u0000\u0000ࢷ\u08b5\u0001\u0000\u0000\u0000ࢸࢹ\u0005\u0003\u0000\u0000ࢹ\u008d\u0001\u0000\u0000\u0000ࢺࢻ\u0005ļ\u0000\u0000ࢻࢼ\u0005\u0016\u0000\u0000ࢼࣁ\u0003\u0090H\u0000ࢽࢾ\u0005ļ\u0000\u0000ࢾࢿ\u0005$\u0000\u0000ࢿࣁ\u0003\u0092I\u0000ࣀࢺ\u0001\u0000\u0000\u0000ࣀࢽ\u0001\u0000\u0000\u0000ࣁ\u008f\u0001\u0000\u0000\u0000ࣂࣃ\u0005©\u0000\u0000ࣃࣄ\u0003ǒé\u0000ࣄࣅ\u0005ï\u0000\u0000ࣅࣆ\u0003ǒé\u0000ࣆ\u08c9\u0001\u0000\u0000\u0000ࣇ\u08c9\u0003ǂá\u0000\u08c8ࣂ\u0001\u0000\u0000\u0000\u08c8ࣇ\u0001\u0000\u0000\u0000\u08c9\u0091\u0001\u0000\u0000\u0000\u08ca\u08ce\u0003ǒé\u0000\u08cb\u08cc\u0005ſ\u0000\u0000\u08cc\u08cd\u0005Ĩ\u0000\u0000\u08cd\u08cf\u0003~?\u0000\u08ce\u08cb\u0001\u0000\u0000\u0000\u08ce\u08cf\u0001\u0000\u0000\u0000\u08cf\u0093\u0001\u0000\u0000\u0000\u08d0\u08d1\u0003ǂá\u0000\u08d1\u08d2\u0003ǒé\u0000\u08d2\u0095\u0001\u0000\u0000\u0000࣓ࣔ\u0003d2\u0000ࣔࣕ\u0003b1\u0000ࣕऑ\u0001\u0000\u0000\u0000ࣖࣘ\u0003Ìf\u0000ࣗࣙ\u0003\u009eO\u0000ࣘࣗ\u0001\u0000\u0000\u0000ࣙࣚ\u0001\u0000\u0000\u0000ࣚࣘ\u0001\u0000\u0000\u0000ࣚࣛ\u0001\u0000\u0000\u0000ࣛऑ\u0001\u0000\u0000\u0000ࣜࣝ\u0005a\u0000\u0000ࣝࣞ\u0005\u008d\u0000\u0000ࣞࣟ\u0003\u0098L\u0000ࣟ࣡\u0003Ħ\u0093\u0000࣠\u08e2\u0003Äb\u0000࣡࣠\u0001\u0000\u0000\u0000࣡\u08e2\u0001\u0000\u0000\u0000\u08e2ऑ\u0001\u0000\u0000\u0000ࣣࣤ\u0005ū\u0000\u0000ࣤࣥ\u0003\u0098L\u0000ࣦࣥ\u0003Ħ\u0093\u0000ࣦࣨ\u0003°X\u0000ࣩࣧ\u0003Äb\u0000ࣨࣧ\u0001\u0000\u0000\u0000ࣩࣨ\u0001\u0000\u0000\u0000ࣩऑ\u0001\u0000\u0000\u0000࣮࣪\u0005Î\u0000\u0000࣫࣬\u0005ſ\u0000\u0000࣭࣬\u0005ġ\u0000\u0000࣭࣯\u0005t\u0000\u0000࣮࣫\u0001\u0000\u0000\u0000࣮࣯\u0001\u0000\u0000\u0000ࣰ࣯\u0001\u0000\u0000\u0000ࣰࣱ\u0005¯\u0000\u0000ࣱࣲ\u0003\u0098L\u0000ࣲࣳ\u0003Ħ\u0093\u0000ࣹࣳ\u0005Ů\u0000\u0000ࣺࣴ\u0003\u0098L\u0000ࣶࣵ\u0005\u0002\u0000\u0000ࣶࣷ\u0003b1\u0000ࣷࣸ\u0005\u0003\u0000\u0000ࣺࣸ\u0001\u0000\u0000\u0000ࣹࣴ\u0001\u0000\u0000\u0000ࣹࣵ\u0001\u0000\u0000\u0000ࣺࣻ\u0001\u0000\u0000\u0000ࣻࣼ\u0003Ħ\u0093\u0000ࣼࣽ\u0005ç\u0000\u0000ࣽँ\u0003Ŋ¥\u0000ࣾऀ\u0003²Y\u0000ࣿࣾ\u0001\u0000\u0000\u0000ऀः\u0001\u0000\u0000\u0000ँࣿ\u0001\u0000\u0000\u0000ँं\u0001\u0000\u0000\u0000ंइ\u0001\u0000\u0000\u0000ःँ\u0001\u0000\u0000\u0000ऄआ\u0003´Z\u0000अऄ\u0001\u0000\u0000\u0000आउ\u0001\u0000\u0000\u0000इअ\u0001\u0000\u0000\u0000इई\u0001\u0000\u0000\u0000ईऍ\u0001\u0000\u0000\u0000उइ\u0001\u0000\u0000\u0000ऊऌ\u0003¶[\u0000ऋऊ\u0001\u0000\u0000\u0000ऌए\u0001\u0000\u0000\u0000ऍऋ\u0001\u0000\u0000\u0000ऍऎ\u0001\u0000\u0000\u0000ऎऑ\u0001\u0000\u0000\u0000एऍ\u0001\u0000\u0000\u0000ऐ࣓\u0001\u0000\u0000\u0000ऐࣖ\u0001\u0000\u0000\u0000ऐࣜ\u0001\u0000\u0000\u0000ऐࣣ\u0001\u0000\u0000\u0000ऐ࣪\u0001\u0000\u0000\u0000ऑ\u0097\u0001\u0000\u0000\u0000ऒओ\u0005\u009b\u0000\u0000ओऔ\u0005\u0002\u0000\u0000औक\u0003ł¡\u0000कख\u0005\u0003\u0000\u0000खङ\u0001\u0000\u0000\u0000गङ\u0003Ĭ\u0096\u0000घऒ\u0001\u0000\u0000\u0000घग\u0001\u0000\u0000\u0000ङ\u0099\u0001\u0000\u0000\u0000चछ\u0005\u009b\u0000\u0000छज\u0005\u0002\u0000\u0000जझ\u0003ł¡\u0000झञ\u0005\u0003\u0000\u0000ञढ\u0001\u0000\u0000\u0000टढ\u0003ƾß\u0000ठढ\u0003ǒé\u0000डच\u0001\u0000\u0000\u0000डट\u0001\u0000\u0000\u0000डठ\u0001\u0000\u0000\u0000ढ\u009b\u0001\u0000\u0000\u0000णत\u0005ì\u0000\u0000तथ\u0005$\u0000\u0000थप\u0003¤R\u0000दध\u0005\u0004\u0000\u0000धऩ\u0003¤R\u0000नद\u0001\u0000\u0000\u0000ऩब\u0001\u0000\u0000\u0000पन\u0001\u0000\u0000\u0000पफ\u0001\u0000\u0000\u0000फम\u0001\u0000\u0000\u0000बप\u0001\u0000\u0000\u0000भण\u0001\u0000\u0000\u0000भम\u0001\u0000\u0000\u0000मह\u0001\u0000\u0000\u0000यर\u00053\u0000\u0000रऱ\u0005$\u0000\u0000ऱश\u0003ł¡\u0000लळ\u0005\u0004\u0000\u0000ळव\u0003ł¡\u0000ऴल\u0001\u0000\u0000\u0000वस\u0001\u0000\u0000\u0000शऴ\u0001\u0000\u0000\u0000शष\u0001\u0000\u0000\u0000षऺ\u0001\u0000\u0000\u0000सश\u0001\u0000\u0000\u0000हय\u0001\u0000\u0000\u0000हऺ\u0001\u0000\u0000\u0000ऺॅ\u0001\u0000\u0000\u0000ऻ़\u0005j\u0000\u0000़ऽ\u0005$\u0000\u0000ऽू\u0003ł¡\u0000ाि\u0005\u0004\u0000\u0000िु\u0003ł¡\u0000ीा\u0001\u0000\u0000\u0000ुॄ\u0001\u0000\u0000\u0000ूी\u0001\u0000\u0000\u0000ूृ\u0001\u0000\u0000\u0000ृॆ\u0001\u0000\u0000\u0000ॄू\u0001\u0000\u0000\u0000ॅऻ\u0001\u0000\u0000\u0000ॅॆ\u0001\u0000\u0000\u0000ॆ॑\u0001\u0000\u0000\u0000ेै\u0005ĳ\u0000\u0000ैॉ\u0005$\u0000\u0000ॉॎ\u0003¤R\u0000ॊो\u0005\u0004\u0000\u0000ो्\u0003¤R\u0000ौॊ\u0001\u0000\u0000\u0000्ॐ\u0001\u0000\u0000\u0000ॎौ\u0001\u0000\u0000\u0000ॎॏ\u0001\u0000\u0000\u0000ॏ॒\u0001\u0000\u0000\u0000ॐॎ\u0001\u0000\u0000\u0000॑े\u0001\u0000\u0000\u0000॒॑\u0001\u0000\u0000\u0000॒॔\u0001\u0000\u0000\u0000॓ॕ\u0003Ʈ×\u0000॔॓\u0001\u0000\u0000\u0000॔ॕ\u0001\u0000\u0000\u0000ॕज़\u0001\u0000\u0000\u0000ॖख़\u0005À\u0000\u0000ॗग़\u0005\f\u0000\u0000क़ग़\u0003ł¡\u0000ख़ॗ\u0001\u0000\u0000\u0000ख़क़\u0001\u0000\u0000\u0000ग़ड़\u0001\u0000\u0000\u0000ज़ॖ\u0001\u0000\u0000\u0000ज़ड़\u0001\u0000\u0000\u0000ड़य़\u0001\u0000\u0000\u0000ढ़फ़\u0005æ\u0000\u0000फ़ॠ\u0003ł¡\u0000य़ढ़\u0001\u0000\u0000\u0000य़ॠ\u0001\u0000\u0000\u0000ॠ\u009d\u0001\u0000\u0000\u0000ॡॢ\u0003d2\u0000ॢॣ\u0003¨T\u0000ॣ\u009f\u0001\u0000\u0000\u0000।॥\u0006P\uffff\uffff\u0000॥०\u0003¢Q\u0000०ঁ\u0001\u0000\u0000\u0000१२\n\u0004\u0000\u0000२३\u0004P\u0001\u0000३५\u0007\u000f\u0000\u0000४६\u0003ø|\u0000५४\u0001\u0000\u0000\u0000५६\u0001\u0000\u0000\u0000६७\u0001\u0000\u0000\u0000७ঀ\u0003 P\u0005८९\n\u0003\u0000\u0000९॰\u0004P\u0003\u0000॰ॲ\u0005«\u0000\u0000ॱॳ\u0003ø|\u0000ॲॱ\u0001\u0000\u0000\u0000ॲॳ\u0001\u0000\u0000\u0000ॳॴ\u0001\u0000\u0000\u0000ॴঀ\u0003 P\u0004ॵॶ\n\u0002\u0000\u0000ॶॷ\u0004P\u0005\u0000ॷॹ\u0007\u0010\u0000\u0000ॸॺ\u0003ø|\u0000ॹॸ\u0001\u0000\u0000\u0000ॹॺ\u0001\u0000\u0000\u0000ॺॻ\u0001\u0000\u0000\u0000ॻঀ\u0003 P\u0003ॼॽ\n\u0001\u0000\u0000ॽॾ\u0005Ƙ\u0000\u0000ॾঀ\u0003ǘì\u0000ॿ१\u0001\u0000\u0000\u0000ॿ८\u0001\u0000\u0000\u0000ॿॵ\u0001\u0000\u0000\u0000ॿॼ\u0001\u0000\u0000\u0000ঀঃ\u0001\u0000\u0000\u0000ঁॿ\u0001\u0000\u0000\u0000ঁং\u0001\u0000\u0000\u0000ং¡\u0001\u0000\u0000\u0000ঃঁ\u0001\u0000\u0000\u0000\u0984\u098e\u0003ªU\u0000অ\u098e\u0003¦S\u0000আই\u0005Ņ\u0000\u0000ই\u098e\u0003\u0098L\u0000ঈ\u098e\u0003Ę\u008c\u0000উঊ\u0005\u0002\u0000\u0000ঊঋ\u0003b1\u0000ঋঌ\u0005\u0003\u0000\u0000ঌ\u098e\u0001\u0000\u0000\u0000\u098d\u0984\u0001\u0000\u0000\u0000\u098dঅ\u0001\u0000\u0000\u0000\u098dআ\u0001\u0000\u0000\u0000\u098dঈ\u0001\u0000\u0000\u0000\u098dউ\u0001\u0000\u0000\u0000\u098e£\u0001\u0000\u0000\u0000এ\u0991\u0003ł¡\u0000ঐ\u0992\u0007\u0011\u0000\u0000\u0991ঐ\u0001\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992ক\u0001\u0000\u0000\u0000ওঔ\u0005ã\u0000\u0000ঔখ\u0007\u0012\u0000\u0000কও\u0001\u0000\u0000\u0000কখ\u0001\u0000\u0000\u0000খ¥\u0001\u0000\u0000\u0000গছ\u0003Ìf\u0000ঘচ\u0003¨T\u0000ঙঘ\u0001\u0000\u0000\u0000চঝ\u0001\u0000\u0000\u0000ছঙ\u0001\u0000\u0000\u0000ছজ\u0001\u0000\u0000\u0000জ§\u0001\u0000\u0000\u0000ঝছ\u0001\u0000\u0000\u0000ঞঠ\u0003¬V\u0000টড\u0003Äb\u0000ঠট\u0001\u0000\u0000\u0000ঠড\u0001\u0000\u0000\u0000ডঢ\u0001\u0000\u0000\u0000ঢণ\u0003\u009cN\u0000ণ\u09ba\u0001\u0000\u0000\u0000তন\u0003®W\u0000থধ\u0003ö{\u0000দথ\u0001\u0000\u0000\u0000ধপ\u0001\u0000\u0000\u0000নদ\u0001\u0000\u0000\u0000ন\u09a9\u0001\u0000\u0000\u0000\u09a9ব\u0001\u0000\u0000\u0000পন\u0001\u0000\u0000\u0000ফভ\u0003Äb\u0000বফ\u0001\u0000\u0000\u0000বভ\u0001\u0000\u0000\u0000ভয\u0001\u0000\u0000\u0000মর\u0003Ðh\u0000যম\u0001\u0000\u0000\u0000যর\u0001\u0000\u0000\u0000রল\u0001\u0000\u0000\u0000\u09b1\u09b3\u0003Æc\u0000ল\u09b1\u0001\u0000\u0000\u0000ল\u09b3\u0001\u0000\u0000\u0000\u09b3\u09b5\u0001\u0000\u0000\u0000\u09b4শ\u0003Ʈ×\u0000\u09b5\u09b4\u0001\u0000\u0000\u0000\u09b5শ\u0001\u0000\u0000\u0000শষ\u0001\u0000\u0000\u0000ষস\u0003\u009cN\u0000স\u09ba\u0001\u0000\u0000\u0000হঞ\u0001\u0000\u0000\u0000হত\u0001\u0000\u0000\u0000\u09ba©\u0001\u0000\u0000\u0000\u09bbঽ\u0003¬V\u0000়া\u0003Ìf\u0000ঽ়\u0001\u0000\u0000\u0000ঽা\u0001\u0000\u0000\u0000াূ\u0001\u0000\u0000\u0000িু\u0003ö{\u0000ীি\u0001\u0000\u0000\u0000ুৄ\u0001\u0000\u0000\u0000ূী\u0001\u0000\u0000\u0000ূৃ\u0001\u0000\u0000\u0000ৃ\u09c6\u0001\u0000\u0000\u0000ৄূ\u0001\u0000\u0000\u0000\u09c5ে\u0003Äb\u0000\u09c6\u09c5\u0001\u0000\u0000\u0000\u09c6ে\u0001\u0000\u0000\u0000ে\u09c9\u0001\u0000\u0000\u0000ৈ\u09ca\u0003Ðh\u0000\u09c9ৈ\u0001\u0000\u0000\u0000\u09c9\u09ca\u0001\u0000\u0000\u0000\u09caৌ\u0001\u0000\u0000\u0000ো্\u0003Æc\u0000ৌো\u0001\u0000\u0000\u0000ৌ্\u0001\u0000\u0000\u0000্\u09cf\u0001\u0000\u0000\u0000ৎ\u09d0\u0003Ʈ×\u0000\u09cfৎ\u0001\u0000\u0000\u0000\u09cf\u09d0\u0001\u0000\u0000\u0000\u09d0২\u0001\u0000\u0000\u0000\u09d1\u09d3\u0003®W\u0000\u09d2\u09d4\u0003Ìf\u0000\u09d3\u09d2\u0001\u0000\u0000\u0000\u09d3\u09d4\u0001\u0000\u0000\u0000\u09d4\u09d8\u0001\u0000\u0000\u0000\u09d5ৗ\u0003ö{\u0000\u09d6\u09d5\u0001\u0000\u0000\u0000ৗ\u09da\u0001\u0000\u0000\u0000\u09d8\u09d6\u0001\u0000\u0000\u0000\u09d8\u09d9\u0001\u0000\u0000\u0000\u09d9ড়\u0001\u0000\u0000\u0000\u09da\u09d8\u0001\u0000\u0000\u0000\u09dbঢ়\u0003Äb\u0000ড়\u09db\u0001\u0000\u0000\u0000ড়ঢ়\u0001\u0000\u0000\u0000ঢ়য়\u0001\u0000\u0000\u0000\u09deৠ\u0003Ðh\u0000য়\u09de\u0001\u0000\u0000\u0000য়ৠ\u0001\u0000\u0000\u0000ৠৢ\u0001\u0000\u0000\u0000ৡৣ\u0003Æc\u0000ৢৡ\u0001\u0000\u0000\u0000ৢৣ\u0001\u0000\u0000\u0000ৣ\u09e5\u0001\u0000\u0000\u0000\u09e4০\u0003Ʈ×\u0000\u09e5\u09e4\u0001\u0000\u0000\u0000\u09e5০\u0001\u0000\u0000\u0000০২\u0001\u0000\u0000\u0000১\u09bb\u0001\u0000\u0000\u0000১\u09d1\u0001\u0000\u0000\u0000২«\u0001\u0000\u0000\u0000৩৪\u0005Ĥ\u0000\u0000৪৫\u0005ś\u0000\u0000৫৭\u0005\u0002\u0000\u0000৬৮\u0003ø|\u0000৭৬\u0001\u0000\u0000\u0000৭৮\u0001\u0000\u0000\u0000৮৯\u0001\u0000\u0000\u0000৯ৰ\u0003ň¤\u0000ৰৱ\u0005\u0003\u0000\u0000ৱ৽\u0001\u0000\u0000\u0000৲৴\u0005Ì\u0000\u0000৳৵\u0003ø|\u0000৴৳\u0001\u0000\u0000\u0000৴৵\u0001\u0000\u0000\u0000৵৶\u0001\u0000\u0000\u0000৶৽\u0003ň¤\u0000৷৹\u0005ĉ\u0000\u0000৸৺\u0003ø|\u0000৹৸\u0001\u0000\u0000\u0000৹৺\u0001\u0000\u0000\u0000৺৻\u0001\u0000\u0000\u0000৻৽\u0003ň¤\u0000ৼ৩\u0001\u0000\u0000\u0000ৼ৲\u0001\u0000\u0000\u0000ৼ৷\u0001\u0000\u0000\u0000৽\u09ff\u0001\u0000\u0000\u0000৾\u0a00\u0003Ĩ\u0094\u0000\u09ff৾\u0001\u0000\u0000\u0000\u09ff\u0a00\u0001\u0000\u0000\u0000\u0a00ਃ\u0001\u0000\u0000\u0000ਁਂ\u0005Ć\u0000\u0000ਂ\u0a04\u0003ǒé\u0000ਃਁ\u0001\u0000\u0000\u0000ਃ\u0a04\u0001\u0000\u0000\u0000\u0a04ਅ\u0001\u0000\u0000\u0000ਅਆ\u0005Ů\u0000\u0000ਆਓ\u0003ǒé\u0000ਇ\u0a11\u0005\u0016\u0000\u0000ਈ\u0a12\u0003Ċ\u0085\u0000ਉ\u0a12\u0003ƈÄ\u0000ਊ\u0a0d\u0005\u0002\u0000\u0000\u0a0b\u0a0e\u0003Ċ\u0085\u0000\u0a0c\u0a0e\u0003ƈÄ\u0000\u0a0d\u0a0b\u0001\u0000\u0000\u0000\u0a0d\u0a0c\u0001\u0000\u0000\u0000\u0a0eਏ\u0001\u0000\u0000\u0000ਏਐ\u0005\u0003\u0000\u0000ਐ\u0a12\u0001\u0000\u0000\u0000\u0a11ਈ\u0001\u0000\u0000\u0000\u0a11ਉ\u0001\u0000\u0000\u0000\u0a11ਊ\u0001\u0000\u0000\u0000\u0a12ਔ\u0001\u0000\u0000\u0000ਓਇ\u0001\u0000\u0000\u0000ਓਔ\u0001\u0000\u0000\u0000ਔਖ\u0001\u0000\u0000\u0000ਕਗ\u0003Ĩ\u0094\u0000ਖਕ\u0001\u0000\u0000\u0000ਖਗ\u0001\u0000\u0000\u0000ਗਚ\u0001\u0000\u0000\u0000ਘਙ\u0005ą\u0000\u0000ਙਛ\u0003ǒé\u0000ਚਘ\u0001\u0000\u0000\u0000ਚਛ\u0001\u0000\u0000\u0000ਛ\u00ad\u0001\u0000\u0000\u0000ਜਠ\u0005Ĥ\u0000\u0000ਝਟ\u0003Èd\u0000ਞਝ\u0001\u0000\u0000\u0000ਟਢ\u0001\u0000\u0000\u0000ਠਞ\u0001\u0000\u0000\u0000ਠਡ\u0001\u0000\u0000\u0000ਡਤ\u0001\u0000\u0000\u0000ਢਠ\u0001\u0000\u0000\u0000ਣਥ\u0003ø|\u0000ਤਣ\u0001\u0000\u0000\u0000ਤਥ\u0001\u0000\u0000\u0000ਥਦ\u0001\u0000\u0000\u0000ਦਧ\u0003ĸ\u009c\u0000ਧ¯\u0001\u0000\u0000\u0000ਨ\u0a29\u0005Ī\u0000\u0000\u0a29ਪ\u0003À`\u0000ਪ±\u0001\u0000\u0000\u0000ਫਬ\u0005Ż\u0000\u0000ਬਯ\u0005Í\u0000\u0000ਭਮ\u0005\u0010\u0000\u0000ਮਰ\u0003Ŋ¥\u0000ਯਭ\u0001\u0000\u0000\u0000ਯਰ\u0001\u0000\u0000\u0000ਰ\u0a31\u0001\u0000\u0000\u0000\u0a31ਲ\u0005Ō\u0000\u0000ਲਲ਼\u0003¸\\\u0000ਲ਼³\u0001\u0000\u0000\u0000\u0a34ਵ\u0005Ż\u0000\u0000ਵਸ਼\u0003Ŏ§\u0000ਸ਼ਹ\u0005Í\u0000\u0000\u0a37ਸ\u0005$\u0000\u0000ਸ\u0a3a\u0005ň\u0000\u0000ਹ\u0a37\u0001\u0000\u0000\u0000ਹ\u0a3a\u0001\u0000\u0000\u0000\u0a3a\u0a3d\u0001\u0000\u0000\u0000\u0a3b਼\u0005\u0010\u0000\u0000਼ਾ\u0003Ŋ¥\u0000\u0a3d\u0a3b\u0001\u0000\u0000\u0000\u0a3dਾ\u0001\u0000\u0000\u0000ਾਿ\u0001\u0000\u0000\u0000ਿੀ\u0005Ō\u0000\u0000ੀੁ\u0003º]\u0000ੁµ\u0001\u0000\u0000\u0000ੂ\u0a43\u0005Ż\u0000\u0000\u0a43\u0a44\u0003Ŏ§\u0000\u0a44\u0a45\u0005Í\u0000\u0000\u0a45\u0a46\u0005$\u0000\u0000\u0a46\u0a49\u0005ĵ\u0000\u0000ੇੈ\u0005\u0010\u0000\u0000ੈ\u0a4a\u0003Ŋ¥\u0000\u0a49ੇ\u0001\u0000\u0000\u0000\u0a49\u0a4a\u0001\u0000\u0000\u0000\u0a4aੋ\u0001\u0000\u0000\u0000ੋੌ\u0005Ō\u0000\u0000ੌ੍\u0003¼^\u0000੍·\u0001\u0000\u0000\u0000\u0a4e\u0a56\u0005a\u0000\u0000\u0a4f\u0a50\u0005ū\u0000\u0000\u0a50ੑ\u0005Ī\u0000\u0000ੑ\u0a56\u0005Ƒ\u0000\u0000\u0a52\u0a53\u0005ū\u0000\u0000\u0a53\u0a54\u0005Ī\u0000\u0000\u0a54\u0a56\u0003À`\u0000\u0a55\u0a4e\u0001\u0000\u0000\u0000\u0a55\u0a4f\u0001\u0000\u0000\u0000\u0a55\u0a52\u0001\u0000\u0000\u0000\u0a56¹\u0001\u0000\u0000\u0000\u0a57\u0a58\u0005ª\u0000\u0000\u0a58੪\u0005Ƒ\u0000\u0000ਖ਼ਗ਼\u0005ª\u0000\u0000ਗ਼ਜ਼\u0005\u0002\u0000\u0000ਜ਼ੜ\u0003Ī\u0095\u0000ੜ\u0a5d\u0005\u0003\u0000\u0000\u0a5dਫ਼\u0005Ű\u0000\u0000ਫ਼\u0a5f\u0005\u0002\u0000\u0000\u0a5f\u0a64\u0003ł¡\u0000\u0a60\u0a61\u0005\u0004\u0000\u0000\u0a61\u0a63\u0003ł¡\u0000\u0a62\u0a60\u0001\u0000\u0000\u0000\u0a63੦\u0001\u0000\u0000\u0000\u0a64\u0a62\u0001\u0000\u0000\u0000\u0a64\u0a65\u0001\u0000\u0000\u0000\u0a65੧\u0001\u0000\u0000\u0000੦\u0a64\u0001\u0000\u0000\u0000੧੨\u0005\u0003\u0000\u0000੨੪\u0001\u0000\u0000\u0000੩\u0a57\u0001\u0000\u0000\u0000੩ਖ਼\u0001\u0000\u0000\u0000੪»\u0001\u0000\u0000\u0000੫ੰ\u0005a\u0000\u0000੬੭\u0005ū\u0000\u0000੭੮\u0005Ī\u0000\u0000੮ੰ\u0003À`\u0000੯੫\u0001\u0000\u0000\u0000੯੬\u0001\u0000\u0000\u0000ੰ½\u0001\u0000\u0000\u0000ੱੲ\u0005u\u0000\u0000ੲੳ\u0005\u0002\u0000\u0000ੳੴ\u0003Ī\u0095\u0000ੴੵ\u0005\u0003\u0000\u0000ੵ¿\u0001\u0000\u0000\u0000੶\u0a7b\u0003Âa\u0000\u0a77\u0a78\u0005\u0004\u0000\u0000\u0a78\u0a7a\u0003Âa\u0000\u0a79\u0a77\u0001\u0000\u0000\u0000\u0a7a\u0a7d\u0001\u0000\u0000\u0000\u0a7b\u0a79\u0001\u0000\u0000\u0000\u0a7b\u0a7c\u0001\u0000\u0000\u0000\u0a7cÁ\u0001\u0000\u0000\u0000\u0a7d\u0a7b\u0001\u0000\u0000\u0000\u0a7e\u0a7f\u0003Ĭ\u0096\u0000\u0a7f\u0a80\u0005Ƅ\u0000\u0000\u0a80ઁ\u0003ł¡\u0000ઁÃ\u0001\u0000\u0000\u0000ંઃ\u0005ż\u0000\u0000ઃ\u0a84\u0003Ŋ¥\u0000\u0a84Å\u0001\u0000\u0000\u0000અઆ\u0005\u0097\u0000\u0000આઇ\u0003Ŋ¥\u0000ઇÇ\u0001\u0000\u0000\u0000ઈઉ\u0005ƞ\u0000\u0000ઉઐ\u0003Êe\u0000ઊઌ\u0005\u0004\u0000\u0000ઋઊ\u0001\u0000\u0000\u0000ઋઌ\u0001\u0000\u0000\u0000ઌઍ\u0001\u0000\u0000\u0000ઍએ\u0003Êe\u0000\u0a8eઋ\u0001\u0000\u0000\u0000એ\u0a92\u0001\u0000\u0000\u0000ઐ\u0a8e\u0001\u0000\u0000\u0000ઐઑ\u0001\u0000\u0000\u0000ઑઓ\u0001\u0000\u0000\u0000\u0a92ઐ\u0001\u0000\u0000\u0000ઓઔ\u0005Ɵ\u0000\u0000ઔÉ\u0001\u0000\u0000\u0000કણ\u0003ǂá\u0000ખગ\u0003ǂá\u0000ગઘ\u0005\u0002\u0000\u0000ઘઝ\u0003Ŗ«\u0000ઙચ\u0005\u0004\u0000\u0000ચજ\u0003Ŗ«\u0000છઙ\u0001\u0000\u0000\u0000જટ\u0001\u0000\u0000\u0000ઝછ\u0001\u0000\u0000\u0000ઝઞ\u0001\u0000\u0000\u0000ઞઠ\u0001\u0000\u0000\u0000ટઝ\u0001\u0000\u0000\u0000ઠડ\u0005\u0003\u0000\u0000ડણ\u0001\u0000\u0000\u0000ઢક\u0001\u0000\u0000\u0000ઢખ\u0001\u0000\u0000\u0000ણË\u0001\u0000\u0000\u0000તથ\u0005\u008d\u0000\u0000થપ\u0003ú}\u0000દધ\u0005\u0004\u0000\u0000ધ\u0aa9\u0003ú}\u0000નદ\u0001\u0000\u0000\u0000\u0aa9બ\u0001\u0000\u0000\u0000પન\u0001\u0000\u0000\u0000પફ\u0001\u0000\u0000\u0000ફર\u0001\u0000\u0000\u0000બપ\u0001\u0000\u0000\u0000ભય\u0003ö{\u0000મભ\u0001\u0000\u0000\u0000યલ\u0001\u0000\u0000\u0000રમ\u0001\u0000\u0000\u0000ર\u0ab1\u0001\u0000\u0000\u0000\u0ab1\u0ab4\u0001\u0000\u0000\u0000લર\u0001\u0000\u0000\u0000ળવ\u0003Úm\u0000\u0ab4ળ\u0001\u0000\u0000\u0000\u0ab4વ\u0001\u0000\u0000\u0000વષ\u0001\u0000\u0000\u0000શસ\u0003àp\u0000ષશ\u0001\u0000\u0000\u0000ષસ\u0001\u0000\u0000\u0000સÍ\u0001\u0000\u0000\u0000હ\u0abb\u0005\u0088\u0000\u0000\u0abaહ\u0001\u0000\u0000\u0000\u0aba\u0abb\u0001\u0000\u0000\u0000\u0abb઼\u0001\u0000\u0000\u0000઼ઽ\u0007\u0013\u0000\u0000ઽા\u0005\u0016\u0000\u0000ાિ\u0005å\u0000\u0000િૈ\u0003ǖë\u0000ીૂ\u0005\u0088\u0000\u0000ુી\u0001\u0000\u0000\u0000ુૂ\u0001\u0000\u0000\u0000ૂૃ\u0001\u0000\u0000\u0000ૃૄ\u0007\u0014\u0000\u0000ૄૅ\u0005\u0016\u0000\u0000ૅ\u0ac6\u0005å\u0000\u0000\u0ac6ૈ\u0003Ő¨\u0000ે\u0aba\u0001\u0000\u0000\u0000ેુ\u0001\u0000\u0000\u0000ૈÏ\u0001\u0000\u0000\u0000ૉ\u0aca\u0005\u0094\u0000\u0000\u0acaો\u0005$\u0000\u0000ોૐ\u0003Òi\u0000ૌ્\u0005\u0004\u0000\u0000્\u0acf\u0003Òi\u0000\u0aceૌ\u0001\u0000\u0000\u0000\u0acf\u0ad2\u0001\u0000\u0000\u0000ૐ\u0ace\u0001\u0000\u0000\u0000ૐ\u0ad1\u0001\u0000\u0000\u0000\u0ad1૱\u0001\u0000\u0000\u0000\u0ad2ૐ\u0001\u0000\u0000\u0000\u0ad3\u0ad4\u0005\u0094\u0000\u0000\u0ad4\u0ad5\u0005$\u0000\u0000\u0ad5\u0ada\u0003Ķ\u009b\u0000\u0ad6\u0ad7\u0005\u0004\u0000\u0000\u0ad7\u0ad9\u0003Ķ\u009b\u0000\u0ad8\u0ad6\u0001\u0000\u0000\u0000\u0ad9\u0adc\u0001\u0000\u0000\u0000\u0ada\u0ad8\u0001\u0000\u0000\u0000\u0ada\u0adb\u0001\u0000\u0000\u0000\u0adb૮\u0001\u0000\u0000\u0000\u0adc\u0ada\u0001\u0000\u0000\u0000\u0add\u0ade\u0005ſ\u0000\u0000\u0ade૯\u0005Ĝ\u0000\u0000\u0adfૠ\u0005ſ\u0000\u0000ૠ૯\u0005I\u0000\u0000ૡૢ\u0005\u0095\u0000\u0000ૢૣ\u0005Ĭ\u0000\u0000ૣ\u0ae4\u0005\u0002\u0000\u0000\u0ae4૩\u0003Øl\u0000\u0ae5૦\u0005\u0004\u0000\u0000૦૨\u0003Øl\u0000૧\u0ae5\u0001\u0000\u0000\u0000૨૫\u0001\u0000\u0000\u0000૩૧\u0001\u0000\u0000\u0000૩૪\u0001\u0000\u0000\u0000૪૬\u0001\u0000\u0000\u0000૫૩\u0001\u0000\u0000\u0000૬૭\u0005\u0003\u0000\u0000૭૯\u0001\u0000\u0000\u0000૮\u0add\u0001\u0000\u0000\u0000૮\u0adf\u0001\u0000\u0000\u0000૮ૡ\u0001\u0000\u0000\u0000૮૯\u0001\u0000\u0000\u0000૯૱\u0001\u0000\u0000\u0000૰ૉ\u0001\u0000\u0000\u0000૰\u0ad3\u0001\u0000\u0000\u0000૱Ñ\u0001\u0000\u0000\u0000\u0af2\u0af5\u0003Ôj\u0000\u0af3\u0af5\u0003ł¡\u0000\u0af4\u0af2\u0001\u0000\u0000\u0000\u0af4\u0af3\u0001\u0000\u0000\u0000\u0af5Ó\u0001\u0000\u0000\u0000\u0af6\u0af7\u0007\u0015\u0000\u0000\u0af7\u0af8\u0005\u0002\u0000\u0000\u0af8૽\u0003Øl\u0000ૹૺ\u0005\u0004\u0000\u0000ૺૼ\u0003Øl\u0000ૻૹ\u0001\u0000\u0000\u0000ૼ૿\u0001\u0000\u0000\u0000૽ૻ\u0001\u0000\u0000\u0000૽૾\u0001\u0000\u0000\u0000૾\u0b00\u0001\u0000\u0000\u0000૿૽\u0001\u0000\u0000\u0000\u0b00ଁ\u0005\u0003\u0000\u0000ଁଐ\u0001\u0000\u0000\u0000ଂଃ\u0005\u0095\u0000\u0000ଃ\u0b04\u0005Ĭ\u0000\u0000\u0b04ଅ\u0005\u0002\u0000\u0000ଅଊ\u0003Ök\u0000ଆଇ\u0005\u0004\u0000\u0000ଇଉ\u0003Ök\u0000ଈଆ\u0001\u0000\u0000\u0000ଉଌ\u0001\u0000\u0000\u0000ଊଈ\u0001\u0000\u0000\u0000ଊଋ\u0001\u0000\u0000\u0000ଋ\u0b0d\u0001\u0000\u0000\u0000ଌଊ\u0001\u0000\u0000\u0000\u0b0d\u0b0e\u0005\u0003\u0000\u0000\u0b0eଐ\u0001\u0000\u0000\u0000ଏ\u0af6\u0001\u0000\u0000\u0000ଏଂ\u0001\u0000\u0000\u0000ଐÕ\u0001\u0000\u0000\u0000\u0b11ଔ\u0003Ôj\u0000\u0b12ଔ\u0003Øl\u0000ଓ\u0b11\u0001\u0000\u0000\u0000ଓ\u0b12\u0001\u0000\u0000\u0000ଔ×\u0001\u0000\u0000\u0000କଞ\u0005\u0002\u0000\u0000ଖଛ\u0003ł¡\u0000ଗଘ\u0005\u0004\u0000\u0000ଘଚ\u0003ł¡\u0000ଙଗ\u0001\u0000\u0000\u0000ଚଝ\u0001\u0000\u0000\u0000ଛଙ\u0001\u0000\u0000\u0000ଛଜ\u0001\u0000\u0000\u0000ଜଟ\u0001\u0000\u0000\u0000ଝଛ\u0001\u0000\u0000\u0000ଞଖ\u0001\u0000\u0000\u0000ଞଟ\u0001\u0000\u0000\u0000ଟଠ\u0001\u0000\u0000\u0000ଠଣ\u0005\u0003\u0000\u0000ଡଣ\u0003ł¡\u0000ଢକ\u0001\u0000\u0000\u0000ଢଡ\u0001\u0000\u0000\u0000ଣÙ\u0001\u0000\u0000\u0000ତଥ\u0005ø\u0000\u0000ଥଦ\u0005\u0002\u0000\u0000ଦଧ\u0003ĸ\u009c\u0000ଧନ\u0005\u0088\u0000\u0000ନ\u0b29\u0003Ün\u0000\u0b29ପ\u0005¡\u0000\u0000ପଫ\u0005\u0002\u0000\u0000ଫର\u0003Þo\u0000ବଭ\u0005\u0004\u0000\u0000ଭଯ\u0003Þo\u0000ମବ\u0001\u0000\u0000\u0000ଯଲ\u0001\u0000\u0000\u0000ରମ\u0001\u0000\u0000\u0000ର\u0b31\u0001\u0000\u0000\u0000\u0b31ଳ\u0001\u0000\u0000\u0000ଲର\u0001\u0000\u0000\u0000ଳ\u0b34\u0005\u0003\u0000\u0000\u0b34ଵ\u0005\u0003\u0000\u0000ଵÛ\u0001\u0000\u0000\u0000ଶୃ\u0003ƾß\u0000ଷସ\u0005\u0002\u0000\u0000ସଽ\u0003ƾß\u0000ହ\u0b3a\u0005\u0004\u0000\u0000\u0b3a଼\u0003ƾß\u0000\u0b3bହ\u0001\u0000\u0000\u0000଼ି\u0001\u0000\u0000\u0000ଽ\u0b3b\u0001\u0000\u0000\u0000ଽା\u0001\u0000\u0000\u0000ାୀ\u0001\u0000\u0000\u0000ିଽ\u0001\u0000\u0000\u0000ୀୁ\u0005\u0003\u0000\u0000ୁୃ\u0001\u0000\u0000\u0000ୂଶ\u0001\u0000\u0000\u0000ୂଷ\u0001\u0000\u0000\u0000ୃÝ\u0001\u0000\u0000\u0000ୄ\u0b49\u0003ł¡\u0000\u0b45େ\u0005\u0016\u0000\u0000\u0b46\u0b45\u0001\u0000\u0000\u0000\u0b46େ\u0001\u0000\u0000\u0000େୈ\u0001\u0000\u0000\u0000ୈ\u0b4a\u0003ƾß\u0000\u0b49\u0b46\u0001\u0000\u0000\u0000\u0b49\u0b4a\u0001\u0000\u0000\u0000\u0b4aß\u0001\u0000\u0000\u0000ୋ୍\u0005Ũ\u0000\u0000ୌ\u0b4e\u0003âq\u0000୍ୌ\u0001\u0000\u0000\u0000୍\u0b4e\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0001\u0000\u0000\u0000\u0b4f\u0b50\u0005\u0002\u0000\u0000\u0b50\u0b51\u0003är\u0000\u0b51ୖ\u0005\u0003\u0000\u0000\u0b52\u0b54\u0005\u0016\u0000\u0000\u0b53\u0b52\u0001\u0000\u0000\u0000\u0b53\u0b54\u0001\u0000\u0000\u0000\u0b54୕\u0001\u0000\u0000\u0000୕ୗ\u0003ƾß\u0000ୖ\u0b53\u0001\u0000\u0000\u0000ୖୗ\u0001\u0000\u0000\u0000ୗá\u0001\u0000\u0000\u0000\u0b58\u0b59\u0007\u0016\u0000\u0000\u0b59\u0b5a\u0005ã\u0000\u0000\u0b5aã\u0001\u0000\u0000\u0000\u0b5b\u0b5e\u0003æs\u0000ଡ଼\u0b5e\u0003èt\u0000ଢ଼\u0b5b\u0001\u0000\u0000\u0000ଢ଼ଡ଼\u0001\u0000\u0000\u0000\u0b5eå\u0001\u0000\u0000\u0000ୟୠ\u0003ìv\u0000ୠୡ\u0005\u0088\u0000\u0000ୡୢ\u0003îw\u0000ୢୣ\u0005¡\u0000\u0000ୣ\u0b64\u0005\u0002\u0000\u0000\u0b64୩\u0003ðx\u0000\u0b65୦\u0005\u0004\u0000\u0000୦୨\u0003ðx\u0000୧\u0b65\u0001\u0000\u0000\u0000୨୫\u0001\u0000\u0000\u0000୩୧\u0001\u0000\u0000\u0000୩୪\u0001\u0000\u0000\u0000୪୬\u0001\u0000\u0000\u0000୫୩\u0001\u0000\u0000\u0000୬୭\u0005\u0003\u0000\u0000୭ç\u0001\u0000\u0000\u0000୮୯\u0005\u0002\u0000\u0000୯୴\u0003ìv\u0000୰ୱ\u0005\u0004\u0000\u0000ୱ୳\u0003ìv\u0000୲୰\u0001\u0000\u0000\u0000୳୶\u0001\u0000\u0000\u0000୴୲\u0001\u0000\u0000\u0000୴୵\u0001\u0000\u0000\u0000୵୷\u0001\u0000\u0000\u0000୶୴\u0001\u0000\u0000\u0000୷\u0b78\u0005\u0003\u0000\u0000\u0b78\u0b79\u0005\u0088\u0000\u0000\u0b79\u0b7a\u0003îw\u0000\u0b7a\u0b7b\u0005¡\u0000\u0000\u0b7b\u0b7c\u0005\u0002\u0000\u0000\u0b7c\u0b81\u0003êu\u0000\u0b7d\u0b7e\u0005\u0004\u0000\u0000\u0b7e\u0b80\u0003êu\u0000\u0b7f\u0b7d\u0001\u0000\u0000\u0000\u0b80ஃ\u0001\u0000\u0000\u0000\u0b81\u0b7f\u0001\u0000\u0000\u0000\u0b81ஂ\u0001\u0000\u0000\u0000ஂ\u0b84\u0001\u0000\u0000\u0000ஃ\u0b81\u0001\u0000\u0000\u0000\u0b84அ\u0005\u0003\u0000\u0000அé\u0001\u0000\u0000\u0000ஆஇ\u0005\u0002\u0000\u0000இ\u0b8c\u0003òy\u0000ஈஉ\u0005\u0004\u0000\u0000உ\u0b8b\u0003òy\u0000ஊஈ\u0001\u0000\u0000\u0000\u0b8bஎ\u0001\u0000\u0000\u0000\u0b8cஊ\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0001\u0000\u0000\u0000\u0b8dஏ\u0001\u0000\u0000\u0000எ\u0b8c\u0001\u0000\u0000\u0000ஏ\u0b91\u0005\u0003\u0000\u0000ஐஒ\u0003ôz\u0000\u0b91ஐ\u0001\u0000\u0000\u0000\u0b91ஒ\u0001\u0000\u0000\u0000ஒë\u0001\u0000\u0000\u0000ஓஔ\u0003ǂá\u0000ஔí\u0001\u0000\u0000\u0000க\u0b96\u0003ǂá\u0000\u0b96ï\u0001\u0000\u0000\u0000\u0b97ங\u0003òy\u0000\u0b98ச\u0003ôz\u0000ங\u0b98\u0001\u0000\u0000\u0000ஙச\u0001\u0000\u0000\u0000சñ\u0001\u0000\u0000\u0000\u0b9bஜ\u0003Ĭ\u0096\u0000ஜó\u0001\u0000\u0000\u0000\u0b9dட\u0005\u0016\u0000\u0000ஞ\u0b9d\u0001\u0000\u0000\u0000ஞட\u0001\u0000\u0000\u0000ட\u0ba0\u0001\u0000\u0000\u0000\u0ba0\u0ba1\u0003ƾß\u0000\u0ba1õ\u0001\u0000\u0000\u0000\u0ba2ண\u0005¹\u0000\u0000ண\u0ba5\u0005Ŷ\u0000\u0000த\u0ba6\u0005î\u0000\u0000\u0ba5த\u0001\u0000\u0000\u0000\u0ba5\u0ba6\u0001\u0000\u0000\u0000\u0ba6\u0ba7\u0001\u0000\u0000\u0000\u0ba7ந\u0003ƼÞ\u0000நற\u0005\u0002\u0000\u0000னம\u0003ł¡\u0000ப\u0bab\u0005\u0004\u0000\u0000\u0bab\u0bad\u0003ł¡\u0000\u0bacப\u0001\u0000\u0000\u0000\u0badர\u0001\u0000\u0000\u0000ம\u0bac\u0001\u0000\u0000\u0000மய\u0001\u0000\u0000\u0000யல\u0001\u0000\u0000\u0000ரம\u0001\u0000\u0000\u0000றன\u0001\u0000\u0000\u0000றல\u0001\u0000\u0000\u0000லள\u0001\u0000\u0000\u0000ளழ\u0005\u0003\u0000\u0000ழீ\u0003ǂá\u0000வஷ\u0005\u0016\u0000\u0000ஶவ\u0001\u0000\u0000\u0000ஶஷ\u0001\u0000\u0000\u0000ஷஸ\u0001\u0000\u0000\u0000ஸ\u0bbd\u0003ǂá\u0000ஹ\u0bba\u0005\u0004\u0000\u0000\u0bba\u0bbc\u0003ǂá\u0000\u0bbbஹ\u0001\u0000\u0000\u0000\u0bbcி\u0001\u0000\u0000\u0000\u0bbd\u0bbb\u0001\u0000\u0000\u0000\u0bbdா\u0001\u0000\u0000\u0000ாு\u0001\u0000\u0000\u0000ி\u0bbd\u0001\u0000\u0000\u0000ீஶ\u0001\u0000\u0000\u0000ீு\u0001\u0000\u0000\u0000ு÷\u0001\u0000\u0000\u0000ூ\u0bc3\u0007\u0017\u0000\u0000\u0bc3ù\u0001\u0000\u0000\u0000\u0bc4ெ\u0005¹\u0000\u0000\u0bc5\u0bc4\u0001\u0000\u0000\u0000\u0bc5ெ\u0001\u0000\u0000\u0000ெே\u0001\u0000\u0000\u0000ேோ\u0003Ĕ\u008a\u0000ைொ\u0003ü~\u0000\u0bc9ை\u0001\u0000\u0000\u0000ொ்\u0001\u0000\u0000\u0000ோ\u0bc9\u0001\u0000\u0000\u0000ோௌ\u0001\u0000\u0000\u0000ௌû\u0001\u0000\u0000\u0000்ோ\u0001\u0000\u0000\u0000\u0bce\u0bd2\u0003þ\u007f\u0000\u0bcf\u0bd2\u0003Úm\u0000ௐ\u0bd2\u0003àp\u0000\u0bd1\u0bce\u0001\u0000\u0000\u0000\u0bd1\u0bcf\u0001\u0000\u0000\u0000\u0bd1ௐ\u0001\u0000\u0000\u0000\u0bd2ý\u0001\u0000\u0000\u0000\u0bd3\u0bd4\u0003Ā\u0080\u0000\u0bd4\u0bd6\u0005´\u0000\u0000\u0bd5ௗ\u0005¹\u0000\u0000\u0bd6\u0bd5\u0001\u0000\u0000\u0000\u0bd6ௗ\u0001\u0000\u0000\u0000ௗ\u0bd8\u0001\u0000\u0000\u0000\u0bd8\u0bda\u0003Ĕ\u008a\u0000\u0bd9\u0bdb\u0003Ă\u0081\u0000\u0bda\u0bd9\u0001\u0000\u0000\u0000\u0bda\u0bdb\u0001\u0000\u0000\u0000\u0bdb\u0be5\u0001\u0000\u0000\u0000\u0bdc\u0bdd\u0005Þ\u0000\u0000\u0bdd\u0bde\u0003Ā\u0080\u0000\u0bde\u0be0\u0005´\u0000\u0000\u0bdf\u0be1\u0005¹\u0000\u0000\u0be0\u0bdf\u0001\u0000\u0000\u0000\u0be0\u0be1\u0001\u0000\u0000\u0000\u0be1\u0be2\u0001\u0000\u0000\u0000\u0be2\u0be3\u0003Ĕ\u008a\u0000\u0be3\u0be5\u0001\u0000\u0000\u0000\u0be4\u0bd3\u0001\u0000\u0000\u0000\u0be4\u0bdc\u0001\u0000\u0000\u0000\u0be5ÿ\u0001\u0000\u0000\u0000௦௨\u0005¦\u0000\u0000௧௦\u0001\u0000\u0000\u0000௧௨\u0001\u0000\u0000\u0000௨\u0bff\u0001\u0000\u0000\u0000௩\u0bff\u0005H\u0000\u0000௪௬\u0005½\u0000\u0000௫௭\u0005î\u0000\u0000௬௫\u0001\u0000\u0000\u0000௬௭\u0001\u0000\u0000\u0000௭\u0bff\u0001\u0000\u0000\u0000௮௰\u0005½\u0000\u0000௯௮\u0001\u0000\u0000\u0000௯௰\u0001\u0000\u0000\u0000௰௱\u0001\u0000\u0000\u0000௱\u0bff\u0005ĥ\u0000\u0000௲௴\u0005ė\u0000\u0000௳௵\u0005î\u0000\u0000௴௳\u0001\u0000\u0000\u0000௴௵\u0001\u0000\u0000\u0000௵\u0bff\u0001\u0000\u0000\u0000௶௸\u0005\u008e\u0000\u0000௷௹\u0005î\u0000\u0000௸௷\u0001\u0000\u0000\u0000௸௹\u0001\u0000\u0000\u0000௹\u0bff\u0001\u0000\u0000\u0000௺\u0bfc\u0005½\u0000\u0000\u0bfb௺\u0001\u0000\u0000\u0000\u0bfb\u0bfc\u0001\u0000\u0000\u0000\u0bfc\u0bfd\u0001\u0000\u0000\u0000\u0bfd\u0bff\u0005\u0011\u0000\u0000\u0bfe௧\u0001\u0000\u0000\u0000\u0bfe௩\u0001\u0000\u0000\u0000\u0bfe௪\u0001\u0000\u0000\u0000\u0bfe௯\u0001\u0000\u0000\u0000\u0bfe௲\u0001\u0000\u0000\u0000\u0bfe௶\u0001\u0000\u0000\u0000\u0bfe\u0bfb\u0001\u0000\u0000\u0000\u0bffā\u0001\u0000\u0000\u0000ఀఁ\u0005ç\u0000\u0000ఁఅ\u0003Ŋ¥\u0000ంః\u0005Ů\u0000\u0000ఃఅ\u0003Ĉ\u0084\u0000ఄఀ\u0001\u0000\u0000\u0000ఄం\u0001\u0000\u0000\u0000అă\u0001\u0000\u0000\u0000ఆఇ\u0005Ň\u0000\u0000ఇఉ\u0005\u0002\u0000\u0000ఈఊ\u0003Ć\u0083\u0000ఉఈ\u0001\u0000\u0000\u0000ఉఊ\u0001\u0000\u0000\u0000ఊఋ\u0001\u0000\u0000\u0000ఋఐ\u0005\u0003\u0000\u0000ఌ\u0c0d\u0005ď\u0000\u0000\u0c0dఎ\u0005\u0002\u0000\u0000ఎఏ\u0005Ʀ\u0000\u0000ఏ\u0c11\u0005\u0003\u0000\u0000ఐఌ\u0001\u0000\u0000\u0000ఐ\u0c11\u0001\u0000\u0000\u0000\u0c11ą\u0001\u0000\u0000\u0000ఒఔ\u0005Ɛ\u0000\u0000ఓఒ\u0001\u0000\u0000\u0000ఓఔ\u0001\u0000\u0000\u0000ఔక\u0001\u0000\u0000\u0000కఖ\u0007\u0018\u0000\u0000ఖఫ\u0005÷\u0000\u0000గఘ\u0003ł¡\u0000ఘఙ\u0005Ğ\u0000\u0000ఙఫ\u0001\u0000\u0000\u0000చఛ\u0005\"\u0000\u0000ఛజ\u0005Ʀ\u0000\u0000జఝ\u0005í\u0000\u0000ఝఞ\u0005å\u0000\u0000ఞధ\u0005Ʀ\u0000\u0000టథ\u0005ç\u0000\u0000ఠద\u0003ǂá\u0000డఢ\u0003ƼÞ\u0000ఢణ\u0005\u0002\u0000\u0000ణత\u0005\u0003\u0000\u0000తద\u0001\u0000\u0000\u0000థఠ\u0001\u0000\u0000\u0000థడ\u0001\u0000\u0000\u0000దన\u0001\u0000\u0000\u0000ధట\u0001\u0000\u0000\u0000ధన\u0001\u0000\u0000\u0000నఫ\u0001\u0000\u0000\u0000\u0c29ఫ\u0003ł¡\u0000పఓ\u0001\u0000\u0000\u0000పగ\u0001\u0000\u0000\u0000పచ\u0001\u0000\u0000\u0000ప\u0c29\u0001\u0000\u0000\u0000ఫć\u0001\u0000\u0000\u0000బభ\u0005\u0002\u0000\u0000భమ\u0003Ċ\u0085\u0000మయ\u0005\u0003\u0000\u0000యĉ\u0001\u0000\u0000\u0000రవ\u0003ƾß\u0000ఱల\u0005\u0004\u0000\u0000లఴ\u0003ƾß\u0000ళఱ\u0001\u0000\u0000\u0000ఴష\u0001\u0000\u0000\u0000వళ\u0001\u0000\u0000\u0000వశ\u0001\u0000\u0000\u0000శċ\u0001\u0000\u0000\u0000షవ\u0001\u0000\u0000\u0000సహ\u0005\u0002\u0000\u0000హా\u0003Ď\u0087\u0000\u0c3a\u0c3b\u0005\u0004\u0000\u0000\u0c3bఽ\u0003Ď\u0087\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000ఽీ\u0001\u0000\u0000\u0000ా\u0c3c\u0001\u0000\u0000\u0000ాి\u0001\u0000\u0000\u0000ిు\u0001\u0000\u0000\u0000ీా\u0001\u0000\u0000\u0000ుూ\u0005\u0003\u0000\u0000ూč\u0001\u0000\u0000\u0000ృ\u0c45\u0003ƾß\u0000ౄె\u0007\u0011\u0000\u0000\u0c45ౄ\u0001\u0000\u0000\u0000\u0c45ె\u0001\u0000\u0000\u0000ెď\u0001\u0000\u0000\u0000ేై\u0005\u0002\u0000\u0000ై్\u0003Ē\u0089\u0000\u0c49ొ\u0005\u0004\u0000\u0000ొౌ\u0003Ē\u0089\u0000ో\u0c49\u0001\u0000\u0000\u0000ౌ\u0c4f\u0001\u0000\u0000\u0000్ో\u0001\u0000\u0000\u0000్\u0c4e\u0001\u0000\u0000\u0000\u0c4e\u0c50\u0001\u0000\u0000\u0000\u0c4f్\u0001\u0000\u0000\u0000\u0c50\u0c51\u0005\u0003\u0000\u0000\u0c51đ\u0001\u0000\u0000\u0000\u0c52\u0c54\u0003ǂá\u0000\u0c53ౕ\u0003^/\u0000\u0c54\u0c53\u0001\u0000\u0000\u0000\u0c54ౕ\u0001\u0000\u0000\u0000ౕē\u0001\u0000\u0000\u0000ౖౘ\u0003\u0098L\u0000\u0c57ౙ\u0003Îg\u0000ౘ\u0c57\u0001\u0000\u0000\u0000ౘౙ\u0001\u0000\u0000\u0000ౙ\u0c5b\u0001\u0000\u0000\u0000ౚ\u0c5c\u0003Ė\u008b\u0000\u0c5bౚ\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0001\u0000\u0000\u0000\u0c5c\u0c5e\u0001\u0000\u0000\u0000\u0c5d\u0c5f\u0003Ą\u0082\u0000\u0c5e\u0c5d\u0001\u0000\u0000\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5fౠ\u0001\u0000\u0000\u0000ౠౡ\u0003Ħ\u0093\u0000ౡ\u0c75\u0001\u0000\u0000\u0000ౢౣ\u0005\u0002\u0000\u0000ౣ\u0c64\u0003b1\u0000\u0c64౦\u0005\u0003\u0000\u0000\u0c65౧\u0003Ą\u0082\u0000౦\u0c65\u0001\u0000\u0000\u0000౦౧\u0001\u0000\u0000\u0000౧౨\u0001\u0000\u0000\u0000౨౩\u0003Ħ\u0093\u0000౩\u0c75\u0001\u0000\u0000\u0000౪౫\u0005\u0002\u0000\u0000౫౬\u0003ú}\u0000౬౮\u0005\u0003\u0000\u0000౭౯\u0003Ą\u0082\u0000౮౭\u0001\u0000\u0000\u0000౮౯\u0001\u0000\u0000\u0000౯\u0c70\u0001\u0000\u0000\u0000\u0c70\u0c71\u0003Ħ\u0093\u0000\u0c71\u0c75\u0001\u0000\u0000\u0000\u0c72\u0c75\u0003Ę\u008c\u0000\u0c73\u0c75\u0003Ĥ\u0092\u0000\u0c74ౖ\u0001\u0000\u0000\u0000\u0c74ౢ\u0001\u0000\u0000\u0000\u0c74౪\u0001\u0000\u0000\u0000\u0c74\u0c72\u0001\u0000\u0000\u0000\u0c74\u0c73\u0001\u0000\u0000\u0000\u0c75ĕ\u0001\u0000\u0000\u0000\u0c76౷\u0005ſ\u0000\u0000౷౸\u0003~?\u0000౸ė\u0001\u0000\u0000\u0000౹౺\u0005Ű\u0000\u0000౺౿\u0003ł¡\u0000౻౼\u0005\u0004\u0000\u0000౼౾\u0003ł¡\u0000౽౻\u0001\u0000\u0000\u0000౾ಁ\u0001\u0000\u0000\u0000౿౽\u0001\u0000\u0000\u0000౿ಀ\u0001\u0000\u0000\u0000ಀಂ\u0001\u0000\u0000\u0000ಁ౿\u0001\u0000\u0000\u0000ಂಃ\u0003Ħ\u0093\u0000ಃę\u0001\u0000\u0000\u0000಄ಅ\u0005Ņ\u0000\u0000ಅಇ\u0003\u0098L\u0000ಆಈ\u0003Ĝ\u008e\u0000ಇಆ\u0001\u0000\u0000\u0000ಇಈ\u0001\u0000\u0000\u0000ಈಘ\u0001\u0000\u0000\u0000ಉಊ\u0005Ņ\u0000\u0000ಊಋ\u0005\u0002\u0000\u0000ಋಌ\u0003\u0098L\u0000ಌಎ\u0005\u0003\u0000\u0000\u0c8dಏ\u0003Ĝ\u008e\u0000ಎ\u0c8d\u0001\u0000\u0000\u0000ಎಏ\u0001\u0000\u0000\u0000ಏಘ\u0001\u0000\u0000\u0000ಐ\u0c91\u0005Ņ\u0000\u0000\u0c91ಒ\u0005\u0002\u0000\u0000ಒಓ\u0003b1\u0000ಓಕ\u0005\u0003\u0000\u0000ಔಖ\u0003Ĝ\u008e\u0000ಕಔ\u0001\u0000\u0000\u0000ಕಖ\u0001\u0000\u0000\u0000ಖಘ\u0001\u0000\u0000\u0000ಗ಄\u0001\u0000\u0000\u0000ಗಉ\u0001\u0000\u0000\u0000ಗಐ\u0001\u0000\u0000\u0000ಘě\u0001\u0000\u0000\u0000ಙಚ\u0005ſ\u0000\u0000ಚಛ\u0005į\u0000\u0000ಛ\u0cb4\u0005ô\u0000\u0000ಜಝ\u0007\u0019\u0000\u0000ಝಱ\u0005$\u0000\u0000ಞಟ\u0005\u0002\u0000\u0000ಟತ\u0003ł¡\u0000ಠಡ\u0005\u0004\u0000\u0000ಡಣ\u0003ł¡\u0000ಢಠ\u0001\u0000\u0000\u0000ಣದ\u0001\u0000\u0000\u0000ತಢ\u0001\u0000\u0000\u0000ತಥ\u0001\u0000\u0000\u0000ಥಧ\u0001\u0000\u0000\u0000ದತ\u0001\u0000\u0000\u0000ಧನ\u0005\u0003\u0000\u0000ನಲ\u0001\u0000\u0000\u0000\u0ca9ಬ\u0003ł¡\u0000ಪಫ\u0005\u0004\u0000\u0000ಫಭ\u0003ł¡\u0000ಬಪ\u0001\u0000\u0000\u0000ಭಮ\u0001\u0000\u0000\u0000ಮಬ\u0001\u0000\u0000\u0000ಮಯ\u0001\u0000\u0000\u0000ಯಲ\u0001\u0000\u0000\u0000ರಲ\u0003ł¡\u0000ಱಞ\u0001\u0000\u0000\u0000ಱ\u0ca9\u0001\u0000\u0000\u0000ಱರ\u0001\u0000\u0000\u0000ಲ\u0cb4\u0001\u0000\u0000\u0000ಳಙ\u0001\u0000\u0000\u0000ಳಜ\u0001\u0000\u0000\u0000\u0cb4ೌ\u0001\u0000\u0000\u0000ವಶ\u0007\u001a\u0000\u0000ಶೊ\u0005$\u0000\u0000ಷಸ\u0005\u0002\u0000\u0000ಸಽ\u0003¤R\u0000ಹ\u0cba\u0005\u0004\u0000\u0000\u0cba಼\u0003¤R\u0000\u0cbbಹ\u0001\u0000\u0000\u0000಼ಿ\u0001\u0000\u0000\u0000ಽ\u0cbb\u0001\u0000\u0000\u0000ಽಾ\u0001\u0000\u0000\u0000ಾೀ\u0001\u0000\u0000\u0000ಿಽ\u0001\u0000\u0000\u0000ೀು\u0005\u0003\u0000\u0000ುೋ\u0001\u0000\u0000\u0000ೂ\u0cc5\u0003¤R\u0000ೃೄ\u0005\u0004\u0000\u0000ೄೆ\u0003¤R\u0000\u0cc5ೃ\u0001\u0000\u0000\u0000ೆೇ\u0001\u0000\u0000\u0000ೇ\u0cc5\u0001\u0000\u0000\u0000ೇೈ\u0001\u0000\u0000\u0000ೈೋ\u0001\u0000\u0000\u0000\u0cc9ೋ\u0003¤R\u0000ೊಷ\u0001\u0000\u0000\u0000ೊೂ\u0001\u0000\u0000\u0000ೊ\u0cc9\u0001\u0000\u0000\u0000ೋ್\u0001\u0000\u0000\u0000ೌವ\u0001\u0000\u0000\u0000ೌ್\u0001\u0000\u0000\u0000್ĝ\u0001\u0000\u0000\u0000\u0cce\u0ccf\u0003ǂá\u0000\u0ccf\u0cd0\u0005Ɲ\u0000\u0000\u0cd0\u0cd1\u0003Ě\u008d\u0000\u0cd1ğ\u0001\u0000\u0000\u0000\u0cd2ೕ\u0003Ě\u008d\u0000\u0cd3ೕ\u0003Ğ\u008f\u0000\u0cd4\u0cd2\u0001\u0000\u0000\u0000\u0cd4\u0cd3\u0001\u0000\u0000\u0000ೕġ\u0001\u0000\u0000\u0000ೖ\u0cd9\u0003Ġ\u0090\u0000\u0cd7\u0cd9\u0003ņ£\u0000\u0cd8ೖ\u0001\u0000\u0000\u0000\u0cd8\u0cd7\u0001\u0000\u0000\u0000\u0cd9ģ\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0003ƺÝ\u0000\u0cdb\u0ce4\u0005\u0002\u0000\u0000\u0cdcೡ\u0003Ģ\u0091\u0000\u0cddೞ\u0005\u0004\u0000\u0000ೞೠ\u0003Ģ\u0091\u0000\u0cdf\u0cdd\u0001\u0000\u0000\u0000ೠೣ\u0001\u0000\u0000\u0000ೡ\u0cdf\u0001\u0000\u0000\u0000ೡೢ\u0001\u0000\u0000\u0000ೢ\u0ce5\u0001\u0000\u0000\u0000ೣೡ\u0001\u0000\u0000\u0000\u0ce4\u0cdc\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0001\u0000\u0000\u0000\u0ce5೦\u0001\u0000\u0000\u0000೦೧\u0005\u0003\u0000\u0000೧೨\u0003Ħ\u0093\u0000೨ĥ\u0001\u0000\u0000\u0000೩೫\u0005\u0016\u0000\u0000೪೩\u0001\u0000\u0000\u0000೪೫\u0001\u0000\u0000\u0000೫೬\u0001\u0000\u0000\u0000೬೮\u0003Ǆâ\u0000೭೯\u0003Ĉ\u0084\u0000೮೭\u0001\u0000\u0000\u0000೮೯\u0001\u0000\u0000\u0000೯ೱ\u0001\u0000\u0000\u0000\u0cf0೪\u0001\u0000\u0000\u0000\u0cf0ೱ\u0001\u0000\u0000\u0000ೱħ\u0001\u0000\u0000\u0000ೲ\u0cf3\u0005ĝ\u0000\u0000\u0cf3\u0cf4\u0005\u008a\u0000\u0000\u0cf4\u0cf5\u0005ħ\u0000\u0000\u0cf5\u0cf9\u0003ǒé\u0000\u0cf6\u0cf7\u0005ſ\u0000\u0000\u0cf7\u0cf8\u0005Ĩ\u0000\u0000\u0cf8\u0cfa\u0003~?\u0000\u0cf9\u0cf6\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0001\u0000\u0000\u0000\u0cfaത\u0001\u0000\u0000\u0000\u0cfb\u0cfc\u0005ĝ\u0000\u0000\u0cfc\u0cfd\u0005\u008a\u0000\u0000\u0cfdഇ\u0005b\u0000\u0000\u0cfe\u0cff\u0005\u0082\u0000\u0000\u0cffഀ\u0005ŋ\u0000\u0000ഀഁ\u0005$\u0000\u0000ഁഅ\u0003ǒé\u0000ംഃ\u0005s\u0000\u0000ഃഄ\u0005$\u0000\u0000ഄആ\u0003ǒé\u0000അം\u0001\u0000\u0000\u0000അആ\u0001\u0000\u0000\u0000ആഈ\u0001\u0000\u0000\u0000ഇ\u0cfe\u0001\u0000\u0000\u0000ഇഈ\u0001\u0000\u0000\u0000ഈഎ\u0001\u0000\u0000\u0000ഉഊ\u00058\u0000\u0000ഊഋ\u0005²\u0000\u0000ഋഌ\u0005ŋ\u0000\u0000ഌ\u0d0d\u0005$\u0000\u0000\u0d0dഏ\u0003ǒé\u0000എഉ\u0001\u0000\u0000\u0000എഏ\u0001\u0000\u0000\u0000ഏക\u0001\u0000\u0000\u0000ഐ\u0d11\u0005Ì\u0000\u0000\u0d11ഒ\u0005¶\u0000\u0000ഒഓ\u0005ŋ\u0000\u0000ഓഔ\u0005$\u0000\u0000ഔഖ\u0003ǒé\u0000കഐ\u0001\u0000\u0000\u0000കഖ\u0001\u0000\u0000\u0000ഖഛ\u0001\u0000\u0000\u0000ഗഘ\u0005Á\u0000\u0000ഘങ\u0005ŋ\u0000\u0000ങച\u0005$\u0000\u0000ചജ\u0003ǒé\u0000ഛഗ\u0001\u0000\u0000\u0000ഛജ\u0001\u0000\u0000\u0000ജഡ\u0001\u0000\u0000\u0000ഝഞ\u0005â\u0000\u0000ഞട\u0005_\u0000\u0000ടഠ\u0005\u0016\u0000\u0000ഠഢ\u0003ǒé\u0000ഡഝ\u0001\u0000\u0000\u0000ഡഢ\u0001\u0000\u0000\u0000ഢത\u0001\u0000\u0000\u0000ണೲ\u0001\u0000\u0000\u0000ണ\u0cfb\u0001\u0000\u0000\u0000തĩ\u0001\u0000\u0000\u0000ഥപ\u0003Ĭ\u0096\u0000ദധ\u0005\u0004\u0000\u0000ധഩ\u0003Ĭ\u0096\u0000നദ\u0001\u0000\u0000\u0000ഩബ\u0001\u0000\u0000\u0000പന\u0001\u0000\u0000\u0000പഫ\u0001\u0000\u0000\u0000ഫī\u0001\u0000\u0000\u0000ബപ\u0001\u0000\u0000\u0000ഭല\u0003ƾß\u0000മയ\u0005\u0005\u0000\u0000യറ\u0003ƾß\u0000രമ\u0001\u0000\u0000\u0000റഴ\u0001\u0000\u0000\u0000ലര\u0001\u0000\u0000\u0000ലള\u0001\u0000\u0000\u0000ളĭ\u0001\u0000\u0000\u0000ഴല\u0001\u0000\u0000\u0000വഺ\u0003İ\u0098\u0000ശഷ\u0005\u0004\u0000\u0000ഷഹ\u0003İ\u0098\u0000സശ\u0001\u0000\u0000\u0000ഹ഼\u0001\u0000\u0000\u0000ഺസ\u0001\u0000\u0000\u0000ഺ഻\u0001\u0000\u0000\u0000഻į\u0001\u0000\u0000\u0000഼ഺ\u0001\u0000\u0000\u0000ഽീ\u0003Ĭ\u0096\u0000ാി\u0005ê\u0000\u0000ിു\u0003~?\u0000ീാ\u0001\u0000\u0000\u0000ീു\u0001\u0000\u0000\u0000ുı\u0001\u0000\u0000\u0000ൂൃ\u0003ƾß\u0000ൃൄ\u0005\u0005\u0000\u0000ൄെ\u0001\u0000\u0000\u0000\u0d45ൂ\u0001\u0000\u0000\u0000\u0d45െ\u0001\u0000\u0000\u0000െേ\u0001\u0000\u0000\u0000േൈ\u0003ƾß\u0000ൈĳ\u0001\u0000\u0000\u0000\u0d49ൊ\u0003ƾß\u0000ൊോ\u0005\u0005\u0000\u0000ോ്\u0001\u0000\u0000\u0000ൌ\u0d49\u0001\u0000\u0000\u0000ൌ്\u0001\u0000\u0000\u0000്ൎ\u0001\u0000\u0000\u0000ൎ൏\u0003ƾß\u0000൏ĵ\u0001\u0000\u0000\u0000\u0d50൘\u0003ł¡\u0000\u0d51\u0d53\u0005\u0016\u0000\u0000\u0d52\u0d51\u0001\u0000\u0000\u0000\u0d52\u0d53\u0001\u0000\u0000\u0000\u0d53ൖ\u0001\u0000\u0000\u0000ൔൗ\u0003ƾß\u0000ൕൗ\u0003Ĉ\u0084\u0000ൖൔ\u0001\u0000\u0000\u0000ൖൕ\u0001\u0000\u0000\u0000ൗ൙\u0001\u0000\u0000\u0000൘\u0d52\u0001\u0000\u0000\u0000൘൙\u0001\u0000\u0000\u0000൙ķ\u0001\u0000\u0000\u0000൚ൟ\u0003Ķ\u009b\u0000൛൜\u0005\u0004\u0000\u0000൜൞\u0003Ķ\u009b\u0000൝൛\u0001\u0000\u0000\u0000൞ൡ\u0001\u0000\u0000\u0000ൟ൝\u0001\u0000\u0000\u0000ൟൠ\u0001\u0000\u0000\u0000ൠĹ\u0001\u0000\u0000\u0000ൡൟ\u0001\u0000\u0000\u0000ൢൣ\u0005\u0002\u0000\u0000ൣ൨\u0003ļ\u009e\u0000\u0d64\u0d65\u0005\u0004\u0000\u0000\u0d65൧\u0003ļ\u009e\u0000൦\u0d64\u0001\u0000\u0000\u0000൧൪\u0001\u0000\u0000\u0000൨൦\u0001\u0000\u0000\u0000൨൩\u0001\u0000\u0000\u0000൩൫\u0001\u0000\u0000\u0000൪൨\u0001\u0000\u0000\u0000൫൬\u0005\u0003\u0000\u0000൬Ļ\u0001\u0000\u0000\u0000൭൰\u0003ľ\u009f\u0000൮൰\u0003ƊÅ\u0000൯൭\u0001\u0000\u0000\u0000൯൮\u0001\u0000\u0000\u0000൰Ľ\u0001\u0000\u0000\u0000൱ൿ\u0003ƼÞ\u0000൲൳\u0003ǂá\u0000൳൴\u0005\u0002\u0000\u0000൴൹\u0003ŀ \u0000൵൶\u0005\u0004\u0000\u0000൶൸\u0003ŀ \u0000൷൵\u0001\u0000\u0000\u0000൸ൻ\u0001\u0000\u0000\u0000൹൷\u0001\u0000\u0000\u0000൹ൺ\u0001\u0000\u0000\u0000ൺർ\u0001\u0000\u0000\u0000ൻ൹\u0001\u0000\u0000\u0000ർൽ\u0005\u0003\u0000\u0000ൽൿ\u0001\u0000\u0000\u0000ൾ൱\u0001\u0000\u0000\u0000ൾ൲\u0001\u0000\u0000\u0000ൿĿ\u0001\u0000\u0000\u0000\u0d80ඃ\u0003ƼÞ\u0000ඁඃ\u0003Ś\u00ad\u0000ං\u0d80\u0001\u0000\u0000\u0000ංඁ\u0001\u0000\u0000\u0000ඃŁ\u0001\u0000\u0000\u0000\u0d84අ\u0003Ŋ¥\u0000අŃ\u0001\u0000\u0000\u0000ආඇ\u0003ǂá\u0000ඇඈ\u0005Ɲ\u0000\u0000ඈඉ\u0003ł¡\u0000ඉŅ\u0001\u0000\u0000\u0000ඊඍ\u0003ł¡\u0000උඍ\u0003ń¢\u0000ඌඊ\u0001\u0000\u0000\u0000ඌඋ\u0001\u0000\u0000\u0000ඍŇ\u0001\u0000\u0000\u0000ඎඓ\u0003ł¡\u0000ඏඐ\u0005\u0004\u0000\u0000ඐඒ\u0003ł¡\u0000එඏ\u0001\u0000\u0000\u0000ඒඕ\u0001\u0000\u0000\u0000ඓඑ\u0001\u0000\u0000\u0000ඓඔ\u0001\u0000\u0000\u0000ඔŉ\u0001\u0000\u0000\u0000ඕඓ\u0001\u0000\u0000\u0000ඖ\u0d97\u0006¥\uffff\uffff\u0000\u0d97\u0d98\u0007\u001b\u0000\u0000\u0d98ඣ\u0003Ŋ¥\u0005\u0d99ක\u0005x\u0000\u0000කඛ\u0005\u0002\u0000\u0000ඛග\u0003b1\u0000ගඝ\u0005\u0003\u0000\u0000ඝඣ\u0001\u0000\u0000\u0000ඞච\u0003Ő¨\u0000ඟඡ\u0003Ō¦\u0000චඟ\u0001\u0000\u0000\u0000චඡ\u0001\u0000\u0000\u0000ඡඣ\u0001\u0000\u0000\u0000ජඖ\u0001\u0000\u0000\u0000ජ\u0d99\u0001\u0000\u0000\u0000ජඞ\u0001\u0000\u0000\u0000ඣඬ\u0001\u0000\u0000\u0000ඤඥ\n\u0002\u0000\u0000ඥඦ\u0005\u0010\u0000\u0000ඦණ\u0003Ŋ¥\u0003ටඨ\n\u0001\u0000\u0000ඨඩ\u0005ë\u0000\u0000ඩණ\u0003Ŋ¥\u0002ඪඤ\u0001\u0000\u0000\u0000ඪට\u0001\u0000\u0000\u0000ණථ\u0001\u0000\u0000\u0000ඬඪ\u0001\u0000\u0000\u0000ඬත\u0001\u0000\u0000\u0000තŋ\u0001\u0000\u0000\u0000ථඬ\u0001\u0000\u0000\u0000දන\u0003Ŏ§\u0000ධද\u0001\u0000\u0000\u0000ධන\u0001\u0000\u0000\u0000න\u0db2\u0001\u0000\u0000\u0000\u0db2ඳ\u0005\u001c\u0000\u0000ඳප\u0003Ő¨\u0000පඵ\u0005\u0010\u0000\u0000ඵබ\u0003Ő¨\u0000බข\u0001\u0000\u0000\u0000භඹ\u0003Ŏ§\u0000මභ\u0001\u0000\u0000\u0000මඹ\u0001\u0000\u0000\u0000ඹය\u0001\u0000\u0000\u0000යර\u0005¡\u0000\u0000ර\u0dbc\u0005\u0002\u0000\u0000\u0dbcශ\u0003ł¡\u0000ල\u0dbe\u0005\u0004\u0000\u0000\u0dbeව\u0003ł¡\u0000\u0dbfල\u0001\u0000\u0000\u0000වස\u0001\u0000\u0000\u0000ශ\u0dbf\u0001\u0000\u0000\u0000ශෂ\u0001\u0000\u0000\u0000ෂහ\u0001\u0000\u0000\u0000සශ\u0001\u0000\u0000\u0000හළ\u0005\u0003\u0000\u0000ළข\u0001\u0000\u0000\u0000ෆ\u0dc8\u0003Ŏ§\u0000\u0dc7ෆ\u0001\u0000\u0000\u0000\u0dc7\u0dc8\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9්\u0005¡\u0000\u0000්\u0dcb\u0005\u0002\u0000\u0000\u0dcb\u0dcc\u0003b1\u0000\u0dcc\u0dcd\u0005\u0003\u0000\u0000\u0dcdข\u0001\u0000\u0000\u0000\u0dceැ\u0003Ŏ§\u0000ා\u0dce\u0001\u0000\u0000\u0000ාැ\u0001\u0000\u0000\u0000ැෑ\u0001\u0000\u0000\u0000ෑි\u0005Ę\u0000\u0000ිข\u0003Ő¨\u0000ී\u0dd5\u0003Ŏ§\u0000ුී\u0001\u0000\u0000\u0000ු\u0dd5\u0001\u0000\u0000\u0000\u0dd5ූ\u0001\u0000\u0000\u0000ූ\u0dd7\u0007\u001c\u0000\u0000\u0dd7\u0de5\u0007\u001d\u0000\u0000ෘෙ\u0005\u0002\u0000\u0000ෙ෦\u0005\u0003\u0000\u0000ේෛ\u0005\u0002\u0000\u0000ෛ\u0de0\u0003ł¡\u0000ොෝ\u0005\u0004\u0000\u0000ෝෟ\u0003ł¡\u0000ෞො\u0001\u0000\u0000\u0000ෟ\u0de2\u0001\u0000\u0000\u0000\u0de0ෞ\u0001\u0000\u0000\u0000\u0de0\u0de1\u0001\u0000\u0000\u0000\u0de1\u0de3\u0001\u0000\u0000\u0000\u0de2\u0de0\u0001\u0000\u0000\u0000\u0de3\u0de4\u0005\u0003\u0000\u0000\u0de4෦\u0001\u0000\u0000\u0000\u0de5ෘ\u0001\u0000\u0000\u0000\u0de5ේ\u0001\u0000\u0000\u0000෦ข\u0001\u0000\u0000\u0000෧෩\u0003Ŏ§\u0000෨෧\u0001\u0000\u0000\u0000෨෩\u0001\u0000\u0000\u0000෩෪\u0001\u0000\u0000\u0000෪෫\u0007\u001c\u0000\u0000෫෮\u0003Ő¨\u0000෬෭\u0005r\u0000\u0000෭෯\u0003ǒé\u0000෮෬\u0001\u0000\u0000\u0000෮෯\u0001\u0000\u0000\u0000෯ข\u0001\u0000\u0000\u0000\u0df0ෲ\u0005±\u0000\u0000\u0df1ෳ\u0003Ŏ§\u0000ෲ\u0df1\u0001\u0000\u0000\u0000ෲෳ\u0001\u0000\u0000\u0000ෳ෴\u0001\u0000\u0000\u0000෴ข\u0005â\u0000\u0000\u0df5\u0df7\u0005±\u0000\u0000\u0df6\u0df8\u0003Ŏ§\u0000\u0df7\u0df6\u0001\u0000\u0000\u0000\u0df7\u0df8\u0001\u0000\u0000\u0000\u0df8\u0df9\u0001\u0000\u0000\u0000\u0df9ข\u0007\u001e\u0000\u0000\u0dfa\u0dfc\u0005±\u0000\u0000\u0dfb\u0dfd\u0003Ŏ§\u0000\u0dfc\u0dfb\u0001\u0000\u0000\u0000\u0dfc\u0dfd\u0001\u0000\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe\u0dff\u0005i\u0000\u0000\u0dff\u0e00\u0005\u008d\u0000\u0000\u0e00ข\u0003Ő¨\u0000กධ\u0001\u0000\u0000\u0000กම\u0001\u0000\u0000\u0000ก\u0dc7\u0001\u0000\u0000\u0000กා\u0001\u0000\u0000\u0000กු\u0001\u0000\u0000\u0000ก෨\u0001\u0000\u0000\u0000ก\u0df0\u0001\u0000\u0000\u0000ก\u0df5\u0001\u0000\u0000\u0000ก\u0dfa\u0001\u0000\u0000\u0000ขō\u0001\u0000\u0000\u0000ฃค\u0007\u001b\u0000\u0000คŏ\u0001\u0000\u0000\u0000ฅฆ\u0006¨\uffff\uffff\u0000ฆช\u0003Ŗ«\u0000งจ\u0007\u001f\u0000\u0000จช\u0003Ő¨\bฉฅ\u0001\u0000\u0000\u0000ฉง\u0001\u0000\u0000\u0000ชฤ\u0001\u0000\u0000\u0000ซฌ\n\u0007\u0000\u0000ฌญ\u0007 \u0000\u0000ญร\u0003Ő¨\bฎฏ\n\u0006\u0000\u0000ฏฐ\u0007!\u0000\u0000ฐร\u0003Ő¨\u0007ฑฒ\n\u0005\u0000\u0000ฒณ\u0003Œ©\u0000ณด\u0003Ő¨\u0006ดร\u0001\u0000\u0000\u0000ตถ\n\u0004\u0000\u0000ถท\u0005ƕ\u0000\u0000ทร\u0003Ő¨\u0005ธน\n\u0003\u0000\u0000นบ\u0005ƙ\u0000\u0000บร\u0003Ő¨\u0004ปผ\n\u0002\u0000\u0000ผฝ\u0005Ɩ\u0000\u0000ฝร\u0003Ő¨\u0003พฟ\n\u0001\u0000\u0000ฟภ\u0003Ŝ®\u0000ภม\u0003Ő¨\u0002มร\u0001\u0000\u0000\u0000ยซ\u0001\u0000\u0000\u0000ยฎ\u0001\u0000\u0000\u0000ยฑ\u0001\u0000\u0000\u0000ยต\u0001\u0000\u0000\u0000ยธ\u0001\u0000\u0000\u0000ยป\u0001\u0000\u0000\u0000ยพ\u0001\u0000\u0000\u0000รฦ\u0001\u0000\u0000\u0000ฤย\u0001\u0000\u0000\u0000ฤล\u0001\u0000\u0000\u0000ลő\u0001\u0000\u0000\u0000ฦฤ\u0001\u0000\u0000\u0000วศ\u0007\"\u0000\u0000ศœ\u0001\u0000\u0000\u0000ษส\u0007#\u0000\u0000สŕ\u0001\u0000\u0000\u0000หฬ\u0006«\uffff\uffff\u0000ฬ༟\u0007$\u0000\u0000อฮ\u0007%\u0000\u0000ฮั\u0005\u0002\u0000\u0000ฯา\u0003Ŕª\u0000ะา\u0003ǒé\u0000ัฯ\u0001\u0000\u0000\u0000ัะ\u0001\u0000\u0000\u0000าำ\u0001\u0000\u0000\u0000ำิ\u0005\u0004\u0000\u0000ิี\u0003Ő¨\u0000ีึ\u0005\u0004\u0000\u0000ึื\u0003Ő¨\u0000ืุ\u0005\u0003\u0000\u0000ุ༟\u0001\u0000\u0000\u0000ฺู\u0007&\u0000\u0000ฺ\u0e3d\u0005\u0002\u0000\u0000\u0e3b\u0e3e\u0003Ŕª\u0000\u0e3c\u0e3e\u0003ǒé\u0000\u0e3d\u0e3b\u0001\u0000\u0000\u0000\u0e3d\u0e3c\u0001\u0000\u0000\u0000\u0e3e฿\u0001\u0000\u0000\u0000฿เ\u0005\u0004\u0000\u0000เแ\u0003Ő¨\u0000แโ\u0005\u0004\u0000\u0000โใ\u0003Ő¨\u0000ใไ\u0005\u0003\u0000\u0000ไ༟\u0001\u0000\u0000\u0000ๅ็\u0005*\u0000\u0000ๆ่\u0003ƬÖ\u0000็ๆ\u0001\u0000\u0000\u0000่้\u0001\u0000\u0000\u0000้็\u0001\u0000\u0000\u0000้๊\u0001\u0000\u0000\u0000๊ํ\u0001\u0000\u0000\u0000๋์\u0005o\u0000\u0000์๎\u0003ł¡\u0000ํ๋\u0001\u0000\u0000\u0000ํ๎\u0001\u0000\u0000\u0000๎๏\u0001\u0000\u0000\u0000๏๐\u0005q\u0000\u0000๐༟\u0001\u0000\u0000\u0000๑๒\u0005*\u0000\u0000๒๔\u0003ł¡\u0000๓๕\u0003ƬÖ\u0000๔๓\u0001\u0000\u0000\u0000๕๖\u0001\u0000\u0000\u0000๖๔\u0001\u0000\u0000\u0000๖๗\u0001\u0000\u0000\u0000๗๚\u0001\u0000\u0000\u0000๘๙\u0005o\u0000\u0000๙๛\u0003ł¡\u0000๚๘\u0001\u0000\u0000\u0000๚๛\u0001\u0000\u0000\u0000๛\u0e5c\u0001\u0000\u0000\u0000\u0e5c\u0e5d\u0005q\u0000\u0000\u0e5d༟\u0001\u0000\u0000\u0000\u0e5e\u0e5f\u0007'\u0000\u0000\u0e5f\u0e60\u0005\u0002\u0000\u0000\u0e60\u0e61\u0003ł¡\u0000\u0e61\u0e62\u0005\u0016\u0000\u0000\u0e62\u0e63\u0003ż¾\u0000\u0e63\u0e64\u0005\u0003\u0000\u0000\u0e64༟\u0001\u0000\u0000\u0000\u0e65\u0e66\u0005Ŀ\u0000\u0000\u0e66\u0e6f\u0005\u0002\u0000\u0000\u0e67\u0e6c\u0003Ķ\u009b\u0000\u0e68\u0e69\u0005\u0004\u0000\u0000\u0e69\u0e6b\u0003Ķ\u009b\u0000\u0e6a\u0e68\u0001\u0000\u0000\u0000\u0e6b\u0e6e\u0001\u0000\u0000\u0000\u0e6c\u0e6a\u0001\u0000\u0000\u0000\u0e6c\u0e6d\u0001\u0000\u0000\u0000\u0e6d\u0e70\u0001\u0000\u0000\u0000\u0e6e\u0e6c\u0001\u0000\u0000\u0000\u0e6f\u0e67\u0001\u0000\u0000\u0000\u0e6f\u0e70\u0001\u0000\u0000\u0000\u0e70\u0e71\u0001\u0000\u0000\u0000\u0e71༟\u0005\u0003\u0000\u0000\u0e72\u0e73\u0005\u0085\u0000\u0000\u0e73\u0e74\u0005\u0002\u0000\u0000\u0e74\u0e77\u0003ł¡\u0000\u0e75\u0e76\u0005\u009e\u0000\u0000\u0e76\u0e78\u0005ã\u0000\u0000\u0e77\u0e75\u0001\u0000\u0000\u0000\u0e77\u0e78\u0001\u0000\u0000\u0000\u0e78\u0e79\u0001\u0000\u0000\u0000\u0e79\u0e7a\u0005\u0003\u0000\u0000\u0e7a༟\u0001\u0000\u0000\u0000\u0e7b\u0e7c\u0005\u0013\u0000\u0000\u0e7c\u0e7d\u0005\u0002\u0000\u0000\u0e7d\u0e80\u0003ł¡\u0000\u0e7e\u0e7f\u0005\u009e\u0000\u0000\u0e7fກ\u0005ã\u0000\u0000\u0e80\u0e7e\u0001\u0000\u0000\u0000\u0e80ກ\u0001\u0000\u0000\u0000ກຂ\u0001\u0000\u0000\u0000ຂ\u0e83\u0005\u0003\u0000\u0000\u0e83༟\u0001\u0000\u0000\u0000ຄ\u0e85\u0005¸\u0000\u0000\u0e85ຆ\u0005\u0002\u0000\u0000ຆຉ\u0003ł¡\u0000ງຈ\u0005\u009e\u0000\u0000ຈຊ\u0005ã\u0000\u0000ຉງ\u0001\u0000\u0000\u0000ຉຊ\u0001\u0000\u0000\u0000ຊ\u0e8b\u0001\u0000\u0000\u0000\u0e8bຌ\u0005\u0003\u0000\u0000ຌ༟\u0001\u0000\u0000\u0000ຍຎ\u0005ú\u0000\u0000ຎຏ\u0005\u0002\u0000\u0000ຏຐ\u0003Ő¨\u0000ຐຑ\u0005¡\u0000\u0000ຑຒ\u0003Ő¨\u0000ຒຓ\u0005\u0003\u0000\u0000ຓ༟\u0001\u0000\u0000\u0000ດ༟\u0003Ś\u00ad\u0000ຕທ\u0005Ƒ\u0000\u0000ຖຘ\u0003¾_\u0000ທຖ\u0001\u0000\u0000\u0000ທຘ\u0001\u0000\u0000\u0000ຘ༟\u0001\u0000\u0000\u0000ນບ\u0003ƼÞ\u0000ບປ\u0005\u0005\u0000\u0000ປຝ\u0005Ƒ\u0000\u0000ຜພ\u0003¾_\u0000ຝຜ\u0001\u0000\u0000\u0000ຝພ\u0001\u0000\u0000\u0000ພ༟\u0001\u0000\u0000\u0000ຟຠ\u0005\u0002\u0000\u0000ຠຣ\u0003Ķ\u009b\u0000ມຢ\u0005\u0004\u0000\u0000ຢ\u0ea4\u0003Ķ\u009b\u0000ຣມ\u0001\u0000\u0000\u0000\u0ea4ລ\u0001\u0000\u0000\u0000ລຣ\u0001\u0000\u0000\u0000ລ\u0ea6\u0001\u0000\u0000\u0000\u0ea6ວ\u0001\u0000\u0000\u0000ວຨ\u0005\u0003\u0000\u0000ຨ༟\u0001\u0000\u0000\u0000ຩສ\u0005\u0002\u0000\u0000ສຫ\u0003b1\u0000ຫຬ\u0005\u0003\u0000\u0000ຬ༟\u0001\u0000\u0000\u0000ອຮ\u0003ƺÝ\u0000ຮ຺\u0005\u0002\u0000\u0000ຯັ\u0003ø|\u0000ະຯ\u0001\u0000\u0000\u0000ະັ\u0001\u0000\u0000\u0000ັາ\u0001\u0000\u0000\u0000າື\u0003ņ£\u0000ຳິ\u0005\u0004\u0000\u0000ິຶ\u0003ņ£\u0000ີຳ\u0001\u0000\u0000\u0000ຶູ\u0001\u0000\u0000\u0000ືີ\u0001\u0000\u0000\u0000ືຸ\u0001\u0000\u0000\u0000ຸົ\u0001\u0000\u0000\u0000ູື\u0001\u0000\u0000\u0000຺ະ\u0001\u0000\u0000\u0000຺ົ\u0001\u0000\u0000\u0000ົຼ\u0001\u0000\u0000\u0000ຼ໌\u0005\u0003\u0000\u0000ຽ\u0ebe\u0005ƀ\u0000\u0000\u0ebe\u0ebf\u0005\u0094\u0000\u0000\u0ebfເ\u0005\u0002\u0000\u0000ເແ\u0005ì\u0000\u0000ແໂ\u0005$\u0000\u0000ໂ\u0ec7\u0003¤R\u0000ໃໄ\u0005\u0004\u0000\u0000ໄໆ\u0003¤R\u0000\u0ec5ໃ\u0001\u0000\u0000\u0000ໆ້\u0001\u0000\u0000\u0000\u0ec7\u0ec5\u0001\u0000\u0000\u0000\u0ec7່\u0001\u0000\u0000\u0000່໊\u0001\u0000\u0000\u0000້\u0ec7\u0001\u0000\u0000\u0000໊໋\u0005\u0003\u0000\u0000໋ໍ\u0001\u0000\u0000\u0000໌ຽ\u0001\u0000\u0000\u0000໌ໍ\u0001\u0000\u0000\u0000ໍ໔\u0001\u0000\u0000\u0000\u0ece\u0ecf\u0005\u0083\u0000\u0000\u0ecf໐\u0005\u0002\u0000\u0000໐໑\u0005ż\u0000\u0000໑໒\u0003Ŋ¥\u0000໒໓\u0005\u0003\u0000\u0000໓໕\u0001\u0000\u0000\u0000໔\u0ece\u0001\u0000\u0000\u0000໔໕\u0001\u0000\u0000\u0000໕໘\u0001\u0000\u0000\u0000໖໗\u0007(\u0000\u0000໗໙\u0005ã\u0000\u0000໘໖\u0001\u0000\u0000\u0000໘໙\u0001\u0000\u0000\u0000໙ໜ\u0001\u0000\u0000\u0000\u0eda\u0edb\u0005ð\u0000\u0000\u0edbໝ\u0003ƲÙ\u0000ໜ\u0eda\u0001\u0000\u0000\u0000ໜໝ\u0001\u0000\u0000\u0000ໝ༟\u0001\u0000\u0000\u0000ໞໟ\u0003ǂá\u0000ໟ\u0ee0\u0005Ɯ\u0000\u0000\u0ee0\u0ee1\u0003ł¡\u0000\u0ee1༟\u0001\u0000\u0000\u0000\u0ee2\u0ee3\u0005\u0002\u0000\u0000\u0ee3\u0ee6\u0003ǂá\u0000\u0ee4\u0ee5\u0005\u0004\u0000\u0000\u0ee5\u0ee7\u0003ǂá\u0000\u0ee6\u0ee4\u0001\u0000\u0000\u0000\u0ee7\u0ee8\u0001\u0000\u0000\u0000\u0ee8\u0ee6\u0001\u0000\u0000\u0000\u0ee8\u0ee9\u0001\u0000\u0000\u0000\u0ee9\u0eea\u0001\u0000\u0000\u0000\u0eea\u0eeb\u0005\u0003\u0000\u0000\u0eeb\u0eec\u0005Ɯ\u0000\u0000\u0eec\u0eed\u0003ł¡\u0000\u0eed༟\u0001\u0000\u0000\u0000\u0eee༟\u0003ǂá\u0000\u0eef\u0ef0\u0005\u0002\u0000\u0000\u0ef0\u0ef1\u0003ł¡\u0000\u0ef1\u0ef2\u0005\u0003\u0000\u0000\u0ef2༟\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0005\u007f\u0000\u0000\u0ef4\u0ef5\u0005\u0002\u0000\u0000\u0ef5\u0ef6\u0003ǂá\u0000\u0ef6\u0ef7\u0005\u008d\u0000\u0000\u0ef7\u0ef8\u0003Ő¨\u0000\u0ef8\u0ef9\u0005\u0003\u0000\u0000\u0ef9༟\u0001\u0000\u0000\u0000\u0efa\u0efb\u0007)\u0000\u0000\u0efb\u0efc\u0005\u0002\u0000\u0000\u0efc\u0efd\u0003Ő¨\u0000\u0efd\u0efe\u0007*\u0000\u0000\u0efe༁\u0003Ő¨\u0000\u0effༀ\u0007+\u0000\u0000ༀ༂\u0003Ő¨\u0000༁\u0eff\u0001\u0000\u0000\u0000༁༂\u0001\u0000\u0000\u0000༂༃\u0001\u0000\u0000\u0000༃༄\u0005\u0003\u0000\u0000༄༟\u0001\u0000\u0000\u0000༅༆\u0005Ŝ\u0000\u0000༆༈\u0005\u0002\u0000\u0000༇༉\u0007,\u0000\u0000༈༇\u0001\u0000\u0000\u0000༈༉\u0001\u0000\u0000\u0000༉་\u0001\u0000\u0000\u0000༊༌\u0003Ő¨\u0000་༊\u0001\u0000\u0000\u0000་༌\u0001\u0000\u0000\u0000༌།\u0001\u0000\u0000\u0000།༎\u0005\u008d\u0000\u0000༎༏\u0003Ő¨\u0000༏༐\u0005\u0003\u0000\u0000༐༟\u0001\u0000\u0000\u0000༑༒\u0005ò\u0000\u0000༒༓\u0005\u0002\u0000\u0000༓༔\u0003Ő¨\u0000༔༕\u0005ù\u0000\u0000༕༖\u0003Ő¨\u0000༖༗\u0005\u008d\u0000\u0000༗༚\u0003Ő¨\u0000༘༙\u0005\u0088\u0000\u0000༙༛\u0003Ő¨\u0000༚༘\u0001\u0000\u0000\u0000༚༛\u0001\u0000\u0000\u0000༛༜\u0001\u0000\u0000\u0000༜༝\u0005\u0003\u0000\u0000༝༟\u0001\u0000\u0000\u0000༞ห\u0001\u0000\u0000\u0000༞อ\u0001\u0000\u0000\u0000༞ู\u0001\u0000\u0000\u0000༞ๅ\u0001\u0000\u0000\u0000༞๑\u0001\u0000\u0000\u0000༞\u0e5e\u0001\u0000\u0000\u0000༞\u0e65\u0001\u0000\u0000\u0000༞\u0e72\u0001\u0000\u0000\u0000༞\u0e7b\u0001\u0000\u0000\u0000༞ຄ\u0001\u0000\u0000\u0000༞ຍ\u0001\u0000\u0000\u0000༞ດ\u0001\u0000\u0000\u0000༞ຕ\u0001\u0000\u0000\u0000༞ນ\u0001\u0000\u0000\u0000༞ຟ\u0001\u0000\u0000\u0000༞ຩ\u0001\u0000\u0000\u0000༞ອ\u0001\u0000\u0000\u0000༞ໞ\u0001\u0000\u0000\u0000༞\u0ee2\u0001\u0000\u0000\u0000༞\u0eee\u0001\u0000\u0000\u0000༞\u0eef\u0001\u0000\u0000\u0000༞\u0ef3\u0001\u0000\u0000\u0000༞\u0efa\u0001\u0000\u0000\u0000༞༅\u0001\u0000\u0000\u0000༞༑\u0001\u0000\u0000\u0000༟༯\u0001\u0000\u0000\u0000༠༡\n\u0017\u0000\u0000༡༮\u0003Ÿ¼\u0000༢༣\n\u0016\u0000\u0000༣༤\u0005ƛ\u0000\u0000༤༮\u0003ż¾\u0000༥༦\n\b\u0000\u0000༦༧\u0005\u0006\u0000\u0000༧༨\u0003Ő¨\u0000༨༩\u0005\u0007\u0000\u0000༩༮\u0001\u0000\u0000\u0000༪༫\n\u0006\u0000\u0000༫༬\u0005\u0005\u0000\u0000༬༮\u0003ǂá\u0000༭༠\u0001\u0000\u0000\u0000༭༢\u0001\u0000\u0000\u0000༭༥\u0001\u0000\u0000\u0000༭༪\u0001\u0000\u0000\u0000༮༱\u0001\u0000\u0000\u0000༯༭\u0001\u0000\u0000\u0000༯༰\u0001\u0000\u0000\u0000༰ŗ\u0001\u0000\u0000\u0000༱༯\u0001\u0000\u0000\u0000༲༺\u0005S\u0000\u0000༳༺\u0005ŏ\u0000\u0000༴༺\u0005Ő\u0000\u0000༵༺\u0005ő\u0000\u0000༶༺\u0005¬\u0000\u0000༷༺\u0005\u0098\u0000\u0000༸༺\u0003ǂá\u0000༹༲\u0001\u0000\u0000\u0000༹༳\u0001\u0000\u0000\u0000༹༴\u0001\u0000\u0000\u0000༹༵\u0001\u0000\u0000\u0000༹༶\u0001\u0000\u0000\u0000༹༷\u0001\u0000\u0000\u0000༹༸\u0001\u0000\u0000\u0000༺ř\u0001\u0000\u0000\u0000༻ཋ\u0005â\u0000\u0000༼ཋ\u0005Ơ\u0000\u0000༽༾\u0005ƚ\u0000\u0000༾ཋ\u0003ǂá\u0000༿ཋ\u0003Ť²\u0000ཀཁ\u0003Ř¬\u0000ཁག\u0003ǒé\u0000གཋ\u0001\u0000\u0000\u0000གྷཋ\u0003Ǌå\u0000ངཋ\u0003Ţ±\u0000ཅཇ\u0003ǒé\u0000ཆཅ\u0001\u0000\u0000\u0000ཇ\u0f48\u0001\u0000\u0000\u0000\u0f48ཆ\u0001\u0000\u0000\u0000\u0f48ཉ\u0001\u0000\u0000\u0000ཉཋ\u0001\u0000\u0000\u0000ཊ༻\u0001\u0000\u0000\u0000ཊ༼\u0001\u0000\u0000\u0000ཊ༽\u0001\u0000\u0000\u0000ཊ༿\u0001\u0000\u0000\u0000ཊཀ\u0001\u0000\u0000\u0000ཊགྷ\u0001\u0000\u0000\u0000ཊང\u0001\u0000\u0000\u0000ཊཆ\u0001\u0000\u0000\u0000ཋś\u0001\u0000\u0000\u0000ཌཌྷ\u0007-\u0000\u0000ཌྷŝ\u0001\u0000\u0000\u0000ཎཏ\u0007.\u0000\u0000ཏş\u0001\u0000\u0000\u0000ཐད\u0007/\u0000\u0000དš\u0001\u0000\u0000\u0000དྷན\u00070\u0000\u0000ནţ\u0001\u0000\u0000\u0000པབྷ\u0005¬\u0000\u0000ཕམ\u0003Ŧ³\u0000བམ\u0003Ūµ\u0000བྷཕ\u0001\u0000\u0000\u0000བྷབ\u0001\u0000\u0000\u0000མť\u0001\u0000\u0000\u0000ཙཛ\u0003Ũ´\u0000ཚཛྷ\u0003Ŭ¶\u0000ཛཚ\u0001\u0000\u0000\u0000ཛཛྷ\u0001\u0000\u0000\u0000ཛྷŧ\u0001\u0000\u0000\u0000ཝཞ\u0003Ů·\u0000ཞཟ\u0003Ű¸\u0000ཟཡ\u0001\u0000\u0000\u0000འཝ\u0001\u0000\u0000\u0000ཡར\u0001\u0000\u0000\u0000རའ\u0001\u0000\u0000\u0000རལ\u0001\u0000\u0000\u0000ལũ\u0001\u0000\u0000\u0000ཤཧ\u0003Ŭ¶\u0000ཥཨ\u0003Ũ´\u0000སཨ\u0003Ŭ¶\u0000ཧཥ\u0001\u0000\u0000\u0000ཧས\u0001\u0000\u0000\u0000ཧཨ\u0001\u0000\u0000\u0000ཨū\u0001\u0000\u0000\u0000ཀྵཪ\u0003Ů·\u0000ཪཫ\u0003Ų¹\u0000ཫཬ\u0005ŕ\u0000\u0000ཬ\u0f6d\u0003Ų¹\u0000\u0f6dŭ\u0001\u0000\u0000\u0000\u0f6e\u0f70\u00071\u0000\u0000\u0f6f\u0f6e\u0001\u0000\u0000\u0000\u0f6f\u0f70\u0001\u0000\u0000\u0000\u0f70ུ\u0001\u0000\u0000\u0000ཱཱུ\u0005Ʀ\u0000\u0000ཱིུ\u0005ƨ\u0000\u0000ཱཱིུ\u0003ǒé\u0000ཱུ\u0001\u0000\u0000\u0000ིུ\u0001\u0000\u0000\u0000ཱིུ\u0001\u0000\u0000\u0000ཱུů\u0001\u0000\u0000\u0000ྲྀཷ\u00072\u0000\u0000ཷű\u0001\u0000\u0000\u0000ླྀཹ\u00073\u0000\u0000ཹų\u0001\u0000\u0000\u0000ེཾ\u0005\u0085\u0000\u0000ཻོ\u0005\n\u0000\u0000ོཾ\u0003ƾß\u0000ཽེ\u0001\u0000\u0000\u0000ཽཻ\u0001\u0000\u0000\u0000ཾŵ\u0001\u0000\u0000\u0000ཿྀ\u0005^\u0000\u0000ཱྀྀ\u00057\u0000\u0000ཱྀྂ\u0003ǂá\u0000ྂŷ\u0001\u0000\u0000\u0000྄ྃ\u00056\u0000\u0000྄྅\u0003Ĭ\u0096\u0000྅Ź\u0001\u0000\u0000\u0000྆ྩ\u0005 \u0000\u0000྇ྩ\u0005Ŕ\u0000\u0000ྈྩ\u0005%\u0000\u0000ྉྩ\u0005ı\u0000\u0000ྊྩ\u0005ĭ\u0000\u0000ྋྩ\u0005\u00ad\u0000\u0000ྌྩ\u0005®\u0000\u0000ྍྩ\u0005\u001d\u0000\u0000ྎྩ\u0005É\u0000\u0000ྏྩ\u0005\u0086\u0000\u0000ྐྩ\u0005Ą\u0000\u0000ྑྩ\u0005m\u0000\u0000ྒྩ\u0005S\u0000\u0000ྒྷྩ\u0005ŏ\u0000\u0000ྔྩ\u0005ő\u0000\u0000ྕྩ\u0005Ő\u0000\u0000ྖ\u0f98\u0005ľ\u0000\u0000ྗྙ\u0003Ÿ¼\u0000\u0f98ྗ\u0001\u0000\u0000\u0000\u0f98ྙ\u0001\u0000\u0000\u0000ྙྩ\u0001\u0000\u0000\u0000ྚྩ\u00050\u0000\u0000ྛྩ\u0005/\u0000\u0000ྜྩ\u0005ű\u0000\u0000ྜྷྩ\u0005\u001e\u0000\u0000ྞྩ\u0005\\\u0000\u0000ྟྩ\u0005[\u0000\u0000ྠྩ\u0005ä\u0000\u0000ྡྩ\u0005Ÿ\u0000\u0000ྡྷྩ\u0005¬\u0000\u0000ྣྩ\u0005Ŵ\u0000\u0000ྤྩ\u0005\u0015\u0000\u0000ྥྩ\u0005Ŀ\u0000\u0000ྦྩ\u0005Ì\u0000\u0000ྦྷྩ\u0003ǂá\u0000ྨ྆\u0001\u0000\u0000\u0000ྨ྇\u0001\u0000\u0000\u0000ྨྈ\u0001\u0000\u0000\u0000ྨྉ\u0001\u0000\u0000\u0000ྨྊ\u0001\u0000\u0000\u0000ྨྋ\u0001\u0000\u0000\u0000ྨྌ\u0001\u0000\u0000\u0000ྨྍ\u0001\u0000\u0000\u0000ྨྎ\u0001\u0000\u0000\u0000ྨྏ\u0001\u0000\u0000\u0000ྨྐ\u0001\u0000\u0000\u0000ྨྑ\u0001\u0000\u0000\u0000ྨྒ\u0001\u0000\u0000\u0000ྨྒྷ\u0001\u0000\u0000\u0000ྨྔ\u0001\u0000\u0000\u0000ྨྕ\u0001\u0000\u0000\u0000ྨྖ\u0001\u0000\u0000\u0000ྨྚ\u0001\u0000\u0000\u0000ྨྛ\u0001\u0000\u0000\u0000ྨྜ\u0001\u0000\u0000\u0000ྨྜྷ\u0001\u0000\u0000\u0000ྨྞ\u0001\u0000\u0000\u0000ྨྟ\u0001\u0000\u0000\u0000ྨྠ\u0001\u0000\u0000\u0000ྨྡ\u0001\u0000\u0000\u0000ྨྡྷ\u0001\u0000\u0000\u0000ྨྣ\u0001\u0000\u0000\u0000ྨྤ\u0001\u0000\u0000\u0000ྨྥ\u0001\u0000\u0000\u0000ྨྦ\u0001\u0000\u0000\u0000ྨྦྷ\u0001\u0000\u0000\u0000ྩŻ\u0001\u0000\u0000\u0000ྪྫ\u0005\u0015\u0000\u0000ྫྫྷ\u0005ƈ\u0000\u0000ྫྷྭ\u0003ż¾\u0000ྭྮ\u0005Ɗ\u0000\u0000ྮ࿙\u0001\u0000\u0000\u0000ྯྰ\u0005Ì\u0000\u0000ྰྱ\u0005ƈ\u0000\u0000ྱྲ\u0003ż¾\u0000ྲླ\u0005\u0004\u0000\u0000ླྴ\u0003ż¾\u0000ྴྵ\u0005Ɗ\u0000\u0000ྵ࿙\u0001\u0000\u0000\u0000ྶ\u0fbd\u0005Ŀ\u0000\u0000ྷྐྵ\u0005ƈ\u0000\u0000ྸྺ\u0003ƚÍ\u0000ྐྵྸ\u0001\u0000\u0000\u0000ྐྵྺ\u0001\u0000\u0000\u0000ྺྻ\u0001\u0000\u0000\u0000ྻ྾\u0005Ɗ\u0000\u0000ྼ྾\u0005Ɔ\u0000\u0000\u0fbdྷ\u0001\u0000\u0000\u0000\u0fbdྼ\u0001\u0000\u0000\u0000྾࿙\u0001\u0000\u0000\u0000྿࿀\u0005¬\u0000\u0000࿀࿃\u00074\u0000\u0000࿁࿂\u0005ŕ\u0000\u0000࿂࿄\u0005Ö\u0000\u0000࿃࿁\u0001\u0000\u0000\u0000࿃࿄\u0001\u0000\u0000\u0000࿄࿙\u0001\u0000\u0000\u0000࿅࿆\u0005¬\u0000\u0000࿆࿉\u00075\u0000\u0000࿇࿈\u0005ŕ\u0000\u0000࿈࿊\u00076\u0000\u0000࿉࿇\u0001\u0000\u0000\u0000࿉࿊\u0001\u0000\u0000\u0000࿊࿙\u0001\u0000\u0000\u0000࿋࿖\u0003ź½\u0000࿌\u0fcd\u0005\u0002\u0000\u0000\u0fcd࿒\u0005Ʀ\u0000\u0000࿎࿏\u0005\u0004\u0000\u0000࿏࿑\u0005Ʀ\u0000\u0000࿐࿎\u0001\u0000\u0000\u0000࿑࿔\u0001\u0000\u0000\u0000࿒࿐\u0001\u0000\u0000\u0000࿒࿓\u0001\u0000\u0000\u0000࿓࿕\u0001\u0000\u0000\u0000࿔࿒\u0001\u0000\u0000\u0000࿕࿗\u0005\u0003\u0000\u0000࿖࿌\u0001\u0000\u0000\u0000࿖࿗\u0001\u0000\u0000\u0000࿗࿙\u0001\u0000\u0000\u0000࿘ྪ\u0001\u0000\u0000\u0000࿘ྯ\u0001\u0000\u0000\u0000࿘ྶ\u0001\u0000\u0000\u0000࿘྿\u0001\u0000\u0000\u0000࿘࿅\u0001\u0000\u0000\u0000࿘࿋\u0001\u0000\u0000\u0000࿙Ž\u0001\u0000\u0000\u0000࿚\u0fdf\u0003ƀÀ\u0000\u0fdb\u0fdc\u0005\u0004\u0000\u0000\u0fdc\u0fde\u0003ƀÀ\u0000\u0fdd\u0fdb\u0001\u0000\u0000\u0000\u0fde\u0fe1\u0001\u0000\u0000\u0000\u0fdf\u0fdd\u0001\u0000\u0000\u0000\u0fdf\u0fe0\u0001\u0000\u0000\u0000\u0fe0ſ\u0001\u0000\u0000\u0000\u0fe1\u0fdf\u0001\u0000\u0000\u0000\u0fe2\u0fe3\u0003Ĭ\u0096\u0000\u0fe3\u0fe7\u0003ż¾\u0000\u0fe4\u0fe6\u0003ƂÁ\u0000\u0fe5\u0fe4\u0001\u0000\u0000\u0000\u0fe6\u0fe9\u0001\u0000\u0000\u0000\u0fe7\u0fe5\u0001\u0000\u0000\u0000\u0fe7\u0fe8\u0001\u0000\u0000\u0000\u0fe8Ɓ\u0001\u0000\u0000\u0000\u0fe9\u0fe7\u0001\u0000\u0000\u0000\u0fea\u0feb\u0003Ŏ§\u0000\u0feb\u0fec\u0005â\u0000\u0000\u0fec\u0ff1\u0001\u0000\u0000\u0000\u0fed\u0ff1\u0003ƄÂ\u0000\u0fee\u0ff1\u0003^/\u0000\u0fef\u0ff1\u0003Ŵº\u0000\u0ff0\u0fea\u0001\u0000\u0000\u0000\u0ff0\u0fed\u0001\u0000\u0000\u0000\u0ff0\u0fee\u0001\u0000\u0000\u0000\u0ff0\u0fef\u0001\u0000\u0000\u0000\u0ff1ƃ\u0001\u0000\u0000\u0000\u0ff2\u0ff3\u0005^\u0000\u0000\u0ff3\u0ff4\u0003ł¡\u0000\u0ff4ƅ\u0001\u0000\u0000\u0000\u0ff5\u0ff6\u00077\u0000\u0000\u0ff6\u0ff7\u0003ł¡\u0000\u0ff7Ƈ\u0001\u0000\u0000\u0000\u0ff8\u0ffd\u0003ƊÅ\u0000\u0ff9\u0ffa\u0005\u0004\u0000\u0000\u0ffa\u0ffc\u0003ƊÅ\u0000\u0ffb\u0ff9\u0001\u0000\u0000\u0000\u0ffc\u0fff\u0001\u0000\u0000\u0000\u0ffd\u0ffb\u0001\u0000\u0000\u0000\u0ffd\u0ffe\u0001\u0000\u0000\u0000\u0ffeƉ\u0001\u0000\u0000\u0000\u0fff\u0ffd\u0001\u0000\u0000\u0000ကခ\u0003ƾß\u0000ခစ\u0003ż¾\u0000ဂဃ\u0003Ŏ§\u0000ဃင\u0005â\u0000\u0000ငဆ\u0001\u0000\u0000\u0000စဂ\u0001\u0000\u0000\u0000စဆ\u0001\u0000\u0000\u0000ဆဈ\u0001\u0000\u0000\u0000ဇဉ\u0003^/\u0000ဈဇ\u0001\u0000\u0000\u0000ဈဉ\u0001\u0000\u0000\u0000ဉƋ\u0001\u0000\u0000\u0000ညဏ\u0003ƎÇ\u0000ဋဌ\u0005\u0004\u0000\u0000ဌဎ\u0003ƎÇ\u0000ဍဋ\u0001\u0000\u0000\u0000ဎထ\u0001\u0000\u0000\u0000ဏဍ\u0001\u0000\u0000\u0000ဏတ\u0001\u0000\u0000\u0000တƍ\u0001\u0000\u0000\u0000ထဏ\u0001\u0000\u0000\u0000ဒဓ\u0003ƾß\u0000ဓဗ\u0003ż¾\u0000နဖ\u0003ƐÈ\u0000ပန\u0001\u0000\u0000\u0000ဖမ\u0001\u0000\u0000\u0000ဗပ\u0001\u0000\u0000\u0000ဗဘ\u0001\u0000\u0000\u0000ဘƏ\u0001\u0000\u0000\u0000မဗ\u0001\u0000\u0000\u0000ယရ\u0003Ŏ§\u0000ရလ\u0005â\u0000\u0000လအ\u0001\u0000\u0000\u0000ဝအ\u0003ƄÂ\u0000သအ\u0003ƒÉ\u0000ဟအ\u0003^/\u0000ဠယ\u0001\u0000\u0000\u0000ဠဝ\u0001\u0000\u0000\u0000ဠသ\u0001\u0000\u0000\u0000ဠဟ\u0001\u0000\u0000\u0000အƑ\u0001\u0000\u0000\u0000ဢဣ\u0005\u0091\u0000\u0000ဣဤ\u0005\u000e\u0000\u0000ဤဥ\u0005\u0016\u0000\u0000ဥဦ\u0005\u0002\u0000\u0000ဦဧ\u0003ł¡\u0000ဧဨ\u0005\u0003\u0000\u0000ဨဵ\u0001\u0000\u0000\u0000ဩိ\u0005\u0091\u0000\u0000ဪီ\u0005\u000e\u0000\u0000ါာ\u0005$\u0000\u0000ာီ\u0005^\u0000\u0000ိဪ\u0001\u0000\u0000\u0000ိါ\u0001\u0000\u0000\u0000ီု\u0001\u0000\u0000\u0000ုူ\u0005\u0016\u0000\u0000ူဲ\u0005\u009c\u0000\u0000ေဳ\u0003ƔÊ\u0000ဲေ\u0001\u0000\u0000\u0000ဲဳ\u0001\u0000\u0000\u0000ဳဵ\u0001\u0000\u0000\u0000ဴဢ\u0001\u0000\u0000\u0000ဴဩ\u0001\u0000\u0000\u0000ဵƓ\u0001\u0000\u0000\u0000ံ်\u0005\u0002\u0000\u0000့္\u0003ƖË\u0000း့\u0001\u0000\u0000\u0000္ြ\u0001\u0000\u0000\u0000်း\u0001\u0000\u0000\u0000်ျ\u0001\u0000\u0000\u0000ျွ\u0001\u0000\u0000\u0000ြ်\u0001\u0000\u0000\u0000ွှ\u0005\u0003\u0000\u0000ှƕ\u0001\u0000\u0000\u0000ဿ၀\u0005ĺ\u0000\u0000၀၁\u0005ſ\u0000\u0000၁၆\u0003ƘÌ\u0000၂၃\u0005£\u0000\u0000၃၄\u0005$\u0000\u0000၄၆\u0003ƘÌ\u0000၅ဿ\u0001\u0000\u0000\u0000၅၂\u0001\u0000\u0000\u0000၆Ɨ\u0001\u0000\u0000\u0000၇၉\u0005Ɛ\u0000\u0000၈၇\u0001\u0000\u0000\u0000၈၉\u0001\u0000\u0000\u0000၉၊\u0001\u0000\u0000\u0000၊ၐ\u0005Ʀ\u0000\u0000။၍\u0005Ɛ\u0000\u0000၌။\u0001\u0000\u0000\u0000၌၍\u0001\u0000\u0000\u0000၍၎\u0001\u0000\u0000\u0000၎ၐ\u0005ƣ\u0000\u0000၏၈\u0001\u0000\u0000\u0000၏၌\u0001\u0000\u0000\u0000ၐƙ\u0001\u0000\u0000\u0000ၑၖ\u0003ƜÎ\u0000ၒၓ\u0005\u0004\u0000\u0000ၓၕ\u0003ƜÎ\u0000ၔၒ\u0001\u0000\u0000\u0000ၕၘ\u0001\u0000\u0000\u0000ၖၔ\u0001\u0000\u0000\u0000ၖၗ\u0001\u0000\u0000\u0000ၗƛ\u0001\u0000\u0000\u0000ၘၖ\u0001\u0000\u0000\u0000ၙၛ\u0003ƾß\u0000ၚၜ\u0005ƚ\u0000\u0000ၛၚ\u0001\u0000\u0000\u0000ၛၜ\u0001\u0000\u0000\u0000ၜၝ\u0001\u0000\u0000\u0000ၝၡ\u0003ż¾\u0000ၞၟ\u0003Ŏ§\u0000ၟၠ\u0005â\u0000\u0000ၠၢ\u0001\u0000\u0000\u0000ၡၞ\u0001\u0000\u0000\u0000ၡၢ\u0001\u0000\u0000\u0000ၢၤ\u0001\u0000\u0000\u0000ၣၥ\u0003^/\u0000ၤၣ\u0001\u0000\u0000\u0000ၤၥ\u0001\u0000\u0000\u0000ၥƝ\u0001\u0000\u0000\u0000ၦၮ\u0003ƠÐ\u0000ၧၮ\u0003ƢÑ\u0000ၨၮ\u0003ƤÒ\u0000ၩၮ\u0003ƦÓ\u0000ၪၮ\u0003ƨÔ\u0000ၫၮ\u0003^/\u0000ၬၮ\u0003ƪÕ\u0000ၭၦ\u0001\u0000\u0000\u0000ၭၧ\u0001\u0000\u0000\u0000ၭၨ\u0001\u0000\u0000\u0000ၭၩ\u0001\u0000\u0000\u0000ၭၪ\u0001\u0000\u0000\u0000ၭၫ\u0001\u0000\u0000\u0000ၭၬ\u0001\u0000\u0000\u0000ၮၱ\u0001\u0000\u0000\u0000ၯၭ\u0001\u0000\u0000\u0000ၯၰ\u0001\u0000\u0000\u0000ၰƟ\u0001\u0000\u0000\u0000ၱၯ\u0001\u0000\u0000\u0000ၲၳ\u0005·\u0000\u0000ၳၴ\u00078\u0000\u0000ၴơ\u0001\u0000\u0000\u0000ၵၶ\u0005Ķ\u0000\u0000ၶၷ\u0003ƾß\u0000ၷƣ\u0001\u0000\u0000\u0000ၸၽ\u0005e\u0000\u0000ၹၺ\u0003Ŏ§\u0000ၺၻ\u0005e\u0000\u0000ၻၽ\u0001\u0000\u0000\u0000ၼၸ\u0001\u0000\u0000\u0000ၼၹ\u0001\u0000\u0000\u0000ၽƥ\u0001\u0000\u0000\u0000ၾၿ\u0005ß\u0000\u0000ၿႉ\u0005ķ\u0000\u0000ႀႁ\u0005D\u0000\u0000ႁႉ\u0005ķ\u0000\u0000ႂႃ\u0005ă\u0000\u0000ႃႄ\u0005ķ\u0000\u0000ႄႉ\u0005R\u0000\u0000ႅႆ\u0005Õ\u0000\u0000ႆႇ\u0005ķ\u0000\u0000ႇႉ\u0005R\u0000\u0000ႈၾ\u0001\u0000\u0000\u0000ႈႀ\u0001\u0000\u0000\u0000ႈႂ\u0001\u0000\u0000\u0000ႈႅ\u0001\u0000\u0000\u0000ႉƧ\u0001\u0000\u0000\u0000ႊႋ\u0005ĕ\u0000\u0000ႋႌ\u0005â\u0000\u0000ႌႍ\u0005ç\u0000\u0000ႍႎ\u0005â\u0000\u0000ႎ႔\u0005¨\u0000\u0000ႏ႐\u0005(\u0000\u0000႐႑\u0005ç\u0000\u0000႑႒\u0005â\u0000\u0000႒႔\u0005¨\u0000\u0000႓ႊ\u0001\u0000\u0000\u0000႓ႏ\u0001\u0000\u0000\u0000႔Ʃ\u0001\u0000\u0000\u0000႕႖\u0005ķ\u0000\u0000႖႗\u0005ģ\u0000\u0000႗ႜ\u0005°\u0000\u0000႘႙\u0005ķ\u0000\u0000႙ႚ\u0005ģ\u0000\u0000ႚႜ\u0005`\u0000\u0000ႛ႕\u0001\u0000\u0000\u0000ႛ႘\u0001\u0000\u0000\u0000ႜƫ\u0001\u0000\u0000\u0000ႝ႞\u0005Ż\u0000\u0000႞႟\u0003ł¡\u0000႟Ⴀ\u0005Ō\u0000\u0000ႠႡ\u0003ł¡\u0000Ⴁƭ\u0001\u0000\u0000\u0000ႢႣ\u0005ž\u0000\u0000ႣႨ\u0003ưØ\u0000ႤႥ\u0005\u0004\u0000\u0000ႥႧ\u0003ưØ\u0000ႦႤ\u0001\u0000\u0000\u0000ႧႪ\u0001\u0000\u0000\u0000ႨႦ\u0001\u0000\u0000\u0000ႨႩ\u0001\u0000\u0000\u0000ႩƯ\u0001\u0000\u0000\u0000ႪႨ\u0001\u0000\u0000\u0000ႫႬ\u0003ƾß\u0000ႬႭ\u0005\u0016\u0000\u0000ႭႮ\u0003ƲÙ\u0000ႮƱ\u0001\u0000\u0000\u0000Ⴏპ\u0003ƾß\u0000ႰႱ\u0005\u0002\u0000\u0000ႱႲ\u0003ƾß\u0000ႲႳ\u0005\u0003\u0000\u0000Ⴓპ\u0001\u0000\u0000\u0000Ⴔთ\u0005\u0002\u0000\u0000ႵႶ\u00053\u0000\u0000ႶႷ\u0005$\u0000\u0000ႷႼ\u0003ł¡\u0000ႸႹ\u0005\u0004\u0000\u0000ႹႻ\u0003ł¡\u0000ႺႸ\u0001\u0000\u0000\u0000ႻႾ\u0001\u0000\u0000\u0000ႼႺ\u0001\u0000\u0000\u0000ႼႽ\u0001\u0000\u0000\u0000Ⴝი\u0001\u0000\u0000\u0000ႾႼ\u0001\u0000\u0000\u0000ႿჀ\u0007\u0019\u0000\u0000ჀჁ\u0005$\u0000\u0000Ⴡ\u10c6\u0003ł¡\u0000ჂჃ\u0005\u0004\u0000\u0000ჃჅ\u0003ł¡\u0000ჄჂ\u0001\u0000\u0000\u0000Ⴥ\u10c8\u0001\u0000\u0000\u0000\u10c6Ⴤ\u0001\u0000\u0000\u0000\u10c6Ⴧ\u0001\u0000\u0000\u0000Ⴧ\u10ca\u0001\u0000\u0000\u0000\u10c8\u10c6\u0001\u0000\u0000\u0000\u10c9Ⴟ\u0001\u0000\u0000\u0000\u10c9\u10ca\u0001\u0000\u0000\u0000\u10caვ\u0001\u0000\u0000\u0000\u10cb\u10cc\u0007\u001a\u0000\u0000\u10ccჍ\u0005$\u0000\u0000Ⴭგ\u0003¤R\u0000\u10ce\u10cf\u0005\u0004\u0000\u0000\u10cfბ\u0003¤R\u0000ა\u10ce\u0001\u0000\u0000\u0000ბე\u0001\u0000\u0000\u0000გა\u0001\u0000\u0000\u0000გდ\u0001\u0000\u0000\u0000დზ\u0001\u0000\u0000\u0000ეგ\u0001\u0000\u0000\u0000ვ\u10cb\u0001\u0000\u0000\u0000ვზ\u0001\u0000\u0000\u0000ზი\u0001\u0000\u0000\u0000თႵ\u0001\u0000\u0000\u0000თ\u10c9\u0001\u0000\u0000\u0000ილ\u0001\u0000\u0000\u0000კმ\u0003ƴÚ\u0000ლკ\u0001\u0000\u0000\u0000ლმ\u0001\u0000\u0000\u0000მნ\u0001\u0000\u0000\u0000ნპ\u0005\u0003\u0000\u0000ოႯ\u0001\u0000\u0000\u0000ოႰ\u0001\u0000\u0000\u0000ოႴ\u0001\u0000\u0000\u0000პƳ\u0001\u0000\u0000\u0000ჟრ\u0005Ă\u0000\u0000რჰ\u0003ƶÛ\u0000სტ\u0005Ğ\u0000\u0000ტჰ\u0003ƶÛ\u0000უფ\u0005Ă\u0000\u0000ფქ\u0005\u001c\u0000\u0000ქღ\u0003ƶÛ\u0000ღყ\u0005\u0010\u0000\u0000ყშ\u0003ƶÛ\u0000შჰ\u0001\u0000\u0000\u0000ჩც\u0005Ğ\u0000\u0000ცძ\u0005\u001c\u0000\u0000ძწ\u0003ƶÛ\u0000წჭ\u0005\u0010\u0000\u0000ჭხ\u0003ƶÛ\u0000ხჰ\u0001\u0000\u0000\u0000ჯჟ\u0001\u0000\u0000\u0000ჯს\u0001\u0000\u0000\u0000ჯუ\u0001\u0000\u0000\u0000ჯჩ\u0001\u0000\u0000\u0000ჰƵ\u0001\u0000\u0000\u0000ჱჲ\u0005Ţ\u0000\u0000ჲჹ\u00079\u0000\u0000ჳჴ\u0005J\u0000\u0000ჴჹ\u0005ĝ\u0000\u0000ჵჶ\u0003ł¡\u0000ჶჷ\u00079\u0000\u0000ჷჹ\u0001\u0000\u0000\u0000ჸჱ\u0001\u0000\u0000\u0000ჸჳ\u0001\u0000\u0000\u0000ჸჵ\u0001\u0000\u0000\u0000ჹƷ\u0001\u0000\u0000\u0000ჺჿ\u0003ƼÞ\u0000჻ჼ\u0005\u0004\u0000\u0000ჼჾ\u0003ƼÞ\u0000ჽ჻\u0001\u0000\u0000\u0000ჾᄁ\u0001\u0000\u0000\u0000ჿჽ\u0001\u0000\u0000\u0000ჿᄀ\u0001\u0000\u0000\u0000ᄀƹ\u0001\u0000\u0000\u0000ᄁჿ\u0001\u0000\u0000\u0000ᄂᄃ\u0005\u009b\u0000\u0000ᄃᄄ\u0005\u0002\u0000\u0000ᄄᄅ\u0003ł¡\u0000ᄅᄆ\u0005\u0003\u0000\u0000ᄆᄍ\u0001\u0000\u0000\u0000ᄇᄍ\u0005\u009b\u0000\u0000ᄈᄍ\u0003ƼÞ\u0000ᄉᄍ\u0005\u0083\u0000\u0000ᄊᄍ\u0005½\u0000\u0000ᄋᄍ\u0005ė\u0000\u0000ᄌᄂ\u0001\u0000\u0000\u0000ᄌᄇ\u0001\u0000\u0000\u0000ᄌᄈ\u0001\u0000\u0000\u0000ᄌᄉ\u0001\u0000\u0000\u0000ᄌᄊ\u0001\u0000\u0000\u0000ᄌᄋ\u0001\u0000\u0000\u0000ᄍƻ\u0001\u0000\u0000\u0000ᄎᄓ\u0003ǂá\u0000ᄏᄐ\u0005\u0005\u0000\u0000ᄐᄒ\u0003ǂá\u0000ᄑᄏ\u0001\u0000\u0000\u0000ᄒᄕ\u0001\u0000\u0000\u0000ᄓᄑ\u0001\u0000\u0000\u0000ᄓᄔ\u0001\u0000\u0000\u0000ᄔƽ\u0001\u0000\u0000\u0000ᄕᄓ\u0001\u0000\u0000\u0000ᄖᄗ\u0003ǂá\u0000ᄗᄘ\u0003ǀà\u0000ᄘƿ\u0001\u0000\u0000\u0000ᄙᄚ\u0005Ɛ\u0000\u0000ᄚᄜ\u0003ǂá\u0000ᄛᄙ\u0001\u0000\u0000\u0000ᄜᄝ\u0001\u0000\u0000\u0000ᄝᄛ\u0001\u0000\u0000\u0000ᄝᄞ\u0001\u0000\u0000\u0000ᄞᄡ\u0001\u0000\u0000\u0000ᄟᄡ\u0001\u0000\u0000\u0000ᄠᄛ\u0001\u0000\u0000\u0000ᄠᄟ\u0001\u0000\u0000\u0000ᄡǁ\u0001\u0000\u0000\u0000ᄢᄦ\u0003Ǆâ\u0000ᄣᄤ\u0004á\u0014\u0000ᄤᄦ\u0003Ǟï\u0000ᄥᄢ\u0001\u0000\u0000\u0000ᄥᄣ\u0001\u0000\u0000\u0000ᄦǃ\u0001\u0000\u0000\u0000ᄧᄮ\u0005Ƭ\u0000\u0000ᄨᄮ\u0003ǆã\u0000ᄩᄪ\u0004â\u0015\u0000ᄪᄮ\u0003ǜî\u0000ᄫᄬ\u0004â\u0016\u0000ᄬᄮ\u0003Ǡð\u0000ᄭᄧ\u0001\u0000\u0000\u0000ᄭᄨ\u0001\u0000\u0000\u0000ᄭᄩ\u0001\u0000\u0000\u0000ᄭᄫ\u0001\u0000\u0000\u0000ᄮǅ\u0001\u0000\u0000\u0000ᄯᄳ\u0005ƭ\u0000\u0000ᄰᄱ\u0004ã\u0017\u0000ᄱᄳ\u0005Ƣ\u0000\u0000ᄲᄯ\u0001\u0000\u0000\u0000ᄲᄰ\u0001\u0000\u0000\u0000ᄳǇ\u0001\u0000\u0000\u0000ᄴᄵ\u0005ƭ\u0000\u0000ᄵǉ\u0001\u0000\u0000\u0000ᄶᄸ\u0004å\u0018\u0000ᄷᄹ\u0005Ɛ\u0000\u0000ᄸᄷ\u0001\u0000\u0000\u0000ᄸᄹ\u0001\u0000\u0000\u0000ᄹᄺ\u0001\u0000\u0000\u0000ᄺᅢ\u0005Ƨ\u0000\u0000ᄻᄽ\u0004å\u0019\u0000ᄼᄾ\u0005Ɛ\u0000\u0000ᄽᄼ\u0001\u0000\u0000\u0000ᄽᄾ\u0001\u0000\u0000\u0000ᄾᄿ\u0001\u0000\u0000\u0000ᄿᅢ\u0005ƨ\u0000\u0000ᅀᅂ\u0004å\u001a\u0000ᅁᅃ\u0005Ɛ\u0000\u0000ᅂᅁ\u0001\u0000\u0000\u0000ᅂᅃ\u0001\u0000\u0000\u0000ᅃᅄ\u0001\u0000\u0000\u0000ᅄᅢ\u0007:\u0000\u0000ᅅᅇ\u0005Ɛ\u0000\u0000ᅆᅅ\u0001\u0000\u0000\u0000ᅆᅇ\u0001\u0000\u0000\u0000ᅇᅈ\u0001\u0000\u0000\u0000ᅈᅢ\u0005Ʀ\u0000\u0000ᅉᅋ\u0005Ɛ\u0000\u0000ᅊᅉ\u0001\u0000\u0000\u0000ᅊᅋ\u0001\u0000\u0000\u0000ᅋᅌ\u0001\u0000\u0000\u0000ᅌᅢ\u0005ƣ\u0000\u0000ᅍᅏ\u0005Ɛ\u0000\u0000ᅎᅍ\u0001\u0000\u0000\u0000ᅎᅏ\u0001\u0000\u0000\u0000ᅏᅐ\u0001\u0000\u0000\u0000ᅐᅢ\u0005Ƥ\u0000\u0000ᅑᅓ\u0005Ɛ\u0000\u0000ᅒᅑ\u0001\u0000\u0000\u0000ᅒᅓ\u0001\u0000\u0000\u0000ᅓᅔ\u0001\u0000\u0000\u0000ᅔᅢ\u0005ƥ\u0000\u0000ᅕᅗ\u0005Ɛ\u0000\u0000ᅖᅕ\u0001\u0000\u0000\u0000ᅖᅗ\u0001\u0000\u0000\u0000ᅗᅘ\u0001\u0000\u0000\u0000ᅘᅢ\u0005ƪ\u0000\u0000ᅙᅛ\u0005Ɛ\u0000\u0000ᅚᅙ\u0001\u0000\u0000\u0000ᅚᅛ\u0001\u0000\u0000\u0000ᅛᅜ\u0001\u0000\u0000\u0000ᅜᅢ\u0005Ʃ\u0000\u0000ᅝᅟ\u0005Ɛ\u0000\u0000ᅞᅝ\u0001\u0000\u0000\u0000ᅞᅟ\u0001\u0000\u0000\u0000ᅟᅠ\u0001\u0000\u0000\u0000ᅠᅢ\u0005ƫ\u0000\u0000ᅡᄶ\u0001\u0000\u0000\u0000ᅡᄻ\u0001\u0000\u0000\u0000ᅡᅀ\u0001\u0000\u0000\u0000ᅡᅆ\u0001\u0000\u0000\u0000ᅡᅊ\u0001\u0000\u0000\u0000ᅡᅎ\u0001\u0000\u0000\u0000ᅡᅒ\u0001\u0000\u0000\u0000ᅡᅖ\u0001\u0000\u0000\u0000ᅡᅚ\u0001\u0000\u0000\u0000ᅡᅞ\u0001\u0000\u0000\u0000ᅢǋ\u0001\u0000\u0000\u0000ᅣᅨ\u0003ǎç\u0000ᅤᅥ\u0005\u0004\u0000\u0000ᅥᅧ\u0003ǎç\u0000ᅦᅤ\u0001\u0000\u0000\u0000ᅧᅪ\u0001\u0000\u0000\u0000ᅨᅦ\u0001\u0000\u0000\u0000ᅨᅩ\u0001\u0000\u0000\u0000ᅩǍ\u0001\u0000\u0000\u0000ᅪᅨ\u0001\u0000\u0000\u0000ᅫᅭ\u0003Ĭ\u0096\u0000ᅬᅮ\u0003ǐè\u0000ᅭᅬ\u0001\u0000\u0000\u0000ᅭᅮ\u0001\u0000\u0000\u0000ᅮǏ\u0001\u0000\u0000\u0000ᅯᅰ\u0005Š\u0000\u0000ᅰᅼ\u0003ż¾\u0000ᅱᅼ\u0003^/\u0000ᅲᅼ\u0003Ŵº\u0000ᅳᅴ\u0007;\u0000\u0000ᅴᅵ\u0003Ŏ§\u0000ᅵᅶ\u0005â\u0000\u0000ᅶᅼ\u0001\u0000\u0000\u0000ᅷᅸ\u0005Ī\u0000\u0000ᅸᅼ\u0003ƄÂ\u0000ᅹᅺ\u0005n\u0000\u0000ᅺᅼ\u0005^\u0000\u0000ᅻᅯ\u0001\u0000\u0000\u0000ᅻᅱ\u0001\u0000\u0000\u0000ᅻᅲ\u0001\u0000\u0000\u0000ᅻᅳ\u0001\u0000\u0000\u0000ᅻᅷ\u0001\u0000\u0000\u0000ᅻᅹ\u0001\u0000\u0000\u0000ᅼǑ\u0001\u0000\u0000\u0000ᅽᆁ\u0005ơ\u0000\u0000ᅾᅿ\u0004é\u001b\u0000ᅿᆁ\u0005Ƣ\u0000\u0000ᆀᅽ\u0001\u0000\u0000\u0000ᆀᅾ\u0001\u0000\u0000\u0000ᆁǓ\u0001\u0000\u0000\u0000ᆂᆅ\u0003ǒé\u0000ᆃᆅ\u0005â\u0000\u0000ᆄᆂ\u0001\u0000\u0000\u0000ᆄᆃ\u0001\u0000\u0000\u0000ᆅǕ\u0001\u0000\u0000\u0000ᆆᆉ\u0005Ʀ\u0000\u0000ᆇᆉ\u0003ǒé\u0000ᆈᆆ\u0001\u0000\u0000\u0000ᆈᆇ\u0001\u0000\u0000\u0000ᆉǗ\u0001\u0000\u0000\u0000ᆊᆌ\u0003®W\u0000ᆋᆍ\u0003Ʈ×\u0000ᆌᆋ\u0001\u0000\u0000\u0000ᆌᆍ\u0001\u0000\u0000\u0000ᆍᆲ\u0001\u0000\u0000\u0000ᆎᆏ\u0005|\u0000\u0000ᆏᆲ\u0003ĸ\u009c\u0000ᆐᆑ\u0005Ī\u0000\u0000ᆑᆲ\u0003ǚí\u0000ᆒᆓ\u0005n\u0000\u0000ᆓᆲ\u0003Ċ\u0085\u0000ᆔᆕ\u0005\u0016\u0000\u0000ᆕᆲ\u0003ƾß\u0000ᆖᆘ\u0003Äb\u0000ᆗᆙ\u0003Ʈ×\u0000ᆘᆗ\u0001\u0000\u0000\u0000ᆘᆙ\u0001\u0000\u0000\u0000ᆙᆲ\u0001\u0000\u0000\u0000ᆚᆜ\u0003Úm\u0000ᆛᆝ\u0003àp\u0000ᆜᆛ\u0001\u0000\u0000\u0000ᆜᆝ\u0001\u0000\u0000\u0000ᆝᆲ\u0001\u0000\u0000\u0000ᆞᆠ\u0003àp\u0000ᆟᆡ\u0003Úm\u0000ᆠᆟ\u0001\u0000\u0000\u0000ᆠᆡ\u0001\u0000\u0000\u0000ᆡᆲ\u0001\u0000\u0000\u0000ᆢᆲ\u0003Ą\u0082\u0000ᆣᆲ\u0003þ\u007f\u0000ᆤᆦ\u0007\u000f\u0000\u0000ᆥᆧ\u0003ø|\u0000ᆦᆥ\u0001\u0000\u0000\u0000ᆦᆧ\u0001\u0000\u0000\u0000ᆧᆨ\u0001\u0000\u0000\u0000ᆨᆲ\u0003¢Q\u0000ᆩᆲ\u0003\u009cN\u0000ᆪᆬ\u0005\u000b\u0000\u0000ᆫᆭ\u0003ĸ\u009c\u0000ᆬᆫ\u0001\u0000\u0000\u0000ᆬᆭ\u0001\u0000\u0000\u0000ᆭᆯ\u0001\u0000\u0000\u0000ᆮᆰ\u0003Ðh\u0000ᆯᆮ\u0001\u0000\u0000\u0000ᆯᆰ\u0001\u0000\u0000\u0000ᆰᆲ\u0001\u0000\u0000\u0000ᆱᆊ\u0001\u0000\u0000\u0000ᆱᆎ\u0001\u0000\u0000\u0000ᆱᆐ\u0001\u0000\u0000\u0000ᆱᆒ\u0001\u0000\u0000\u0000ᆱᆔ\u0001\u0000\u0000\u0000ᆱᆖ\u0001\u0000\u0000\u0000ᆱᆚ\u0001\u0000\u0000\u0000ᆱᆞ\u0001\u0000\u0000\u0000ᆱᆢ\u0001\u0000\u0000\u0000ᆱᆣ\u0001\u0000\u0000\u0000ᆱᆤ\u0001\u0000\u0000\u0000ᆱᆩ\u0001\u0000\u0000\u0000ᆱᆪ\u0001\u0000\u0000\u0000ᆲǙ\u0001\u0000\u0000\u0000ᆳᆸ\u0003ƾß\u0000ᆴᆵ\u0005\u0005\u0000\u0000ᆵᆷ\u0003ƾß\u0000ᆶᆴ\u0001\u0000\u0000\u0000ᆷᆺ\u0001\u0000\u0000\u0000ᆸᆶ\u0001\u0000\u0000\u0000ᆸᆹ\u0001\u0000\u0000\u0000ᆹᆻ\u0001\u0000\u0000\u0000ᆺᆸ\u0001\u0000\u0000\u0000ᆻᆼ\u0005Ƅ\u0000\u0000ᆼᇋ\u0003ł¡\u0000ᆽᆾ\u0005\u0004\u0000\u0000ᆾᇃ\u0003ƾß\u0000ᆿᇀ\u0005\u0005\u0000\u0000ᇀᇂ\u0003ƾß\u0000ᇁᆿ\u0001\u0000\u0000\u0000ᇂᇅ\u0001\u0000\u0000\u0000ᇃᇁ\u0001\u0000\u0000\u0000ᇃᇄ\u0001\u0000\u0000\u0000ᇄᇆ\u0001\u0000\u0000\u0000ᇅᇃ\u0001\u0000\u0000\u0000ᇆᇇ\u0005Ƅ\u0000\u0000ᇇᇈ\u0003ł¡\u0000ᇈᇊ\u0001\u0000\u0000\u0000ᇉᆽ\u0001\u0000\u0000\u0000ᇊᇍ\u0001\u0000\u0000\u0000ᇋᇉ\u0001\u0000\u0000\u0000ᇋᇌ\u0001\u0000\u0000\u0000ᇌǛ\u0001\u0000\u0000\u0000ᇍᇋ\u0001\u0000\u0000\u0000ᇎᇏ\u0007<\u0000\u0000ᇏǝ\u0001\u0000\u0000\u0000ᇐᇑ\u0007=\u0000\u0000ᇑǟ\u0001\u0000\u0000\u0000ᇒᇓ\u0007>\u0000\u0000ᇓǡ\u0001\u0000\u0000\u0000ɇǤǩǬǰǵǺǽȁȈȗȤȮȱȵȼɃɎɑɚɧɬɲɻʋʏʝʡʦʩʰʳʹˁ˅ˊˬ˾̧̣̭̰̳̺͙̆̈̽́̈́͌͗ͤͨͫ͡ͱͼ\u0382·ΩζϏϘϠϤϩϯϻЃЉЗМЬгзняњўѤѪѭѰѷѻ҅҇ҐғҜҡҧҳҶҽӈӋӐӓӚӟөӫӱӵӺԀԃԇԊԑԗԛԡԤԧԮԳԼՄՊՍՐՖ՚՟բզըհոջրֆ\u058c֏ׇֺֽׁ֖֚֓֞\u05ca\u05cdדכנצ\u05ecׯ\u05f6\u05fd؆؋ؐؗ\u061dآخرعؼكٰٔٳٹڂڋڎڕژڡڥکڭڴڹۅۉې݄\u074cݔݝݧݫݮݵݻލޙޞު\u07b3\u07bb\u07bf߆߈ߍߒߖߙߟߤߩ߭ߵߺ߽ࠂࠆࠋࠍࠑࠚࠢࠨ࠷࠾ࡃࡊࡏࡒࡪ\u086c\u0875\u087c\u087f\u0886\u088a\u0890\u0898\u089fࢢࢪ\u08b5ࣀ\u08c8\u08ce࣮ࣹࣚ࣡ࣨँइऍऐघडपभशहूॅॎ॑॔ख़ज़य़५ॲॹॿঁ\u098d\u0991কছঠনবযল\u09b5হঽূ\u09c6\u09c9ৌ\u09cf\u09d3\u09d8ড়য়ৢ\u09e5১৭৴৹ৼ\u09ffਃ\u0a0d\u0a11ਓਖਚਠਤਯਹ\u0a3d\u0a49\u0a55\u0a64੩੯\u0a7bઋઐઝઢપર\u0ab4ષ\u0abaુેૐ\u0ada૩૮૰\u0af4૽ଊଏଓଛଞଢରଽୂ\u0b46\u0b49୍\u0b53ୖଢ଼୩୴\u0b81\u0b8c\u0b91ஙஞ\u0ba5மறஶ\u0bbdீ\u0bc5ோ\u0bd1\u0bd6\u0bda\u0be0\u0be4௧௬௯௴௸\u0bfb\u0bfeఄఉఐఓథధపవా\u0c45్\u0c54ౘ\u0c5b\u0c5e౦౮\u0c74౿ಇಎಕಗತಮಱಳಽೇೊೌ\u0cd4\u0cd8ೡ\u0ce4೪೮\u0cf0\u0cf9അഇഎകഛഡണപലഺീ\u0d45ൌ\u0d52ൖ൘ൟ൨൯൹ൾංඌඓචජඪඬධමශ\u0dc7ාු\u0de0\u0de5෨෮ෲ\u0df7\u0dfcกฉยฤั\u0e3d้ํ๖๚\u0e6c\u0e6f\u0e77\u0e80ຉທຝລະື຺\u0ec7໌໔໘ໜ\u0ee8༁༈་༚༞༭༯༹\u0f48ཊབྷཛརཧ\u0f6fཽུ\u0f98ྨྐྵ\u0fbd࿃࿉࿒࿖࿘\u0fdf\u0fe7\u0ff0\u0ffdစဈဏဗဠိဲဴ်၅၈၌၏ၖၛၡၤၭၯၼႈ႓ႛႨႼ\u10c6\u10c9გვთლოჯჸჿᄌᄓᄝᄠᄥᄭᄲᄸᄽᅂᅆᅊᅎᅒᅖᅚᅞᅡᅨᅭᅻᆀᆄᆈᆌᆘᆜᆠᆦᆬᆯᆱᆸᇃᇋ"}, "");
      _ATN = (new ATNDeserializer()).deserialize(_serializedATN.toCharArray());
      _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];

      for(int i = 0; i < _ATN.getNumberOfDecisions(); ++i) {
         _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
      }

   }

   public static class CompoundOrSingleStatementContext extends ParserRuleContext {
      public SingleStatementContext singleStatement() {
         return (SingleStatementContext)this.getRuleContext(SingleStatementContext.class, 0);
      }

      public SingleCompoundStatementContext singleCompoundStatement() {
         return (SingleCompoundStatementContext)this.getRuleContext(SingleCompoundStatementContext.class, 0);
      }

      public CompoundOrSingleStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 0;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCompoundOrSingleStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCompoundOrSingleStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCompoundOrSingleStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleCompoundStatementContext extends ParserRuleContext {
      public TerminalNode BEGIN() {
         return this.getToken(27, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public TerminalNode ATOMIC() {
         return this.getToken(25, 0);
      }

      public CompoundBodyContext compoundBody() {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, 0);
      }

      public TerminalNode SEMICOLON() {
         return this.getToken(1, 0);
      }

      public SingleCompoundStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 1;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleCompoundStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleCompoundStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleCompoundStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class BeginEndCompoundBlockContext extends ParserRuleContext {
      public TerminalNode BEGIN() {
         return this.getToken(27, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public BeginLabelContext beginLabel() {
         return (BeginLabelContext)this.getRuleContext(BeginLabelContext.class, 0);
      }

      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public TerminalNode ATOMIC() {
         return this.getToken(25, 0);
      }

      public CompoundBodyContext compoundBody() {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, 0);
      }

      public EndLabelContext endLabel() {
         return (EndLabelContext)this.getRuleContext(EndLabelContext.class, 0);
      }

      public BeginEndCompoundBlockContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 2;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBeginEndCompoundBlock(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBeginEndCompoundBlock(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBeginEndCompoundBlock(this) : visitor.visitChildren(this);
      }
   }

   public static class CompoundBodyContext extends ParserRuleContext {
      public CompoundStatementContext compoundStatement;
      public List compoundStatements = new ArrayList();

      public List SEMICOLON() {
         return this.getTokens(1);
      }

      public TerminalNode SEMICOLON(int i) {
         return this.getToken(1, i);
      }

      public List compoundStatement() {
         return this.getRuleContexts(CompoundStatementContext.class);
      }

      public CompoundStatementContext compoundStatement(int i) {
         return (CompoundStatementContext)this.getRuleContext(CompoundStatementContext.class, i);
      }

      public CompoundBodyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 3;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCompoundBody(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCompoundBody(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCompoundBody(this) : visitor.visitChildren(this);
      }
   }

   public static class CompoundStatementContext extends ParserRuleContext {
      public DeclareConditionStatementContext declareConditionStatement() {
         return (DeclareConditionStatementContext)this.getRuleContext(DeclareConditionStatementContext.class, 0);
      }

      public StatementContext statement() {
         return (StatementContext)this.getRuleContext(StatementContext.class, 0);
      }

      public SetStatementInsideSqlScriptContext setStatementInsideSqlScript() {
         return (SetStatementInsideSqlScriptContext)this.getRuleContext(SetStatementInsideSqlScriptContext.class, 0);
      }

      public BeginEndCompoundBlockContext beginEndCompoundBlock() {
         return (BeginEndCompoundBlockContext)this.getRuleContext(BeginEndCompoundBlockContext.class, 0);
      }

      public DeclareHandlerStatementContext declareHandlerStatement() {
         return (DeclareHandlerStatementContext)this.getRuleContext(DeclareHandlerStatementContext.class, 0);
      }

      public IfElseStatementContext ifElseStatement() {
         return (IfElseStatementContext)this.getRuleContext(IfElseStatementContext.class, 0);
      }

      public CaseStatementContext caseStatement() {
         return (CaseStatementContext)this.getRuleContext(CaseStatementContext.class, 0);
      }

      public WhileStatementContext whileStatement() {
         return (WhileStatementContext)this.getRuleContext(WhileStatementContext.class, 0);
      }

      public RepeatStatementContext repeatStatement() {
         return (RepeatStatementContext)this.getRuleContext(RepeatStatementContext.class, 0);
      }

      public LeaveStatementContext leaveStatement() {
         return (LeaveStatementContext)this.getRuleContext(LeaveStatementContext.class, 0);
      }

      public IterateStatementContext iterateStatement() {
         return (IterateStatementContext)this.getRuleContext(IterateStatementContext.class, 0);
      }

      public LoopStatementContext loopStatement() {
         return (LoopStatementContext)this.getRuleContext(LoopStatementContext.class, 0);
      }

      public ForStatementContext forStatement() {
         return (ForStatementContext)this.getRuleContext(ForStatementContext.class, 0);
      }

      public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 4;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCompoundStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCompoundStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCompoundStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class SetStatementInsideSqlScriptContext extends ParserRuleContext {
      public SetStatementInsideSqlScriptContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 5;
      }

      public SetStatementInsideSqlScriptContext() {
      }

      public void copyFrom(SetStatementInsideSqlScriptContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class SetVariableInsideSqlScriptContext extends SetStatementInsideSqlScriptContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public AssignmentListContext assignmentList() {
         return (AssignmentListContext)this.getRuleContext(AssignmentListContext.class, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public MultipartIdentifierListContext multipartIdentifierList() {
         return (MultipartIdentifierListContext)this.getRuleContext(MultipartIdentifierListContext.class, 0);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public SetVariableInsideSqlScriptContext(SetStatementInsideSqlScriptContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetVariableInsideSqlScript(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetVariableInsideSqlScript(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetVariableInsideSqlScript(this) : visitor.visitChildren(this);
      }
   }

   public static class SqlStateValueContext extends ParserRuleContext {
      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public SqlStateValueContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 6;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSqlStateValue(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSqlStateValue(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSqlStateValue(this) : visitor.visitChildren(this);
      }
   }

   public static class DeclareConditionStatementContext extends ParserRuleContext {
      public TerminalNode DECLARE() {
         return this.getToken(93, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TerminalNode CONDITION() {
         return this.getToken(66, 0);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public TerminalNode SQLSTATE() {
         return this.getToken(313, 0);
      }

      public SqlStateValueContext sqlStateValue() {
         return (SqlStateValueContext)this.getRuleContext(SqlStateValueContext.class, 0);
      }

      public TerminalNode VALUE() {
         return this.getToken(367, 0);
      }

      public DeclareConditionStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 7;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDeclareConditionStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDeclareConditionStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDeclareConditionStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class ConditionValueContext extends ParserRuleContext {
      public TerminalNode SQLSTATE() {
         return this.getToken(313, 0);
      }

      public SqlStateValueContext sqlStateValue() {
         return (SqlStateValueContext)this.getRuleContext(SqlStateValueContext.class, 0);
      }

      public TerminalNode VALUE() {
         return this.getToken(367, 0);
      }

      public TerminalNode SQLEXCEPTION() {
         return this.getToken(312, 0);
      }

      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public TerminalNode FOUND() {
         return this.getToken(140, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public ConditionValueContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 8;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterConditionValue(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitConditionValue(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitConditionValue(this) : visitor.visitChildren(this);
      }
   }

   public static class ConditionValuesContext extends ParserRuleContext {
      public ConditionValueContext conditionValue;
      public List cvList = new ArrayList();

      public List conditionValue() {
         return this.getRuleContexts(ConditionValueContext.class);
      }

      public ConditionValueContext conditionValue(int i) {
         return (ConditionValueContext)this.getRuleContext(ConditionValueContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ConditionValuesContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 9;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterConditionValues(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitConditionValues(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitConditionValues(this) : visitor.visitChildren(this);
      }
   }

   public static class DeclareHandlerStatementContext extends ParserRuleContext {
      public TerminalNode DECLARE() {
         return this.getToken(93, 0);
      }

      public TerminalNode HANDLER() {
         return this.getToken(150, 0);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public ConditionValuesContext conditionValues() {
         return (ConditionValuesContext)this.getRuleContext(ConditionValuesContext.class, 0);
      }

      public TerminalNode CONTINUE() {
         return this.getToken(69, 0);
      }

      public TerminalNode EXIT() {
         return this.getToken(121, 0);
      }

      public BeginEndCompoundBlockContext beginEndCompoundBlock() {
         return (BeginEndCompoundBlockContext)this.getRuleContext(BeginEndCompoundBlockContext.class, 0);
      }

      public StatementContext statement() {
         return (StatementContext)this.getRuleContext(StatementContext.class, 0);
      }

      public SetStatementInsideSqlScriptContext setStatementInsideSqlScript() {
         return (SetStatementInsideSqlScriptContext)this.getRuleContext(SetStatementInsideSqlScriptContext.class, 0);
      }

      public DeclareHandlerStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 10;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDeclareHandlerStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDeclareHandlerStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDeclareHandlerStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class WhileStatementContext extends ParserRuleContext {
      public List WHILE() {
         return this.getTokens(381);
      }

      public TerminalNode WHILE(int i) {
         return this.getToken(381, i);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public TerminalNode DO() {
         return this.getToken(108, 0);
      }

      public CompoundBodyContext compoundBody() {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public BeginLabelContext beginLabel() {
         return (BeginLabelContext)this.getRuleContext(BeginLabelContext.class, 0);
      }

      public EndLabelContext endLabel() {
         return (EndLabelContext)this.getRuleContext(EndLabelContext.class, 0);
      }

      public WhileStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 11;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterWhileStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitWhileStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitWhileStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class IfElseStatementContext extends ParserRuleContext {
      public CompoundBodyContext compoundBody;
      public List conditionalBodies = new ArrayList();
      public CompoundBodyContext elseBody;

      public List IF() {
         return this.getTokens(157);
      }

      public TerminalNode IF(int i) {
         return this.getToken(157, i);
      }

      public List booleanExpression() {
         return this.getRuleContexts(BooleanExpressionContext.class);
      }

      public BooleanExpressionContext booleanExpression(int i) {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, i);
      }

      public List THEN() {
         return this.getTokens(332);
      }

      public TerminalNode THEN(int i) {
         return this.getToken(332, i);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public List compoundBody() {
         return this.getRuleContexts(CompoundBodyContext.class);
      }

      public CompoundBodyContext compoundBody(int i) {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, i);
      }

      public List ELSEIF() {
         return this.getTokens(112);
      }

      public TerminalNode ELSEIF(int i) {
         return this.getToken(112, i);
      }

      public TerminalNode ELSE() {
         return this.getToken(111, 0);
      }

      public IfElseStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 12;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIfElseStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIfElseStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIfElseStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class RepeatStatementContext extends ParserRuleContext {
      public List REPEAT() {
         return this.getTokens(270);
      }

      public TerminalNode REPEAT(int i) {
         return this.getToken(270, i);
      }

      public CompoundBodyContext compoundBody() {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, 0);
      }

      public TerminalNode UNTIL() {
         return this.getToken(362, 0);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public BeginLabelContext beginLabel() {
         return (BeginLabelContext)this.getRuleContext(BeginLabelContext.class, 0);
      }

      public EndLabelContext endLabel() {
         return (EndLabelContext)this.getRuleContext(EndLabelContext.class, 0);
      }

      public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 13;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRepeatStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRepeatStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRepeatStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class LeaveStatementContext extends ParserRuleContext {
      public TerminalNode LEAVE() {
         return this.getToken(188, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 14;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLeaveStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLeaveStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLeaveStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class IterateStatementContext extends ParserRuleContext {
      public TerminalNode ITERATE() {
         return this.getToken(179, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public IterateStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 15;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIterateStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIterateStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIterateStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class CaseStatementContext extends ParserRuleContext {
      public CaseStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 16;
      }

      public CaseStatementContext() {
      }

      public void copyFrom(CaseStatementContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class SimpleCaseStatementContext extends CaseStatementContext {
      public ExpressionContext caseVariable;
      public ExpressionContext expression;
      public List conditionExpressions = new ArrayList();
      public CompoundBodyContext compoundBody;
      public List conditionalBodies = new ArrayList();
      public CompoundBodyContext elseBody;

      public List CASE() {
         return this.getTokens(42);
      }

      public TerminalNode CASE(int i) {
         return this.getToken(42, i);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public List WHEN() {
         return this.getTokens(379);
      }

      public TerminalNode WHEN(int i) {
         return this.getToken(379, i);
      }

      public List THEN() {
         return this.getTokens(332);
      }

      public TerminalNode THEN(int i) {
         return this.getToken(332, i);
      }

      public TerminalNode ELSE() {
         return this.getToken(111, 0);
      }

      public List compoundBody() {
         return this.getRuleContexts(CompoundBodyContext.class);
      }

      public CompoundBodyContext compoundBody(int i) {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, i);
      }

      public SimpleCaseStatementContext(CaseStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSimpleCaseStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSimpleCaseStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSimpleCaseStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class SearchedCaseStatementContext extends CaseStatementContext {
      public BooleanExpressionContext booleanExpression;
      public List conditions = new ArrayList();
      public CompoundBodyContext compoundBody;
      public List conditionalBodies = new ArrayList();
      public CompoundBodyContext elseBody;

      public List CASE() {
         return this.getTokens(42);
      }

      public TerminalNode CASE(int i) {
         return this.getToken(42, i);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public List WHEN() {
         return this.getTokens(379);
      }

      public TerminalNode WHEN(int i) {
         return this.getToken(379, i);
      }

      public List THEN() {
         return this.getTokens(332);
      }

      public TerminalNode THEN(int i) {
         return this.getToken(332, i);
      }

      public TerminalNode ELSE() {
         return this.getToken(111, 0);
      }

      public List booleanExpression() {
         return this.getRuleContexts(BooleanExpressionContext.class);
      }

      public BooleanExpressionContext booleanExpression(int i) {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, i);
      }

      public List compoundBody() {
         return this.getRuleContexts(CompoundBodyContext.class);
      }

      public CompoundBodyContext compoundBody(int i) {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, i);
      }

      public SearchedCaseStatementContext(CaseStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSearchedCaseStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSearchedCaseStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSearchedCaseStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class LoopStatementContext extends ParserRuleContext {
      public List LOOP() {
         return this.getTokens(202);
      }

      public TerminalNode LOOP(int i) {
         return this.getToken(202, i);
      }

      public CompoundBodyContext compoundBody() {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public BeginLabelContext beginLabel() {
         return (BeginLabelContext)this.getRuleContext(BeginLabelContext.class, 0);
      }

      public EndLabelContext endLabel() {
         return (EndLabelContext)this.getRuleContext(EndLabelContext.class, 0);
      }

      public LoopStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 17;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLoopStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLoopStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLoopStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class ForStatementContext extends ParserRuleContext {
      public List FOR() {
         return this.getTokens(136);
      }

      public TerminalNode FOR(int i) {
         return this.getToken(136, i);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode DO() {
         return this.getToken(108, 0);
      }

      public CompoundBodyContext compoundBody() {
         return (CompoundBodyContext)this.getRuleContext(CompoundBodyContext.class, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public BeginLabelContext beginLabel() {
         return (BeginLabelContext)this.getRuleContext(BeginLabelContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public EndLabelContext endLabel() {
         return (EndLabelContext)this.getRuleContext(EndLabelContext.class, 0);
      }

      public ForStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 18;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterForStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitForStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitForStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleStatementContext extends ParserRuleContext {
      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public StatementContext statement() {
         return (StatementContext)this.getRuleContext(StatementContext.class, 0);
      }

      public SetResetStatementContext setResetStatement() {
         return (SetResetStatementContext)this.getRuleContext(SetResetStatementContext.class, 0);
      }

      public List SEMICOLON() {
         return this.getTokens(1);
      }

      public TerminalNode SEMICOLON(int i) {
         return this.getToken(1, i);
      }

      public SingleStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 19;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class BeginLabelContext extends ParserRuleContext {
      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TerminalNode COLON() {
         return this.getToken(410, 0);
      }

      public BeginLabelContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 20;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBeginLabel(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBeginLabel(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBeginLabel(this) : visitor.visitChildren(this);
      }
   }

   public static class EndLabelContext extends ParserRuleContext {
      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public EndLabelContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 21;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterEndLabel(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitEndLabel(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitEndLabel(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleExpressionContext extends ParserRuleContext {
      public NamedExpressionContext namedExpression() {
         return (NamedExpressionContext)this.getRuleContext(NamedExpressionContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 22;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleTableIdentifierContext extends ParserRuleContext {
      public TableIdentifierContext tableIdentifier() {
         return (TableIdentifierContext)this.getRuleContext(TableIdentifierContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleTableIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 23;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleTableIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleTableIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleTableIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleMultipartIdentifierContext extends ParserRuleContext {
      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleMultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 24;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleMultipartIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleMultipartIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleMultipartIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleFunctionIdentifierContext extends ParserRuleContext {
      public FunctionIdentifierContext functionIdentifier() {
         return (FunctionIdentifierContext)this.getRuleContext(FunctionIdentifierContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 25;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleFunctionIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleFunctionIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleFunctionIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleDataTypeContext extends ParserRuleContext {
      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleDataTypeContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 26;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleDataType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleDataType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleDataType(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleTableSchemaContext extends ParserRuleContext {
      public ColTypeListContext colTypeList() {
         return (ColTypeListContext)this.getRuleContext(ColTypeListContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleTableSchemaContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 27;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleTableSchema(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleTableSchema(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleTableSchema(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleRoutineParamListContext extends ParserRuleContext {
      public ColDefinitionListContext colDefinitionList() {
         return (ColDefinitionListContext)this.getRuleContext(ColDefinitionListContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleRoutineParamListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 28;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleRoutineParamList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleRoutineParamList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleRoutineParamList(this) : visitor.visitChildren(this);
      }
   }

   public static class StatementContext extends ParserRuleContext {
      public StatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 29;
      }

      public StatementContext() {
      }

      public void copyFrom(StatementContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class ExplainContext extends StatementContext {
      public TerminalNode EXPLAIN() {
         return this.getToken(122, 0);
      }

      public StatementContext statement() {
         return (StatementContext)this.getRuleContext(StatementContext.class, 0);
      }

      public SetResetStatementContext setResetStatement() {
         return (SetResetStatementContext)this.getRuleContext(SetResetStatementContext.class, 0);
      }

      public TerminalNode LOGICAL() {
         return this.getToken(200, 0);
      }

      public TerminalNode FORMATTED() {
         return this.getToken(139, 0);
      }

      public TerminalNode EXTENDED() {
         return this.getToken(125, 0);
      }

      public TerminalNode CODEGEN() {
         return this.getToken(53, 0);
      }

      public TerminalNode COST() {
         return this.getToken(70, 0);
      }

      public ExplainContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExplain(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExplain(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExplain(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterViewQueryContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public AlterViewQueryContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterViewQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterViewQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterViewQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class UseContext extends StatementContext {
      public TerminalNode USE() {
         return this.getToken(364, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public UseContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUse(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUse(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUse(this) : visitor.visitChildren(this);
      }
   }

   public static class DropNamespaceContext extends StatementContext {
      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode RESTRICT() {
         return this.getToken(275, 0);
      }

      public TerminalNode CASCADE() {
         return this.getToken(41, 0);
      }

      public DropNamespaceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropNamespace(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropNamespace(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropNamespace(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateTempViewUsingContext extends StatementContext {
      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public TableIdentifierContext tableIdentifier() {
         return (TableIdentifierContext)this.getRuleContext(TableIdentifierContext.class, 0);
      }

      public TableProviderContext tableProvider() {
         return (TableProviderContext)this.getRuleContext(TableProviderContext.class, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode GLOBAL() {
         return this.getToken(146, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ColTypeListContext colTypeList() {
         return (ColTypeListContext)this.getRuleContext(ColTypeListContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode OPTIONS() {
         return this.getToken(234, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public CreateTempViewUsingContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateTempViewUsing(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateTempViewUsing(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateTempViewUsing(this) : visitor.visitChildren(this);
      }
   }

   public static class RenameTableContext extends StatementContext {
      public IdentifierReferenceContext from;
      public MultipartIdentifierContext to;

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode RENAME() {
         return this.getToken(268, 0);
      }

      public TerminalNode TO() {
         return this.getToken(341, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public RenameTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRenameTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRenameTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRenameTable(this) : visitor.visitChildren(this);
      }
   }

   public static class FailNativeCommandContext extends StatementContext {
      public UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() {
         return (UnsupportedHiveNativeCommandsContext)this.getRuleContext(UnsupportedHiveNativeCommandsContext.class, 0);
      }

      public FailNativeCommandContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFailNativeCommand(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFailNativeCommand(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFailNativeCommand(this) : visitor.visitChildren(this);
      }
   }

   public static class SetCatalogContext extends StatementContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode CATALOG() {
         return this.getToken(44, 0);
      }

      public CatalogIdentifierReferenceContext catalogIdentifierReference() {
         return (CatalogIdentifierReferenceContext)this.getRuleContext(CatalogIdentifierReferenceContext.class, 0);
      }

      public SetCatalogContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetCatalog(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetCatalog(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetCatalog(this) : visitor.visitChildren(this);
      }
   }

   public static class ClearCacheContext extends StatementContext {
      public TerminalNode CLEAR() {
         return this.getToken(50, 0);
      }

      public TerminalNode CACHE() {
         return this.getToken(38, 0);
      }

      public ClearCacheContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterClearCache(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitClearCache(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitClearCache(this) : visitor.visitChildren(this);
      }
   }

   public static class DropViewContext extends StatementContext {
      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public DropViewContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropView(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropView(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropView(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowTablesContext extends StatementContext {
      public StringLitContext pattern;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode TABLES() {
         return this.getToken(326, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public ShowTablesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowTables(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowTables(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowTables(this) : visitor.visitChildren(this);
      }
   }

   public static class RecoverPartitionsContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode RECOVER() {
         return this.getToken(263, 0);
      }

      public TerminalNode PARTITIONS() {
         return this.getToken(246, 0);
      }

      public RecoverPartitionsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRecoverPartitions(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRecoverPartitions(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRecoverPartitions(this) : visitor.visitChildren(this);
      }
   }

   public static class DropIndexContext extends StatementContext {
      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode INDEX() {
         return this.getToken(164, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public DropIndexContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropIndex(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropIndex(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropIndex(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowCatalogsContext extends StatementContext {
      public StringLitContext pattern;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode CATALOGS() {
         return this.getToken(45, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public ShowCatalogsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowCatalogs(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowCatalogs(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowCatalogs(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowCurrentNamespaceContext extends StatementContext {
      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode CURRENT() {
         return this.getToken(74, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public ShowCurrentNamespaceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowCurrentNamespace(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowCurrentNamespace(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowCurrentNamespace(this) : visitor.visitChildren(this);
      }
   }

   public static class RenameTablePartitionContext extends StatementContext {
      public PartitionSpecContext from;
      public PartitionSpecContext to;

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode RENAME() {
         return this.getToken(268, 0);
      }

      public TerminalNode TO() {
         return this.getToken(341, 0);
      }

      public List partitionSpec() {
         return this.getRuleContexts(PartitionSpecContext.class);
      }

      public PartitionSpecContext partitionSpec(int i) {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, i);
      }

      public RenameTablePartitionContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRenameTablePartition(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRenameTablePartition(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRenameTablePartition(this) : visitor.visitChildren(this);
      }
   }

   public static class RepairTableContext extends StatementContext {
      public Token option;

      public TerminalNode REPAIR() {
         return this.getToken(269, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode MSCK() {
         return this.getToken(216, 0);
      }

      public TerminalNode PARTITIONS() {
         return this.getToken(246, 0);
      }

      public TerminalNode ADD() {
         return this.getToken(9, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode SYNC() {
         return this.getToken(322, 0);
      }

      public RepairTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRepairTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRepairTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRepairTable(this) : visitor.visitChildren(this);
      }
   }

   public static class RefreshResourceContext extends StatementContext {
      public TerminalNode REFRESH() {
         return this.getToken(267, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public RefreshResourceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRefreshResource(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRefreshResource(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRefreshResource(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterViewSchemaBindingContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public SchemaBindingContext schemaBinding() {
         return (SchemaBindingContext)this.getRuleContext(SchemaBindingContext.class, 0);
      }

      public AlterViewSchemaBindingContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterViewSchemaBinding(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterViewSchemaBinding(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterViewSchemaBinding(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateVariableContext extends StatementContext {
      public TerminalNode DECLARE() {
         return this.getToken(93, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public VariableContext variable() {
         return (VariableContext)this.getRuleContext(VariableContext.class, 0);
      }

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public VariableDefaultExpressionContext variableDefaultExpression() {
         return (VariableDefaultExpressionContext)this.getRuleContext(VariableDefaultExpressionContext.class, 0);
      }

      public CreateVariableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateVariable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateVariable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateVariable(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowCreateTableContext extends StatementContext {
      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode SERDE() {
         return this.getToken(295, 0);
      }

      public ShowCreateTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowCreateTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowCreateTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowCreateTable(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowNamespacesContext extends StatementContext {
      public StringLitContext pattern;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public NamespacesContext namespaces() {
         return (NamespacesContext)this.getRuleContext(NamespacesContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public ShowNamespacesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowNamespaces(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowNamespaces(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowNamespaces(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowColumnsContext extends StatementContext {
      public IdentifierReferenceContext table;
      public MultipartIdentifierContext ns;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public List FROM() {
         return this.getTokens(141);
      }

      public TerminalNode FROM(int i) {
         return this.getToken(141, i);
      }

      public List IN() {
         return this.getTokens(161);
      }

      public TerminalNode IN(int i) {
         return this.getToken(161, i);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public ShowColumnsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowColumns(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowColumns(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowColumns(this) : visitor.visitChildren(this);
      }
   }

   public static class ReplaceTableContext extends StatementContext {
      public ReplaceTableHeaderContext replaceTableHeader() {
         return (ReplaceTableHeaderContext)this.getRuleContext(ReplaceTableHeaderContext.class, 0);
      }

      public CreateTableClausesContext createTableClauses() {
         return (CreateTableClausesContext)this.getRuleContext(CreateTableClausesContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ColDefinitionListContext colDefinitionList() {
         return (ColDefinitionListContext)this.getRuleContext(ColDefinitionListContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TableProviderContext tableProvider() {
         return (TableProviderContext)this.getRuleContext(TableProviderContext.class, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public ReplaceTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterReplaceTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitReplaceTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitReplaceTable(this) : visitor.visitChildren(this);
      }
   }

   public static class AnalyzeTablesContext extends StatementContext {
      public TerminalNode ANALYZE() {
         return this.getToken(15, 0);
      }

      public TerminalNode TABLES() {
         return this.getToken(326, 0);
      }

      public TerminalNode COMPUTE() {
         return this.getToken(64, 0);
      }

      public TerminalNode STATISTICS() {
         return this.getToken(315, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public AnalyzeTablesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAnalyzeTables(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAnalyzeTables(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAnalyzeTables(this) : visitor.visitChildren(this);
      }
   }

   public static class UnsetNamespacePropertiesContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode UNSET() {
         return this.getToken(361, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public TerminalNode DBPROPERTIES() {
         return this.getToken(90, 0);
      }

      public TerminalNode PROPERTIES() {
         return this.getToken(254, 0);
      }

      public UnsetNamespacePropertiesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnsetNamespaceProperties(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnsetNamespaceProperties(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnsetNamespaceProperties(this) : visitor.visitChildren(this);
      }
   }

   public static class AddTablePartitionContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode ADD() {
         return this.getToken(9, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public List partitionSpecLocation() {
         return this.getRuleContexts(PartitionSpecLocationContext.class);
      }

      public PartitionSpecLocationContext partitionSpecLocation(int i) {
         return (PartitionSpecLocationContext)this.getRuleContext(PartitionSpecLocationContext.class, i);
      }

      public AddTablePartitionContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAddTablePartition(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAddTablePartition(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAddTablePartition(this) : visitor.visitChildren(this);
      }
   }

   public static class SetNamespaceLocationContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public LocationSpecContext locationSpec() {
         return (LocationSpecContext)this.getRuleContext(LocationSpecContext.class, 0);
      }

      public SetNamespaceLocationContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetNamespaceLocation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetNamespaceLocation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetNamespaceLocation(this) : visitor.visitChildren(this);
      }
   }

   public static class RefreshTableContext extends StatementContext {
      public TerminalNode REFRESH() {
         return this.getToken(267, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public RefreshTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRefreshTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRefreshTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRefreshTable(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterTableCollationContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public CollationSpecContext collationSpec() {
         return (CollationSpecContext)this.getRuleContext(CollationSpecContext.class, 0);
      }

      public AlterTableCollationContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterTableCollation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterTableCollation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterTableCollation(this) : visitor.visitChildren(this);
      }
   }

   public static class SetNamespacePropertiesContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public TerminalNode DBPROPERTIES() {
         return this.getToken(90, 0);
      }

      public TerminalNode PROPERTIES() {
         return this.getToken(254, 0);
      }

      public SetNamespacePropertiesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetNamespaceProperties(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetNamespaceProperties(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetNamespaceProperties(this) : visitor.visitChildren(this);
      }
   }

   public static class ManageResourceContext extends StatementContext {
      public Token op;

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TerminalNode ADD() {
         return this.getToken(9, 0);
      }

      public TerminalNode LIST() {
         return this.getToken(194, 0);
      }

      public ManageResourceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterManageResource(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitManageResource(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitManageResource(this) : visitor.visitChildren(this);
      }
   }

   public static class AnalyzeContext extends StatementContext {
      public TerminalNode ANALYZE() {
         return this.getToken(15, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode COMPUTE() {
         return this.getToken(64, 0);
      }

      public TerminalNode STATISTICS() {
         return this.getToken(315, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public IdentifierSeqContext identifierSeq() {
         return (IdentifierSeqContext)this.getRuleContext(IdentifierSeqContext.class, 0);
      }

      public TerminalNode ALL() {
         return this.getToken(12, 0);
      }

      public AnalyzeContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAnalyze(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAnalyze(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAnalyze(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateFunctionContext extends StatementContext {
      public StringLitContext className;

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode FUNCTION() {
         return this.getToken(143, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public List resource() {
         return this.getRuleContexts(ResourceContext.class);
      }

      public ResourceContext resource(int i) {
         return (ResourceContext)this.getRuleContext(ResourceContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public CreateFunctionContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateFunction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateFunction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateFunction(this) : visitor.visitChildren(this);
      }
   }

   public static class HiveReplaceColumnsContext extends StatementContext {
      public IdentifierReferenceContext table;
      public QualifiedColTypeWithPositionListContext columns;

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
         return (QualifiedColTypeWithPositionListContext)this.getRuleContext(QualifiedColTypeWithPositionListContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public HiveReplaceColumnsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterHiveReplaceColumns(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitHiveReplaceColumns(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitHiveReplaceColumns(this) : visitor.visitChildren(this);
      }
   }

   public static class CommentNamespaceContext extends StatementContext {
      public TerminalNode COMMENT() {
         return this.getToken(59, 0);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IS() {
         return this.getToken(177, 0);
      }

      public CommentContext comment() {
         return (CommentContext)this.getRuleContext(CommentContext.class, 0);
      }

      public CommentNamespaceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCommentNamespace(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCommentNamespace(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCommentNamespace(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateTableContext extends StatementContext {
      public CreateTableHeaderContext createTableHeader() {
         return (CreateTableHeaderContext)this.getRuleContext(CreateTableHeaderContext.class, 0);
      }

      public CreateTableClausesContext createTableClauses() {
         return (CreateTableClausesContext)this.getRuleContext(CreateTableClausesContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ColDefinitionListContext colDefinitionList() {
         return (ColDefinitionListContext)this.getRuleContext(ColDefinitionListContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TableProviderContext tableProvider() {
         return (TableProviderContext)this.getRuleContext(TableProviderContext.class, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public CreateTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateTable(this) : visitor.visitChildren(this);
      }
   }

   public static class DmlStatementContext extends StatementContext {
      public DmlStatementNoWithContext dmlStatementNoWith() {
         return (DmlStatementNoWithContext)this.getRuleContext(DmlStatementNoWithContext.class, 0);
      }

      public CtesContext ctes() {
         return (CtesContext)this.getRuleContext(CtesContext.class, 0);
      }

      public DmlStatementContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDmlStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDmlStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDmlStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateTableLikeContext extends StatementContext {
      public TableIdentifierContext target;
      public TableIdentifierContext source;
      public PropertyListContext tableProps;

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public List tableIdentifier() {
         return this.getRuleContexts(TableIdentifierContext.class);
      }

      public TableIdentifierContext tableIdentifier(int i) {
         return (TableIdentifierContext)this.getRuleContext(TableIdentifierContext.class, i);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public List tableProvider() {
         return this.getRuleContexts(TableProviderContext.class);
      }

      public TableProviderContext tableProvider(int i) {
         return (TableProviderContext)this.getRuleContext(TableProviderContext.class, i);
      }

      public List rowFormat() {
         return this.getRuleContexts(RowFormatContext.class);
      }

      public RowFormatContext rowFormat(int i) {
         return (RowFormatContext)this.getRuleContext(RowFormatContext.class, i);
      }

      public List createFileFormat() {
         return this.getRuleContexts(CreateFileFormatContext.class);
      }

      public CreateFileFormatContext createFileFormat(int i) {
         return (CreateFileFormatContext)this.getRuleContext(CreateFileFormatContext.class, i);
      }

      public List locationSpec() {
         return this.getRuleContexts(LocationSpecContext.class);
      }

      public LocationSpecContext locationSpec(int i) {
         return (LocationSpecContext)this.getRuleContext(LocationSpecContext.class, i);
      }

      public List TBLPROPERTIES() {
         return this.getTokens(329);
      }

      public TerminalNode TBLPROPERTIES(int i) {
         return this.getToken(329, i);
      }

      public List propertyList() {
         return this.getRuleContexts(PropertyListContext.class);
      }

      public PropertyListContext propertyList(int i) {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, i);
      }

      public CreateTableLikeContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateTableLike(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateTableLike(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateTableLike(this) : visitor.visitChildren(this);
      }
   }

   public static class UncacheTableContext extends StatementContext {
      public TerminalNode UNCACHE() {
         return this.getToken(355, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public UncacheTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUncacheTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUncacheTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUncacheTable(this) : visitor.visitChildren(this);
      }
   }

   public static class DropFunctionContext extends StatementContext {
      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode FUNCTION() {
         return this.getToken(143, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public DropFunctionContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropFunction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropFunction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropFunction(this) : visitor.visitChildren(this);
      }
   }

   public static class DescribeRelationContext extends StatementContext {
      public Token option;

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public TerminalNode DESCRIBE() {
         return this.getToken(100, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public DescribeColNameContext describeColName() {
         return (DescribeColNameContext)this.getRuleContext(DescribeColNameContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode JSON() {
         return this.getToken(181, 0);
      }

      public TerminalNode EXTENDED() {
         return this.getToken(125, 0);
      }

      public TerminalNode FORMATTED() {
         return this.getToken(139, 0);
      }

      public DescribeRelationContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDescribeRelation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDescribeRelation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDescribeRelation(this) : visitor.visitChildren(this);
      }
   }

   public static class LoadDataContext extends StatementContext {
      public StringLitContext path;

      public TerminalNode LOAD() {
         return this.getToken(195, 0);
      }

      public TerminalNode DATA() {
         return this.getToken(82, 0);
      }

      public TerminalNode INPATH() {
         return this.getToken(167, 0);
      }

      public TerminalNode INTO() {
         return this.getToken(175, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode LOCAL() {
         return this.getToken(196, 0);
      }

      public TerminalNode OVERWRITE() {
         return this.getToken(243, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public LoadDataContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLoadData(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLoadData(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLoadData(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowPartitionsContext extends StatementContext {
      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode PARTITIONS() {
         return this.getToken(246, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public ShowPartitionsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowPartitions(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowPartitions(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowPartitions(this) : visitor.visitChildren(this);
      }
   }

   public static class DescribeFunctionContext extends StatementContext {
      public TerminalNode FUNCTION() {
         return this.getToken(143, 0);
      }

      public DescribeFuncNameContext describeFuncName() {
         return (DescribeFuncNameContext)this.getRuleContext(DescribeFuncNameContext.class, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public TerminalNode DESCRIBE() {
         return this.getToken(100, 0);
      }

      public TerminalNode EXTENDED() {
         return this.getToken(125, 0);
      }

      public DescribeFunctionContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDescribeFunction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDescribeFunction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDescribeFunction(this) : visitor.visitChildren(this);
      }
   }

   public static class RenameTableColumnContext extends StatementContext {
      public IdentifierReferenceContext table;
      public MultipartIdentifierContext from;
      public ErrorCapturingIdentifierContext to;

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode RENAME() {
         return this.getToken(268, 0);
      }

      public TerminalNode COLUMN() {
         return this.getToken(57, 0);
      }

      public TerminalNode TO() {
         return this.getToken(341, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public RenameTableColumnContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRenameTableColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRenameTableColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRenameTableColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateUserDefinedFunctionContext extends StatementContext {
      public ColDefinitionListContext parameters;
      public ColTypeListContext returnParams;

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode FUNCTION() {
         return this.getToken(143, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public RoutineCharacteristicsContext routineCharacteristics() {
         return (RoutineCharacteristicsContext)this.getRuleContext(RoutineCharacteristicsContext.class, 0);
      }

      public TerminalNode RETURN() {
         return this.getToken(276, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode RETURNS() {
         return this.getToken(277, 0);
      }

      public ColDefinitionListContext colDefinitionList() {
         return (ColDefinitionListContext)this.getRuleContext(ColDefinitionListContext.class, 0);
      }

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public ColTypeListContext colTypeList() {
         return (ColTypeListContext)this.getRuleContext(ColTypeListContext.class, 0);
      }

      public CreateUserDefinedFunctionContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateUserDefinedFunction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateUserDefinedFunction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateUserDefinedFunction(this) : visitor.visitChildren(this);
      }
   }

   public static class StatementDefaultContext extends StatementContext {
      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public StatementDefaultContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterStatementDefault(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitStatementDefault(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitStatementDefault(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterClusterByContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public ClusterBySpecContext clusterBySpec() {
         return (ClusterBySpecContext)this.getRuleContext(ClusterBySpecContext.class, 0);
      }

      public TerminalNode CLUSTER() {
         return this.getToken(51, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode NONE() {
         return this.getToken(224, 0);
      }

      public AlterClusterByContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterClusterBy(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterClusterBy(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterClusterBy(this) : visitor.visitChildren(this);
      }
   }

   public static class HiveChangeColumnContext extends StatementContext {
      public IdentifierReferenceContext table;
      public MultipartIdentifierContext colName;

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode CHANGE() {
         return this.getToken(46, 0);
      }

      public ColTypeContext colType() {
         return (ColTypeContext)this.getRuleContext(ColTypeContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public TerminalNode COLUMN() {
         return this.getToken(57, 0);
      }

      public ColPositionContext colPosition() {
         return (ColPositionContext)this.getRuleContext(ColPositionContext.class, 0);
      }

      public HiveChangeColumnContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterHiveChangeColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitHiveChangeColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitHiveChangeColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class DescribeQueryContext extends StatementContext {
      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public TerminalNode DESCRIBE() {
         return this.getToken(100, 0);
      }

      public TerminalNode QUERY() {
         return this.getToken(257, 0);
      }

      public DescribeQueryContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDescribeQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDescribeQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDescribeQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class TruncateTableContext extends StatementContext {
      public TerminalNode TRUNCATE() {
         return this.getToken(350, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public TruncateTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTruncateTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTruncateTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTruncateTable(this) : visitor.visitChildren(this);
      }
   }

   public static class SetTableSerDeContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode SERDE() {
         return this.getToken(295, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode SERDEPROPERTIES() {
         return this.getToken(296, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public SetTableSerDeContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetTableSerDe(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetTableSerDe(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetTableSerDe(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateViewContext extends StatementContext {
      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public IdentifierCommentListContext identifierCommentList() {
         return (IdentifierCommentListContext)this.getRuleContext(IdentifierCommentListContext.class, 0);
      }

      public List commentSpec() {
         return this.getRuleContexts(CommentSpecContext.class);
      }

      public CommentSpecContext commentSpec(int i) {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, i);
      }

      public List schemaBinding() {
         return this.getRuleContexts(SchemaBindingContext.class);
      }

      public SchemaBindingContext schemaBinding(int i) {
         return (SchemaBindingContext)this.getRuleContext(SchemaBindingContext.class, i);
      }

      public List collationSpec() {
         return this.getRuleContexts(CollationSpecContext.class);
      }

      public CollationSpecContext collationSpec(int i) {
         return (CollationSpecContext)this.getRuleContext(CollationSpecContext.class, i);
      }

      public List PARTITIONED() {
         return this.getTokens(245);
      }

      public TerminalNode PARTITIONED(int i) {
         return this.getToken(245, i);
      }

      public List ON() {
         return this.getTokens(231);
      }

      public TerminalNode ON(int i) {
         return this.getToken(231, i);
      }

      public List identifierList() {
         return this.getRuleContexts(IdentifierListContext.class);
      }

      public IdentifierListContext identifierList(int i) {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, i);
      }

      public List TBLPROPERTIES() {
         return this.getTokens(329);
      }

      public TerminalNode TBLPROPERTIES(int i) {
         return this.getToken(329, i);
      }

      public List propertyList() {
         return this.getRuleContexts(PropertyListContext.class);
      }

      public PropertyListContext propertyList(int i) {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, i);
      }

      public TerminalNode GLOBAL() {
         return this.getToken(146, 0);
      }

      public CreateViewContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateView(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateView(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateView(this) : visitor.visitChildren(this);
      }
   }

   public static class DropTablePartitionsContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public List partitionSpec() {
         return this.getRuleContexts(PartitionSpecContext.class);
      }

      public PartitionSpecContext partitionSpec(int i) {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, i);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public TerminalNode PURGE() {
         return this.getToken(255, 0);
      }

      public DropTablePartitionsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropTablePartitions(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropTablePartitions(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropTablePartitions(this) : visitor.visitChildren(this);
      }
   }

   public static class DropTableContext extends StatementContext {
      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode PURGE() {
         return this.getToken(255, 0);
      }

      public DropTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropTable(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowTableExtendedContext extends StatementContext {
      public IdentifierReferenceContext ns;
      public StringLitContext pattern;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode EXTENDED() {
         return this.getToken(125, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public ShowTableExtendedContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowTableExtended(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowTableExtended(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowTableExtended(this) : visitor.visitChildren(this);
      }
   }

   public static class DescribeNamespaceContext extends StatementContext {
      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public TerminalNode DESCRIBE() {
         return this.getToken(100, 0);
      }

      public TerminalNode EXTENDED() {
         return this.getToken(125, 0);
      }

      public DescribeNamespaceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDescribeNamespace(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDescribeNamespace(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDescribeNamespace(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterTableAlterColumnContext extends StatementContext {
      public IdentifierReferenceContext table;
      public AlterColumnSpecListContext columns;

      public List ALTER() {
         return this.getTokens(13);
      }

      public TerminalNode ALTER(int i) {
         return this.getToken(13, i);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode CHANGE() {
         return this.getToken(46, 0);
      }

      public AlterColumnSpecListContext alterColumnSpecList() {
         return (AlterColumnSpecListContext)this.getRuleContext(AlterColumnSpecListContext.class, 0);
      }

      public TerminalNode COLUMN() {
         return this.getToken(57, 0);
      }

      public AlterTableAlterColumnContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterTableAlterColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterTableAlterColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterTableAlterColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class RefreshFunctionContext extends StatementContext {
      public TerminalNode REFRESH() {
         return this.getToken(267, 0);
      }

      public TerminalNode FUNCTION() {
         return this.getToken(143, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public RefreshFunctionContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRefreshFunction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRefreshFunction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRefreshFunction(this) : visitor.visitChildren(this);
      }
   }

   public static class CommentTableContext extends StatementContext {
      public TerminalNode COMMENT() {
         return this.getToken(59, 0);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IS() {
         return this.getToken(177, 0);
      }

      public CommentContext comment() {
         return (CommentContext)this.getRuleContext(CommentContext.class, 0);
      }

      public CommentTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCommentTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCommentTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCommentTable(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateIndexContext extends StatementContext {
      public IdentifierContext indexType;
      public MultipartIdentifierPropertyListContext columns;
      public PropertyListContext options;

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode INDEX() {
         return this.getToken(164, 0);
      }

      public List identifier() {
         return this.getRuleContexts(IdentifierContext.class);
      }

      public IdentifierContext identifier(int i) {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, i);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() {
         return (MultipartIdentifierPropertyListContext)this.getRuleContext(MultipartIdentifierPropertyListContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public TerminalNode OPTIONS() {
         return this.getToken(234, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public CreateIndexContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateIndex(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateIndex(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateIndex(this) : visitor.visitChildren(this);
      }
   }

   public static class UseNamespaceContext extends StatementContext {
      public TerminalNode USE() {
         return this.getToken(364, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public UseNamespaceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUseNamespace(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUseNamespace(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUseNamespace(this) : visitor.visitChildren(this);
      }
   }

   public static class DropVariableContext extends StatementContext {
      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public VariableContext variable() {
         return (VariableContext)this.getRuleContext(VariableContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public DropVariableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropVariable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropVariable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropVariable(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateNamespaceContext extends StatementContext {
      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public NamespaceContext namespace() {
         return (NamespaceContext)this.getRuleContext(NamespaceContext.class, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public List commentSpec() {
         return this.getRuleContexts(CommentSpecContext.class);
      }

      public CommentSpecContext commentSpec(int i) {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, i);
      }

      public List locationSpec() {
         return this.getRuleContexts(LocationSpecContext.class);
      }

      public LocationSpecContext locationSpec(int i) {
         return (LocationSpecContext)this.getRuleContext(LocationSpecContext.class, i);
      }

      public List WITH() {
         return this.getTokens(383);
      }

      public TerminalNode WITH(int i) {
         return this.getToken(383, i);
      }

      public List propertyList() {
         return this.getRuleContexts(PropertyListContext.class);
      }

      public PropertyListContext propertyList(int i) {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, i);
      }

      public List DBPROPERTIES() {
         return this.getTokens(90);
      }

      public TerminalNode DBPROPERTIES(int i) {
         return this.getToken(90, i);
      }

      public List PROPERTIES() {
         return this.getTokens(254);
      }

      public TerminalNode PROPERTIES(int i) {
         return this.getToken(254, i);
      }

      public CreateNamespaceContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateNamespace(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateNamespace(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateNamespace(this) : visitor.visitChildren(this);
      }
   }

   public static class CallContext extends StatementContext {
      public TerminalNode CALL() {
         return this.getToken(39, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List functionArgument() {
         return this.getRuleContexts(FunctionArgumentContext.class);
      }

      public FunctionArgumentContext functionArgument(int i) {
         return (FunctionArgumentContext)this.getRuleContext(FunctionArgumentContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public CallContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCall(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCall(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCall(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowTblPropertiesContext extends StatementContext {
      public IdentifierReferenceContext table;
      public PropertyKeyContext key;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode TBLPROPERTIES() {
         return this.getToken(329, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public PropertyKeyContext propertyKey() {
         return (PropertyKeyContext)this.getRuleContext(PropertyKeyContext.class, 0);
      }

      public ShowTblPropertiesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowTblProperties(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowTblProperties(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowTblProperties(this) : visitor.visitChildren(this);
      }
   }

   public static class VisitExecuteImmediateContext extends StatementContext {
      public ExecuteImmediateContext executeImmediate() {
         return (ExecuteImmediateContext)this.getRuleContext(ExecuteImmediateContext.class, 0);
      }

      public VisitExecuteImmediateContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterVisitExecuteImmediate(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitVisitExecuteImmediate(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitVisitExecuteImmediate(this) : visitor.visitChildren(this);
      }
   }

   public static class UnsetTablePropertiesContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode UNSET() {
         return this.getToken(361, 0);
      }

      public TerminalNode TBLPROPERTIES() {
         return this.getToken(329, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public UnsetTablePropertiesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnsetTableProperties(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnsetTableProperties(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnsetTableProperties(this) : visitor.visitChildren(this);
      }
   }

   public static class SetTableLocationContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public LocationSpecContext locationSpec() {
         return (LocationSpecContext)this.getRuleContext(LocationSpecContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public SetTableLocationContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetTableLocation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetTableLocation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetTableLocation(this) : visitor.visitChildren(this);
      }
   }

   public static class DropTableColumnsContext extends StatementContext {
      public MultipartIdentifierListContext columns;

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode COLUMN() {
         return this.getToken(57, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public MultipartIdentifierListContext multipartIdentifierList() {
         return (MultipartIdentifierListContext)this.getRuleContext(MultipartIdentifierListContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public DropTableColumnsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDropTableColumns(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDropTableColumns(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDropTableColumns(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowViewsContext extends StatementContext {
      public StringLitContext pattern;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode VIEWS() {
         return this.getToken(375, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public ShowViewsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowViews(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowViews(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowViews(this) : visitor.visitChildren(this);
      }
   }

   public static class ShowFunctionsContext extends StatementContext {
      public IdentifierReferenceContext ns;
      public MultipartIdentifierContext legacy;
      public StringLitContext pattern;

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode FUNCTIONS() {
         return this.getToken(144, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public ShowFunctionsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShowFunctions(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShowFunctions(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShowFunctions(this) : visitor.visitChildren(this);
      }
   }

   public static class CacheTableContext extends StatementContext {
      public PropertyListContext options;

      public TerminalNode CACHE() {
         return this.getToken(38, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode LAZY() {
         return this.getToken(186, 0);
      }

      public TerminalNode OPTIONS() {
         return this.getToken(234, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public CacheTableContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCacheTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCacheTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCacheTable(this) : visitor.visitChildren(this);
      }
   }

   public static class AddTableColumnsContext extends StatementContext {
      public QualifiedColTypeWithPositionListContext columns;

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode ADD() {
         return this.getToken(9, 0);
      }

      public TerminalNode COLUMN() {
         return this.getToken(57, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
         return (QualifiedColTypeWithPositionListContext)this.getRuleContext(QualifiedColTypeWithPositionListContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public AddTableColumnsContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAddTableColumns(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAddTableColumns(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAddTableColumns(this) : visitor.visitChildren(this);
      }
   }

   public static class SetTablePropertiesContext extends StatementContext {
      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode TBLPROPERTIES() {
         return this.getToken(329, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public SetTablePropertiesContext(StatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetTableProperties(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetTableProperties(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetTableProperties(this) : visitor.visitChildren(this);
      }
   }

   public static class SetResetStatementContext extends ParserRuleContext {
      public SetResetStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 30;
      }

      public SetResetStatementContext() {
      }

      public void copyFrom(SetResetStatementContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class SetQuotedConfigurationContext extends SetResetStatementContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public ConfigKeyContext configKey() {
         return (ConfigKeyContext)this.getRuleContext(ConfigKeyContext.class, 0);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public ConfigValueContext configValue() {
         return (ConfigValueContext)this.getRuleContext(ConfigValueContext.class, 0);
      }

      public SetQuotedConfigurationContext(SetResetStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetQuotedConfiguration(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetQuotedConfiguration(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetQuotedConfiguration(this) : visitor.visitChildren(this);
      }
   }

   public static class ResetQuotedConfigurationContext extends SetResetStatementContext {
      public TerminalNode RESET() {
         return this.getToken(273, 0);
      }

      public ConfigKeyContext configKey() {
         return (ConfigKeyContext)this.getRuleContext(ConfigKeyContext.class, 0);
      }

      public ResetQuotedConfigurationContext(SetResetStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterResetQuotedConfiguration(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitResetQuotedConfiguration(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitResetQuotedConfiguration(this) : visitor.visitChildren(this);
      }
   }

   public static class FailSetRoleContext extends SetResetStatementContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode ROLE() {
         return this.getToken(281, 0);
      }

      public FailSetRoleContext(SetResetStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFailSetRole(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFailSetRole(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFailSetRole(this) : visitor.visitChildren(this);
      }
   }

   public static class ResetConfigurationContext extends SetResetStatementContext {
      public TerminalNode RESET() {
         return this.getToken(273, 0);
      }

      public ResetConfigurationContext(SetResetStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterResetConfiguration(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitResetConfiguration(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitResetConfiguration(this) : visitor.visitChildren(this);
      }
   }

   public static class SetTimeZoneContext extends SetResetStatementContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode TIME() {
         return this.getToken(333, 0);
      }

      public TerminalNode ZONE() {
         return this.getToken(387, 0);
      }

      public IntervalContext interval() {
         return (IntervalContext)this.getRuleContext(IntervalContext.class, 0);
      }

      public TimezoneContext timezone() {
         return (TimezoneContext)this.getRuleContext(TimezoneContext.class, 0);
      }

      public SetTimeZoneContext(SetResetStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetTimeZone(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetTimeZone(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetTimeZone(this) : visitor.visitChildren(this);
      }
   }

   public static class SetVariableContext extends SetResetStatementContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public VariableContext variable() {
         return (VariableContext)this.getRuleContext(VariableContext.class, 0);
      }

      public AssignmentListContext assignmentList() {
         return (AssignmentListContext)this.getRuleContext(AssignmentListContext.class, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public MultipartIdentifierListContext multipartIdentifierList() {
         return (MultipartIdentifierListContext)this.getRuleContext(MultipartIdentifierListContext.class, 0);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public SetVariableContext(SetResetStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetVariable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetVariable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetVariable(this) : visitor.visitChildren(this);
      }
   }

   public static class SetConfigurationContext extends SetResetStatementContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public ConfigKeyContext configKey() {
         return (ConfigKeyContext)this.getRuleContext(ConfigKeyContext.class, 0);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public SetConfigurationContext(SetResetStatementContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetConfiguration(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetConfiguration(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetConfiguration(this) : visitor.visitChildren(this);
      }
   }

   public static class ExecuteImmediateContext extends ParserRuleContext {
      public ExecuteImmediateQueryParamContext queryParam;
      public MultipartIdentifierListContext targetVariable;

      public TerminalNode EXECUTE() {
         return this.getToken(342, 0);
      }

      public TerminalNode IMMEDIATE() {
         return this.getToken(159, 0);
      }

      public ExecuteImmediateQueryParamContext executeImmediateQueryParam() {
         return (ExecuteImmediateQueryParamContext)this.getRuleContext(ExecuteImmediateQueryParamContext.class, 0);
      }

      public TerminalNode INTO() {
         return this.getToken(175, 0);
      }

      public ExecuteImmediateUsingContext executeImmediateUsing() {
         return (ExecuteImmediateUsingContext)this.getRuleContext(ExecuteImmediateUsingContext.class, 0);
      }

      public MultipartIdentifierListContext multipartIdentifierList() {
         return (MultipartIdentifierListContext)this.getRuleContext(MultipartIdentifierListContext.class, 0);
      }

      public ExecuteImmediateContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 31;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExecuteImmediate(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExecuteImmediate(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExecuteImmediate(this) : visitor.visitChildren(this);
      }
   }

   public static class ExecuteImmediateUsingContext extends ParserRuleContext {
      public NamedExpressionSeqContext params;

      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public NamedExpressionSeqContext namedExpressionSeq() {
         return (NamedExpressionSeqContext)this.getRuleContext(NamedExpressionSeqContext.class, 0);
      }

      public ExecuteImmediateUsingContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 32;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExecuteImmediateUsing(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExecuteImmediateUsing(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExecuteImmediateUsing(this) : visitor.visitChildren(this);
      }
   }

   public static class ExecuteImmediateQueryParamContext extends ParserRuleContext {
      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public ExecuteImmediateQueryParamContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 33;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExecuteImmediateQueryParam(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExecuteImmediateQueryParam(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExecuteImmediateQueryParam(this) : visitor.visitChildren(this);
      }
   }

   public static class ExecuteImmediateArgumentContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext name;

      public ConstantContext constant() {
         return (ConstantContext)this.getRuleContext(ConstantContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public ExecuteImmediateArgumentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 34;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExecuteImmediateArgument(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExecuteImmediateArgument(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExecuteImmediateArgument(this) : visitor.visitChildren(this);
      }
   }

   public static class ExecuteImmediateArgumentSeqContext extends ParserRuleContext {
      public List executeImmediateArgument() {
         return this.getRuleContexts(ExecuteImmediateArgumentContext.class);
      }

      public ExecuteImmediateArgumentContext executeImmediateArgument(int i) {
         return (ExecuteImmediateArgumentContext)this.getRuleContext(ExecuteImmediateArgumentContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ExecuteImmediateArgumentSeqContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 35;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExecuteImmediateArgumentSeq(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExecuteImmediateArgumentSeq(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExecuteImmediateArgumentSeq(this) : visitor.visitChildren(this);
      }
   }

   public static class TimezoneContext extends ParserRuleContext {
      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode LOCAL() {
         return this.getToken(196, 0);
      }

      public TimezoneContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 36;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTimezone(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTimezone(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTimezone(this) : visitor.visitChildren(this);
      }
   }

   public static class ConfigKeyContext extends ParserRuleContext {
      public QuotedIdentifierContext quotedIdentifier() {
         return (QuotedIdentifierContext)this.getRuleContext(QuotedIdentifierContext.class, 0);
      }

      public ConfigKeyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 37;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterConfigKey(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitConfigKey(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitConfigKey(this) : visitor.visitChildren(this);
      }
   }

   public static class ConfigValueContext extends ParserRuleContext {
      public BackQuotedIdentifierContext backQuotedIdentifier() {
         return (BackQuotedIdentifierContext)this.getRuleContext(BackQuotedIdentifierContext.class, 0);
      }

      public ConfigValueContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 38;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterConfigValue(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitConfigValue(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitConfigValue(this) : visitor.visitChildren(this);
      }
   }

   public static class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
      public Token kw1;
      public Token kw2;
      public Token kw3;
      public Token kw4;
      public Token kw5;
      public Token kw6;

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode ROLE() {
         return this.getToken(281, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode GRANT() {
         return this.getToken(147, 0);
      }

      public TerminalNode REVOKE() {
         return this.getToken(278, 0);
      }

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode PRINCIPALS() {
         return this.getToken(253, 0);
      }

      public TerminalNode ROLES() {
         return this.getToken(282, 0);
      }

      public TerminalNode CURRENT() {
         return this.getToken(74, 0);
      }

      public TerminalNode EXPORT() {
         return this.getToken(123, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode IMPORT() {
         return this.getToken(160, 0);
      }

      public TerminalNode COMPACTIONS() {
         return this.getToken(62, 0);
      }

      public TerminalNode TRANSACTIONS() {
         return this.getToken(346, 0);
      }

      public TerminalNode INDEXES() {
         return this.getToken(165, 0);
      }

      public TerminalNode LOCKS() {
         return this.getToken(199, 0);
      }

      public TerminalNode INDEX() {
         return this.getToken(164, 0);
      }

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode LOCK() {
         return this.getToken(198, 0);
      }

      public TerminalNode DATABASE() {
         return this.getToken(84, 0);
      }

      public TerminalNode UNLOCK() {
         return this.getToken(359, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode MACRO() {
         return this.getToken(203, 0);
      }

      public TableIdentifierContext tableIdentifier() {
         return (TableIdentifierContext)this.getRuleContext(TableIdentifierContext.class, 0);
      }

      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public TerminalNode CLUSTERED() {
         return this.getToken(52, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode SORTED() {
         return this.getToken(308, 0);
      }

      public TerminalNode SKEWED() {
         return this.getToken(304, 0);
      }

      public TerminalNode STORED() {
         return this.getToken(316, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode DIRECTORIES() {
         return this.getToken(103, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode LOCATION() {
         return this.getToken(197, 0);
      }

      public TerminalNode EXCHANGE() {
         return this.getToken(118, 0);
      }

      public TerminalNode PARTITION() {
         return this.getToken(244, 0);
      }

      public TerminalNode ARCHIVE() {
         return this.getToken(20, 0);
      }

      public TerminalNode UNARCHIVE() {
         return this.getToken(353, 0);
      }

      public TerminalNode TOUCH() {
         return this.getToken(343, 0);
      }

      public TerminalNode COMPACT() {
         return this.getToken(61, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public TerminalNode CONCATENATE() {
         return this.getToken(65, 0);
      }

      public TerminalNode FILEFORMAT() {
         return this.getToken(132, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public TerminalNode START() {
         return this.getToken(314, 0);
      }

      public TerminalNode TRANSACTION() {
         return this.getToken(345, 0);
      }

      public TerminalNode COMMIT() {
         return this.getToken(60, 0);
      }

      public TerminalNode ROLLBACK() {
         return this.getToken(283, 0);
      }

      public TerminalNode DFS() {
         return this.getToken(102, 0);
      }

      public UnsupportedHiveNativeCommandsContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 39;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnsupportedHiveNativeCommands(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnsupportedHiveNativeCommands(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnsupportedHiveNativeCommands(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateTableHeaderContext extends ParserRuleContext {
      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode EXTERNAL() {
         return this.getToken(126, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public CreateTableHeaderContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 40;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateTableHeader(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateTableHeader(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateTableHeader(this) : visitor.visitChildren(this);
      }
   }

   public static class ReplaceTableHeaderContext extends ParserRuleContext {
      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public ReplaceTableHeaderContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 41;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterReplaceTableHeader(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitReplaceTableHeader(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitReplaceTableHeader(this) : visitor.visitChildren(this);
      }
   }

   public static class ClusterBySpecContext extends ParserRuleContext {
      public TerminalNode CLUSTER() {
         return this.getToken(51, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public MultipartIdentifierListContext multipartIdentifierList() {
         return (MultipartIdentifierListContext)this.getRuleContext(MultipartIdentifierListContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public ClusterBySpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 42;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterClusterBySpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitClusterBySpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitClusterBySpec(this) : visitor.visitChildren(this);
      }
   }

   public static class BucketSpecContext extends ParserRuleContext {
      public TerminalNode CLUSTERED() {
         return this.getToken(52, 0);
      }

      public List BY() {
         return this.getTokens(36);
      }

      public TerminalNode BY(int i) {
         return this.getToken(36, i);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public TerminalNode INTO() {
         return this.getToken(175, 0);
      }

      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public TerminalNode BUCKETS() {
         return this.getToken(35, 0);
      }

      public TerminalNode SORTED() {
         return this.getToken(308, 0);
      }

      public OrderedIdentifierListContext orderedIdentifierList() {
         return (OrderedIdentifierListContext)this.getRuleContext(OrderedIdentifierListContext.class, 0);
      }

      public BucketSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 43;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBucketSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBucketSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBucketSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class SkewSpecContext extends ParserRuleContext {
      public TerminalNode SKEWED() {
         return this.getToken(304, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public ConstantListContext constantList() {
         return (ConstantListContext)this.getRuleContext(ConstantListContext.class, 0);
      }

      public NestedConstantListContext nestedConstantList() {
         return (NestedConstantListContext)this.getRuleContext(NestedConstantListContext.class, 0);
      }

      public TerminalNode STORED() {
         return this.getToken(316, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode DIRECTORIES() {
         return this.getToken(103, 0);
      }

      public SkewSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 44;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSkewSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSkewSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSkewSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class LocationSpecContext extends ParserRuleContext {
      public TerminalNode LOCATION() {
         return this.getToken(197, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public LocationSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 45;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLocationSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLocationSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLocationSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class SchemaBindingContext extends ParserRuleContext {
      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode SCHEMA() {
         return this.getToken(289, 0);
      }

      public TerminalNode BINDING() {
         return this.getToken(31, 0);
      }

      public TerminalNode COMPENSATION() {
         return this.getToken(63, 0);
      }

      public TerminalNode EVOLUTION() {
         return this.getToken(116, 0);
      }

      public TerminalNode TYPE() {
         return this.getToken(352, 0);
      }

      public SchemaBindingContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 46;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSchemaBinding(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSchemaBinding(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSchemaBinding(this) : visitor.visitChildren(this);
      }
   }

   public static class CommentSpecContext extends ParserRuleContext {
      public TerminalNode COMMENT() {
         return this.getToken(59, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public CommentSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 47;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCommentSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCommentSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCommentSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleQueryContext extends ParserRuleContext {
      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode EOF() {
         return this.getToken(-1, 0);
      }

      public SingleQueryContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 48;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class QueryContext extends ParserRuleContext {
      public QueryTermContext queryTerm() {
         return (QueryTermContext)this.getRuleContext(QueryTermContext.class, 0);
      }

      public QueryOrganizationContext queryOrganization() {
         return (QueryOrganizationContext)this.getRuleContext(QueryOrganizationContext.class, 0);
      }

      public CtesContext ctes() {
         return (CtesContext)this.getRuleContext(CtesContext.class, 0);
      }

      public QueryContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 49;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class InsertIntoContext extends ParserRuleContext {
      public InsertIntoContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 50;
      }

      public InsertIntoContext() {
      }

      public void copyFrom(InsertIntoContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class InsertIntoReplaceWhereContext extends InsertIntoContext {
      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode INTO() {
         return this.getToken(175, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public WhereClauseContext whereClause() {
         return (WhereClauseContext)this.getRuleContext(WhereClauseContext.class, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public OptionsClauseContext optionsClause() {
         return (OptionsClauseContext)this.getRuleContext(OptionsClauseContext.class, 0);
      }

      public InsertIntoReplaceWhereContext(InsertIntoContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInsertIntoReplaceWhere(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInsertIntoReplaceWhere(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInsertIntoReplaceWhere(this) : visitor.visitChildren(this);
      }
   }

   public static class InsertOverwriteHiveDirContext extends InsertIntoContext {
      public StringLitContext path;

      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode OVERWRITE() {
         return this.getToken(243, 0);
      }

      public TerminalNode DIRECTORY() {
         return this.getToken(104, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode LOCAL() {
         return this.getToken(196, 0);
      }

      public RowFormatContext rowFormat() {
         return (RowFormatContext)this.getRuleContext(RowFormatContext.class, 0);
      }

      public CreateFileFormatContext createFileFormat() {
         return (CreateFileFormatContext)this.getRuleContext(CreateFileFormatContext.class, 0);
      }

      public InsertOverwriteHiveDirContext(InsertIntoContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInsertOverwriteHiveDir(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInsertOverwriteHiveDir(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInsertOverwriteHiveDir(this) : visitor.visitChildren(this);
      }
   }

   public static class InsertOverwriteDirContext extends InsertIntoContext {
      public StringLitContext path;
      public PropertyListContext options;

      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode OVERWRITE() {
         return this.getToken(243, 0);
      }

      public TerminalNode DIRECTORY() {
         return this.getToken(104, 0);
      }

      public TableProviderContext tableProvider() {
         return (TableProviderContext)this.getRuleContext(TableProviderContext.class, 0);
      }

      public TerminalNode LOCAL() {
         return this.getToken(196, 0);
      }

      public TerminalNode OPTIONS() {
         return this.getToken(234, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public InsertOverwriteDirContext(InsertIntoContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInsertOverwriteDir(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInsertOverwriteDir(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInsertOverwriteDir(this) : visitor.visitChildren(this);
      }
   }

   public static class InsertOverwriteTableContext extends InsertIntoContext {
      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode OVERWRITE() {
         return this.getToken(243, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public OptionsClauseContext optionsClause() {
         return (OptionsClauseContext)this.getRuleContext(OptionsClauseContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode NAME() {
         return this.getToken(217, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public InsertOverwriteTableContext(InsertIntoContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInsertOverwriteTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInsertOverwriteTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInsertOverwriteTable(this) : visitor.visitChildren(this);
      }
   }

   public static class InsertIntoTableContext extends InsertIntoContext {
      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode INTO() {
         return this.getToken(175, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public OptionsClauseContext optionsClause() {
         return (OptionsClauseContext)this.getRuleContext(OptionsClauseContext.class, 0);
      }

      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode NAME() {
         return this.getToken(217, 0);
      }

      public InsertIntoTableContext(InsertIntoContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInsertIntoTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInsertIntoTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInsertIntoTable(this) : visitor.visitChildren(this);
      }
   }

   public static class PartitionSpecLocationContext extends ParserRuleContext {
      public PartitionSpecContext partitionSpec() {
         return (PartitionSpecContext)this.getRuleContext(PartitionSpecContext.class, 0);
      }

      public LocationSpecContext locationSpec() {
         return (LocationSpecContext)this.getRuleContext(LocationSpecContext.class, 0);
      }

      public PartitionSpecLocationContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 51;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPartitionSpecLocation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPartitionSpecLocation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPartitionSpecLocation(this) : visitor.visitChildren(this);
      }
   }

   public static class PartitionSpecContext extends ParserRuleContext {
      public TerminalNode PARTITION() {
         return this.getToken(244, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List partitionVal() {
         return this.getRuleContexts(PartitionValContext.class);
      }

      public PartitionValContext partitionVal(int i) {
         return (PartitionValContext)this.getRuleContext(PartitionValContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 52;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPartitionSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPartitionSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPartitionSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class PartitionValContext extends ParserRuleContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public ConstantContext constant() {
         return (ConstantContext)this.getRuleContext(ConstantContext.class, 0);
      }

      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public PartitionValContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 53;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPartitionVal(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPartitionVal(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPartitionVal(this) : visitor.visitChildren(this);
      }
   }

   public static class NamespaceContext extends ParserRuleContext {
      public TerminalNode NAMESPACE() {
         return this.getToken(218, 0);
      }

      public TerminalNode DATABASE() {
         return this.getToken(84, 0);
      }

      public TerminalNode SCHEMA() {
         return this.getToken(289, 0);
      }

      public NamespaceContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 54;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamespace(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamespace(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamespace(this) : visitor.visitChildren(this);
      }
   }

   public static class NamespacesContext extends ParserRuleContext {
      public TerminalNode NAMESPACES() {
         return this.getToken(219, 0);
      }

      public TerminalNode DATABASES() {
         return this.getToken(85, 0);
      }

      public TerminalNode SCHEMAS() {
         return this.getToken(290, 0);
      }

      public NamespacesContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 55;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamespaces(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamespaces(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamespaces(this) : visitor.visitChildren(this);
      }
   }

   public static class VariableContext extends ParserRuleContext {
      public TerminalNode VARIABLE() {
         return this.getToken(371, 0);
      }

      public TerminalNode VAR() {
         return this.getToken(370, 0);
      }

      public VariableContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 56;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterVariable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitVariable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitVariable(this) : visitor.visitChildren(this);
      }
   }

   public static class DescribeFuncNameContext extends ParserRuleContext {
      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public ComparisonOperatorContext comparisonOperator() {
         return (ComparisonOperatorContext)this.getRuleContext(ComparisonOperatorContext.class, 0);
      }

      public ArithmeticOperatorContext arithmeticOperator() {
         return (ArithmeticOperatorContext)this.getRuleContext(ArithmeticOperatorContext.class, 0);
      }

      public PredicateOperatorContext predicateOperator() {
         return (PredicateOperatorContext)this.getRuleContext(PredicateOperatorContext.class, 0);
      }

      public ShiftOperatorContext shiftOperator() {
         return (ShiftOperatorContext)this.getRuleContext(ShiftOperatorContext.class, 0);
      }

      public TerminalNode BANG() {
         return this.getToken(8, 0);
      }

      public DescribeFuncNameContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 57;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDescribeFuncName(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDescribeFuncName(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDescribeFuncName(this) : visitor.visitChildren(this);
      }
   }

   public static class DescribeColNameContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext errorCapturingIdentifier;
      public List nameParts = new ArrayList();

      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public List DOT() {
         return this.getTokens(5);
      }

      public TerminalNode DOT(int i) {
         return this.getToken(5, i);
      }

      public DescribeColNameContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 58;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDescribeColName(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDescribeColName(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDescribeColName(this) : visitor.visitChildren(this);
      }
   }

   public static class CtesContext extends ParserRuleContext {
      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public List namedQuery() {
         return this.getRuleContexts(NamedQueryContext.class);
      }

      public NamedQueryContext namedQuery(int i) {
         return (NamedQueryContext)this.getRuleContext(NamedQueryContext.class, i);
      }

      public TerminalNode RECURSIVE() {
         return this.getToken(264, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public CtesContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 59;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCtes(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCtes(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCtes(this) : visitor.visitChildren(this);
      }
   }

   public static class NamedQueryContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext name;
      public IdentifierListContext columnAliases;

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public NamedQueryContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 60;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamedQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamedQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamedQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class TableProviderContext extends ParserRuleContext {
      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TableProviderContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 61;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTableProvider(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTableProvider(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTableProvider(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateTableClausesContext extends ParserRuleContext {
      public ExpressionPropertyListContext options;
      public PartitionFieldListContext partitioning;
      public PropertyListContext tableProps;

      public List skewSpec() {
         return this.getRuleContexts(SkewSpecContext.class);
      }

      public SkewSpecContext skewSpec(int i) {
         return (SkewSpecContext)this.getRuleContext(SkewSpecContext.class, i);
      }

      public List clusterBySpec() {
         return this.getRuleContexts(ClusterBySpecContext.class);
      }

      public ClusterBySpecContext clusterBySpec(int i) {
         return (ClusterBySpecContext)this.getRuleContext(ClusterBySpecContext.class, i);
      }

      public List bucketSpec() {
         return this.getRuleContexts(BucketSpecContext.class);
      }

      public BucketSpecContext bucketSpec(int i) {
         return (BucketSpecContext)this.getRuleContext(BucketSpecContext.class, i);
      }

      public List rowFormat() {
         return this.getRuleContexts(RowFormatContext.class);
      }

      public RowFormatContext rowFormat(int i) {
         return (RowFormatContext)this.getRuleContext(RowFormatContext.class, i);
      }

      public List createFileFormat() {
         return this.getRuleContexts(CreateFileFormatContext.class);
      }

      public CreateFileFormatContext createFileFormat(int i) {
         return (CreateFileFormatContext)this.getRuleContext(CreateFileFormatContext.class, i);
      }

      public List locationSpec() {
         return this.getRuleContexts(LocationSpecContext.class);
      }

      public LocationSpecContext locationSpec(int i) {
         return (LocationSpecContext)this.getRuleContext(LocationSpecContext.class, i);
      }

      public List commentSpec() {
         return this.getRuleContexts(CommentSpecContext.class);
      }

      public CommentSpecContext commentSpec(int i) {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, i);
      }

      public List collationSpec() {
         return this.getRuleContexts(CollationSpecContext.class);
      }

      public CollationSpecContext collationSpec(int i) {
         return (CollationSpecContext)this.getRuleContext(CollationSpecContext.class, i);
      }

      public List OPTIONS() {
         return this.getTokens(234);
      }

      public TerminalNode OPTIONS(int i) {
         return this.getToken(234, i);
      }

      public List PARTITIONED() {
         return this.getTokens(245);
      }

      public TerminalNode PARTITIONED(int i) {
         return this.getToken(245, i);
      }

      public List BY() {
         return this.getTokens(36);
      }

      public TerminalNode BY(int i) {
         return this.getToken(36, i);
      }

      public List TBLPROPERTIES() {
         return this.getTokens(329);
      }

      public TerminalNode TBLPROPERTIES(int i) {
         return this.getToken(329, i);
      }

      public List expressionPropertyList() {
         return this.getRuleContexts(ExpressionPropertyListContext.class);
      }

      public ExpressionPropertyListContext expressionPropertyList(int i) {
         return (ExpressionPropertyListContext)this.getRuleContext(ExpressionPropertyListContext.class, i);
      }

      public List partitionFieldList() {
         return this.getRuleContexts(PartitionFieldListContext.class);
      }

      public PartitionFieldListContext partitionFieldList(int i) {
         return (PartitionFieldListContext)this.getRuleContext(PartitionFieldListContext.class, i);
      }

      public List propertyList() {
         return this.getRuleContexts(PropertyListContext.class);
      }

      public PropertyListContext propertyList(int i) {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, i);
      }

      public CreateTableClausesContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 62;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateTableClauses(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateTableClauses(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateTableClauses(this) : visitor.visitChildren(this);
      }
   }

   public static class PropertyListContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List property() {
         return this.getRuleContexts(PropertyContext.class);
      }

      public PropertyContext property(int i) {
         return (PropertyContext)this.getRuleContext(PropertyContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public PropertyListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 63;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPropertyList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPropertyList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPropertyList(this) : visitor.visitChildren(this);
      }
   }

   public static class PropertyContext extends ParserRuleContext {
      public PropertyKeyContext key;
      public PropertyValueContext value;

      public PropertyKeyContext propertyKey() {
         return (PropertyKeyContext)this.getRuleContext(PropertyKeyContext.class, 0);
      }

      public PropertyValueContext propertyValue() {
         return (PropertyValueContext)this.getRuleContext(PropertyValueContext.class, 0);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public PropertyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 64;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterProperty(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitProperty(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitProperty(this) : visitor.visitChildren(this);
      }
   }

   public static class PropertyKeyContext extends ParserRuleContext {
      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public List DOT() {
         return this.getTokens(5);
      }

      public TerminalNode DOT(int i) {
         return this.getToken(5, i);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public PropertyKeyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 65;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPropertyKey(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPropertyKey(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPropertyKey(this) : visitor.visitChildren(this);
      }
   }

   public static class PropertyValueContext extends ParserRuleContext {
      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public TerminalNode DECIMAL_VALUE() {
         return this.getToken(424, 0);
      }

      public BooleanValueContext booleanValue() {
         return (BooleanValueContext)this.getRuleContext(BooleanValueContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public PropertyValueContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 66;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPropertyValue(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPropertyValue(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPropertyValue(this) : visitor.visitChildren(this);
      }
   }

   public static class ExpressionPropertyListContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List expressionProperty() {
         return this.getRuleContexts(ExpressionPropertyContext.class);
      }

      public ExpressionPropertyContext expressionProperty(int i) {
         return (ExpressionPropertyContext)this.getRuleContext(ExpressionPropertyContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ExpressionPropertyListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 67;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExpressionPropertyList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExpressionPropertyList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExpressionPropertyList(this) : visitor.visitChildren(this);
      }
   }

   public static class ExpressionPropertyContext extends ParserRuleContext {
      public PropertyKeyContext key;
      public ExpressionContext value;

      public PropertyKeyContext propertyKey() {
         return (PropertyKeyContext)this.getRuleContext(PropertyKeyContext.class, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public ExpressionPropertyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 68;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExpressionProperty(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExpressionProperty(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExpressionProperty(this) : visitor.visitChildren(this);
      }
   }

   public static class ConstantListContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List constant() {
         return this.getRuleContexts(ConstantContext.class);
      }

      public ConstantContext constant(int i) {
         return (ConstantContext)this.getRuleContext(ConstantContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ConstantListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 69;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterConstantList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitConstantList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitConstantList(this) : visitor.visitChildren(this);
      }
   }

   public static class NestedConstantListContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List constantList() {
         return this.getRuleContexts(ConstantListContext.class);
      }

      public ConstantListContext constantList(int i) {
         return (ConstantListContext)this.getRuleContext(ConstantListContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public NestedConstantListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 70;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNestedConstantList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNestedConstantList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNestedConstantList(this) : visitor.visitChildren(this);
      }
   }

   public static class CreateFileFormatContext extends ParserRuleContext {
      public TerminalNode STORED() {
         return this.getToken(316, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public FileFormatContext fileFormat() {
         return (FileFormatContext)this.getRuleContext(FileFormatContext.class, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public StorageHandlerContext storageHandler() {
         return (StorageHandlerContext)this.getRuleContext(StorageHandlerContext.class, 0);
      }

      public CreateFileFormatContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 71;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCreateFileFormat(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCreateFileFormat(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCreateFileFormat(this) : visitor.visitChildren(this);
      }
   }

   public static class FileFormatContext extends ParserRuleContext {
      public FileFormatContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 72;
      }

      public FileFormatContext() {
      }

      public void copyFrom(FileFormatContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class TableFileFormatContext extends FileFormatContext {
      public StringLitContext inFmt;
      public StringLitContext outFmt;

      public TerminalNode INPUTFORMAT() {
         return this.getToken(169, 0);
      }

      public TerminalNode OUTPUTFORMAT() {
         return this.getToken(239, 0);
      }

      public List stringLit() {
         return this.getRuleContexts(StringLitContext.class);
      }

      public StringLitContext stringLit(int i) {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, i);
      }

      public TableFileFormatContext(FileFormatContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTableFileFormat(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTableFileFormat(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTableFileFormat(this) : visitor.visitChildren(this);
      }
   }

   public static class GenericFileFormatContext extends FileFormatContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public GenericFileFormatContext(FileFormatContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterGenericFileFormat(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitGenericFileFormat(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitGenericFileFormat(this) : visitor.visitChildren(this);
      }
   }

   public static class StorageHandlerContext extends ParserRuleContext {
      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode SERDEPROPERTIES() {
         return this.getToken(296, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public StorageHandlerContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 73;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterStorageHandler(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitStorageHandler(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitStorageHandler(this) : visitor.visitChildren(this);
      }
   }

   public static class ResourceContext extends ParserRuleContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public ResourceContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 74;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterResource(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitResource(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitResource(this) : visitor.visitChildren(this);
      }
   }

   public static class DmlStatementNoWithContext extends ParserRuleContext {
      public DmlStatementNoWithContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 75;
      }

      public DmlStatementNoWithContext() {
      }

      public void copyFrom(DmlStatementNoWithContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class DeleteFromTableContext extends DmlStatementNoWithContext {
      public TerminalNode DELETE() {
         return this.getToken(97, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TableAliasContext tableAlias() {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, 0);
      }

      public WhereClauseContext whereClause() {
         return (WhereClauseContext)this.getRuleContext(WhereClauseContext.class, 0);
      }

      public DeleteFromTableContext(DmlStatementNoWithContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDeleteFromTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDeleteFromTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDeleteFromTable(this) : visitor.visitChildren(this);
      }
   }

   public static class SingleInsertQueryContext extends DmlStatementNoWithContext {
      public InsertIntoContext insertInto() {
         return (InsertIntoContext)this.getRuleContext(InsertIntoContext.class, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public SingleInsertQueryContext(DmlStatementNoWithContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSingleInsertQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSingleInsertQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSingleInsertQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class MultiInsertQueryContext extends DmlStatementNoWithContext {
      public FromClauseContext fromClause() {
         return (FromClauseContext)this.getRuleContext(FromClauseContext.class, 0);
      }

      public List multiInsertQueryBody() {
         return this.getRuleContexts(MultiInsertQueryBodyContext.class);
      }

      public MultiInsertQueryBodyContext multiInsertQueryBody(int i) {
         return (MultiInsertQueryBodyContext)this.getRuleContext(MultiInsertQueryBodyContext.class, i);
      }

      public MultiInsertQueryContext(DmlStatementNoWithContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMultiInsertQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMultiInsertQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMultiInsertQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class UpdateTableContext extends DmlStatementNoWithContext {
      public TerminalNode UPDATE() {
         return this.getToken(363, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TableAliasContext tableAlias() {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, 0);
      }

      public SetClauseContext setClause() {
         return (SetClauseContext)this.getRuleContext(SetClauseContext.class, 0);
      }

      public WhereClauseContext whereClause() {
         return (WhereClauseContext)this.getRuleContext(WhereClauseContext.class, 0);
      }

      public UpdateTableContext(DmlStatementNoWithContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUpdateTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUpdateTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUpdateTable(this) : visitor.visitChildren(this);
      }
   }

   public static class MergeIntoTableContext extends DmlStatementNoWithContext {
      public IdentifierReferenceContext target;
      public TableAliasContext targetAlias;
      public IdentifierReferenceContext source;
      public QueryContext sourceQuery;
      public TableAliasContext sourceAlias;
      public BooleanExpressionContext mergeCondition;

      public TerminalNode MERGE() {
         return this.getToken(206, 0);
      }

      public TerminalNode INTO() {
         return this.getToken(175, 0);
      }

      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public List identifierReference() {
         return this.getRuleContexts(IdentifierReferenceContext.class);
      }

      public IdentifierReferenceContext identifierReference(int i) {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, i);
      }

      public List tableAlias() {
         return this.getRuleContexts(TableAliasContext.class);
      }

      public TableAliasContext tableAlias(int i) {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, i);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode SCHEMA() {
         return this.getToken(289, 0);
      }

      public TerminalNode EVOLUTION() {
         return this.getToken(116, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public List matchedClause() {
         return this.getRuleContexts(MatchedClauseContext.class);
      }

      public MatchedClauseContext matchedClause(int i) {
         return (MatchedClauseContext)this.getRuleContext(MatchedClauseContext.class, i);
      }

      public List notMatchedClause() {
         return this.getRuleContexts(NotMatchedClauseContext.class);
      }

      public NotMatchedClauseContext notMatchedClause(int i) {
         return (NotMatchedClauseContext)this.getRuleContext(NotMatchedClauseContext.class, i);
      }

      public List notMatchedBySourceClause() {
         return this.getRuleContexts(NotMatchedBySourceClauseContext.class);
      }

      public NotMatchedBySourceClauseContext notMatchedBySourceClause(int i) {
         return (NotMatchedBySourceClauseContext)this.getRuleContext(NotMatchedBySourceClauseContext.class, i);
      }

      public MergeIntoTableContext(DmlStatementNoWithContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMergeIntoTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMergeIntoTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMergeIntoTable(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentifierReferenceContext extends ParserRuleContext {
      public TerminalNode IDENTIFIER_KW() {
         return this.getToken(155, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public IdentifierReferenceContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 76;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentifierReference(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentifierReference(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentifierReference(this) : visitor.visitChildren(this);
      }
   }

   public static class CatalogIdentifierReferenceContext extends ParserRuleContext {
      public TerminalNode IDENTIFIER_KW() {
         return this.getToken(155, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public CatalogIdentifierReferenceContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 77;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCatalogIdentifierReference(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCatalogIdentifierReference(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCatalogIdentifierReference(this) : visitor.visitChildren(this);
      }
   }

   public static class QueryOrganizationContext extends ParserRuleContext {
      public SortItemContext sortItem;
      public List order = new ArrayList();
      public ExpressionContext expression;
      public List clusterBy = new ArrayList();
      public List distributeBy = new ArrayList();
      public List sort = new ArrayList();
      public ExpressionContext limit;
      public ExpressionContext offset;

      public TerminalNode ORDER() {
         return this.getToken(236, 0);
      }

      public List BY() {
         return this.getTokens(36);
      }

      public TerminalNode BY(int i) {
         return this.getToken(36, i);
      }

      public TerminalNode CLUSTER() {
         return this.getToken(51, 0);
      }

      public TerminalNode DISTRIBUTE() {
         return this.getToken(106, 0);
      }

      public TerminalNode SORT() {
         return this.getToken(307, 0);
      }

      public WindowClauseContext windowClause() {
         return (WindowClauseContext)this.getRuleContext(WindowClauseContext.class, 0);
      }

      public TerminalNode LIMIT() {
         return this.getToken(192, 0);
      }

      public TerminalNode OFFSET() {
         return this.getToken(230, 0);
      }

      public List sortItem() {
         return this.getRuleContexts(SortItemContext.class);
      }

      public SortItemContext sortItem(int i) {
         return (SortItemContext)this.getRuleContext(SortItemContext.class, i);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public TerminalNode ALL() {
         return this.getToken(12, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public QueryOrganizationContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 78;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQueryOrganization(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQueryOrganization(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQueryOrganization(this) : visitor.visitChildren(this);
      }
   }

   public static class MultiInsertQueryBodyContext extends ParserRuleContext {
      public InsertIntoContext insertInto() {
         return (InsertIntoContext)this.getRuleContext(InsertIntoContext.class, 0);
      }

      public FromStatementBodyContext fromStatementBody() {
         return (FromStatementBodyContext)this.getRuleContext(FromStatementBodyContext.class, 0);
      }

      public MultiInsertQueryBodyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 79;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMultiInsertQueryBody(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMultiInsertQueryBody(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMultiInsertQueryBody(this) : visitor.visitChildren(this);
      }
   }

   public static class QueryTermContext extends ParserRuleContext {
      public QueryTermContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 80;
      }

      public QueryTermContext() {
      }

      public void copyFrom(QueryTermContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class OperatorPipeStatementContext extends QueryTermContext {
      public QueryTermContext left;

      public TerminalNode OPERATOR_PIPE() {
         return this.getToken(408, 0);
      }

      public OperatorPipeRightSideContext operatorPipeRightSide() {
         return (OperatorPipeRightSideContext)this.getRuleContext(OperatorPipeRightSideContext.class, 0);
      }

      public QueryTermContext queryTerm() {
         return (QueryTermContext)this.getRuleContext(QueryTermContext.class, 0);
      }

      public OperatorPipeStatementContext(QueryTermContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterOperatorPipeStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitOperatorPipeStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitOperatorPipeStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class QueryTermDefaultContext extends QueryTermContext {
      public QueryPrimaryContext queryPrimary() {
         return (QueryPrimaryContext)this.getRuleContext(QueryPrimaryContext.class, 0);
      }

      public QueryTermDefaultContext(QueryTermContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQueryTermDefault(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQueryTermDefault(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQueryTermDefault(this) : visitor.visitChildren(this);
      }
   }

   public static class SetOperationContext extends QueryTermContext {
      public QueryTermContext left;
      public Token operator;
      public QueryTermContext right;

      public List queryTerm() {
         return this.getRuleContexts(QueryTermContext.class);
      }

      public QueryTermContext queryTerm(int i) {
         return (QueryTermContext)this.getRuleContext(QueryTermContext.class, i);
      }

      public TerminalNode INTERSECT() {
         return this.getToken(171, 0);
      }

      public TerminalNode UNION() {
         return this.getToken(356, 0);
      }

      public TerminalNode EXCEPT() {
         return this.getToken(117, 0);
      }

      public TerminalNode SETMINUS() {
         return this.getToken(299, 0);
      }

      public SetQuantifierContext setQuantifier() {
         return (SetQuantifierContext)this.getRuleContext(SetQuantifierContext.class, 0);
      }

      public SetOperationContext(QueryTermContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetOperation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetOperation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetOperation(this) : visitor.visitChildren(this);
      }
   }

   public static class QueryPrimaryContext extends ParserRuleContext {
      public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 81;
      }

      public QueryPrimaryContext() {
      }

      public void copyFrom(QueryPrimaryContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class SubqueryContext extends QueryPrimaryContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public SubqueryContext(QueryPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSubquery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSubquery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSubquery(this) : visitor.visitChildren(this);
      }
   }

   public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
      public QuerySpecificationContext querySpecification() {
         return (QuerySpecificationContext)this.getRuleContext(QuerySpecificationContext.class, 0);
      }

      public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQueryPrimaryDefault(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQueryPrimaryDefault(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQueryPrimaryDefault(this) : visitor.visitChildren(this);
      }
   }

   public static class InlineTableDefault1Context extends QueryPrimaryContext {
      public InlineTableContext inlineTable() {
         return (InlineTableContext)this.getRuleContext(InlineTableContext.class, 0);
      }

      public InlineTableDefault1Context(QueryPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInlineTableDefault1(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInlineTableDefault1(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInlineTableDefault1(this) : visitor.visitChildren(this);
      }
   }

   public static class FromStmtContext extends QueryPrimaryContext {
      public FromStatementContext fromStatement() {
         return (FromStatementContext)this.getRuleContext(FromStatementContext.class, 0);
      }

      public FromStmtContext(QueryPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFromStmt(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFromStmt(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFromStmt(this) : visitor.visitChildren(this);
      }
   }

   public static class TableContext extends QueryPrimaryContext {
      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TableContext(QueryPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTable(this) : visitor.visitChildren(this);
      }
   }

   public static class SortItemContext extends ParserRuleContext {
      public Token ordering;
      public Token nullOrder;

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public TerminalNode ASC() {
         return this.getToken(23, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public TerminalNode LAST() {
         return this.getToken(184, 0);
      }

      public TerminalNode FIRST() {
         return this.getToken(133, 0);
      }

      public SortItemContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 82;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSortItem(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSortItem(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSortItem(this) : visitor.visitChildren(this);
      }
   }

   public static class FromStatementContext extends ParserRuleContext {
      public FromClauseContext fromClause() {
         return (FromClauseContext)this.getRuleContext(FromClauseContext.class, 0);
      }

      public List fromStatementBody() {
         return this.getRuleContexts(FromStatementBodyContext.class);
      }

      public FromStatementBodyContext fromStatementBody(int i) {
         return (FromStatementBodyContext)this.getRuleContext(FromStatementBodyContext.class, i);
      }

      public FromStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 83;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFromStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFromStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFromStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class FromStatementBodyContext extends ParserRuleContext {
      public TransformClauseContext transformClause() {
         return (TransformClauseContext)this.getRuleContext(TransformClauseContext.class, 0);
      }

      public QueryOrganizationContext queryOrganization() {
         return (QueryOrganizationContext)this.getRuleContext(QueryOrganizationContext.class, 0);
      }

      public WhereClauseContext whereClause() {
         return (WhereClauseContext)this.getRuleContext(WhereClauseContext.class, 0);
      }

      public SelectClauseContext selectClause() {
         return (SelectClauseContext)this.getRuleContext(SelectClauseContext.class, 0);
      }

      public List lateralView() {
         return this.getRuleContexts(LateralViewContext.class);
      }

      public LateralViewContext lateralView(int i) {
         return (LateralViewContext)this.getRuleContext(LateralViewContext.class, i);
      }

      public AggregationClauseContext aggregationClause() {
         return (AggregationClauseContext)this.getRuleContext(AggregationClauseContext.class, 0);
      }

      public HavingClauseContext havingClause() {
         return (HavingClauseContext)this.getRuleContext(HavingClauseContext.class, 0);
      }

      public WindowClauseContext windowClause() {
         return (WindowClauseContext)this.getRuleContext(WindowClauseContext.class, 0);
      }

      public FromStatementBodyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 84;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFromStatementBody(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFromStatementBody(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFromStatementBody(this) : visitor.visitChildren(this);
      }
   }

   public static class QuerySpecificationContext extends ParserRuleContext {
      public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 85;
      }

      public QuerySpecificationContext() {
      }

      public void copyFrom(QuerySpecificationContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class RegularQuerySpecificationContext extends QuerySpecificationContext {
      public SelectClauseContext selectClause() {
         return (SelectClauseContext)this.getRuleContext(SelectClauseContext.class, 0);
      }

      public FromClauseContext fromClause() {
         return (FromClauseContext)this.getRuleContext(FromClauseContext.class, 0);
      }

      public List lateralView() {
         return this.getRuleContexts(LateralViewContext.class);
      }

      public LateralViewContext lateralView(int i) {
         return (LateralViewContext)this.getRuleContext(LateralViewContext.class, i);
      }

      public WhereClauseContext whereClause() {
         return (WhereClauseContext)this.getRuleContext(WhereClauseContext.class, 0);
      }

      public AggregationClauseContext aggregationClause() {
         return (AggregationClauseContext)this.getRuleContext(AggregationClauseContext.class, 0);
      }

      public HavingClauseContext havingClause() {
         return (HavingClauseContext)this.getRuleContext(HavingClauseContext.class, 0);
      }

      public WindowClauseContext windowClause() {
         return (WindowClauseContext)this.getRuleContext(WindowClauseContext.class, 0);
      }

      public RegularQuerySpecificationContext(QuerySpecificationContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRegularQuerySpecification(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRegularQuerySpecification(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRegularQuerySpecification(this) : visitor.visitChildren(this);
      }
   }

   public static class TransformQuerySpecificationContext extends QuerySpecificationContext {
      public TransformClauseContext transformClause() {
         return (TransformClauseContext)this.getRuleContext(TransformClauseContext.class, 0);
      }

      public FromClauseContext fromClause() {
         return (FromClauseContext)this.getRuleContext(FromClauseContext.class, 0);
      }

      public List lateralView() {
         return this.getRuleContexts(LateralViewContext.class);
      }

      public LateralViewContext lateralView(int i) {
         return (LateralViewContext)this.getRuleContext(LateralViewContext.class, i);
      }

      public WhereClauseContext whereClause() {
         return (WhereClauseContext)this.getRuleContext(WhereClauseContext.class, 0);
      }

      public AggregationClauseContext aggregationClause() {
         return (AggregationClauseContext)this.getRuleContext(AggregationClauseContext.class, 0);
      }

      public HavingClauseContext havingClause() {
         return (HavingClauseContext)this.getRuleContext(HavingClauseContext.class, 0);
      }

      public WindowClauseContext windowClause() {
         return (WindowClauseContext)this.getRuleContext(WindowClauseContext.class, 0);
      }

      public TransformQuerySpecificationContext(QuerySpecificationContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTransformQuerySpecification(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTransformQuerySpecification(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTransformQuerySpecification(this) : visitor.visitChildren(this);
      }
   }

   public static class TransformClauseContext extends ParserRuleContext {
      public Token kind;
      public RowFormatContext inRowFormat;
      public StringLitContext recordWriter;
      public StringLitContext script;
      public RowFormatContext outRowFormat;
      public StringLitContext recordReader;

      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public List stringLit() {
         return this.getRuleContexts(StringLitContext.class);
      }

      public StringLitContext stringLit(int i) {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, i);
      }

      public TerminalNode SELECT() {
         return this.getToken(292, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public ExpressionSeqContext expressionSeq() {
         return (ExpressionSeqContext)this.getRuleContext(ExpressionSeqContext.class, 0);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public TerminalNode TRANSFORM() {
         return this.getToken(347, 0);
      }

      public TerminalNode MAP() {
         return this.getToken(204, 0);
      }

      public TerminalNode REDUCE() {
         return this.getToken(265, 0);
      }

      public TerminalNode RECORDWRITER() {
         return this.getToken(262, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode RECORDREADER() {
         return this.getToken(261, 0);
      }

      public List rowFormat() {
         return this.getRuleContexts(RowFormatContext.class);
      }

      public RowFormatContext rowFormat(int i) {
         return (RowFormatContext)this.getRuleContext(RowFormatContext.class, i);
      }

      public SetQuantifierContext setQuantifier() {
         return (SetQuantifierContext)this.getRuleContext(SetQuantifierContext.class, 0);
      }

      public IdentifierSeqContext identifierSeq() {
         return (IdentifierSeqContext)this.getRuleContext(IdentifierSeqContext.class, 0);
      }

      public ColTypeListContext colTypeList() {
         return (ColTypeListContext)this.getRuleContext(ColTypeListContext.class, 0);
      }

      public TransformClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 86;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTransformClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTransformClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTransformClause(this) : visitor.visitChildren(this);
      }
   }

   public static class SelectClauseContext extends ParserRuleContext {
      public HintContext hint;
      public List hints = new ArrayList();

      public TerminalNode SELECT() {
         return this.getToken(292, 0);
      }

      public NamedExpressionSeqContext namedExpressionSeq() {
         return (NamedExpressionSeqContext)this.getRuleContext(NamedExpressionSeqContext.class, 0);
      }

      public SetQuantifierContext setQuantifier() {
         return (SetQuantifierContext)this.getRuleContext(SetQuantifierContext.class, 0);
      }

      public List hint() {
         return this.getRuleContexts(HintContext.class);
      }

      public HintContext hint(int i) {
         return (HintContext)this.getRuleContext(HintContext.class, i);
      }

      public SelectClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 87;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSelectClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSelectClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSelectClause(this) : visitor.visitChildren(this);
      }
   }

   public static class SetClauseContext extends ParserRuleContext {
      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public AssignmentListContext assignmentList() {
         return (AssignmentListContext)this.getRuleContext(AssignmentListContext.class, 0);
      }

      public SetClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 88;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetClause(this) : visitor.visitChildren(this);
      }
   }

   public static class MatchedClauseContext extends ParserRuleContext {
      public BooleanExpressionContext matchedCond;

      public TerminalNode WHEN() {
         return this.getToken(379, 0);
      }

      public TerminalNode MATCHED() {
         return this.getToken(205, 0);
      }

      public TerminalNode THEN() {
         return this.getToken(332, 0);
      }

      public MatchedActionContext matchedAction() {
         return (MatchedActionContext)this.getRuleContext(MatchedActionContext.class, 0);
      }

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public MatchedClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 89;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMatchedClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMatchedClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMatchedClause(this) : visitor.visitChildren(this);
      }
   }

   public static class NotMatchedClauseContext extends ParserRuleContext {
      public BooleanExpressionContext notMatchedCond;

      public TerminalNode WHEN() {
         return this.getToken(379, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode MATCHED() {
         return this.getToken(205, 0);
      }

      public TerminalNode THEN() {
         return this.getToken(332, 0);
      }

      public NotMatchedActionContext notMatchedAction() {
         return (NotMatchedActionContext)this.getRuleContext(NotMatchedActionContext.class, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode TARGET() {
         return this.getToken(328, 0);
      }

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public NotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 90;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNotMatchedClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNotMatchedClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNotMatchedClause(this) : visitor.visitChildren(this);
      }
   }

   public static class NotMatchedBySourceClauseContext extends ParserRuleContext {
      public BooleanExpressionContext notMatchedBySourceCond;

      public TerminalNode WHEN() {
         return this.getToken(379, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode MATCHED() {
         return this.getToken(205, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode SOURCE() {
         return this.getToken(309, 0);
      }

      public TerminalNode THEN() {
         return this.getToken(332, 0);
      }

      public NotMatchedBySourceActionContext notMatchedBySourceAction() {
         return (NotMatchedBySourceActionContext)this.getRuleContext(NotMatchedBySourceActionContext.class, 0);
      }

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public NotMatchedBySourceClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 91;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNotMatchedBySourceClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNotMatchedBySourceClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNotMatchedBySourceClause(this) : visitor.visitChildren(this);
      }
   }

   public static class MatchedActionContext extends ParserRuleContext {
      public TerminalNode DELETE() {
         return this.getToken(97, 0);
      }

      public TerminalNode UPDATE() {
         return this.getToken(363, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode ASTERISK() {
         return this.getToken(401, 0);
      }

      public AssignmentListContext assignmentList() {
         return (AssignmentListContext)this.getRuleContext(AssignmentListContext.class, 0);
      }

      public MatchedActionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 92;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMatchedAction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMatchedAction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMatchedAction(this) : visitor.visitChildren(this);
      }
   }

   public static class NotMatchedActionContext extends ParserRuleContext {
      public MultipartIdentifierListContext columns;

      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode ASTERISK() {
         return this.getToken(401, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public TerminalNode VALUES() {
         return this.getToken(368, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public MultipartIdentifierListContext multipartIdentifierList() {
         return (MultipartIdentifierListContext)this.getRuleContext(MultipartIdentifierListContext.class, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public NotMatchedActionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 93;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNotMatchedAction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNotMatchedAction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNotMatchedAction(this) : visitor.visitChildren(this);
      }
   }

   public static class NotMatchedBySourceActionContext extends ParserRuleContext {
      public TerminalNode DELETE() {
         return this.getToken(97, 0);
      }

      public TerminalNode UPDATE() {
         return this.getToken(363, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public AssignmentListContext assignmentList() {
         return (AssignmentListContext)this.getRuleContext(AssignmentListContext.class, 0);
      }

      public NotMatchedBySourceActionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 94;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNotMatchedBySourceAction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNotMatchedBySourceAction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNotMatchedBySourceAction(this) : visitor.visitChildren(this);
      }
   }

   public static class ExceptClauseContext extends ParserRuleContext {
      public MultipartIdentifierListContext exceptCols;

      public TerminalNode EXCEPT() {
         return this.getToken(117, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public MultipartIdentifierListContext multipartIdentifierList() {
         return (MultipartIdentifierListContext)this.getRuleContext(MultipartIdentifierListContext.class, 0);
      }

      public ExceptClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 95;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExceptClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExceptClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExceptClause(this) : visitor.visitChildren(this);
      }
   }

   public static class AssignmentListContext extends ParserRuleContext {
      public List assignment() {
         return this.getRuleContexts(AssignmentContext.class);
      }

      public AssignmentContext assignment(int i) {
         return (AssignmentContext)this.getRuleContext(AssignmentContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public AssignmentListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 96;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAssignmentList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAssignmentList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAssignmentList(this) : visitor.visitChildren(this);
      }
   }

   public static class AssignmentContext extends ParserRuleContext {
      public MultipartIdentifierContext key;
      public ExpressionContext value;

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public AssignmentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 97;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAssignment(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAssignment(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAssignment(this) : visitor.visitChildren(this);
      }
   }

   public static class WhereClauseContext extends ParserRuleContext {
      public TerminalNode WHERE() {
         return this.getToken(380, 0);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public WhereClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 98;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterWhereClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitWhereClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitWhereClause(this) : visitor.visitChildren(this);
      }
   }

   public static class HavingClauseContext extends ParserRuleContext {
      public TerminalNode HAVING() {
         return this.getToken(151, 0);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public HavingClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 99;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterHavingClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitHavingClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitHavingClause(this) : visitor.visitChildren(this);
      }
   }

   public static class HintContext extends ParserRuleContext {
      public HintStatementContext hintStatement;
      public List hintStatements = new ArrayList();

      public TerminalNode HENT_START() {
         return this.getToken(414, 0);
      }

      public TerminalNode HENT_END() {
         return this.getToken(415, 0);
      }

      public List hintStatement() {
         return this.getRuleContexts(HintStatementContext.class);
      }

      public HintStatementContext hintStatement(int i) {
         return (HintStatementContext)this.getRuleContext(HintStatementContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public HintContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 100;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterHint(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitHint(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitHint(this) : visitor.visitChildren(this);
      }
   }

   public static class HintStatementContext extends ParserRuleContext {
      public IdentifierContext hintName;
      public PrimaryExpressionContext primaryExpression;
      public List parameters = new ArrayList();

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List primaryExpression() {
         return this.getRuleContexts(PrimaryExpressionContext.class);
      }

      public PrimaryExpressionContext primaryExpression(int i) {
         return (PrimaryExpressionContext)this.getRuleContext(PrimaryExpressionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public HintStatementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 101;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterHintStatement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitHintStatement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitHintStatement(this) : visitor.visitChildren(this);
      }
   }

   public static class FromClauseContext extends ParserRuleContext {
      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public List relation() {
         return this.getRuleContexts(RelationContext.class);
      }

      public RelationContext relation(int i) {
         return (RelationContext)this.getRuleContext(RelationContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public List lateralView() {
         return this.getRuleContexts(LateralViewContext.class);
      }

      public LateralViewContext lateralView(int i) {
         return (LateralViewContext)this.getRuleContext(LateralViewContext.class, i);
      }

      public PivotClauseContext pivotClause() {
         return (PivotClauseContext)this.getRuleContext(PivotClauseContext.class, 0);
      }

      public UnpivotClauseContext unpivotClause() {
         return (UnpivotClauseContext)this.getRuleContext(UnpivotClauseContext.class, 0);
      }

      public FromClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 102;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFromClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFromClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFromClause(this) : visitor.visitChildren(this);
      }
   }

   public static class TemporalClauseContext extends ParserRuleContext {
      public ValueExpressionContext timestamp;

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode OF() {
         return this.getToken(229, 0);
      }

      public VersionContext version() {
         return (VersionContext)this.getRuleContext(VersionContext.class, 0);
      }

      public TerminalNode SYSTEM_VERSION() {
         return this.getToken(324, 0);
      }

      public TerminalNode VERSION() {
         return this.getToken(373, 0);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public TerminalNode SYSTEM_TIME() {
         return this.getToken(323, 0);
      }

      public TerminalNode TIMESTAMP() {
         return this.getToken(335, 0);
      }

      public ValueExpressionContext valueExpression() {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, 0);
      }

      public TemporalClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 103;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTemporalClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTemporalClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTemporalClause(this) : visitor.visitChildren(this);
      }
   }

   public static class AggregationClauseContext extends ParserRuleContext {
      public GroupByClauseContext groupByClause;
      public List groupingExpressionsWithGroupingAnalytics = new ArrayList();
      public NamedExpressionContext namedExpression;
      public List groupingExpressions = new ArrayList();
      public Token kind;

      public TerminalNode GROUP() {
         return this.getToken(148, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public List groupByClause() {
         return this.getRuleContexts(GroupByClauseContext.class);
      }

      public GroupByClauseContext groupByClause(int i) {
         return (GroupByClauseContext)this.getRuleContext(GroupByClauseContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public List namedExpression() {
         return this.getRuleContexts(NamedExpressionContext.class);
      }

      public NamedExpressionContext namedExpression(int i) {
         return (NamedExpressionContext)this.getRuleContext(NamedExpressionContext.class, i);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode SETS() {
         return this.getToken(300, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List groupingSet() {
         return this.getRuleContexts(GroupingSetContext.class);
      }

      public GroupingSetContext groupingSet(int i) {
         return (GroupingSetContext)this.getRuleContext(GroupingSetContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode ROLLUP() {
         return this.getToken(284, 0);
      }

      public TerminalNode CUBE() {
         return this.getToken(73, 0);
      }

      public TerminalNode GROUPING() {
         return this.getToken(149, 0);
      }

      public AggregationClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 104;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAggregationClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAggregationClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAggregationClause(this) : visitor.visitChildren(this);
      }
   }

   public static class GroupByClauseContext extends ParserRuleContext {
      public GroupingAnalyticsContext groupingAnalytics() {
         return (GroupingAnalyticsContext)this.getRuleContext(GroupingAnalyticsContext.class, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 105;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterGroupByClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitGroupByClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitGroupByClause(this) : visitor.visitChildren(this);
      }
   }

   public static class GroupingAnalyticsContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List groupingSet() {
         return this.getRuleContexts(GroupingSetContext.class);
      }

      public GroupingSetContext groupingSet(int i) {
         return (GroupingSetContext)this.getRuleContext(GroupingSetContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode ROLLUP() {
         return this.getToken(284, 0);
      }

      public TerminalNode CUBE() {
         return this.getToken(73, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public TerminalNode GROUPING() {
         return this.getToken(149, 0);
      }

      public TerminalNode SETS() {
         return this.getToken(300, 0);
      }

      public List groupingElement() {
         return this.getRuleContexts(GroupingElementContext.class);
      }

      public GroupingElementContext groupingElement(int i) {
         return (GroupingElementContext)this.getRuleContext(GroupingElementContext.class, i);
      }

      public GroupingAnalyticsContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 106;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterGroupingAnalytics(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitGroupingAnalytics(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitGroupingAnalytics(this) : visitor.visitChildren(this);
      }
   }

   public static class GroupingElementContext extends ParserRuleContext {
      public GroupingAnalyticsContext groupingAnalytics() {
         return (GroupingAnalyticsContext)this.getRuleContext(GroupingAnalyticsContext.class, 0);
      }

      public GroupingSetContext groupingSet() {
         return (GroupingSetContext)this.getRuleContext(GroupingSetContext.class, 0);
      }

      public GroupingElementContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 107;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterGroupingElement(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitGroupingElement(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitGroupingElement(this) : visitor.visitChildren(this);
      }
   }

   public static class GroupingSetContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public GroupingSetContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 108;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterGroupingSet(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitGroupingSet(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitGroupingSet(this) : visitor.visitChildren(this);
      }
   }

   public static class PivotClauseContext extends ParserRuleContext {
      public NamedExpressionSeqContext aggregates;
      public PivotValueContext pivotValue;
      public List pivotValues = new ArrayList();

      public TerminalNode PIVOT() {
         return this.getToken(248, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public PivotColumnContext pivotColumn() {
         return (PivotColumnContext)this.getRuleContext(PivotColumnContext.class, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public NamedExpressionSeqContext namedExpressionSeq() {
         return (NamedExpressionSeqContext)this.getRuleContext(NamedExpressionSeqContext.class, 0);
      }

      public List pivotValue() {
         return this.getRuleContexts(PivotValueContext.class);
      }

      public PivotValueContext pivotValue(int i) {
         return (PivotValueContext)this.getRuleContext(PivotValueContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public PivotClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 109;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPivotClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPivotClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPivotClause(this) : visitor.visitChildren(this);
      }
   }

   public static class PivotColumnContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext errorCapturingIdentifier;
      public List identifiers = new ArrayList();

      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public PivotColumnContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 110;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPivotColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPivotColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPivotColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class PivotValueContext extends ParserRuleContext {
      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public PivotValueContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 111;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPivotValue(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPivotValue(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPivotValue(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotClauseContext extends ParserRuleContext {
      public UnpivotNullClauseContext nullOperator;
      public UnpivotOperatorContext operator;

      public TerminalNode UNPIVOT() {
         return this.getToken(360, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public UnpivotOperatorContext unpivotOperator() {
         return (UnpivotOperatorContext)this.getRuleContext(UnpivotOperatorContext.class, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public UnpivotNullClauseContext unpivotNullClause() {
         return (UnpivotNullClauseContext)this.getRuleContext(UnpivotNullClauseContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public UnpivotClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 112;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotClause(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotNullClauseContext extends ParserRuleContext {
      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public TerminalNode INCLUDE() {
         return this.getToken(162, 0);
      }

      public TerminalNode EXCLUDE() {
         return this.getToken(119, 0);
      }

      public UnpivotNullClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 113;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotNullClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotNullClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotNullClause(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotOperatorContext extends ParserRuleContext {
      public UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() {
         return (UnpivotSingleValueColumnClauseContext)this.getRuleContext(UnpivotSingleValueColumnClauseContext.class, 0);
      }

      public UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() {
         return (UnpivotMultiValueColumnClauseContext)this.getRuleContext(UnpivotMultiValueColumnClauseContext.class, 0);
      }

      public UnpivotOperatorContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 114;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotOperator(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotOperator(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotOperator(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotSingleValueColumnClauseContext extends ParserRuleContext {
      public UnpivotColumnAndAliasContext unpivotColumnAndAlias;
      public List unpivotColumns = new ArrayList();

      public UnpivotValueColumnContext unpivotValueColumn() {
         return (UnpivotValueColumnContext)this.getRuleContext(UnpivotValueColumnContext.class, 0);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public UnpivotNameColumnContext unpivotNameColumn() {
         return (UnpivotNameColumnContext)this.getRuleContext(UnpivotNameColumnContext.class, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List unpivotColumnAndAlias() {
         return this.getRuleContexts(UnpivotColumnAndAliasContext.class);
      }

      public UnpivotColumnAndAliasContext unpivotColumnAndAlias(int i) {
         return (UnpivotColumnAndAliasContext)this.getRuleContext(UnpivotColumnAndAliasContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public UnpivotSingleValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 115;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotSingleValueColumnClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotSingleValueColumnClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotSingleValueColumnClause(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotMultiValueColumnClauseContext extends ParserRuleContext {
      public UnpivotValueColumnContext unpivotValueColumn;
      public List unpivotValueColumns = new ArrayList();
      public UnpivotColumnSetContext unpivotColumnSet;
      public List unpivotColumnSets = new ArrayList();

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public UnpivotNameColumnContext unpivotNameColumn() {
         return (UnpivotNameColumnContext)this.getRuleContext(UnpivotNameColumnContext.class, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public List unpivotValueColumn() {
         return this.getRuleContexts(UnpivotValueColumnContext.class);
      }

      public UnpivotValueColumnContext unpivotValueColumn(int i) {
         return (UnpivotValueColumnContext)this.getRuleContext(UnpivotValueColumnContext.class, i);
      }

      public List unpivotColumnSet() {
         return this.getRuleContexts(UnpivotColumnSetContext.class);
      }

      public UnpivotColumnSetContext unpivotColumnSet(int i) {
         return (UnpivotColumnSetContext)this.getRuleContext(UnpivotColumnSetContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public UnpivotMultiValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 116;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotMultiValueColumnClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotMultiValueColumnClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotMultiValueColumnClause(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotColumnSetContext extends ParserRuleContext {
      public UnpivotColumnContext unpivotColumn;
      public List unpivotColumns = new ArrayList();

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List unpivotColumn() {
         return this.getRuleContexts(UnpivotColumnContext.class);
      }

      public UnpivotColumnContext unpivotColumn(int i) {
         return (UnpivotColumnContext)this.getRuleContext(UnpivotColumnContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public UnpivotAliasContext unpivotAlias() {
         return (UnpivotAliasContext)this.getRuleContext(UnpivotAliasContext.class, 0);
      }

      public UnpivotColumnSetContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 117;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotColumnSet(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotColumnSet(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotColumnSet(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotValueColumnContext extends ParserRuleContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public UnpivotValueColumnContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 118;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotValueColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotValueColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotValueColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotNameColumnContext extends ParserRuleContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public UnpivotNameColumnContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 119;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotNameColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotNameColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotNameColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotColumnAndAliasContext extends ParserRuleContext {
      public UnpivotColumnContext unpivotColumn() {
         return (UnpivotColumnContext)this.getRuleContext(UnpivotColumnContext.class, 0);
      }

      public UnpivotAliasContext unpivotAlias() {
         return (UnpivotAliasContext)this.getRuleContext(UnpivotAliasContext.class, 0);
      }

      public UnpivotColumnAndAliasContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 120;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotColumnAndAlias(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotColumnAndAlias(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotColumnAndAlias(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotColumnContext extends ParserRuleContext {
      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public UnpivotColumnContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 121;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class UnpivotAliasContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public UnpivotAliasContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 122;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnpivotAlias(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnpivotAlias(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnpivotAlias(this) : visitor.visitChildren(this);
      }
   }

   public static class LateralViewContext extends ParserRuleContext {
      public IdentifierContext tblName;
      public IdentifierContext identifier;
      public List colName = new ArrayList();

      public TerminalNode LATERAL() {
         return this.getToken(185, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public QualifiedNameContext qualifiedName() {
         return (QualifiedNameContext)this.getRuleContext(QualifiedNameContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List identifier() {
         return this.getRuleContexts(IdentifierContext.class);
      }

      public IdentifierContext identifier(int i) {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, i);
      }

      public TerminalNode OUTER() {
         return this.getToken(238, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public LateralViewContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 123;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLateralView(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLateralView(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLateralView(this) : visitor.visitChildren(this);
      }
   }

   public static class SetQuantifierContext extends ParserRuleContext {
      public TerminalNode DISTINCT() {
         return this.getToken(105, 0);
      }

      public TerminalNode ALL() {
         return this.getToken(12, 0);
      }

      public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 124;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSetQuantifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSetQuantifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSetQuantifier(this) : visitor.visitChildren(this);
      }
   }

   public static class RelationContext extends ParserRuleContext {
      public RelationPrimaryContext relationPrimary() {
         return (RelationPrimaryContext)this.getRuleContext(RelationPrimaryContext.class, 0);
      }

      public TerminalNode LATERAL() {
         return this.getToken(185, 0);
      }

      public List relationExtension() {
         return this.getRuleContexts(RelationExtensionContext.class);
      }

      public RelationExtensionContext relationExtension(int i) {
         return (RelationExtensionContext)this.getRuleContext(RelationExtensionContext.class, i);
      }

      public RelationContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 125;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRelation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRelation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRelation(this) : visitor.visitChildren(this);
      }
   }

   public static class RelationExtensionContext extends ParserRuleContext {
      public JoinRelationContext joinRelation() {
         return (JoinRelationContext)this.getRuleContext(JoinRelationContext.class, 0);
      }

      public PivotClauseContext pivotClause() {
         return (PivotClauseContext)this.getRuleContext(PivotClauseContext.class, 0);
      }

      public UnpivotClauseContext unpivotClause() {
         return (UnpivotClauseContext)this.getRuleContext(UnpivotClauseContext.class, 0);
      }

      public RelationExtensionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 126;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRelationExtension(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRelationExtension(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRelationExtension(this) : visitor.visitChildren(this);
      }
   }

   public static class JoinRelationContext extends ParserRuleContext {
      public RelationPrimaryContext right;

      public TerminalNode JOIN() {
         return this.getToken(180, 0);
      }

      public RelationPrimaryContext relationPrimary() {
         return (RelationPrimaryContext)this.getRuleContext(RelationPrimaryContext.class, 0);
      }

      public JoinTypeContext joinType() {
         return (JoinTypeContext)this.getRuleContext(JoinTypeContext.class, 0);
      }

      public TerminalNode LATERAL() {
         return this.getToken(185, 0);
      }

      public JoinCriteriaContext joinCriteria() {
         return (JoinCriteriaContext)this.getRuleContext(JoinCriteriaContext.class, 0);
      }

      public TerminalNode NATURAL() {
         return this.getToken(222, 0);
      }

      public JoinRelationContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 127;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterJoinRelation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitJoinRelation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitJoinRelation(this) : visitor.visitChildren(this);
      }
   }

   public static class JoinTypeContext extends ParserRuleContext {
      public TerminalNode INNER() {
         return this.getToken(166, 0);
      }

      public TerminalNode CROSS() {
         return this.getToken(72, 0);
      }

      public TerminalNode LEFT() {
         return this.getToken(189, 0);
      }

      public TerminalNode OUTER() {
         return this.getToken(238, 0);
      }

      public TerminalNode SEMI() {
         return this.getToken(293, 0);
      }

      public TerminalNode RIGHT() {
         return this.getToken(279, 0);
      }

      public TerminalNode FULL() {
         return this.getToken(142, 0);
      }

      public TerminalNode ANTI() {
         return this.getToken(17, 0);
      }

      public JoinTypeContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 128;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterJoinType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitJoinType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitJoinType(this) : visitor.visitChildren(this);
      }
   }

   public static class JoinCriteriaContext extends ParserRuleContext {
      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 129;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterJoinCriteria(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitJoinCriteria(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitJoinCriteria(this) : visitor.visitChildren(this);
      }
   }

   public static class SampleContext extends ParserRuleContext {
      public Token seed;

      public TerminalNode TABLESAMPLE() {
         return this.getToken(327, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public SampleMethodContext sampleMethod() {
         return (SampleMethodContext)this.getRuleContext(SampleMethodContext.class, 0);
      }

      public TerminalNode REPEATABLE() {
         return this.getToken(271, 0);
      }

      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public SampleContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 130;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSample(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSample(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSample(this) : visitor.visitChildren(this);
      }
   }

   public static class SampleMethodContext extends ParserRuleContext {
      public SampleMethodContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 131;
      }

      public SampleMethodContext() {
      }

      public void copyFrom(SampleMethodContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class SampleByRowsContext extends SampleMethodContext {
      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode ROWS() {
         return this.getToken(286, 0);
      }

      public SampleByRowsContext(SampleMethodContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSampleByRows(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSampleByRows(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSampleByRows(this) : visitor.visitChildren(this);
      }
   }

   public static class SampleByPercentileContext extends SampleMethodContext {
      public Token negativeSign;
      public Token percentage;

      public TerminalNode PERCENTLIT() {
         return this.getToken(247, 0);
      }

      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public TerminalNode DECIMAL_VALUE() {
         return this.getToken(424, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public SampleByPercentileContext(SampleMethodContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSampleByPercentile(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSampleByPercentile(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSampleByPercentile(this) : visitor.visitChildren(this);
      }
   }

   public static class SampleByBucketContext extends SampleMethodContext {
      public Token sampleType;
      public Token numerator;
      public Token denominator;

      public TerminalNode OUT() {
         return this.getToken(237, 0);
      }

      public TerminalNode OF() {
         return this.getToken(229, 0);
      }

      public TerminalNode BUCKET() {
         return this.getToken(34, 0);
      }

      public List INTEGER_VALUE() {
         return this.getTokens(422);
      }

      public TerminalNode INTEGER_VALUE(int i) {
         return this.getToken(422, i);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public QualifiedNameContext qualifiedName() {
         return (QualifiedNameContext)this.getRuleContext(QualifiedNameContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public SampleByBucketContext(SampleMethodContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSampleByBucket(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSampleByBucket(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSampleByBucket(this) : visitor.visitChildren(this);
      }
   }

   public static class SampleByBytesContext extends SampleMethodContext {
      public ExpressionContext bytes;

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public SampleByBytesContext(SampleMethodContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSampleByBytes(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSampleByBytes(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSampleByBytes(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentifierListContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public IdentifierSeqContext identifierSeq() {
         return (IdentifierSeqContext)this.getRuleContext(IdentifierSeqContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public IdentifierListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 132;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentifierList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentifierList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentifierList(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentifierSeqContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext errorCapturingIdentifier;
      public List ident = new ArrayList();

      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public IdentifierSeqContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 133;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentifierSeq(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentifierSeq(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentifierSeq(this) : visitor.visitChildren(this);
      }
   }

   public static class OrderedIdentifierListContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List orderedIdentifier() {
         return this.getRuleContexts(OrderedIdentifierContext.class);
      }

      public OrderedIdentifierContext orderedIdentifier(int i) {
         return (OrderedIdentifierContext)this.getRuleContext(OrderedIdentifierContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public OrderedIdentifierListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 134;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterOrderedIdentifierList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitOrderedIdentifierList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitOrderedIdentifierList(this) : visitor.visitChildren(this);
      }
   }

   public static class OrderedIdentifierContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext ident;
      public Token ordering;

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public TerminalNode ASC() {
         return this.getToken(23, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public OrderedIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 135;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterOrderedIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitOrderedIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitOrderedIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentifierCommentListContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List identifierComment() {
         return this.getRuleContexts(IdentifierCommentContext.class);
      }

      public IdentifierCommentContext identifierComment(int i) {
         return (IdentifierCommentContext)this.getRuleContext(IdentifierCommentContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public IdentifierCommentListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 136;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentifierCommentList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentifierCommentList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentifierCommentList(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentifierCommentContext extends ParserRuleContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public CommentSpecContext commentSpec() {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, 0);
      }

      public IdentifierCommentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 137;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentifierComment(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentifierComment(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentifierComment(this) : visitor.visitChildren(this);
      }
   }

   public static class RelationPrimaryContext extends ParserRuleContext {
      public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 138;
      }

      public RelationPrimaryContext() {
      }

      public void copyFrom(RelationPrimaryContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class TableValuedFunctionContext extends RelationPrimaryContext {
      public FunctionTableContext functionTable() {
         return (FunctionTableContext)this.getRuleContext(FunctionTableContext.class, 0);
      }

      public TableValuedFunctionContext(RelationPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTableValuedFunction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTableValuedFunction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTableValuedFunction(this) : visitor.visitChildren(this);
      }
   }

   public static class InlineTableDefault2Context extends RelationPrimaryContext {
      public InlineTableContext inlineTable() {
         return (InlineTableContext)this.getRuleContext(InlineTableContext.class, 0);
      }

      public InlineTableDefault2Context(RelationPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInlineTableDefault2(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInlineTableDefault2(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInlineTableDefault2(this) : visitor.visitChildren(this);
      }
   }

   public static class AliasedRelationContext extends RelationPrimaryContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public RelationContext relation() {
         return (RelationContext)this.getRuleContext(RelationContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TableAliasContext tableAlias() {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, 0);
      }

      public SampleContext sample() {
         return (SampleContext)this.getRuleContext(SampleContext.class, 0);
      }

      public AliasedRelationContext(RelationPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAliasedRelation(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAliasedRelation(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAliasedRelation(this) : visitor.visitChildren(this);
      }
   }

   public static class AliasedQueryContext extends RelationPrimaryContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TableAliasContext tableAlias() {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, 0);
      }

      public SampleContext sample() {
         return (SampleContext)this.getRuleContext(SampleContext.class, 0);
      }

      public AliasedQueryContext(RelationPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAliasedQuery(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAliasedQuery(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAliasedQuery(this) : visitor.visitChildren(this);
      }
   }

   public static class TableNameContext extends RelationPrimaryContext {
      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TableAliasContext tableAlias() {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, 0);
      }

      public TemporalClauseContext temporalClause() {
         return (TemporalClauseContext)this.getRuleContext(TemporalClauseContext.class, 0);
      }

      public OptionsClauseContext optionsClause() {
         return (OptionsClauseContext)this.getRuleContext(OptionsClauseContext.class, 0);
      }

      public SampleContext sample() {
         return (SampleContext)this.getRuleContext(SampleContext.class, 0);
      }

      public TableNameContext(RelationPrimaryContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTableName(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTableName(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTableName(this) : visitor.visitChildren(this);
      }
   }

   public static class OptionsClauseContext extends ParserRuleContext {
      public PropertyListContext options;

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public OptionsClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 139;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterOptionsClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitOptionsClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitOptionsClause(this) : visitor.visitChildren(this);
      }
   }

   public static class InlineTableContext extends ParserRuleContext {
      public TerminalNode VALUES() {
         return this.getToken(368, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public TableAliasContext tableAlias() {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public InlineTableContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 140;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInlineTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInlineTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInlineTable(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionTableSubqueryArgumentContext extends ParserRuleContext {
      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public IdentifierReferenceContext identifierReference() {
         return (IdentifierReferenceContext)this.getRuleContext(IdentifierReferenceContext.class, 0);
      }

      public TableArgumentPartitioningContext tableArgumentPartitioning() {
         return (TableArgumentPartitioningContext)this.getRuleContext(TableArgumentPartitioningContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public FunctionTableSubqueryArgumentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 141;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionTableSubqueryArgument(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionTableSubqueryArgument(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionTableSubqueryArgument(this) : visitor.visitChildren(this);
      }
   }

   public static class TableArgumentPartitioningContext extends ParserRuleContext {
      public ExpressionContext expression;
      public List partition = new ArrayList();
      public ExpressionContext invalidMultiPartitionExpression;
      public SortItemContext invalidMultiSortItem;

      public List BY() {
         return this.getTokens(36);
      }

      public TerminalNode BY(int i) {
         return this.getToken(36, i);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode SINGLE() {
         return this.getToken(303, 0);
      }

      public TerminalNode PARTITION() {
         return this.getToken(244, 0);
      }

      public TerminalNode ORDER() {
         return this.getToken(236, 0);
      }

      public TerminalNode SORT() {
         return this.getToken(307, 0);
      }

      public TerminalNode DISTRIBUTE() {
         return this.getToken(106, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public List sortItem() {
         return this.getRuleContexts(SortItemContext.class);
      }

      public SortItemContext sortItem(int i) {
         return (SortItemContext)this.getRuleContext(SortItemContext.class, i);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public TableArgumentPartitioningContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 142;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTableArgumentPartitioning(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTableArgumentPartitioning(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTableArgumentPartitioning(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionTableNamedArgumentExpressionContext extends ParserRuleContext {
      public IdentifierContext key;
      public FunctionTableSubqueryArgumentContext table;

      public TerminalNode FAT_ARROW() {
         return this.getToken(413, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
         return (FunctionTableSubqueryArgumentContext)this.getRuleContext(FunctionTableSubqueryArgumentContext.class, 0);
      }

      public FunctionTableNamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 143;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionTableNamedArgumentExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionTableNamedArgumentExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionTableNamedArgumentExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionTableReferenceArgumentContext extends ParserRuleContext {
      public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
         return (FunctionTableSubqueryArgumentContext)this.getRuleContext(FunctionTableSubqueryArgumentContext.class, 0);
      }

      public FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() {
         return (FunctionTableNamedArgumentExpressionContext)this.getRuleContext(FunctionTableNamedArgumentExpressionContext.class, 0);
      }

      public FunctionTableReferenceArgumentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 144;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionTableReferenceArgument(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionTableReferenceArgument(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionTableReferenceArgument(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionTableArgumentContext extends ParserRuleContext {
      public FunctionTableReferenceArgumentContext functionTableReferenceArgument() {
         return (FunctionTableReferenceArgumentContext)this.getRuleContext(FunctionTableReferenceArgumentContext.class, 0);
      }

      public FunctionArgumentContext functionArgument() {
         return (FunctionArgumentContext)this.getRuleContext(FunctionArgumentContext.class, 0);
      }

      public FunctionTableArgumentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 145;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionTableArgument(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionTableArgument(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionTableArgument(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionTableContext extends ParserRuleContext {
      public FunctionNameContext funcName;

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TableAliasContext tableAlias() {
         return (TableAliasContext)this.getRuleContext(TableAliasContext.class, 0);
      }

      public FunctionNameContext functionName() {
         return (FunctionNameContext)this.getRuleContext(FunctionNameContext.class, 0);
      }

      public List functionTableArgument() {
         return this.getRuleContexts(FunctionTableArgumentContext.class);
      }

      public FunctionTableArgumentContext functionTableArgument(int i) {
         return (FunctionTableArgumentContext)this.getRuleContext(FunctionTableArgumentContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public FunctionTableContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 146;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionTable(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionTable(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionTable(this) : visitor.visitChildren(this);
      }
   }

   public static class TableAliasContext extends ParserRuleContext {
      public StrictIdentifierContext strictIdentifier() {
         return (StrictIdentifierContext)this.getRuleContext(StrictIdentifierContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public TableAliasContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 147;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTableAlias(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTableAlias(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTableAlias(this) : visitor.visitChildren(this);
      }
   }

   public static class RowFormatContext extends ParserRuleContext {
      public RowFormatContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 148;
      }

      public RowFormatContext() {
      }

      public void copyFrom(RowFormatContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class RowFormatSerdeContext extends RowFormatContext {
      public StringLitContext name;
      public PropertyListContext props;

      public TerminalNode ROW() {
         return this.getToken(285, 0);
      }

      public TerminalNode FORMAT() {
         return this.getToken(138, 0);
      }

      public TerminalNode SERDE() {
         return this.getToken(295, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode SERDEPROPERTIES() {
         return this.getToken(296, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public RowFormatSerdeContext(RowFormatContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRowFormatSerde(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRowFormatSerde(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRowFormatSerde(this) : visitor.visitChildren(this);
      }
   }

   public static class RowFormatDelimitedContext extends RowFormatContext {
      public StringLitContext fieldsTerminatedBy;
      public StringLitContext escapedBy;
      public StringLitContext collectionItemsTerminatedBy;
      public StringLitContext keysTerminatedBy;
      public StringLitContext linesSeparatedBy;
      public StringLitContext nullDefinedAs;

      public TerminalNode ROW() {
         return this.getToken(285, 0);
      }

      public TerminalNode FORMAT() {
         return this.getToken(138, 0);
      }

      public TerminalNode DELIMITED() {
         return this.getToken(98, 0);
      }

      public TerminalNode FIELDS() {
         return this.getToken(130, 0);
      }

      public List TERMINATED() {
         return this.getTokens(331);
      }

      public TerminalNode TERMINATED(int i) {
         return this.getToken(331, i);
      }

      public List BY() {
         return this.getTokens(36);
      }

      public TerminalNode BY(int i) {
         return this.getToken(36, i);
      }

      public TerminalNode COLLECTION() {
         return this.getToken(56, 0);
      }

      public TerminalNode ITEMS() {
         return this.getToken(178, 0);
      }

      public TerminalNode MAP() {
         return this.getToken(204, 0);
      }

      public TerminalNode KEYS() {
         return this.getToken(182, 0);
      }

      public TerminalNode LINES() {
         return this.getToken(193, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public TerminalNode DEFINED() {
         return this.getToken(95, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public List stringLit() {
         return this.getRuleContexts(StringLitContext.class);
      }

      public StringLitContext stringLit(int i) {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, i);
      }

      public TerminalNode ESCAPED() {
         return this.getToken(115, 0);
      }

      public RowFormatDelimitedContext(RowFormatContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRowFormatDelimited(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRowFormatDelimited(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRowFormatDelimited(this) : visitor.visitChildren(this);
      }
   }

   public static class MultipartIdentifierListContext extends ParserRuleContext {
      public List multipartIdentifier() {
         return this.getRuleContexts(MultipartIdentifierContext.class);
      }

      public MultipartIdentifierContext multipartIdentifier(int i) {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public MultipartIdentifierListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 149;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMultipartIdentifierList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMultipartIdentifierList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMultipartIdentifierList(this) : visitor.visitChildren(this);
      }
   }

   public static class MultipartIdentifierContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext errorCapturingIdentifier;
      public List parts = new ArrayList();

      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public List DOT() {
         return this.getTokens(5);
      }

      public TerminalNode DOT(int i) {
         return this.getToken(5, i);
      }

      public MultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 150;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMultipartIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMultipartIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMultipartIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class MultipartIdentifierPropertyListContext extends ParserRuleContext {
      public List multipartIdentifierProperty() {
         return this.getRuleContexts(MultipartIdentifierPropertyContext.class);
      }

      public MultipartIdentifierPropertyContext multipartIdentifierProperty(int i) {
         return (MultipartIdentifierPropertyContext)this.getRuleContext(MultipartIdentifierPropertyContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public MultipartIdentifierPropertyListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 151;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMultipartIdentifierPropertyList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMultipartIdentifierPropertyList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMultipartIdentifierPropertyList(this) : visitor.visitChildren(this);
      }
   }

   public static class MultipartIdentifierPropertyContext extends ParserRuleContext {
      public PropertyListContext options;

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public TerminalNode OPTIONS() {
         return this.getToken(234, 0);
      }

      public PropertyListContext propertyList() {
         return (PropertyListContext)this.getRuleContext(PropertyListContext.class, 0);
      }

      public MultipartIdentifierPropertyContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 152;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMultipartIdentifierProperty(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMultipartIdentifierProperty(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMultipartIdentifierProperty(this) : visitor.visitChildren(this);
      }
   }

   public static class TableIdentifierContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext db;
      public ErrorCapturingIdentifierContext table;

      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public TerminalNode DOT() {
         return this.getToken(5, 0);
      }

      public TableIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 153;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTableIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTableIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTableIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionIdentifierContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext db;
      public ErrorCapturingIdentifierContext function;

      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public TerminalNode DOT() {
         return this.getToken(5, 0);
      }

      public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 154;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class NamedExpressionContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext name;

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public IdentifierListContext identifierList() {
         return (IdentifierListContext)this.getRuleContext(IdentifierListContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public NamedExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 155;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamedExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamedExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamedExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class NamedExpressionSeqContext extends ParserRuleContext {
      public List namedExpression() {
         return this.getRuleContexts(NamedExpressionContext.class);
      }

      public NamedExpressionContext namedExpression(int i) {
         return (NamedExpressionContext)this.getRuleContext(NamedExpressionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 156;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamedExpressionSeq(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamedExpressionSeq(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamedExpressionSeq(this) : visitor.visitChildren(this);
      }
   }

   public static class PartitionFieldListContext extends ParserRuleContext {
      public PartitionFieldContext partitionField;
      public List fields = new ArrayList();

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List partitionField() {
         return this.getRuleContexts(PartitionFieldContext.class);
      }

      public PartitionFieldContext partitionField(int i) {
         return (PartitionFieldContext)this.getRuleContext(PartitionFieldContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public PartitionFieldListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 157;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPartitionFieldList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPartitionFieldList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPartitionFieldList(this) : visitor.visitChildren(this);
      }
   }

   public static class PartitionFieldContext extends ParserRuleContext {
      public PartitionFieldContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 158;
      }

      public PartitionFieldContext() {
      }

      public void copyFrom(PartitionFieldContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class PartitionColumnContext extends PartitionFieldContext {
      public ColTypeContext colType() {
         return (ColTypeContext)this.getRuleContext(ColTypeContext.class, 0);
      }

      public PartitionColumnContext(PartitionFieldContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPartitionColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPartitionColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPartitionColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class PartitionTransformContext extends PartitionFieldContext {
      public TransformContext transform() {
         return (TransformContext)this.getRuleContext(TransformContext.class, 0);
      }

      public PartitionTransformContext(PartitionFieldContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPartitionTransform(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPartitionTransform(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPartitionTransform(this) : visitor.visitChildren(this);
      }
   }

   public static class TransformContext extends ParserRuleContext {
      public TransformContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 159;
      }

      public TransformContext() {
      }

      public void copyFrom(TransformContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class IdentityTransformContext extends TransformContext {
      public QualifiedNameContext qualifiedName() {
         return (QualifiedNameContext)this.getRuleContext(QualifiedNameContext.class, 0);
      }

      public IdentityTransformContext(TransformContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentityTransform(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentityTransform(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentityTransform(this) : visitor.visitChildren(this);
      }
   }

   public static class ApplyTransformContext extends TransformContext {
      public IdentifierContext transformName;
      public TransformArgumentContext transformArgument;
      public List argument = new ArrayList();

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public List transformArgument() {
         return this.getRuleContexts(TransformArgumentContext.class);
      }

      public TransformArgumentContext transformArgument(int i) {
         return (TransformArgumentContext)this.getRuleContext(TransformArgumentContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ApplyTransformContext(TransformContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterApplyTransform(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitApplyTransform(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitApplyTransform(this) : visitor.visitChildren(this);
      }
   }

   public static class TransformArgumentContext extends ParserRuleContext {
      public QualifiedNameContext qualifiedName() {
         return (QualifiedNameContext)this.getRuleContext(QualifiedNameContext.class, 0);
      }

      public ConstantContext constant() {
         return (ConstantContext)this.getRuleContext(ConstantContext.class, 0);
      }

      public TransformArgumentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 160;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTransformArgument(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTransformArgument(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTransformArgument(this) : visitor.visitChildren(this);
      }
   }

   public static class ExpressionContext extends ParserRuleContext {
      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public ExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 161;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class NamedArgumentExpressionContext extends ParserRuleContext {
      public IdentifierContext key;
      public ExpressionContext value;

      public TerminalNode FAT_ARROW() {
         return this.getToken(413, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public NamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 162;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamedArgumentExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamedArgumentExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamedArgumentExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionArgumentContext extends ParserRuleContext {
      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public NamedArgumentExpressionContext namedArgumentExpression() {
         return (NamedArgumentExpressionContext)this.getRuleContext(NamedArgumentExpressionContext.class, 0);
      }

      public FunctionArgumentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 163;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionArgument(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionArgument(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionArgument(this) : visitor.visitChildren(this);
      }
   }

   public static class ExpressionSeqContext extends ParserRuleContext {
      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ExpressionSeqContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 164;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExpressionSeq(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExpressionSeq(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExpressionSeq(this) : visitor.visitChildren(this);
      }
   }

   public static class BooleanExpressionContext extends ParserRuleContext {
      public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 165;
      }

      public BooleanExpressionContext() {
      }

      public void copyFrom(BooleanExpressionContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class LogicalNotContext extends BooleanExpressionContext {
      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public TerminalNode BANG() {
         return this.getToken(8, 0);
      }

      public LogicalNotContext(BooleanExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLogicalNot(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLogicalNot(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLogicalNot(this) : visitor.visitChildren(this);
      }
   }

   public static class PredicatedContext extends BooleanExpressionContext {
      public ValueExpressionContext valueExpression() {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, 0);
      }

      public PredicateContext predicate() {
         return (PredicateContext)this.getRuleContext(PredicateContext.class, 0);
      }

      public PredicatedContext(BooleanExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPredicated(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPredicated(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPredicated(this) : visitor.visitChildren(this);
      }
   }

   public static class ExistsContext extends BooleanExpressionContext {
      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public ExistsContext(BooleanExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExists(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExists(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExists(this) : visitor.visitChildren(this);
      }
   }

   public static class LogicalBinaryContext extends BooleanExpressionContext {
      public BooleanExpressionContext left;
      public Token operator;
      public BooleanExpressionContext right;

      public List booleanExpression() {
         return this.getRuleContexts(BooleanExpressionContext.class);
      }

      public BooleanExpressionContext booleanExpression(int i) {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, i);
      }

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public LogicalBinaryContext(BooleanExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLogicalBinary(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLogicalBinary(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLogicalBinary(this) : visitor.visitChildren(this);
      }
   }

   public static class PredicateContext extends ParserRuleContext {
      public Token kind;
      public ValueExpressionContext lower;
      public ValueExpressionContext upper;
      public ValueExpressionContext pattern;
      public Token quantifier;
      public StringLitContext escapeChar;
      public ValueExpressionContext right;

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public TerminalNode BETWEEN() {
         return this.getToken(28, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode RLIKE() {
         return this.getToken(280, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public TerminalNode ILIKE() {
         return this.getToken(191, 0);
      }

      public TerminalNode ANY() {
         return this.getToken(18, 0);
      }

      public TerminalNode SOME() {
         return this.getToken(306, 0);
      }

      public TerminalNode ALL() {
         return this.getToken(12, 0);
      }

      public TerminalNode ESCAPE() {
         return this.getToken(114, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode IS() {
         return this.getToken(177, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public TerminalNode TRUE() {
         return this.getToken(349, 0);
      }

      public TerminalNode FALSE() {
         return this.getToken(128, 0);
      }

      public TerminalNode UNKNOWN() {
         return this.getToken(358, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode DISTINCT() {
         return this.getToken(105, 0);
      }

      public PredicateContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 166;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPredicate(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPredicate(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPredicate(this) : visitor.visitChildren(this);
      }
   }

   public static class ErrorCapturingNotContext extends ParserRuleContext {
      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public TerminalNode BANG() {
         return this.getToken(8, 0);
      }

      public ErrorCapturingNotContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 167;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterErrorCapturingNot(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitErrorCapturingNot(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitErrorCapturingNot(this) : visitor.visitChildren(this);
      }
   }

   public static class ValueExpressionContext extends ParserRuleContext {
      public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 168;
      }

      public ValueExpressionContext() {
      }

      public void copyFrom(ValueExpressionContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class ValueExpressionDefaultContext extends ValueExpressionContext {
      public PrimaryExpressionContext primaryExpression() {
         return (PrimaryExpressionContext)this.getRuleContext(PrimaryExpressionContext.class, 0);
      }

      public ValueExpressionDefaultContext(ValueExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterValueExpressionDefault(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitValueExpressionDefault(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitValueExpressionDefault(this) : visitor.visitChildren(this);
      }
   }

   public static class ComparisonContext extends ValueExpressionContext {
      public ValueExpressionContext left;
      public ValueExpressionContext right;

      public ComparisonOperatorContext comparisonOperator() {
         return (ComparisonOperatorContext)this.getRuleContext(ComparisonOperatorContext.class, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public ComparisonContext(ValueExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterComparison(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitComparison(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitComparison(this) : visitor.visitChildren(this);
      }
   }

   public static class ShiftExpressionContext extends ValueExpressionContext {
      public ValueExpressionContext left;
      public ValueExpressionContext right;

      public ShiftOperatorContext shiftOperator() {
         return (ShiftOperatorContext)this.getRuleContext(ShiftOperatorContext.class, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public ShiftExpressionContext(ValueExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShiftExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShiftExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShiftExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class ArithmeticBinaryContext extends ValueExpressionContext {
      public ValueExpressionContext left;
      public Token operator;
      public ValueExpressionContext right;

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public TerminalNode ASTERISK() {
         return this.getToken(401, 0);
      }

      public TerminalNode SLASH() {
         return this.getToken(402, 0);
      }

      public TerminalNode PERCENT() {
         return this.getToken(403, 0);
      }

      public TerminalNode DIV() {
         return this.getToken(107, 0);
      }

      public TerminalNode PLUS() {
         return this.getToken(399, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public TerminalNode CONCAT_PIPE() {
         return this.getToken(407, 0);
      }

      public TerminalNode AMPERSAND() {
         return this.getToken(405, 0);
      }

      public TerminalNode HAT() {
         return this.getToken(409, 0);
      }

      public TerminalNode PIPE() {
         return this.getToken(406, 0);
      }

      public ArithmeticBinaryContext(ValueExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterArithmeticBinary(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitArithmeticBinary(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitArithmeticBinary(this) : visitor.visitChildren(this);
      }
   }

   public static class ArithmeticUnaryContext extends ValueExpressionContext {
      public Token operator;

      public ValueExpressionContext valueExpression() {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public TerminalNode PLUS() {
         return this.getToken(399, 0);
      }

      public TerminalNode TILDE() {
         return this.getToken(404, 0);
      }

      public ArithmeticUnaryContext(ValueExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterArithmeticUnary(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitArithmeticUnary(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitArithmeticUnary(this) : visitor.visitChildren(this);
      }
   }

   public static class ShiftOperatorContext extends ParserRuleContext {
      public TerminalNode SHIFT_LEFT() {
         return this.getToken(396, 0);
      }

      public TerminalNode SHIFT_RIGHT() {
         return this.getToken(397, 0);
      }

      public TerminalNode SHIFT_RIGHT_UNSIGNED() {
         return this.getToken(398, 0);
      }

      public ShiftOperatorContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 169;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterShiftOperator(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitShiftOperator(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitShiftOperator(this) : visitor.visitChildren(this);
      }
   }

   public static class DatetimeUnitContext extends ParserRuleContext {
      public TerminalNode YEAR() {
         return this.getToken(385, 0);
      }

      public TerminalNode QUARTER() {
         return this.getToken(256, 0);
      }

      public TerminalNode MONTH() {
         return this.getToken(214, 0);
      }

      public TerminalNode WEEK() {
         return this.getToken(377, 0);
      }

      public TerminalNode DAY() {
         return this.getToken(79, 0);
      }

      public TerminalNode DAYOFYEAR() {
         return this.getToken(81, 0);
      }

      public TerminalNode HOUR() {
         return this.getToken(153, 0);
      }

      public TerminalNode MINUTE() {
         return this.getToken(211, 0);
      }

      public TerminalNode SECOND() {
         return this.getToken(287, 0);
      }

      public TerminalNode MILLISECOND() {
         return this.getToken(209, 0);
      }

      public TerminalNode MICROSECOND() {
         return this.getToken(207, 0);
      }

      public DatetimeUnitContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 170;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDatetimeUnit(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDatetimeUnit(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDatetimeUnit(this) : visitor.visitChildren(this);
      }
   }

   public static class PrimaryExpressionContext extends ParserRuleContext {
      public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 171;
      }

      public PrimaryExpressionContext() {
      }

      public void copyFrom(PrimaryExpressionContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class StructContext extends PrimaryExpressionContext {
      public NamedExpressionContext namedExpression;
      public List argument = new ArrayList();

      public TerminalNode STRUCT() {
         return this.getToken(319, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List namedExpression() {
         return this.getRuleContexts(NamedExpressionContext.class);
      }

      public NamedExpressionContext namedExpression(int i) {
         return (NamedExpressionContext)this.getRuleContext(NamedExpressionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public StructContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterStruct(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitStruct(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitStruct(this) : visitor.visitChildren(this);
      }
   }

   public static class DereferenceContext extends PrimaryExpressionContext {
      public PrimaryExpressionContext base;
      public IdentifierContext fieldName;

      public TerminalNode DOT() {
         return this.getToken(5, 0);
      }

      public PrimaryExpressionContext primaryExpression() {
         return (PrimaryExpressionContext)this.getRuleContext(PrimaryExpressionContext.class, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public DereferenceContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDereference(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDereference(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDereference(this) : visitor.visitChildren(this);
      }
   }

   public static class CastByColonContext extends PrimaryExpressionContext {
      public PrimaryExpressionContext primaryExpression() {
         return (PrimaryExpressionContext)this.getRuleContext(PrimaryExpressionContext.class, 0);
      }

      public TerminalNode DOUBLE_COLON() {
         return this.getToken(411, 0);
      }

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public CastByColonContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCastByColon(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCastByColon(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCastByColon(this) : visitor.visitChildren(this);
      }
   }

   public static class TimestampaddContext extends PrimaryExpressionContext {
      public Token name;
      public DatetimeUnitContext unit;
      public StringLitContext invalidUnit;
      public ValueExpressionContext unitsAmount;
      public ValueExpressionContext timestamp;

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public TerminalNode TIMESTAMPADD() {
         return this.getToken(338, 0);
      }

      public TerminalNode DATEADD() {
         return this.getToken(86, 0);
      }

      public TerminalNode DATE_ADD() {
         return this.getToken(87, 0);
      }

      public DatetimeUnitContext datetimeUnit() {
         return (DatetimeUnitContext)this.getRuleContext(DatetimeUnitContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TimestampaddContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTimestampadd(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTimestampadd(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTimestampadd(this) : visitor.visitChildren(this);
      }
   }

   public static class SubstringContext extends PrimaryExpressionContext {
      public ValueExpressionContext str;
      public ValueExpressionContext pos;
      public ValueExpressionContext len;

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode SUBSTR() {
         return this.getToken(320, 0);
      }

      public TerminalNode SUBSTRING() {
         return this.getToken(321, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public SubstringContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSubstring(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSubstring(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSubstring(this) : visitor.visitChildren(this);
      }
   }

   public static class CastContext extends PrimaryExpressionContext {
      public Token name;

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode CAST() {
         return this.getToken(43, 0);
      }

      public TerminalNode TRY_CAST() {
         return this.getToken(351, 0);
      }

      public CastContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCast(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCast(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCast(this) : visitor.visitChildren(this);
      }
   }

   public static class LambdaContext extends PrimaryExpressionContext {
      public List identifier() {
         return this.getRuleContexts(IdentifierContext.class);
      }

      public IdentifierContext identifier(int i) {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, i);
      }

      public TerminalNode ARROW() {
         return this.getToken(412, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public LambdaContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLambda(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLambda(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLambda(this) : visitor.visitChildren(this);
      }
   }

   public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterParenthesizedExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitParenthesizedExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitParenthesizedExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class Any_valueContext extends PrimaryExpressionContext {
      public TerminalNode ANY_VALUE() {
         return this.getToken(19, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode IGNORE() {
         return this.getToken(158, 0);
      }

      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public Any_valueContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAny_value(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAny_value(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAny_value(this) : visitor.visitChildren(this);
      }
   }

   public static class TrimContext extends PrimaryExpressionContext {
      public Token trimOption;
      public ValueExpressionContext trimStr;
      public ValueExpressionContext srcStr;

      public TerminalNode TRIM() {
         return this.getToken(348, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public TerminalNode BOTH() {
         return this.getToken(33, 0);
      }

      public TerminalNode LEADING() {
         return this.getToken(187, 0);
      }

      public TerminalNode TRAILING() {
         return this.getToken(344, 0);
      }

      public TrimContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTrim(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTrim(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTrim(this) : visitor.visitChildren(this);
      }
   }

   public static class SimpleCaseContext extends PrimaryExpressionContext {
      public ExpressionContext value;
      public ExpressionContext elseExpression;

      public TerminalNode CASE() {
         return this.getToken(42, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public List whenClause() {
         return this.getRuleContexts(WhenClauseContext.class);
      }

      public WhenClauseContext whenClause(int i) {
         return (WhenClauseContext)this.getRuleContext(WhenClauseContext.class, i);
      }

      public TerminalNode ELSE() {
         return this.getToken(111, 0);
      }

      public SimpleCaseContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSimpleCase(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSimpleCase(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSimpleCase(this) : visitor.visitChildren(this);
      }
   }

   public static class CurrentLikeContext extends PrimaryExpressionContext {
      public Token name;

      public TerminalNode CURRENT_DATE() {
         return this.getToken(75, 0);
      }

      public TerminalNode CURRENT_TIMESTAMP() {
         return this.getToken(77, 0);
      }

      public TerminalNode CURRENT_USER() {
         return this.getToken(78, 0);
      }

      public TerminalNode USER() {
         return this.getToken(365, 0);
      }

      public TerminalNode SESSION_USER() {
         return this.getToken(297, 0);
      }

      public CurrentLikeContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCurrentLike(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCurrentLike(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCurrentLike(this) : visitor.visitChildren(this);
      }
   }

   public static class ColumnReferenceContext extends PrimaryExpressionContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public ColumnReferenceContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColumnReference(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColumnReference(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColumnReference(this) : visitor.visitChildren(this);
      }
   }

   public static class RowConstructorContext extends PrimaryExpressionContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List namedExpression() {
         return this.getRuleContexts(NamedExpressionContext.class);
      }

      public NamedExpressionContext namedExpression(int i) {
         return (NamedExpressionContext)this.getRuleContext(NamedExpressionContext.class, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public RowConstructorContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRowConstructor(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRowConstructor(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRowConstructor(this) : visitor.visitChildren(this);
      }
   }

   public static class LastContext extends PrimaryExpressionContext {
      public TerminalNode LAST() {
         return this.getToken(184, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode IGNORE() {
         return this.getToken(158, 0);
      }

      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public LastContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLast(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLast(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLast(this) : visitor.visitChildren(this);
      }
   }

   public static class StarContext extends PrimaryExpressionContext {
      public TerminalNode ASTERISK() {
         return this.getToken(401, 0);
      }

      public ExceptClauseContext exceptClause() {
         return (ExceptClauseContext)this.getRuleContext(ExceptClauseContext.class, 0);
      }

      public QualifiedNameContext qualifiedName() {
         return (QualifiedNameContext)this.getRuleContext(QualifiedNameContext.class, 0);
      }

      public TerminalNode DOT() {
         return this.getToken(5, 0);
      }

      public StarContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterStar(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitStar(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitStar(this) : visitor.visitChildren(this);
      }
   }

   public static class OverlayContext extends PrimaryExpressionContext {
      public ValueExpressionContext input;
      public ValueExpressionContext replace;
      public ValueExpressionContext position;
      public ValueExpressionContext length;

      public TerminalNode OVERLAY() {
         return this.getToken(242, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode PLACING() {
         return this.getToken(249, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public OverlayContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterOverlay(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitOverlay(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitOverlay(this) : visitor.visitChildren(this);
      }
   }

   public static class SubscriptContext extends PrimaryExpressionContext {
      public PrimaryExpressionContext value;
      public ValueExpressionContext index;

      public TerminalNode LEFT_BRACKET() {
         return this.getToken(6, 0);
      }

      public TerminalNode RIGHT_BRACKET() {
         return this.getToken(7, 0);
      }

      public PrimaryExpressionContext primaryExpression() {
         return (PrimaryExpressionContext)this.getRuleContext(PrimaryExpressionContext.class, 0);
      }

      public ValueExpressionContext valueExpression() {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, 0);
      }

      public SubscriptContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSubscript(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSubscript(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSubscript(this) : visitor.visitChildren(this);
      }
   }

   public static class TimestampdiffContext extends PrimaryExpressionContext {
      public Token name;
      public DatetimeUnitContext unit;
      public StringLitContext invalidUnit;
      public ValueExpressionContext startTimestamp;
      public ValueExpressionContext endTimestamp;

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public TerminalNode TIMESTAMPDIFF() {
         return this.getToken(339, 0);
      }

      public TerminalNode DATEDIFF() {
         return this.getToken(88, 0);
      }

      public TerminalNode DATE_DIFF() {
         return this.getToken(89, 0);
      }

      public TerminalNode TIMEDIFF() {
         return this.getToken(334, 0);
      }

      public DatetimeUnitContext datetimeUnit() {
         return (DatetimeUnitContext)this.getRuleContext(DatetimeUnitContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TimestampdiffContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTimestampdiff(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTimestampdiff(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTimestampdiff(this) : visitor.visitChildren(this);
      }
   }

   public static class SubqueryExpressionContext extends PrimaryExpressionContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public QueryContext query() {
         return (QueryContext)this.getRuleContext(QueryContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public SubqueryExpressionContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSubqueryExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSubqueryExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSubqueryExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class CollateContext extends PrimaryExpressionContext {
      public PrimaryExpressionContext primaryExpression() {
         return (PrimaryExpressionContext)this.getRuleContext(PrimaryExpressionContext.class, 0);
      }

      public CollateClauseContext collateClause() {
         return (CollateClauseContext)this.getRuleContext(CollateClauseContext.class, 0);
      }

      public CollateContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCollate(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCollate(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCollate(this) : visitor.visitChildren(this);
      }
   }

   public static class ConstantDefaultContext extends PrimaryExpressionContext {
      public ConstantContext constant() {
         return (ConstantContext)this.getRuleContext(ConstantContext.class, 0);
      }

      public ConstantDefaultContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterConstantDefault(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitConstantDefault(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitConstantDefault(this) : visitor.visitChildren(this);
      }
   }

   public static class ExtractContext extends PrimaryExpressionContext {
      public IdentifierContext field;
      public ValueExpressionContext source;

      public TerminalNode EXTRACT() {
         return this.getToken(127, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public ValueExpressionContext valueExpression() {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, 0);
      }

      public ExtractContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExtract(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExtract(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExtract(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionCallContext extends PrimaryExpressionContext {
      public FunctionArgumentContext functionArgument;
      public List argument = new ArrayList();
      public BooleanExpressionContext where;
      public Token nullsOption;

      public FunctionNameContext functionName() {
         return (FunctionNameContext)this.getRuleContext(FunctionNameContext.class, 0);
      }

      public List LEFT_PAREN() {
         return this.getTokens(2);
      }

      public TerminalNode LEFT_PAREN(int i) {
         return this.getToken(2, i);
      }

      public List RIGHT_PAREN() {
         return this.getTokens(3);
      }

      public TerminalNode RIGHT_PAREN(int i) {
         return this.getToken(3, i);
      }

      public TerminalNode WITHIN() {
         return this.getToken(384, 0);
      }

      public TerminalNode GROUP() {
         return this.getToken(148, 0);
      }

      public TerminalNode ORDER() {
         return this.getToken(236, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public List sortItem() {
         return this.getRuleContexts(SortItemContext.class);
      }

      public SortItemContext sortItem(int i) {
         return (SortItemContext)this.getRuleContext(SortItemContext.class, i);
      }

      public TerminalNode FILTER() {
         return this.getToken(131, 0);
      }

      public TerminalNode WHERE() {
         return this.getToken(380, 0);
      }

      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public TerminalNode OVER() {
         return this.getToken(240, 0);
      }

      public WindowSpecContext windowSpec() {
         return (WindowSpecContext)this.getRuleContext(WindowSpecContext.class, 0);
      }

      public List functionArgument() {
         return this.getRuleContexts(FunctionArgumentContext.class);
      }

      public FunctionArgumentContext functionArgument(int i) {
         return (FunctionArgumentContext)this.getRuleContext(FunctionArgumentContext.class, i);
      }

      public BooleanExpressionContext booleanExpression() {
         return (BooleanExpressionContext)this.getRuleContext(BooleanExpressionContext.class, 0);
      }

      public TerminalNode IGNORE() {
         return this.getToken(158, 0);
      }

      public TerminalNode RESPECT() {
         return this.getToken(274, 0);
      }

      public SetQuantifierContext setQuantifier() {
         return (SetQuantifierContext)this.getRuleContext(SetQuantifierContext.class, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public FunctionCallContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionCall(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionCall(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionCall(this) : visitor.visitChildren(this);
      }
   }

   public static class SearchedCaseContext extends PrimaryExpressionContext {
      public ExpressionContext elseExpression;

      public TerminalNode CASE() {
         return this.getToken(42, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public List whenClause() {
         return this.getRuleContexts(WhenClauseContext.class);
      }

      public WhenClauseContext whenClause(int i) {
         return (WhenClauseContext)this.getRuleContext(WhenClauseContext.class, i);
      }

      public TerminalNode ELSE() {
         return this.getToken(111, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public SearchedCaseContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSearchedCase(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSearchedCase(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSearchedCase(this) : visitor.visitChildren(this);
      }
   }

   public static class PositionContext extends PrimaryExpressionContext {
      public ValueExpressionContext substr;
      public ValueExpressionContext str;

      public TerminalNode POSITION() {
         return this.getToken(250, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List valueExpression() {
         return this.getRuleContexts(ValueExpressionContext.class);
      }

      public ValueExpressionContext valueExpression(int i) {
         return (ValueExpressionContext)this.getRuleContext(ValueExpressionContext.class, i);
      }

      public PositionContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPosition(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPosition(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPosition(this) : visitor.visitChildren(this);
      }
   }

   public static class FirstContext extends PrimaryExpressionContext {
      public TerminalNode FIRST() {
         return this.getToken(133, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode IGNORE() {
         return this.getToken(158, 0);
      }

      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public FirstContext(PrimaryExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFirst(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFirst(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFirst(this) : visitor.visitChildren(this);
      }
   }

   public static class LiteralTypeContext extends ParserRuleContext {
      public IdentifierContext unsupportedType;

      public TerminalNode DATE() {
         return this.getToken(83, 0);
      }

      public TerminalNode TIMESTAMP() {
         return this.getToken(335, 0);
      }

      public TerminalNode TIMESTAMP_LTZ() {
         return this.getToken(336, 0);
      }

      public TerminalNode TIMESTAMP_NTZ() {
         return this.getToken(337, 0);
      }

      public TerminalNode INTERVAL() {
         return this.getToken(172, 0);
      }

      public TerminalNode BINARY_HEX() {
         return this.getToken(152, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public LiteralTypeContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 172;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLiteralType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLiteralType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLiteralType(this) : visitor.visitChildren(this);
      }
   }

   public static class ConstantContext extends ParserRuleContext {
      public ConstantContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 173;
      }

      public ConstantContext() {
      }

      public void copyFrom(ConstantContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class NullLiteralContext extends ConstantContext {
      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public NullLiteralContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNullLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNullLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNullLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class StringLiteralContext extends ConstantContext {
      public List stringLit() {
         return this.getRuleContexts(StringLitContext.class);
      }

      public StringLitContext stringLit(int i) {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, i);
      }

      public StringLiteralContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterStringLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitStringLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitStringLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class TypeConstructorContext extends ConstantContext {
      public LiteralTypeContext literalType() {
         return (LiteralTypeContext)this.getRuleContext(LiteralTypeContext.class, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TypeConstructorContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTypeConstructor(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTypeConstructor(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTypeConstructor(this) : visitor.visitChildren(this);
      }
   }

   public static class PosParameterLiteralContext extends ConstantContext {
      public TerminalNode QUESTION() {
         return this.getToken(416, 0);
      }

      public PosParameterLiteralContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPosParameterLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPosParameterLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPosParameterLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class NamedParameterLiteralContext extends ConstantContext {
      public TerminalNode COLON() {
         return this.getToken(410, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public NamedParameterLiteralContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamedParameterLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamedParameterLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamedParameterLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class IntervalLiteralContext extends ConstantContext {
      public IntervalContext interval() {
         return (IntervalContext)this.getRuleContext(IntervalContext.class, 0);
      }

      public IntervalLiteralContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIntervalLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIntervalLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIntervalLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class NumericLiteralContext extends ConstantContext {
      public NumberContext number() {
         return (NumberContext)this.getRuleContext(NumberContext.class, 0);
      }

      public NumericLiteralContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNumericLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNumericLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNumericLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class BooleanLiteralContext extends ConstantContext {
      public BooleanValueContext booleanValue() {
         return (BooleanValueContext)this.getRuleContext(BooleanValueContext.class, 0);
      }

      public BooleanLiteralContext(ConstantContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBooleanLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBooleanLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBooleanLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class ComparisonOperatorContext extends ParserRuleContext {
      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public TerminalNode NEQ() {
         return this.getToken(390, 0);
      }

      public TerminalNode NEQJ() {
         return this.getToken(391, 0);
      }

      public TerminalNode LT() {
         return this.getToken(392, 0);
      }

      public TerminalNode LTE() {
         return this.getToken(393, 0);
      }

      public TerminalNode GT() {
         return this.getToken(394, 0);
      }

      public TerminalNode GTE() {
         return this.getToken(395, 0);
      }

      public TerminalNode NSEQ() {
         return this.getToken(389, 0);
      }

      public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 174;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterComparisonOperator(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitComparisonOperator(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitComparisonOperator(this) : visitor.visitChildren(this);
      }
   }

   public static class ArithmeticOperatorContext extends ParserRuleContext {
      public TerminalNode PLUS() {
         return this.getToken(399, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public TerminalNode ASTERISK() {
         return this.getToken(401, 0);
      }

      public TerminalNode SLASH() {
         return this.getToken(402, 0);
      }

      public TerminalNode PERCENT() {
         return this.getToken(403, 0);
      }

      public TerminalNode DIV() {
         return this.getToken(107, 0);
      }

      public TerminalNode TILDE() {
         return this.getToken(404, 0);
      }

      public TerminalNode AMPERSAND() {
         return this.getToken(405, 0);
      }

      public TerminalNode PIPE() {
         return this.getToken(406, 0);
      }

      public TerminalNode CONCAT_PIPE() {
         return this.getToken(407, 0);
      }

      public TerminalNode HAT() {
         return this.getToken(409, 0);
      }

      public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 175;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterArithmeticOperator(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitArithmeticOperator(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitArithmeticOperator(this) : visitor.visitChildren(this);
      }
   }

   public static class PredicateOperatorContext extends ParserRuleContext {
      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public PredicateOperatorContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 176;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPredicateOperator(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPredicateOperator(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPredicateOperator(this) : visitor.visitChildren(this);
      }
   }

   public static class BooleanValueContext extends ParserRuleContext {
      public TerminalNode TRUE() {
         return this.getToken(349, 0);
      }

      public TerminalNode FALSE() {
         return this.getToken(128, 0);
      }

      public BooleanValueContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 177;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBooleanValue(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBooleanValue(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBooleanValue(this) : visitor.visitChildren(this);
      }
   }

   public static class IntervalContext extends ParserRuleContext {
      public TerminalNode INTERVAL() {
         return this.getToken(172, 0);
      }

      public ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() {
         return (ErrorCapturingMultiUnitsIntervalContext)this.getRuleContext(ErrorCapturingMultiUnitsIntervalContext.class, 0);
      }

      public ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() {
         return (ErrorCapturingUnitToUnitIntervalContext)this.getRuleContext(ErrorCapturingUnitToUnitIntervalContext.class, 0);
      }

      public IntervalContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 178;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterInterval(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitInterval(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitInterval(this) : visitor.visitChildren(this);
      }
   }

   public static class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
      public MultiUnitsIntervalContext body;

      public MultiUnitsIntervalContext multiUnitsInterval() {
         return (MultiUnitsIntervalContext)this.getRuleContext(MultiUnitsIntervalContext.class, 0);
      }

      public UnitToUnitIntervalContext unitToUnitInterval() {
         return (UnitToUnitIntervalContext)this.getRuleContext(UnitToUnitIntervalContext.class, 0);
      }

      public ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 179;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterErrorCapturingMultiUnitsInterval(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitErrorCapturingMultiUnitsInterval(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitErrorCapturingMultiUnitsInterval(this) : visitor.visitChildren(this);
      }
   }

   public static class MultiUnitsIntervalContext extends ParserRuleContext {
      public UnitInMultiUnitsContext unitInMultiUnits;
      public List unit = new ArrayList();

      public List intervalValue() {
         return this.getRuleContexts(IntervalValueContext.class);
      }

      public IntervalValueContext intervalValue(int i) {
         return (IntervalValueContext)this.getRuleContext(IntervalValueContext.class, i);
      }

      public List unitInMultiUnits() {
         return this.getRuleContexts(UnitInMultiUnitsContext.class);
      }

      public UnitInMultiUnitsContext unitInMultiUnits(int i) {
         return (UnitInMultiUnitsContext)this.getRuleContext(UnitInMultiUnitsContext.class, i);
      }

      public MultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 180;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterMultiUnitsInterval(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitMultiUnitsInterval(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitMultiUnitsInterval(this) : visitor.visitChildren(this);
      }
   }

   public static class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
      public UnitToUnitIntervalContext body;
      public MultiUnitsIntervalContext error1;
      public UnitToUnitIntervalContext error2;

      public List unitToUnitInterval() {
         return this.getRuleContexts(UnitToUnitIntervalContext.class);
      }

      public UnitToUnitIntervalContext unitToUnitInterval(int i) {
         return (UnitToUnitIntervalContext)this.getRuleContext(UnitToUnitIntervalContext.class, i);
      }

      public MultiUnitsIntervalContext multiUnitsInterval() {
         return (MultiUnitsIntervalContext)this.getRuleContext(MultiUnitsIntervalContext.class, 0);
      }

      public ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 181;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterErrorCapturingUnitToUnitInterval(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitErrorCapturingUnitToUnitInterval(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitErrorCapturingUnitToUnitInterval(this) : visitor.visitChildren(this);
      }
   }

   public static class UnitToUnitIntervalContext extends ParserRuleContext {
      public IntervalValueContext value;
      public UnitInUnitToUnitContext from;
      public UnitInUnitToUnitContext to;

      public TerminalNode TO() {
         return this.getToken(341, 0);
      }

      public IntervalValueContext intervalValue() {
         return (IntervalValueContext)this.getRuleContext(IntervalValueContext.class, 0);
      }

      public List unitInUnitToUnit() {
         return this.getRuleContexts(UnitInUnitToUnitContext.class);
      }

      public UnitInUnitToUnitContext unitInUnitToUnit(int i) {
         return (UnitInUnitToUnitContext)this.getRuleContext(UnitInUnitToUnitContext.class, i);
      }

      public UnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 182;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnitToUnitInterval(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnitToUnitInterval(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnitToUnitInterval(this) : visitor.visitChildren(this);
      }
   }

   public static class IntervalValueContext extends ParserRuleContext {
      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public TerminalNode DECIMAL_VALUE() {
         return this.getToken(424, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode PLUS() {
         return this.getToken(399, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public IntervalValueContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 183;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIntervalValue(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIntervalValue(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIntervalValue(this) : visitor.visitChildren(this);
      }
   }

   public static class UnitInMultiUnitsContext extends ParserRuleContext {
      public TerminalNode NANOSECOND() {
         return this.getToken(220, 0);
      }

      public TerminalNode NANOSECONDS() {
         return this.getToken(221, 0);
      }

      public TerminalNode MICROSECOND() {
         return this.getToken(207, 0);
      }

      public TerminalNode MICROSECONDS() {
         return this.getToken(208, 0);
      }

      public TerminalNode MILLISECOND() {
         return this.getToken(209, 0);
      }

      public TerminalNode MILLISECONDS() {
         return this.getToken(210, 0);
      }

      public TerminalNode SECOND() {
         return this.getToken(287, 0);
      }

      public TerminalNode SECONDS() {
         return this.getToken(288, 0);
      }

      public TerminalNode MINUTE() {
         return this.getToken(211, 0);
      }

      public TerminalNode MINUTES() {
         return this.getToken(212, 0);
      }

      public TerminalNode HOUR() {
         return this.getToken(153, 0);
      }

      public TerminalNode HOURS() {
         return this.getToken(154, 0);
      }

      public TerminalNode DAY() {
         return this.getToken(79, 0);
      }

      public TerminalNode DAYS() {
         return this.getToken(80, 0);
      }

      public TerminalNode WEEK() {
         return this.getToken(377, 0);
      }

      public TerminalNode WEEKS() {
         return this.getToken(378, 0);
      }

      public TerminalNode MONTH() {
         return this.getToken(214, 0);
      }

      public TerminalNode MONTHS() {
         return this.getToken(215, 0);
      }

      public TerminalNode YEAR() {
         return this.getToken(385, 0);
      }

      public TerminalNode YEARS() {
         return this.getToken(386, 0);
      }

      public UnitInMultiUnitsContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 184;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnitInMultiUnits(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnitInMultiUnits(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnitInMultiUnits(this) : visitor.visitChildren(this);
      }
   }

   public static class UnitInUnitToUnitContext extends ParserRuleContext {
      public TerminalNode SECOND() {
         return this.getToken(287, 0);
      }

      public TerminalNode MINUTE() {
         return this.getToken(211, 0);
      }

      public TerminalNode HOUR() {
         return this.getToken(153, 0);
      }

      public TerminalNode DAY() {
         return this.getToken(79, 0);
      }

      public TerminalNode MONTH() {
         return this.getToken(214, 0);
      }

      public TerminalNode YEAR() {
         return this.getToken(385, 0);
      }

      public UnitInUnitToUnitContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 185;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnitInUnitToUnit(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnitInUnitToUnit(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnitInUnitToUnit(this) : visitor.visitChildren(this);
      }
   }

   public static class ColPositionContext extends ParserRuleContext {
      public Token position;
      public ErrorCapturingIdentifierContext afterCol;

      public TerminalNode FIRST() {
         return this.getToken(133, 0);
      }

      public TerminalNode AFTER() {
         return this.getToken(10, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public ColPositionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 186;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColPosition(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColPosition(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColPosition(this) : visitor.visitChildren(this);
      }
   }

   public static class CollationSpecContext extends ParserRuleContext {
      public IdentifierContext collationName;

      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public TerminalNode COLLATION() {
         return this.getToken(55, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public CollationSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 187;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCollationSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCollationSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCollationSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class CollateClauseContext extends ParserRuleContext {
      public MultipartIdentifierContext collationName;

      public TerminalNode COLLATE() {
         return this.getToken(54, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public CollateClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 188;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterCollateClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitCollateClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitCollateClause(this) : visitor.visitChildren(this);
      }
   }

   public static class TypeContext extends ParserRuleContext {
      public IdentifierContext unsupportedType;

      public TerminalNode BOOLEAN() {
         return this.getToken(32, 0);
      }

      public TerminalNode TINYINT() {
         return this.getToken(340, 0);
      }

      public TerminalNode BYTE() {
         return this.getToken(37, 0);
      }

      public TerminalNode SMALLINT() {
         return this.getToken(305, 0);
      }

      public TerminalNode SHORT() {
         return this.getToken(301, 0);
      }

      public TerminalNode INT() {
         return this.getToken(173, 0);
      }

      public TerminalNode INTEGER() {
         return this.getToken(174, 0);
      }

      public TerminalNode BIGINT() {
         return this.getToken(29, 0);
      }

      public TerminalNode LONG() {
         return this.getToken(201, 0);
      }

      public TerminalNode FLOAT() {
         return this.getToken(134, 0);
      }

      public TerminalNode REAL() {
         return this.getToken(260, 0);
      }

      public TerminalNode DOUBLE() {
         return this.getToken(109, 0);
      }

      public TerminalNode DATE() {
         return this.getToken(83, 0);
      }

      public TerminalNode TIMESTAMP() {
         return this.getToken(335, 0);
      }

      public TerminalNode TIMESTAMP_NTZ() {
         return this.getToken(337, 0);
      }

      public TerminalNode TIMESTAMP_LTZ() {
         return this.getToken(336, 0);
      }

      public TerminalNode STRING() {
         return this.getToken(318, 0);
      }

      public CollateClauseContext collateClause() {
         return (CollateClauseContext)this.getRuleContext(CollateClauseContext.class, 0);
      }

      public TerminalNode CHARACTER() {
         return this.getToken(48, 0);
      }

      public TerminalNode CHAR() {
         return this.getToken(47, 0);
      }

      public TerminalNode VARCHAR() {
         return this.getToken(369, 0);
      }

      public TerminalNode BINARY() {
         return this.getToken(30, 0);
      }

      public TerminalNode DECIMAL() {
         return this.getToken(92, 0);
      }

      public TerminalNode DEC() {
         return this.getToken(91, 0);
      }

      public TerminalNode NUMERIC() {
         return this.getToken(228, 0);
      }

      public TerminalNode VOID() {
         return this.getToken(376, 0);
      }

      public TerminalNode INTERVAL() {
         return this.getToken(172, 0);
      }

      public TerminalNode VARIANT() {
         return this.getToken(372, 0);
      }

      public TerminalNode ARRAY() {
         return this.getToken(21, 0);
      }

      public TerminalNode STRUCT() {
         return this.getToken(319, 0);
      }

      public TerminalNode MAP() {
         return this.getToken(204, 0);
      }

      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public TypeContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 189;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitType(this) : visitor.visitChildren(this);
      }
   }

   public static class DataTypeContext extends ParserRuleContext {
      public DataTypeContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 190;
      }

      public DataTypeContext() {
      }

      public void copyFrom(DataTypeContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class ComplexDataTypeContext extends DataTypeContext {
      public Token complex;

      public TerminalNode LT() {
         return this.getToken(392, 0);
      }

      public List dataType() {
         return this.getRuleContexts(DataTypeContext.class);
      }

      public DataTypeContext dataType(int i) {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, i);
      }

      public TerminalNode GT() {
         return this.getToken(394, 0);
      }

      public TerminalNode ARRAY() {
         return this.getToken(21, 0);
      }

      public TerminalNode COMMA() {
         return this.getToken(4, 0);
      }

      public TerminalNode MAP() {
         return this.getToken(204, 0);
      }

      public TerminalNode STRUCT() {
         return this.getToken(319, 0);
      }

      public TerminalNode NEQ() {
         return this.getToken(390, 0);
      }

      public ComplexColTypeListContext complexColTypeList() {
         return (ComplexColTypeListContext)this.getRuleContext(ComplexColTypeListContext.class, 0);
      }

      public ComplexDataTypeContext(DataTypeContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterComplexDataType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitComplexDataType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitComplexDataType(this) : visitor.visitChildren(this);
      }
   }

   public static class YearMonthIntervalDataTypeContext extends DataTypeContext {
      public Token from;
      public Token to;

      public TerminalNode INTERVAL() {
         return this.getToken(172, 0);
      }

      public TerminalNode YEAR() {
         return this.getToken(385, 0);
      }

      public List MONTH() {
         return this.getTokens(214);
      }

      public TerminalNode MONTH(int i) {
         return this.getToken(214, i);
      }

      public TerminalNode TO() {
         return this.getToken(341, 0);
      }

      public YearMonthIntervalDataTypeContext(DataTypeContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterYearMonthIntervalDataType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitYearMonthIntervalDataType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitYearMonthIntervalDataType(this) : visitor.visitChildren(this);
      }
   }

   public static class DayTimeIntervalDataTypeContext extends DataTypeContext {
      public Token from;
      public Token to;

      public TerminalNode INTERVAL() {
         return this.getToken(172, 0);
      }

      public TerminalNode DAY() {
         return this.getToken(79, 0);
      }

      public List HOUR() {
         return this.getTokens(153);
      }

      public TerminalNode HOUR(int i) {
         return this.getToken(153, i);
      }

      public List MINUTE() {
         return this.getTokens(211);
      }

      public TerminalNode MINUTE(int i) {
         return this.getToken(211, i);
      }

      public List SECOND() {
         return this.getTokens(287);
      }

      public TerminalNode SECOND(int i) {
         return this.getToken(287, i);
      }

      public TerminalNode TO() {
         return this.getToken(341, 0);
      }

      public DayTimeIntervalDataTypeContext(DataTypeContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDayTimeIntervalDataType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDayTimeIntervalDataType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDayTimeIntervalDataType(this) : visitor.visitChildren(this);
      }
   }

   public static class PrimitiveDataTypeContext extends DataTypeContext {
      public TypeContext type() {
         return (TypeContext)this.getRuleContext(TypeContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public List INTEGER_VALUE() {
         return this.getTokens(422);
      }

      public TerminalNode INTEGER_VALUE(int i) {
         return this.getToken(422, i);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public PrimitiveDataTypeContext(DataTypeContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterPrimitiveDataType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitPrimitiveDataType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitPrimitiveDataType(this) : visitor.visitChildren(this);
      }
   }

   public static class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
      public List qualifiedColTypeWithPosition() {
         return this.getRuleContexts(QualifiedColTypeWithPositionContext.class);
      }

      public QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition(int i) {
         return (QualifiedColTypeWithPositionContext)this.getRuleContext(QualifiedColTypeWithPositionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public QualifiedColTypeWithPositionListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 191;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQualifiedColTypeWithPositionList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQualifiedColTypeWithPositionList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQualifiedColTypeWithPositionList(this) : visitor.visitChildren(this);
      }
   }

   public static class QualifiedColTypeWithPositionContext extends ParserRuleContext {
      public MultipartIdentifierContext name;

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public List colDefinitionDescriptorWithPosition() {
         return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext.class);
      }

      public ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition(int i) {
         return (ColDefinitionDescriptorWithPositionContext)this.getRuleContext(ColDefinitionDescriptorWithPositionContext.class, i);
      }

      public QualifiedColTypeWithPositionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 192;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQualifiedColTypeWithPosition(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQualifiedColTypeWithPosition(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQualifiedColTypeWithPosition(this) : visitor.visitChildren(this);
      }
   }

   public static class ColDefinitionDescriptorWithPositionContext extends ParserRuleContext {
      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public DefaultExpressionContext defaultExpression() {
         return (DefaultExpressionContext)this.getRuleContext(DefaultExpressionContext.class, 0);
      }

      public CommentSpecContext commentSpec() {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, 0);
      }

      public ColPositionContext colPosition() {
         return (ColPositionContext)this.getRuleContext(ColPositionContext.class, 0);
      }

      public ColDefinitionDescriptorWithPositionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 193;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColDefinitionDescriptorWithPosition(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColDefinitionDescriptorWithPosition(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColDefinitionDescriptorWithPosition(this) : visitor.visitChildren(this);
      }
   }

   public static class DefaultExpressionContext extends ParserRuleContext {
      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public DefaultExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 194;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDefaultExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDefaultExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDefaultExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class VariableDefaultExpressionContext extends ParserRuleContext {
      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public TerminalNode EQ() {
         return this.getToken(388, 0);
      }

      public VariableDefaultExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 195;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterVariableDefaultExpression(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitVariableDefaultExpression(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitVariableDefaultExpression(this) : visitor.visitChildren(this);
      }
   }

   public static class ColTypeListContext extends ParserRuleContext {
      public List colType() {
         return this.getRuleContexts(ColTypeContext.class);
      }

      public ColTypeContext colType(int i) {
         return (ColTypeContext)this.getRuleContext(ColTypeContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ColTypeListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 196;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColTypeList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColTypeList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColTypeList(this) : visitor.visitChildren(this);
      }
   }

   public static class ColTypeContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext colName;

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public CommentSpecContext commentSpec() {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, 0);
      }

      public ColTypeContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 197;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColType(this) : visitor.visitChildren(this);
      }
   }

   public static class ColDefinitionListContext extends ParserRuleContext {
      public List colDefinition() {
         return this.getRuleContexts(ColDefinitionContext.class);
      }

      public ColDefinitionContext colDefinition(int i) {
         return (ColDefinitionContext)this.getRuleContext(ColDefinitionContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ColDefinitionListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 198;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColDefinitionList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColDefinitionList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColDefinitionList(this) : visitor.visitChildren(this);
      }
   }

   public static class ColDefinitionContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext colName;

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public List colDefinitionOption() {
         return this.getRuleContexts(ColDefinitionOptionContext.class);
      }

      public ColDefinitionOptionContext colDefinitionOption(int i) {
         return (ColDefinitionOptionContext)this.getRuleContext(ColDefinitionOptionContext.class, i);
      }

      public ColDefinitionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 199;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColDefinition(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColDefinition(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColDefinition(this) : visitor.visitChildren(this);
      }
   }

   public static class ColDefinitionOptionContext extends ParserRuleContext {
      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public DefaultExpressionContext defaultExpression() {
         return (DefaultExpressionContext)this.getRuleContext(DefaultExpressionContext.class, 0);
      }

      public GenerationExpressionContext generationExpression() {
         return (GenerationExpressionContext)this.getRuleContext(GenerationExpressionContext.class, 0);
      }

      public CommentSpecContext commentSpec() {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, 0);
      }

      public ColDefinitionOptionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 200;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterColDefinitionOption(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitColDefinitionOption(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitColDefinitionOption(this) : visitor.visitChildren(this);
      }
   }

   public static class GenerationExpressionContext extends ParserRuleContext {
      public GenerationExpressionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 201;
      }

      public GenerationExpressionContext() {
      }

      public void copyFrom(GenerationExpressionContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class GeneratedColumnContext extends GenerationExpressionContext {
      public TerminalNode GENERATED() {
         return this.getToken(145, 0);
      }

      public TerminalNode ALWAYS() {
         return this.getToken(14, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public GeneratedColumnContext(GenerationExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterGeneratedColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitGeneratedColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitGeneratedColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentityColumnContext extends GenerationExpressionContext {
      public TerminalNode GENERATED() {
         return this.getToken(145, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode IDENTITY() {
         return this.getToken(156, 0);
      }

      public TerminalNode ALWAYS() {
         return this.getToken(14, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public IdentityColSpecContext identityColSpec() {
         return (IdentityColSpecContext)this.getRuleContext(IdentityColSpecContext.class, 0);
      }

      public IdentityColumnContext(GenerationExpressionContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentityColumn(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentityColumn(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentityColumn(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentityColSpecContext extends ParserRuleContext {
      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public List sequenceGeneratorOption() {
         return this.getRuleContexts(SequenceGeneratorOptionContext.class);
      }

      public SequenceGeneratorOptionContext sequenceGeneratorOption(int i) {
         return (SequenceGeneratorOptionContext)this.getRuleContext(SequenceGeneratorOptionContext.class, i);
      }

      public IdentityColSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 202;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentityColSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentityColSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentityColSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class SequenceGeneratorOptionContext extends ParserRuleContext {
      public SequenceGeneratorStartOrStepContext start;
      public SequenceGeneratorStartOrStepContext step;

      public TerminalNode START() {
         return this.getToken(314, 0);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public SequenceGeneratorStartOrStepContext sequenceGeneratorStartOrStep() {
         return (SequenceGeneratorStartOrStepContext)this.getRuleContext(SequenceGeneratorStartOrStepContext.class, 0);
      }

      public TerminalNode INCREMENT() {
         return this.getToken(163, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public SequenceGeneratorOptionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 203;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSequenceGeneratorOption(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSequenceGeneratorOption(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSequenceGeneratorOption(this) : visitor.visitChildren(this);
      }
   }

   public static class SequenceGeneratorStartOrStepContext extends ParserRuleContext {
      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public TerminalNode BIGINT_LITERAL() {
         return this.getToken(419, 0);
      }

      public SequenceGeneratorStartOrStepContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 204;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSequenceGeneratorStartOrStep(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSequenceGeneratorStartOrStep(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSequenceGeneratorStartOrStep(this) : visitor.visitChildren(this);
      }
   }

   public static class ComplexColTypeListContext extends ParserRuleContext {
      public List complexColType() {
         return this.getRuleContexts(ComplexColTypeContext.class);
      }

      public ComplexColTypeContext complexColType(int i) {
         return (ComplexColTypeContext)this.getRuleContext(ComplexColTypeContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public ComplexColTypeListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 205;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterComplexColTypeList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitComplexColTypeList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitComplexColTypeList(this) : visitor.visitChildren(this);
      }
   }

   public static class ComplexColTypeContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public TerminalNode COLON() {
         return this.getToken(410, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public CommentSpecContext commentSpec() {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, 0);
      }

      public ComplexColTypeContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 206;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterComplexColType(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitComplexColType(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitComplexColType(this) : visitor.visitChildren(this);
      }
   }

   public static class RoutineCharacteristicsContext extends ParserRuleContext {
      public List routineLanguage() {
         return this.getRuleContexts(RoutineLanguageContext.class);
      }

      public RoutineLanguageContext routineLanguage(int i) {
         return (RoutineLanguageContext)this.getRuleContext(RoutineLanguageContext.class, i);
      }

      public List specificName() {
         return this.getRuleContexts(SpecificNameContext.class);
      }

      public SpecificNameContext specificName(int i) {
         return (SpecificNameContext)this.getRuleContext(SpecificNameContext.class, i);
      }

      public List deterministic() {
         return this.getRuleContexts(DeterministicContext.class);
      }

      public DeterministicContext deterministic(int i) {
         return (DeterministicContext)this.getRuleContext(DeterministicContext.class, i);
      }

      public List sqlDataAccess() {
         return this.getRuleContexts(SqlDataAccessContext.class);
      }

      public SqlDataAccessContext sqlDataAccess(int i) {
         return (SqlDataAccessContext)this.getRuleContext(SqlDataAccessContext.class, i);
      }

      public List nullCall() {
         return this.getRuleContexts(NullCallContext.class);
      }

      public NullCallContext nullCall(int i) {
         return (NullCallContext)this.getRuleContext(NullCallContext.class, i);
      }

      public List commentSpec() {
         return this.getRuleContexts(CommentSpecContext.class);
      }

      public CommentSpecContext commentSpec(int i) {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, i);
      }

      public List rightsClause() {
         return this.getRuleContexts(RightsClauseContext.class);
      }

      public RightsClauseContext rightsClause(int i) {
         return (RightsClauseContext)this.getRuleContext(RightsClauseContext.class, i);
      }

      public RoutineCharacteristicsContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 207;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRoutineCharacteristics(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRoutineCharacteristics(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRoutineCharacteristics(this) : visitor.visitChildren(this);
      }
   }

   public static class RoutineLanguageContext extends ParserRuleContext {
      public TerminalNode LANGUAGE() {
         return this.getToken(183, 0);
      }

      public TerminalNode SQL() {
         return this.getToken(311, 0);
      }

      public TerminalNode IDENTIFIER() {
         return this.getToken(428, 0);
      }

      public RoutineLanguageContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 208;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRoutineLanguage(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRoutineLanguage(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRoutineLanguage(this) : visitor.visitChildren(this);
      }
   }

   public static class SpecificNameContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext specific;

      public TerminalNode SPECIFIC() {
         return this.getToken(310, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public SpecificNameContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 209;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSpecificName(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSpecificName(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSpecificName(this) : visitor.visitChildren(this);
      }
   }

   public static class DeterministicContext extends ParserRuleContext {
      public TerminalNode DETERMINISTIC() {
         return this.getToken(101, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public DeterministicContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 210;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDeterministic(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDeterministic(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDeterministic(this) : visitor.visitChildren(this);
      }
   }

   public static class SqlDataAccessContext extends ParserRuleContext {
      public Token access;

      public TerminalNode SQL() {
         return this.getToken(311, 0);
      }

      public TerminalNode NO() {
         return this.getToken(223, 0);
      }

      public TerminalNode CONTAINS() {
         return this.getToken(68, 0);
      }

      public TerminalNode DATA() {
         return this.getToken(82, 0);
      }

      public TerminalNode READS() {
         return this.getToken(259, 0);
      }

      public TerminalNode MODIFIES() {
         return this.getToken(213, 0);
      }

      public SqlDataAccessContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 211;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSqlDataAccess(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSqlDataAccess(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSqlDataAccess(this) : visitor.visitChildren(this);
      }
   }

   public static class NullCallContext extends ParserRuleContext {
      public TerminalNode RETURNS() {
         return this.getToken(277, 0);
      }

      public List NULL() {
         return this.getTokens(226);
      }

      public TerminalNode NULL(int i) {
         return this.getToken(226, i);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public TerminalNode INPUT() {
         return this.getToken(168, 0);
      }

      public TerminalNode CALLED() {
         return this.getToken(40, 0);
      }

      public NullCallContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 212;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNullCall(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNullCall(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNullCall(this) : visitor.visitChildren(this);
      }
   }

   public static class RightsClauseContext extends ParserRuleContext {
      public TerminalNode SQL() {
         return this.getToken(311, 0);
      }

      public TerminalNode SECURITY() {
         return this.getToken(291, 0);
      }

      public TerminalNode INVOKER() {
         return this.getToken(176, 0);
      }

      public TerminalNode DEFINER() {
         return this.getToken(96, 0);
      }

      public RightsClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 213;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRightsClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRightsClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRightsClause(this) : visitor.visitChildren(this);
      }
   }

   public static class WhenClauseContext extends ParserRuleContext {
      public ExpressionContext condition;
      public ExpressionContext result;

      public TerminalNode WHEN() {
         return this.getToken(379, 0);
      }

      public TerminalNode THEN() {
         return this.getToken(332, 0);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public WhenClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 214;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterWhenClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitWhenClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitWhenClause(this) : visitor.visitChildren(this);
      }
   }

   public static class WindowClauseContext extends ParserRuleContext {
      public TerminalNode WINDOW() {
         return this.getToken(382, 0);
      }

      public List namedWindow() {
         return this.getRuleContexts(NamedWindowContext.class);
      }

      public NamedWindowContext namedWindow(int i) {
         return (NamedWindowContext)this.getRuleContext(NamedWindowContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public WindowClauseContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 215;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterWindowClause(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitWindowClause(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitWindowClause(this) : visitor.visitChildren(this);
      }
   }

   public static class NamedWindowContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext name;

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public WindowSpecContext windowSpec() {
         return (WindowSpecContext)this.getRuleContext(WindowSpecContext.class, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public NamedWindowContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 216;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNamedWindow(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNamedWindow(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNamedWindow(this) : visitor.visitChildren(this);
      }
   }

   public static class WindowSpecContext extends ParserRuleContext {
      public WindowSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 217;
      }

      public WindowSpecContext() {
      }

      public void copyFrom(WindowSpecContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class WindowRefContext extends WindowSpecContext {
      public ErrorCapturingIdentifierContext name;

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public WindowRefContext(WindowSpecContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterWindowRef(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitWindowRef(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitWindowRef(this) : visitor.visitChildren(this);
      }
   }

   public static class WindowDefContext extends WindowSpecContext {
      public ExpressionContext expression;
      public List partition = new ArrayList();

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public TerminalNode CLUSTER() {
         return this.getToken(51, 0);
      }

      public List BY() {
         return this.getTokens(36);
      }

      public TerminalNode BY(int i) {
         return this.getToken(36, i);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public WindowFrameContext windowFrame() {
         return (WindowFrameContext)this.getRuleContext(WindowFrameContext.class, 0);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public List sortItem() {
         return this.getRuleContexts(SortItemContext.class);
      }

      public SortItemContext sortItem(int i) {
         return (SortItemContext)this.getRuleContext(SortItemContext.class, i);
      }

      public TerminalNode PARTITION() {
         return this.getToken(244, 0);
      }

      public TerminalNode DISTRIBUTE() {
         return this.getToken(106, 0);
      }

      public TerminalNode ORDER() {
         return this.getToken(236, 0);
      }

      public TerminalNode SORT() {
         return this.getToken(307, 0);
      }

      public WindowDefContext(WindowSpecContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterWindowDef(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitWindowDef(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitWindowDef(this) : visitor.visitChildren(this);
      }
   }

   public static class WindowFrameContext extends ParserRuleContext {
      public Token frameType;
      public FrameBoundContext start;
      public FrameBoundContext end;

      public TerminalNode RANGE() {
         return this.getToken(258, 0);
      }

      public List frameBound() {
         return this.getRuleContexts(FrameBoundContext.class);
      }

      public FrameBoundContext frameBound(int i) {
         return (FrameBoundContext)this.getRuleContext(FrameBoundContext.class, i);
      }

      public TerminalNode ROWS() {
         return this.getToken(286, 0);
      }

      public TerminalNode BETWEEN() {
         return this.getToken(28, 0);
      }

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public WindowFrameContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 218;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterWindowFrame(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitWindowFrame(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitWindowFrame(this) : visitor.visitChildren(this);
      }
   }

   public static class FrameBoundContext extends ParserRuleContext {
      public Token boundType;

      public TerminalNode UNBOUNDED() {
         return this.getToken(354, 0);
      }

      public TerminalNode PRECEDING() {
         return this.getToken(251, 0);
      }

      public TerminalNode FOLLOWING() {
         return this.getToken(135, 0);
      }

      public TerminalNode ROW() {
         return this.getToken(285, 0);
      }

      public TerminalNode CURRENT() {
         return this.getToken(74, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public FrameBoundContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 219;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFrameBound(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFrameBound(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFrameBound(this) : visitor.visitChildren(this);
      }
   }

   public static class QualifiedNameListContext extends ParserRuleContext {
      public List qualifiedName() {
         return this.getRuleContexts(QualifiedNameContext.class);
      }

      public QualifiedNameContext qualifiedName(int i) {
         return (QualifiedNameContext)this.getRuleContext(QualifiedNameContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 220;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQualifiedNameList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQualifiedNameList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQualifiedNameList(this) : visitor.visitChildren(this);
      }
   }

   public static class FunctionNameContext extends ParserRuleContext {
      public Token identFunc;

      public TerminalNode IDENTIFIER_KW() {
         return this.getToken(155, 0);
      }

      public TerminalNode LEFT_PAREN() {
         return this.getToken(2, 0);
      }

      public ExpressionContext expression() {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, 0);
      }

      public TerminalNode RIGHT_PAREN() {
         return this.getToken(3, 0);
      }

      public QualifiedNameContext qualifiedName() {
         return (QualifiedNameContext)this.getRuleContext(QualifiedNameContext.class, 0);
      }

      public TerminalNode FILTER() {
         return this.getToken(131, 0);
      }

      public TerminalNode LEFT() {
         return this.getToken(189, 0);
      }

      public TerminalNode RIGHT() {
         return this.getToken(279, 0);
      }

      public FunctionNameContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 221;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFunctionName(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFunctionName(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFunctionName(this) : visitor.visitChildren(this);
      }
   }

   public static class QualifiedNameContext extends ParserRuleContext {
      public List identifier() {
         return this.getRuleContexts(IdentifierContext.class);
      }

      public IdentifierContext identifier(int i) {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, i);
      }

      public List DOT() {
         return this.getTokens(5);
      }

      public TerminalNode DOT(int i) {
         return this.getToken(5, i);
      }

      public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 222;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQualifiedName(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQualifiedName(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQualifiedName(this) : visitor.visitChildren(this);
      }
   }

   public static class ErrorCapturingIdentifierContext extends ParserRuleContext {
      public IdentifierContext identifier() {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, 0);
      }

      public ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() {
         return (ErrorCapturingIdentifierExtraContext)this.getRuleContext(ErrorCapturingIdentifierExtraContext.class, 0);
      }

      public ErrorCapturingIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 223;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterErrorCapturingIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitErrorCapturingIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitErrorCapturingIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
      public ErrorCapturingIdentifierExtraContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 224;
      }

      public ErrorCapturingIdentifierExtraContext() {
      }

      public void copyFrom(ErrorCapturingIdentifierExtraContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
      public List MINUS() {
         return this.getTokens(400);
      }

      public TerminalNode MINUS(int i) {
         return this.getToken(400, i);
      }

      public List identifier() {
         return this.getRuleContexts(IdentifierContext.class);
      }

      public IdentifierContext identifier(int i) {
         return (IdentifierContext)this.getRuleContext(IdentifierContext.class, i);
      }

      public ErrorIdentContext(ErrorCapturingIdentifierExtraContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterErrorIdent(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitErrorIdent(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitErrorIdent(this) : visitor.visitChildren(this);
      }
   }

   public static class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
      public RealIdentContext(ErrorCapturingIdentifierExtraContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterRealIdent(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitRealIdent(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitRealIdent(this) : visitor.visitChildren(this);
      }
   }

   public static class IdentifierContext extends ParserRuleContext {
      public StrictIdentifierContext strictIdentifier() {
         return (StrictIdentifierContext)this.getRuleContext(StrictIdentifierContext.class, 0);
      }

      public StrictNonReservedContext strictNonReserved() {
         return (StrictNonReservedContext)this.getRuleContext(StrictNonReservedContext.class, 0);
      }

      public IdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 225;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class StrictIdentifierContext extends ParserRuleContext {
      public StrictIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 226;
      }

      public StrictIdentifierContext() {
      }

      public void copyFrom(StrictIdentifierContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
      public QuotedIdentifierContext quotedIdentifier() {
         return (QuotedIdentifierContext)this.getRuleContext(QuotedIdentifierContext.class, 0);
      }

      public QuotedIdentifierAlternativeContext(StrictIdentifierContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQuotedIdentifierAlternative(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQuotedIdentifierAlternative(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQuotedIdentifierAlternative(this) : visitor.visitChildren(this);
      }
   }

   public static class UnquotedIdentifierContext extends StrictIdentifierContext {
      public TerminalNode IDENTIFIER() {
         return this.getToken(428, 0);
      }

      public AnsiNonReservedContext ansiNonReserved() {
         return (AnsiNonReservedContext)this.getRuleContext(AnsiNonReservedContext.class, 0);
      }

      public NonReservedContext nonReserved() {
         return (NonReservedContext)this.getRuleContext(NonReservedContext.class, 0);
      }

      public UnquotedIdentifierContext(StrictIdentifierContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterUnquotedIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitUnquotedIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitUnquotedIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class QuotedIdentifierContext extends ParserRuleContext {
      public TerminalNode BACKQUOTED_IDENTIFIER() {
         return this.getToken(429, 0);
      }

      public TerminalNode DOUBLEQUOTED_STRING() {
         return this.getToken(418, 0);
      }

      public QuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 227;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterQuotedIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitQuotedIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitQuotedIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class BackQuotedIdentifierContext extends ParserRuleContext {
      public TerminalNode BACKQUOTED_IDENTIFIER() {
         return this.getToken(429, 0);
      }

      public BackQuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 228;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBackQuotedIdentifier(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBackQuotedIdentifier(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBackQuotedIdentifier(this) : visitor.visitChildren(this);
      }
   }

   public static class NumberContext extends ParserRuleContext {
      public NumberContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 229;
      }

      public NumberContext() {
      }

      public void copyFrom(NumberContext ctx) {
         super.copyFrom(ctx);
      }
   }

   public static class DecimalLiteralContext extends NumberContext {
      public TerminalNode DECIMAL_VALUE() {
         return this.getToken(424, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public DecimalLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDecimalLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDecimalLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDecimalLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class BigIntLiteralContext extends NumberContext {
      public TerminalNode BIGINT_LITERAL() {
         return this.getToken(419, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public BigIntLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBigIntLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBigIntLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBigIntLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class TinyIntLiteralContext extends NumberContext {
      public TerminalNode TINYINT_LITERAL() {
         return this.getToken(421, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public TinyIntLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterTinyIntLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitTinyIntLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitTinyIntLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class LegacyDecimalLiteralContext extends NumberContext {
      public TerminalNode EXPONENT_VALUE() {
         return this.getToken(423, 0);
      }

      public TerminalNode DECIMAL_VALUE() {
         return this.getToken(424, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public LegacyDecimalLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterLegacyDecimalLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitLegacyDecimalLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitLegacyDecimalLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class BigDecimalLiteralContext extends NumberContext {
      public TerminalNode BIGDECIMAL_LITERAL() {
         return this.getToken(427, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public BigDecimalLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterBigDecimalLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitBigDecimalLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitBigDecimalLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class ExponentLiteralContext extends NumberContext {
      public TerminalNode EXPONENT_VALUE() {
         return this.getToken(423, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public ExponentLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterExponentLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitExponentLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitExponentLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class DoubleLiteralContext extends NumberContext {
      public TerminalNode DOUBLE_LITERAL() {
         return this.getToken(426, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public DoubleLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterDoubleLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitDoubleLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitDoubleLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class IntegerLiteralContext extends NumberContext {
      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public IntegerLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterIntegerLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitIntegerLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitIntegerLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class FloatLiteralContext extends NumberContext {
      public TerminalNode FLOAT_LITERAL() {
         return this.getToken(425, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public FloatLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterFloatLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitFloatLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitFloatLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class SmallIntLiteralContext extends NumberContext {
      public TerminalNode SMALLINT_LITERAL() {
         return this.getToken(420, 0);
      }

      public TerminalNode MINUS() {
         return this.getToken(400, 0);
      }

      public SmallIntLiteralContext(NumberContext ctx) {
         this.copyFrom(ctx);
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterSmallIntLiteral(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitSmallIntLiteral(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitSmallIntLiteral(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterColumnSpecListContext extends ParserRuleContext {
      public List alterColumnSpec() {
         return this.getRuleContexts(AlterColumnSpecContext.class);
      }

      public AlterColumnSpecContext alterColumnSpec(int i) {
         return (AlterColumnSpecContext)this.getRuleContext(AlterColumnSpecContext.class, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public AlterColumnSpecListContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 230;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterColumnSpecList(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterColumnSpecList(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterColumnSpecList(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterColumnSpecContext extends ParserRuleContext {
      public MultipartIdentifierContext column;

      public MultipartIdentifierContext multipartIdentifier() {
         return (MultipartIdentifierContext)this.getRuleContext(MultipartIdentifierContext.class, 0);
      }

      public AlterColumnActionContext alterColumnAction() {
         return (AlterColumnActionContext)this.getRuleContext(AlterColumnActionContext.class, 0);
      }

      public AlterColumnSpecContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 231;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterColumnSpec(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterColumnSpec(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterColumnSpec(this) : visitor.visitChildren(this);
      }
   }

   public static class AlterColumnActionContext extends ParserRuleContext {
      public Token setOrDrop;
      public Token dropDefault;

      public TerminalNode TYPE() {
         return this.getToken(352, 0);
      }

      public DataTypeContext dataType() {
         return (DataTypeContext)this.getRuleContext(DataTypeContext.class, 0);
      }

      public CommentSpecContext commentSpec() {
         return (CommentSpecContext)this.getRuleContext(CommentSpecContext.class, 0);
      }

      public ColPositionContext colPosition() {
         return (ColPositionContext)this.getRuleContext(ColPositionContext.class, 0);
      }

      public ErrorCapturingNotContext errorCapturingNot() {
         return (ErrorCapturingNotContext)this.getRuleContext(ErrorCapturingNotContext.class, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public DefaultExpressionContext defaultExpression() {
         return (DefaultExpressionContext)this.getRuleContext(DefaultExpressionContext.class, 0);
      }

      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 232;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAlterColumnAction(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAlterColumnAction(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAlterColumnAction(this) : visitor.visitChildren(this);
      }
   }

   public static class StringLitContext extends ParserRuleContext {
      public TerminalNode STRING_LITERAL() {
         return this.getToken(417, 0);
      }

      public TerminalNode DOUBLEQUOTED_STRING() {
         return this.getToken(418, 0);
      }

      public StringLitContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 233;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterStringLit(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitStringLit(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitStringLit(this) : visitor.visitChildren(this);
      }
   }

   public static class CommentContext extends ParserRuleContext {
      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public CommentContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 234;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterComment(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitComment(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitComment(this) : visitor.visitChildren(this);
      }
   }

   public static class VersionContext extends ParserRuleContext {
      public TerminalNode INTEGER_VALUE() {
         return this.getToken(422, 0);
      }

      public StringLitContext stringLit() {
         return (StringLitContext)this.getRuleContext(StringLitContext.class, 0);
      }

      public VersionContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 235;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterVersion(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitVersion(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitVersion(this) : visitor.visitChildren(this);
      }
   }

   public static class OperatorPipeRightSideContext extends ParserRuleContext {
      public NamedExpressionSeqContext extendList;
      public Token operator;
      public QueryPrimaryContext right;

      public SelectClauseContext selectClause() {
         return (SelectClauseContext)this.getRuleContext(SelectClauseContext.class, 0);
      }

      public WindowClauseContext windowClause() {
         return (WindowClauseContext)this.getRuleContext(WindowClauseContext.class, 0);
      }

      public TerminalNode EXTEND() {
         return this.getToken(124, 0);
      }

      public NamedExpressionSeqContext namedExpressionSeq() {
         return (NamedExpressionSeqContext)this.getRuleContext(NamedExpressionSeqContext.class, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public OperatorPipeSetAssignmentSeqContext operatorPipeSetAssignmentSeq() {
         return (OperatorPipeSetAssignmentSeqContext)this.getRuleContext(OperatorPipeSetAssignmentSeqContext.class, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public IdentifierSeqContext identifierSeq() {
         return (IdentifierSeqContext)this.getRuleContext(IdentifierSeqContext.class, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, 0);
      }

      public WhereClauseContext whereClause() {
         return (WhereClauseContext)this.getRuleContext(WhereClauseContext.class, 0);
      }

      public PivotClauseContext pivotClause() {
         return (PivotClauseContext)this.getRuleContext(PivotClauseContext.class, 0);
      }

      public UnpivotClauseContext unpivotClause() {
         return (UnpivotClauseContext)this.getRuleContext(UnpivotClauseContext.class, 0);
      }

      public SampleContext sample() {
         return (SampleContext)this.getRuleContext(SampleContext.class, 0);
      }

      public JoinRelationContext joinRelation() {
         return (JoinRelationContext)this.getRuleContext(JoinRelationContext.class, 0);
      }

      public QueryPrimaryContext queryPrimary() {
         return (QueryPrimaryContext)this.getRuleContext(QueryPrimaryContext.class, 0);
      }

      public TerminalNode UNION() {
         return this.getToken(356, 0);
      }

      public TerminalNode EXCEPT() {
         return this.getToken(117, 0);
      }

      public TerminalNode SETMINUS() {
         return this.getToken(299, 0);
      }

      public TerminalNode INTERSECT() {
         return this.getToken(171, 0);
      }

      public SetQuantifierContext setQuantifier() {
         return (SetQuantifierContext)this.getRuleContext(SetQuantifierContext.class, 0);
      }

      public QueryOrganizationContext queryOrganization() {
         return (QueryOrganizationContext)this.getRuleContext(QueryOrganizationContext.class, 0);
      }

      public TerminalNode AGGREGATE() {
         return this.getToken(11, 0);
      }

      public AggregationClauseContext aggregationClause() {
         return (AggregationClauseContext)this.getRuleContext(AggregationClauseContext.class, 0);
      }

      public OperatorPipeRightSideContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 236;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterOperatorPipeRightSide(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitOperatorPipeRightSide(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitOperatorPipeRightSide(this) : visitor.visitChildren(this);
      }
   }

   public static class OperatorPipeSetAssignmentSeqContext extends ParserRuleContext {
      public ErrorCapturingIdentifierContext errorCapturingIdentifier;
      public List ident = new ArrayList();

      public List EQ() {
         return this.getTokens(388);
      }

      public TerminalNode EQ(int i) {
         return this.getToken(388, i);
      }

      public List expression() {
         return this.getRuleContexts(ExpressionContext.class);
      }

      public ExpressionContext expression(int i) {
         return (ExpressionContext)this.getRuleContext(ExpressionContext.class, i);
      }

      public List errorCapturingIdentifier() {
         return this.getRuleContexts(ErrorCapturingIdentifierContext.class);
      }

      public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
         return (ErrorCapturingIdentifierContext)this.getRuleContext(ErrorCapturingIdentifierContext.class, i);
      }

      public List DOT() {
         return this.getTokens(5);
      }

      public TerminalNode DOT(int i) {
         return this.getToken(5, i);
      }

      public List COMMA() {
         return this.getTokens(4);
      }

      public TerminalNode COMMA(int i) {
         return this.getToken(4, i);
      }

      public OperatorPipeSetAssignmentSeqContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 237;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterOperatorPipeSetAssignmentSeq(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitOperatorPipeSetAssignmentSeq(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitOperatorPipeSetAssignmentSeq(this) : visitor.visitChildren(this);
      }
   }

   public static class AnsiNonReservedContext extends ParserRuleContext {
      public TerminalNode ADD() {
         return this.getToken(9, 0);
      }

      public TerminalNode AFTER() {
         return this.getToken(10, 0);
      }

      public TerminalNode AGGREGATE() {
         return this.getToken(11, 0);
      }

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode ALWAYS() {
         return this.getToken(14, 0);
      }

      public TerminalNode ANALYZE() {
         return this.getToken(15, 0);
      }

      public TerminalNode ANTI() {
         return this.getToken(17, 0);
      }

      public TerminalNode ANY_VALUE() {
         return this.getToken(19, 0);
      }

      public TerminalNode ARCHIVE() {
         return this.getToken(20, 0);
      }

      public TerminalNode ARRAY() {
         return this.getToken(21, 0);
      }

      public TerminalNode ASC() {
         return this.getToken(23, 0);
      }

      public TerminalNode AT() {
         return this.getToken(24, 0);
      }

      public TerminalNode ATOMIC() {
         return this.getToken(25, 0);
      }

      public TerminalNode BEGIN() {
         return this.getToken(27, 0);
      }

      public TerminalNode BETWEEN() {
         return this.getToken(28, 0);
      }

      public TerminalNode BIGINT() {
         return this.getToken(29, 0);
      }

      public TerminalNode BINARY() {
         return this.getToken(30, 0);
      }

      public TerminalNode BINARY_HEX() {
         return this.getToken(152, 0);
      }

      public TerminalNode BINDING() {
         return this.getToken(31, 0);
      }

      public TerminalNode BOOLEAN() {
         return this.getToken(32, 0);
      }

      public TerminalNode BUCKET() {
         return this.getToken(34, 0);
      }

      public TerminalNode BUCKETS() {
         return this.getToken(35, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode BYTE() {
         return this.getToken(37, 0);
      }

      public TerminalNode CACHE() {
         return this.getToken(38, 0);
      }

      public TerminalNode CALLED() {
         return this.getToken(40, 0);
      }

      public TerminalNode CASCADE() {
         return this.getToken(41, 0);
      }

      public TerminalNode CATALOG() {
         return this.getToken(44, 0);
      }

      public TerminalNode CATALOGS() {
         return this.getToken(45, 0);
      }

      public TerminalNode CHANGE() {
         return this.getToken(46, 0);
      }

      public TerminalNode CHAR() {
         return this.getToken(47, 0);
      }

      public TerminalNode CHARACTER() {
         return this.getToken(48, 0);
      }

      public TerminalNode CLEAR() {
         return this.getToken(50, 0);
      }

      public TerminalNode CLUSTER() {
         return this.getToken(51, 0);
      }

      public TerminalNode CLUSTERED() {
         return this.getToken(52, 0);
      }

      public TerminalNode CODEGEN() {
         return this.getToken(53, 0);
      }

      public TerminalNode COLLECTION() {
         return this.getToken(56, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public TerminalNode COMMENT() {
         return this.getToken(59, 0);
      }

      public TerminalNode COMMIT() {
         return this.getToken(60, 0);
      }

      public TerminalNode COMPACT() {
         return this.getToken(61, 0);
      }

      public TerminalNode COMPACTIONS() {
         return this.getToken(62, 0);
      }

      public TerminalNode COMPENSATION() {
         return this.getToken(63, 0);
      }

      public TerminalNode COMPUTE() {
         return this.getToken(64, 0);
      }

      public TerminalNode CONCATENATE() {
         return this.getToken(65, 0);
      }

      public TerminalNode CONDITION() {
         return this.getToken(66, 0);
      }

      public TerminalNode CONTAINS() {
         return this.getToken(68, 0);
      }

      public TerminalNode CONTINUE() {
         return this.getToken(69, 0);
      }

      public TerminalNode COST() {
         return this.getToken(70, 0);
      }

      public TerminalNode CUBE() {
         return this.getToken(73, 0);
      }

      public TerminalNode CURRENT() {
         return this.getToken(74, 0);
      }

      public TerminalNode DATA() {
         return this.getToken(82, 0);
      }

      public TerminalNode DATABASE() {
         return this.getToken(84, 0);
      }

      public TerminalNode DATABASES() {
         return this.getToken(85, 0);
      }

      public TerminalNode DATE() {
         return this.getToken(83, 0);
      }

      public TerminalNode DATEADD() {
         return this.getToken(86, 0);
      }

      public TerminalNode DATE_ADD() {
         return this.getToken(87, 0);
      }

      public TerminalNode DATEDIFF() {
         return this.getToken(88, 0);
      }

      public TerminalNode DATE_DIFF() {
         return this.getToken(89, 0);
      }

      public TerminalNode DAY() {
         return this.getToken(79, 0);
      }

      public TerminalNode DAYS() {
         return this.getToken(80, 0);
      }

      public TerminalNode DAYOFYEAR() {
         return this.getToken(81, 0);
      }

      public TerminalNode DBPROPERTIES() {
         return this.getToken(90, 0);
      }

      public TerminalNode DEC() {
         return this.getToken(91, 0);
      }

      public TerminalNode DECIMAL() {
         return this.getToken(92, 0);
      }

      public TerminalNode DECLARE() {
         return this.getToken(93, 0);
      }

      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public TerminalNode DEFINED() {
         return this.getToken(95, 0);
      }

      public TerminalNode DEFINER() {
         return this.getToken(96, 0);
      }

      public TerminalNode DELETE() {
         return this.getToken(97, 0);
      }

      public TerminalNode DELIMITED() {
         return this.getToken(98, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public TerminalNode DESCRIBE() {
         return this.getToken(100, 0);
      }

      public TerminalNode DETERMINISTIC() {
         return this.getToken(101, 0);
      }

      public TerminalNode DFS() {
         return this.getToken(102, 0);
      }

      public TerminalNode DIRECTORIES() {
         return this.getToken(103, 0);
      }

      public TerminalNode DIRECTORY() {
         return this.getToken(104, 0);
      }

      public TerminalNode DISTRIBUTE() {
         return this.getToken(106, 0);
      }

      public TerminalNode DIV() {
         return this.getToken(107, 0);
      }

      public TerminalNode DO() {
         return this.getToken(108, 0);
      }

      public TerminalNode DOUBLE() {
         return this.getToken(109, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode ELSEIF() {
         return this.getToken(112, 0);
      }

      public TerminalNode ESCAPED() {
         return this.getToken(115, 0);
      }

      public TerminalNode EVOLUTION() {
         return this.getToken(116, 0);
      }

      public TerminalNode EXCHANGE() {
         return this.getToken(118, 0);
      }

      public TerminalNode EXCLUDE() {
         return this.getToken(119, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode EXIT() {
         return this.getToken(121, 0);
      }

      public TerminalNode EXPLAIN() {
         return this.getToken(122, 0);
      }

      public TerminalNode EXPORT() {
         return this.getToken(123, 0);
      }

      public TerminalNode EXTEND() {
         return this.getToken(124, 0);
      }

      public TerminalNode EXTENDED() {
         return this.getToken(125, 0);
      }

      public TerminalNode EXTERNAL() {
         return this.getToken(126, 0);
      }

      public TerminalNode EXTRACT() {
         return this.getToken(127, 0);
      }

      public TerminalNode FIELDS() {
         return this.getToken(130, 0);
      }

      public TerminalNode FILEFORMAT() {
         return this.getToken(132, 0);
      }

      public TerminalNode FIRST() {
         return this.getToken(133, 0);
      }

      public TerminalNode FLOAT() {
         return this.getToken(134, 0);
      }

      public TerminalNode FOLLOWING() {
         return this.getToken(135, 0);
      }

      public TerminalNode FORMAT() {
         return this.getToken(138, 0);
      }

      public TerminalNode FORMATTED() {
         return this.getToken(139, 0);
      }

      public TerminalNode FOUND() {
         return this.getToken(140, 0);
      }

      public TerminalNode FUNCTION() {
         return this.getToken(143, 0);
      }

      public TerminalNode FUNCTIONS() {
         return this.getToken(144, 0);
      }

      public TerminalNode GENERATED() {
         return this.getToken(145, 0);
      }

      public TerminalNode GLOBAL() {
         return this.getToken(146, 0);
      }

      public TerminalNode GROUPING() {
         return this.getToken(149, 0);
      }

      public TerminalNode HANDLER() {
         return this.getToken(150, 0);
      }

      public TerminalNode HOUR() {
         return this.getToken(153, 0);
      }

      public TerminalNode HOURS() {
         return this.getToken(154, 0);
      }

      public TerminalNode IDENTIFIER_KW() {
         return this.getToken(155, 0);
      }

      public TerminalNode IDENTITY() {
         return this.getToken(156, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode IGNORE() {
         return this.getToken(158, 0);
      }

      public TerminalNode IMMEDIATE() {
         return this.getToken(159, 0);
      }

      public TerminalNode IMPORT() {
         return this.getToken(160, 0);
      }

      public TerminalNode INCLUDE() {
         return this.getToken(162, 0);
      }

      public TerminalNode INCREMENT() {
         return this.getToken(163, 0);
      }

      public TerminalNode INDEX() {
         return this.getToken(164, 0);
      }

      public TerminalNode INDEXES() {
         return this.getToken(165, 0);
      }

      public TerminalNode INPATH() {
         return this.getToken(167, 0);
      }

      public TerminalNode INPUT() {
         return this.getToken(168, 0);
      }

      public TerminalNode INPUTFORMAT() {
         return this.getToken(169, 0);
      }

      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode INT() {
         return this.getToken(173, 0);
      }

      public TerminalNode INTEGER() {
         return this.getToken(174, 0);
      }

      public TerminalNode INTERVAL() {
         return this.getToken(172, 0);
      }

      public TerminalNode INVOKER() {
         return this.getToken(176, 0);
      }

      public TerminalNode ITEMS() {
         return this.getToken(178, 0);
      }

      public TerminalNode ITERATE() {
         return this.getToken(179, 0);
      }

      public TerminalNode JSON() {
         return this.getToken(181, 0);
      }

      public TerminalNode KEYS() {
         return this.getToken(182, 0);
      }

      public TerminalNode LANGUAGE() {
         return this.getToken(183, 0);
      }

      public TerminalNode LAST() {
         return this.getToken(184, 0);
      }

      public TerminalNode LAZY() {
         return this.getToken(186, 0);
      }

      public TerminalNode LEAVE() {
         return this.getToken(188, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public TerminalNode ILIKE() {
         return this.getToken(191, 0);
      }

      public TerminalNode LIMIT() {
         return this.getToken(192, 0);
      }

      public TerminalNode LINES() {
         return this.getToken(193, 0);
      }

      public TerminalNode LIST() {
         return this.getToken(194, 0);
      }

      public TerminalNode LOAD() {
         return this.getToken(195, 0);
      }

      public TerminalNode LOCAL() {
         return this.getToken(196, 0);
      }

      public TerminalNode LOCATION() {
         return this.getToken(197, 0);
      }

      public TerminalNode LOCK() {
         return this.getToken(198, 0);
      }

      public TerminalNode LOCKS() {
         return this.getToken(199, 0);
      }

      public TerminalNode LOGICAL() {
         return this.getToken(200, 0);
      }

      public TerminalNode LONG() {
         return this.getToken(201, 0);
      }

      public TerminalNode LOOP() {
         return this.getToken(202, 0);
      }

      public TerminalNode MACRO() {
         return this.getToken(203, 0);
      }

      public TerminalNode MAP() {
         return this.getToken(204, 0);
      }

      public TerminalNode MATCHED() {
         return this.getToken(205, 0);
      }

      public TerminalNode MERGE() {
         return this.getToken(206, 0);
      }

      public TerminalNode MICROSECOND() {
         return this.getToken(207, 0);
      }

      public TerminalNode MICROSECONDS() {
         return this.getToken(208, 0);
      }

      public TerminalNode MILLISECOND() {
         return this.getToken(209, 0);
      }

      public TerminalNode MILLISECONDS() {
         return this.getToken(210, 0);
      }

      public TerminalNode MINUTE() {
         return this.getToken(211, 0);
      }

      public TerminalNode MINUTES() {
         return this.getToken(212, 0);
      }

      public TerminalNode MODIFIES() {
         return this.getToken(213, 0);
      }

      public TerminalNode MONTH() {
         return this.getToken(214, 0);
      }

      public TerminalNode MONTHS() {
         return this.getToken(215, 0);
      }

      public TerminalNode MSCK() {
         return this.getToken(216, 0);
      }

      public TerminalNode NAME() {
         return this.getToken(217, 0);
      }

      public TerminalNode NAMESPACE() {
         return this.getToken(218, 0);
      }

      public TerminalNode NAMESPACES() {
         return this.getToken(219, 0);
      }

      public TerminalNode NANOSECOND() {
         return this.getToken(220, 0);
      }

      public TerminalNode NANOSECONDS() {
         return this.getToken(221, 0);
      }

      public TerminalNode NO() {
         return this.getToken(223, 0);
      }

      public TerminalNode NONE() {
         return this.getToken(224, 0);
      }

      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public TerminalNode NUMERIC() {
         return this.getToken(228, 0);
      }

      public TerminalNode OF() {
         return this.getToken(229, 0);
      }

      public TerminalNode OPTION() {
         return this.getToken(233, 0);
      }

      public TerminalNode OPTIONS() {
         return this.getToken(234, 0);
      }

      public TerminalNode OUT() {
         return this.getToken(237, 0);
      }

      public TerminalNode OUTPUTFORMAT() {
         return this.getToken(239, 0);
      }

      public TerminalNode OVER() {
         return this.getToken(240, 0);
      }

      public TerminalNode OVERLAY() {
         return this.getToken(242, 0);
      }

      public TerminalNode OVERWRITE() {
         return this.getToken(243, 0);
      }

      public TerminalNode PARTITION() {
         return this.getToken(244, 0);
      }

      public TerminalNode PARTITIONED() {
         return this.getToken(245, 0);
      }

      public TerminalNode PARTITIONS() {
         return this.getToken(246, 0);
      }

      public TerminalNode PERCENTLIT() {
         return this.getToken(247, 0);
      }

      public TerminalNode PIVOT() {
         return this.getToken(248, 0);
      }

      public TerminalNode PLACING() {
         return this.getToken(249, 0);
      }

      public TerminalNode POSITION() {
         return this.getToken(250, 0);
      }

      public TerminalNode PRECEDING() {
         return this.getToken(251, 0);
      }

      public TerminalNode PRINCIPALS() {
         return this.getToken(253, 0);
      }

      public TerminalNode PROPERTIES() {
         return this.getToken(254, 0);
      }

      public TerminalNode PURGE() {
         return this.getToken(255, 0);
      }

      public TerminalNode QUARTER() {
         return this.getToken(256, 0);
      }

      public TerminalNode QUERY() {
         return this.getToken(257, 0);
      }

      public TerminalNode RANGE() {
         return this.getToken(258, 0);
      }

      public TerminalNode READS() {
         return this.getToken(259, 0);
      }

      public TerminalNode REAL() {
         return this.getToken(260, 0);
      }

      public TerminalNode RECORDREADER() {
         return this.getToken(261, 0);
      }

      public TerminalNode RECORDWRITER() {
         return this.getToken(262, 0);
      }

      public TerminalNode RECOVER() {
         return this.getToken(263, 0);
      }

      public TerminalNode REDUCE() {
         return this.getToken(265, 0);
      }

      public TerminalNode REFRESH() {
         return this.getToken(267, 0);
      }

      public TerminalNode RENAME() {
         return this.getToken(268, 0);
      }

      public TerminalNode REPAIR() {
         return this.getToken(269, 0);
      }

      public TerminalNode REPEAT() {
         return this.getToken(270, 0);
      }

      public TerminalNode REPEATABLE() {
         return this.getToken(271, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode RESET() {
         return this.getToken(273, 0);
      }

      public TerminalNode RESPECT() {
         return this.getToken(274, 0);
      }

      public TerminalNode RESTRICT() {
         return this.getToken(275, 0);
      }

      public TerminalNode RETURN() {
         return this.getToken(276, 0);
      }

      public TerminalNode RETURNS() {
         return this.getToken(277, 0);
      }

      public TerminalNode REVOKE() {
         return this.getToken(278, 0);
      }

      public TerminalNode RLIKE() {
         return this.getToken(280, 0);
      }

      public TerminalNode ROLE() {
         return this.getToken(281, 0);
      }

      public TerminalNode ROLES() {
         return this.getToken(282, 0);
      }

      public TerminalNode ROLLBACK() {
         return this.getToken(283, 0);
      }

      public TerminalNode ROLLUP() {
         return this.getToken(284, 0);
      }

      public TerminalNode ROW() {
         return this.getToken(285, 0);
      }

      public TerminalNode ROWS() {
         return this.getToken(286, 0);
      }

      public TerminalNode SCHEMA() {
         return this.getToken(289, 0);
      }

      public TerminalNode SCHEMAS() {
         return this.getToken(290, 0);
      }

      public TerminalNode SECOND() {
         return this.getToken(287, 0);
      }

      public TerminalNode SECONDS() {
         return this.getToken(288, 0);
      }

      public TerminalNode SECURITY() {
         return this.getToken(291, 0);
      }

      public TerminalNode SEMI() {
         return this.getToken(293, 0);
      }

      public TerminalNode SEPARATED() {
         return this.getToken(294, 0);
      }

      public TerminalNode SERDE() {
         return this.getToken(295, 0);
      }

      public TerminalNode SERDEPROPERTIES() {
         return this.getToken(296, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode SETMINUS() {
         return this.getToken(299, 0);
      }

      public TerminalNode SETS() {
         return this.getToken(300, 0);
      }

      public TerminalNode SHORT() {
         return this.getToken(301, 0);
      }

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode SINGLE() {
         return this.getToken(303, 0);
      }

      public TerminalNode SKEWED() {
         return this.getToken(304, 0);
      }

      public TerminalNode SMALLINT() {
         return this.getToken(305, 0);
      }

      public TerminalNode SORT() {
         return this.getToken(307, 0);
      }

      public TerminalNode SORTED() {
         return this.getToken(308, 0);
      }

      public TerminalNode SOURCE() {
         return this.getToken(309, 0);
      }

      public TerminalNode SPECIFIC() {
         return this.getToken(310, 0);
      }

      public TerminalNode SQLEXCEPTION() {
         return this.getToken(312, 0);
      }

      public TerminalNode SQLSTATE() {
         return this.getToken(313, 0);
      }

      public TerminalNode START() {
         return this.getToken(314, 0);
      }

      public TerminalNode STATISTICS() {
         return this.getToken(315, 0);
      }

      public TerminalNode STORED() {
         return this.getToken(316, 0);
      }

      public TerminalNode STRATIFY() {
         return this.getToken(317, 0);
      }

      public TerminalNode STRING() {
         return this.getToken(318, 0);
      }

      public TerminalNode STRUCT() {
         return this.getToken(319, 0);
      }

      public TerminalNode SUBSTR() {
         return this.getToken(320, 0);
      }

      public TerminalNode SUBSTRING() {
         return this.getToken(321, 0);
      }

      public TerminalNode SYNC() {
         return this.getToken(322, 0);
      }

      public TerminalNode SYSTEM_TIME() {
         return this.getToken(323, 0);
      }

      public TerminalNode SYSTEM_VERSION() {
         return this.getToken(324, 0);
      }

      public TerminalNode TABLES() {
         return this.getToken(326, 0);
      }

      public TerminalNode TABLESAMPLE() {
         return this.getToken(327, 0);
      }

      public TerminalNode TARGET() {
         return this.getToken(328, 0);
      }

      public TerminalNode TBLPROPERTIES() {
         return this.getToken(329, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode TERMINATED() {
         return this.getToken(331, 0);
      }

      public TerminalNode TIMEDIFF() {
         return this.getToken(334, 0);
      }

      public TerminalNode TIMESTAMP() {
         return this.getToken(335, 0);
      }

      public TerminalNode TIMESTAMP_LTZ() {
         return this.getToken(336, 0);
      }

      public TerminalNode TIMESTAMP_NTZ() {
         return this.getToken(337, 0);
      }

      public TerminalNode TIMESTAMPADD() {
         return this.getToken(338, 0);
      }

      public TerminalNode TIMESTAMPDIFF() {
         return this.getToken(339, 0);
      }

      public TerminalNode TINYINT() {
         return this.getToken(340, 0);
      }

      public TerminalNode TOUCH() {
         return this.getToken(343, 0);
      }

      public TerminalNode TRANSACTION() {
         return this.getToken(345, 0);
      }

      public TerminalNode TRANSACTIONS() {
         return this.getToken(346, 0);
      }

      public TerminalNode TRANSFORM() {
         return this.getToken(347, 0);
      }

      public TerminalNode TRIM() {
         return this.getToken(348, 0);
      }

      public TerminalNode TRUE() {
         return this.getToken(349, 0);
      }

      public TerminalNode TRUNCATE() {
         return this.getToken(350, 0);
      }

      public TerminalNode TRY_CAST() {
         return this.getToken(351, 0);
      }

      public TerminalNode TYPE() {
         return this.getToken(352, 0);
      }

      public TerminalNode UNARCHIVE() {
         return this.getToken(353, 0);
      }

      public TerminalNode UNBOUNDED() {
         return this.getToken(354, 0);
      }

      public TerminalNode UNCACHE() {
         return this.getToken(355, 0);
      }

      public TerminalNode UNLOCK() {
         return this.getToken(359, 0);
      }

      public TerminalNode UNPIVOT() {
         return this.getToken(360, 0);
      }

      public TerminalNode UNSET() {
         return this.getToken(361, 0);
      }

      public TerminalNode UNTIL() {
         return this.getToken(362, 0);
      }

      public TerminalNode UPDATE() {
         return this.getToken(363, 0);
      }

      public TerminalNode USE() {
         return this.getToken(364, 0);
      }

      public TerminalNode VALUE() {
         return this.getToken(367, 0);
      }

      public TerminalNode VALUES() {
         return this.getToken(368, 0);
      }

      public TerminalNode VARCHAR() {
         return this.getToken(369, 0);
      }

      public TerminalNode VAR() {
         return this.getToken(370, 0);
      }

      public TerminalNode VARIABLE() {
         return this.getToken(371, 0);
      }

      public TerminalNode VARIANT() {
         return this.getToken(372, 0);
      }

      public TerminalNode VERSION() {
         return this.getToken(373, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public TerminalNode VIEWS() {
         return this.getToken(375, 0);
      }

      public TerminalNode VOID() {
         return this.getToken(376, 0);
      }

      public TerminalNode WEEK() {
         return this.getToken(377, 0);
      }

      public TerminalNode WEEKS() {
         return this.getToken(378, 0);
      }

      public TerminalNode WHILE() {
         return this.getToken(381, 0);
      }

      public TerminalNode WINDOW() {
         return this.getToken(382, 0);
      }

      public TerminalNode YEAR() {
         return this.getToken(385, 0);
      }

      public TerminalNode YEARS() {
         return this.getToken(386, 0);
      }

      public TerminalNode ZONE() {
         return this.getToken(387, 0);
      }

      public AnsiNonReservedContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 238;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterAnsiNonReserved(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitAnsiNonReserved(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitAnsiNonReserved(this) : visitor.visitChildren(this);
      }
   }

   public static class StrictNonReservedContext extends ParserRuleContext {
      public TerminalNode ANTI() {
         return this.getToken(17, 0);
      }

      public TerminalNode CROSS() {
         return this.getToken(72, 0);
      }

      public TerminalNode EXCEPT() {
         return this.getToken(117, 0);
      }

      public TerminalNode FULL() {
         return this.getToken(142, 0);
      }

      public TerminalNode INNER() {
         return this.getToken(166, 0);
      }

      public TerminalNode INTERSECT() {
         return this.getToken(171, 0);
      }

      public TerminalNode JOIN() {
         return this.getToken(180, 0);
      }

      public TerminalNode LATERAL() {
         return this.getToken(185, 0);
      }

      public TerminalNode LEFT() {
         return this.getToken(189, 0);
      }

      public TerminalNode NATURAL() {
         return this.getToken(222, 0);
      }

      public TerminalNode ON() {
         return this.getToken(231, 0);
      }

      public TerminalNode RIGHT() {
         return this.getToken(279, 0);
      }

      public TerminalNode SEMI() {
         return this.getToken(293, 0);
      }

      public TerminalNode SETMINUS() {
         return this.getToken(299, 0);
      }

      public TerminalNode UNION() {
         return this.getToken(356, 0);
      }

      public TerminalNode USING() {
         return this.getToken(366, 0);
      }

      public StrictNonReservedContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 239;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterStrictNonReserved(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitStrictNonReserved(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitStrictNonReserved(this) : visitor.visitChildren(this);
      }
   }

   public static class NonReservedContext extends ParserRuleContext {
      public TerminalNode ADD() {
         return this.getToken(9, 0);
      }

      public TerminalNode AFTER() {
         return this.getToken(10, 0);
      }

      public TerminalNode AGGREGATE() {
         return this.getToken(11, 0);
      }

      public TerminalNode ALL() {
         return this.getToken(12, 0);
      }

      public TerminalNode ALTER() {
         return this.getToken(13, 0);
      }

      public TerminalNode ALWAYS() {
         return this.getToken(14, 0);
      }

      public TerminalNode ANALYZE() {
         return this.getToken(15, 0);
      }

      public TerminalNode AND() {
         return this.getToken(16, 0);
      }

      public TerminalNode ANY() {
         return this.getToken(18, 0);
      }

      public TerminalNode ANY_VALUE() {
         return this.getToken(19, 0);
      }

      public TerminalNode ARCHIVE() {
         return this.getToken(20, 0);
      }

      public TerminalNode ARRAY() {
         return this.getToken(21, 0);
      }

      public TerminalNode AS() {
         return this.getToken(22, 0);
      }

      public TerminalNode ASC() {
         return this.getToken(23, 0);
      }

      public TerminalNode AT() {
         return this.getToken(24, 0);
      }

      public TerminalNode ATOMIC() {
         return this.getToken(25, 0);
      }

      public TerminalNode AUTHORIZATION() {
         return this.getToken(26, 0);
      }

      public TerminalNode BEGIN() {
         return this.getToken(27, 0);
      }

      public TerminalNode BETWEEN() {
         return this.getToken(28, 0);
      }

      public TerminalNode BIGINT() {
         return this.getToken(29, 0);
      }

      public TerminalNode BINARY() {
         return this.getToken(30, 0);
      }

      public TerminalNode BINARY_HEX() {
         return this.getToken(152, 0);
      }

      public TerminalNode BINDING() {
         return this.getToken(31, 0);
      }

      public TerminalNode BOOLEAN() {
         return this.getToken(32, 0);
      }

      public TerminalNode BOTH() {
         return this.getToken(33, 0);
      }

      public TerminalNode BUCKET() {
         return this.getToken(34, 0);
      }

      public TerminalNode BUCKETS() {
         return this.getToken(35, 0);
      }

      public TerminalNode BY() {
         return this.getToken(36, 0);
      }

      public TerminalNode BYTE() {
         return this.getToken(37, 0);
      }

      public TerminalNode CACHE() {
         return this.getToken(38, 0);
      }

      public TerminalNode CALL() {
         return this.getToken(39, 0);
      }

      public TerminalNode CALLED() {
         return this.getToken(40, 0);
      }

      public TerminalNode CASCADE() {
         return this.getToken(41, 0);
      }

      public TerminalNode CASE() {
         return this.getToken(42, 0);
      }

      public TerminalNode CAST() {
         return this.getToken(43, 0);
      }

      public TerminalNode CATALOG() {
         return this.getToken(44, 0);
      }

      public TerminalNode CATALOGS() {
         return this.getToken(45, 0);
      }

      public TerminalNode CHANGE() {
         return this.getToken(46, 0);
      }

      public TerminalNode CHAR() {
         return this.getToken(47, 0);
      }

      public TerminalNode CHARACTER() {
         return this.getToken(48, 0);
      }

      public TerminalNode CHECK() {
         return this.getToken(49, 0);
      }

      public TerminalNode CLEAR() {
         return this.getToken(50, 0);
      }

      public TerminalNode CLUSTER() {
         return this.getToken(51, 0);
      }

      public TerminalNode CLUSTERED() {
         return this.getToken(52, 0);
      }

      public TerminalNode CODEGEN() {
         return this.getToken(53, 0);
      }

      public TerminalNode COLLATE() {
         return this.getToken(54, 0);
      }

      public TerminalNode COLLATION() {
         return this.getToken(55, 0);
      }

      public TerminalNode COLLECTION() {
         return this.getToken(56, 0);
      }

      public TerminalNode COLUMN() {
         return this.getToken(57, 0);
      }

      public TerminalNode COLUMNS() {
         return this.getToken(58, 0);
      }

      public TerminalNode COMMENT() {
         return this.getToken(59, 0);
      }

      public TerminalNode COMMIT() {
         return this.getToken(60, 0);
      }

      public TerminalNode COMPACT() {
         return this.getToken(61, 0);
      }

      public TerminalNode COMPACTIONS() {
         return this.getToken(62, 0);
      }

      public TerminalNode COMPENSATION() {
         return this.getToken(63, 0);
      }

      public TerminalNode COMPUTE() {
         return this.getToken(64, 0);
      }

      public TerminalNode CONCATENATE() {
         return this.getToken(65, 0);
      }

      public TerminalNode CONDITION() {
         return this.getToken(66, 0);
      }

      public TerminalNode CONSTRAINT() {
         return this.getToken(67, 0);
      }

      public TerminalNode CONTAINS() {
         return this.getToken(68, 0);
      }

      public TerminalNode CONTINUE() {
         return this.getToken(69, 0);
      }

      public TerminalNode COST() {
         return this.getToken(70, 0);
      }

      public TerminalNode CREATE() {
         return this.getToken(71, 0);
      }

      public TerminalNode CUBE() {
         return this.getToken(73, 0);
      }

      public TerminalNode CURRENT() {
         return this.getToken(74, 0);
      }

      public TerminalNode CURRENT_DATE() {
         return this.getToken(75, 0);
      }

      public TerminalNode CURRENT_TIME() {
         return this.getToken(76, 0);
      }

      public TerminalNode CURRENT_TIMESTAMP() {
         return this.getToken(77, 0);
      }

      public TerminalNode CURRENT_USER() {
         return this.getToken(78, 0);
      }

      public TerminalNode DATA() {
         return this.getToken(82, 0);
      }

      public TerminalNode DATABASE() {
         return this.getToken(84, 0);
      }

      public TerminalNode DATABASES() {
         return this.getToken(85, 0);
      }

      public TerminalNode DATE() {
         return this.getToken(83, 0);
      }

      public TerminalNode DATEADD() {
         return this.getToken(86, 0);
      }

      public TerminalNode DATE_ADD() {
         return this.getToken(87, 0);
      }

      public TerminalNode DATEDIFF() {
         return this.getToken(88, 0);
      }

      public TerminalNode DATE_DIFF() {
         return this.getToken(89, 0);
      }

      public TerminalNode DAY() {
         return this.getToken(79, 0);
      }

      public TerminalNode DAYS() {
         return this.getToken(80, 0);
      }

      public TerminalNode DAYOFYEAR() {
         return this.getToken(81, 0);
      }

      public TerminalNode DBPROPERTIES() {
         return this.getToken(90, 0);
      }

      public TerminalNode DEC() {
         return this.getToken(91, 0);
      }

      public TerminalNode DECIMAL() {
         return this.getToken(92, 0);
      }

      public TerminalNode DECLARE() {
         return this.getToken(93, 0);
      }

      public TerminalNode DEFAULT() {
         return this.getToken(94, 0);
      }

      public TerminalNode DEFINED() {
         return this.getToken(95, 0);
      }

      public TerminalNode DEFINER() {
         return this.getToken(96, 0);
      }

      public TerminalNode DELETE() {
         return this.getToken(97, 0);
      }

      public TerminalNode DELIMITED() {
         return this.getToken(98, 0);
      }

      public TerminalNode DESC() {
         return this.getToken(99, 0);
      }

      public TerminalNode DESCRIBE() {
         return this.getToken(100, 0);
      }

      public TerminalNode DETERMINISTIC() {
         return this.getToken(101, 0);
      }

      public TerminalNode DFS() {
         return this.getToken(102, 0);
      }

      public TerminalNode DIRECTORIES() {
         return this.getToken(103, 0);
      }

      public TerminalNode DIRECTORY() {
         return this.getToken(104, 0);
      }

      public TerminalNode DISTINCT() {
         return this.getToken(105, 0);
      }

      public TerminalNode DISTRIBUTE() {
         return this.getToken(106, 0);
      }

      public TerminalNode DIV() {
         return this.getToken(107, 0);
      }

      public TerminalNode DO() {
         return this.getToken(108, 0);
      }

      public TerminalNode DOUBLE() {
         return this.getToken(109, 0);
      }

      public TerminalNode DROP() {
         return this.getToken(110, 0);
      }

      public TerminalNode ELSE() {
         return this.getToken(111, 0);
      }

      public TerminalNode ELSEIF() {
         return this.getToken(112, 0);
      }

      public TerminalNode END() {
         return this.getToken(113, 0);
      }

      public TerminalNode ESCAPE() {
         return this.getToken(114, 0);
      }

      public TerminalNode ESCAPED() {
         return this.getToken(115, 0);
      }

      public TerminalNode EVOLUTION() {
         return this.getToken(116, 0);
      }

      public TerminalNode EXCHANGE() {
         return this.getToken(118, 0);
      }

      public TerminalNode EXCLUDE() {
         return this.getToken(119, 0);
      }

      public TerminalNode EXECUTE() {
         return this.getToken(342, 0);
      }

      public TerminalNode EXISTS() {
         return this.getToken(120, 0);
      }

      public TerminalNode EXIT() {
         return this.getToken(121, 0);
      }

      public TerminalNode EXPLAIN() {
         return this.getToken(122, 0);
      }

      public TerminalNode EXPORT() {
         return this.getToken(123, 0);
      }

      public TerminalNode EXTEND() {
         return this.getToken(124, 0);
      }

      public TerminalNode EXTENDED() {
         return this.getToken(125, 0);
      }

      public TerminalNode EXTERNAL() {
         return this.getToken(126, 0);
      }

      public TerminalNode EXTRACT() {
         return this.getToken(127, 0);
      }

      public TerminalNode FALSE() {
         return this.getToken(128, 0);
      }

      public TerminalNode FETCH() {
         return this.getToken(129, 0);
      }

      public TerminalNode FILTER() {
         return this.getToken(131, 0);
      }

      public TerminalNode FIELDS() {
         return this.getToken(130, 0);
      }

      public TerminalNode FILEFORMAT() {
         return this.getToken(132, 0);
      }

      public TerminalNode FIRST() {
         return this.getToken(133, 0);
      }

      public TerminalNode FLOAT() {
         return this.getToken(134, 0);
      }

      public TerminalNode FOLLOWING() {
         return this.getToken(135, 0);
      }

      public TerminalNode FOR() {
         return this.getToken(136, 0);
      }

      public TerminalNode FOREIGN() {
         return this.getToken(137, 0);
      }

      public TerminalNode FORMAT() {
         return this.getToken(138, 0);
      }

      public TerminalNode FORMATTED() {
         return this.getToken(139, 0);
      }

      public TerminalNode FROM() {
         return this.getToken(141, 0);
      }

      public TerminalNode FOUND() {
         return this.getToken(140, 0);
      }

      public TerminalNode FUNCTION() {
         return this.getToken(143, 0);
      }

      public TerminalNode FUNCTIONS() {
         return this.getToken(144, 0);
      }

      public TerminalNode GENERATED() {
         return this.getToken(145, 0);
      }

      public TerminalNode GLOBAL() {
         return this.getToken(146, 0);
      }

      public TerminalNode GRANT() {
         return this.getToken(147, 0);
      }

      public TerminalNode GROUP() {
         return this.getToken(148, 0);
      }

      public TerminalNode GROUPING() {
         return this.getToken(149, 0);
      }

      public TerminalNode HANDLER() {
         return this.getToken(150, 0);
      }

      public TerminalNode HAVING() {
         return this.getToken(151, 0);
      }

      public TerminalNode HOUR() {
         return this.getToken(153, 0);
      }

      public TerminalNode HOURS() {
         return this.getToken(154, 0);
      }

      public TerminalNode IDENTIFIER_KW() {
         return this.getToken(155, 0);
      }

      public TerminalNode IDENTITY() {
         return this.getToken(156, 0);
      }

      public TerminalNode IF() {
         return this.getToken(157, 0);
      }

      public TerminalNode IGNORE() {
         return this.getToken(158, 0);
      }

      public TerminalNode IMMEDIATE() {
         return this.getToken(159, 0);
      }

      public TerminalNode IMPORT() {
         return this.getToken(160, 0);
      }

      public TerminalNode IN() {
         return this.getToken(161, 0);
      }

      public TerminalNode INCLUDE() {
         return this.getToken(162, 0);
      }

      public TerminalNode INCREMENT() {
         return this.getToken(163, 0);
      }

      public TerminalNode INDEX() {
         return this.getToken(164, 0);
      }

      public TerminalNode INDEXES() {
         return this.getToken(165, 0);
      }

      public TerminalNode INPATH() {
         return this.getToken(167, 0);
      }

      public TerminalNode INPUT() {
         return this.getToken(168, 0);
      }

      public TerminalNode INPUTFORMAT() {
         return this.getToken(169, 0);
      }

      public TerminalNode INSERT() {
         return this.getToken(170, 0);
      }

      public TerminalNode INT() {
         return this.getToken(173, 0);
      }

      public TerminalNode INTEGER() {
         return this.getToken(174, 0);
      }

      public TerminalNode INTERVAL() {
         return this.getToken(172, 0);
      }

      public TerminalNode INTO() {
         return this.getToken(175, 0);
      }

      public TerminalNode INVOKER() {
         return this.getToken(176, 0);
      }

      public TerminalNode IS() {
         return this.getToken(177, 0);
      }

      public TerminalNode ITEMS() {
         return this.getToken(178, 0);
      }

      public TerminalNode ITERATE() {
         return this.getToken(179, 0);
      }

      public TerminalNode JSON() {
         return this.getToken(181, 0);
      }

      public TerminalNode KEYS() {
         return this.getToken(182, 0);
      }

      public TerminalNode LANGUAGE() {
         return this.getToken(183, 0);
      }

      public TerminalNode LAST() {
         return this.getToken(184, 0);
      }

      public TerminalNode LAZY() {
         return this.getToken(186, 0);
      }

      public TerminalNode LEADING() {
         return this.getToken(187, 0);
      }

      public TerminalNode LEAVE() {
         return this.getToken(188, 0);
      }

      public TerminalNode LIKE() {
         return this.getToken(190, 0);
      }

      public TerminalNode LONG() {
         return this.getToken(201, 0);
      }

      public TerminalNode ILIKE() {
         return this.getToken(191, 0);
      }

      public TerminalNode LIMIT() {
         return this.getToken(192, 0);
      }

      public TerminalNode LINES() {
         return this.getToken(193, 0);
      }

      public TerminalNode LIST() {
         return this.getToken(194, 0);
      }

      public TerminalNode LOAD() {
         return this.getToken(195, 0);
      }

      public TerminalNode LOCAL() {
         return this.getToken(196, 0);
      }

      public TerminalNode LOCATION() {
         return this.getToken(197, 0);
      }

      public TerminalNode LOCK() {
         return this.getToken(198, 0);
      }

      public TerminalNode LOCKS() {
         return this.getToken(199, 0);
      }

      public TerminalNode LOGICAL() {
         return this.getToken(200, 0);
      }

      public TerminalNode LOOP() {
         return this.getToken(202, 0);
      }

      public TerminalNode MACRO() {
         return this.getToken(203, 0);
      }

      public TerminalNode MAP() {
         return this.getToken(204, 0);
      }

      public TerminalNode MATCHED() {
         return this.getToken(205, 0);
      }

      public TerminalNode MERGE() {
         return this.getToken(206, 0);
      }

      public TerminalNode MICROSECOND() {
         return this.getToken(207, 0);
      }

      public TerminalNode MICROSECONDS() {
         return this.getToken(208, 0);
      }

      public TerminalNode MILLISECOND() {
         return this.getToken(209, 0);
      }

      public TerminalNode MILLISECONDS() {
         return this.getToken(210, 0);
      }

      public TerminalNode MINUTE() {
         return this.getToken(211, 0);
      }

      public TerminalNode MINUTES() {
         return this.getToken(212, 0);
      }

      public TerminalNode MODIFIES() {
         return this.getToken(213, 0);
      }

      public TerminalNode MONTH() {
         return this.getToken(214, 0);
      }

      public TerminalNode MONTHS() {
         return this.getToken(215, 0);
      }

      public TerminalNode MSCK() {
         return this.getToken(216, 0);
      }

      public TerminalNode NAME() {
         return this.getToken(217, 0);
      }

      public TerminalNode NAMESPACE() {
         return this.getToken(218, 0);
      }

      public TerminalNode NAMESPACES() {
         return this.getToken(219, 0);
      }

      public TerminalNode NANOSECOND() {
         return this.getToken(220, 0);
      }

      public TerminalNode NANOSECONDS() {
         return this.getToken(221, 0);
      }

      public TerminalNode NO() {
         return this.getToken(223, 0);
      }

      public TerminalNode NONE() {
         return this.getToken(224, 0);
      }

      public TerminalNode NOT() {
         return this.getToken(225, 0);
      }

      public TerminalNode NULL() {
         return this.getToken(226, 0);
      }

      public TerminalNode NULLS() {
         return this.getToken(227, 0);
      }

      public TerminalNode NUMERIC() {
         return this.getToken(228, 0);
      }

      public TerminalNode OF() {
         return this.getToken(229, 0);
      }

      public TerminalNode OFFSET() {
         return this.getToken(230, 0);
      }

      public TerminalNode ONLY() {
         return this.getToken(232, 0);
      }

      public TerminalNode OPTION() {
         return this.getToken(233, 0);
      }

      public TerminalNode OPTIONS() {
         return this.getToken(234, 0);
      }

      public TerminalNode OR() {
         return this.getToken(235, 0);
      }

      public TerminalNode ORDER() {
         return this.getToken(236, 0);
      }

      public TerminalNode OUT() {
         return this.getToken(237, 0);
      }

      public TerminalNode OUTER() {
         return this.getToken(238, 0);
      }

      public TerminalNode OUTPUTFORMAT() {
         return this.getToken(239, 0);
      }

      public TerminalNode OVER() {
         return this.getToken(240, 0);
      }

      public TerminalNode OVERLAPS() {
         return this.getToken(241, 0);
      }

      public TerminalNode OVERLAY() {
         return this.getToken(242, 0);
      }

      public TerminalNode OVERWRITE() {
         return this.getToken(243, 0);
      }

      public TerminalNode PARTITION() {
         return this.getToken(244, 0);
      }

      public TerminalNode PARTITIONED() {
         return this.getToken(245, 0);
      }

      public TerminalNode PARTITIONS() {
         return this.getToken(246, 0);
      }

      public TerminalNode PERCENTLIT() {
         return this.getToken(247, 0);
      }

      public TerminalNode PIVOT() {
         return this.getToken(248, 0);
      }

      public TerminalNode PLACING() {
         return this.getToken(249, 0);
      }

      public TerminalNode POSITION() {
         return this.getToken(250, 0);
      }

      public TerminalNode PRECEDING() {
         return this.getToken(251, 0);
      }

      public TerminalNode PRIMARY() {
         return this.getToken(252, 0);
      }

      public TerminalNode PRINCIPALS() {
         return this.getToken(253, 0);
      }

      public TerminalNode PROPERTIES() {
         return this.getToken(254, 0);
      }

      public TerminalNode PURGE() {
         return this.getToken(255, 0);
      }

      public TerminalNode QUARTER() {
         return this.getToken(256, 0);
      }

      public TerminalNode QUERY() {
         return this.getToken(257, 0);
      }

      public TerminalNode RANGE() {
         return this.getToken(258, 0);
      }

      public TerminalNode READS() {
         return this.getToken(259, 0);
      }

      public TerminalNode REAL() {
         return this.getToken(260, 0);
      }

      public TerminalNode RECORDREADER() {
         return this.getToken(261, 0);
      }

      public TerminalNode RECORDWRITER() {
         return this.getToken(262, 0);
      }

      public TerminalNode RECOVER() {
         return this.getToken(263, 0);
      }

      public TerminalNode RECURSIVE() {
         return this.getToken(264, 0);
      }

      public TerminalNode REDUCE() {
         return this.getToken(265, 0);
      }

      public TerminalNode REFERENCES() {
         return this.getToken(266, 0);
      }

      public TerminalNode REFRESH() {
         return this.getToken(267, 0);
      }

      public TerminalNode RENAME() {
         return this.getToken(268, 0);
      }

      public TerminalNode REPAIR() {
         return this.getToken(269, 0);
      }

      public TerminalNode REPEAT() {
         return this.getToken(270, 0);
      }

      public TerminalNode REPEATABLE() {
         return this.getToken(271, 0);
      }

      public TerminalNode REPLACE() {
         return this.getToken(272, 0);
      }

      public TerminalNode RESET() {
         return this.getToken(273, 0);
      }

      public TerminalNode RESPECT() {
         return this.getToken(274, 0);
      }

      public TerminalNode RESTRICT() {
         return this.getToken(275, 0);
      }

      public TerminalNode RETURN() {
         return this.getToken(276, 0);
      }

      public TerminalNode RETURNS() {
         return this.getToken(277, 0);
      }

      public TerminalNode REVOKE() {
         return this.getToken(278, 0);
      }

      public TerminalNode RLIKE() {
         return this.getToken(280, 0);
      }

      public TerminalNode ROLE() {
         return this.getToken(281, 0);
      }

      public TerminalNode ROLES() {
         return this.getToken(282, 0);
      }

      public TerminalNode ROLLBACK() {
         return this.getToken(283, 0);
      }

      public TerminalNode ROLLUP() {
         return this.getToken(284, 0);
      }

      public TerminalNode ROW() {
         return this.getToken(285, 0);
      }

      public TerminalNode ROWS() {
         return this.getToken(286, 0);
      }

      public TerminalNode SCHEMA() {
         return this.getToken(289, 0);
      }

      public TerminalNode SCHEMAS() {
         return this.getToken(290, 0);
      }

      public TerminalNode SECOND() {
         return this.getToken(287, 0);
      }

      public TerminalNode SECONDS() {
         return this.getToken(288, 0);
      }

      public TerminalNode SECURITY() {
         return this.getToken(291, 0);
      }

      public TerminalNode SELECT() {
         return this.getToken(292, 0);
      }

      public TerminalNode SEPARATED() {
         return this.getToken(294, 0);
      }

      public TerminalNode SERDE() {
         return this.getToken(295, 0);
      }

      public TerminalNode SERDEPROPERTIES() {
         return this.getToken(296, 0);
      }

      public TerminalNode SESSION_USER() {
         return this.getToken(297, 0);
      }

      public TerminalNode SET() {
         return this.getToken(298, 0);
      }

      public TerminalNode SETS() {
         return this.getToken(300, 0);
      }

      public TerminalNode SHORT() {
         return this.getToken(301, 0);
      }

      public TerminalNode SHOW() {
         return this.getToken(302, 0);
      }

      public TerminalNode SINGLE() {
         return this.getToken(303, 0);
      }

      public TerminalNode SKEWED() {
         return this.getToken(304, 0);
      }

      public TerminalNode SMALLINT() {
         return this.getToken(305, 0);
      }

      public TerminalNode SOME() {
         return this.getToken(306, 0);
      }

      public TerminalNode SORT() {
         return this.getToken(307, 0);
      }

      public TerminalNode SORTED() {
         return this.getToken(308, 0);
      }

      public TerminalNode SOURCE() {
         return this.getToken(309, 0);
      }

      public TerminalNode SPECIFIC() {
         return this.getToken(310, 0);
      }

      public TerminalNode SQL() {
         return this.getToken(311, 0);
      }

      public TerminalNode SQLEXCEPTION() {
         return this.getToken(312, 0);
      }

      public TerminalNode SQLSTATE() {
         return this.getToken(313, 0);
      }

      public TerminalNode START() {
         return this.getToken(314, 0);
      }

      public TerminalNode STATISTICS() {
         return this.getToken(315, 0);
      }

      public TerminalNode STORED() {
         return this.getToken(316, 0);
      }

      public TerminalNode STRATIFY() {
         return this.getToken(317, 0);
      }

      public TerminalNode STRING() {
         return this.getToken(318, 0);
      }

      public TerminalNode STRUCT() {
         return this.getToken(319, 0);
      }

      public TerminalNode SUBSTR() {
         return this.getToken(320, 0);
      }

      public TerminalNode SUBSTRING() {
         return this.getToken(321, 0);
      }

      public TerminalNode SYNC() {
         return this.getToken(322, 0);
      }

      public TerminalNode SYSTEM_TIME() {
         return this.getToken(323, 0);
      }

      public TerminalNode SYSTEM_VERSION() {
         return this.getToken(324, 0);
      }

      public TerminalNode TABLE() {
         return this.getToken(325, 0);
      }

      public TerminalNode TABLES() {
         return this.getToken(326, 0);
      }

      public TerminalNode TABLESAMPLE() {
         return this.getToken(327, 0);
      }

      public TerminalNode TARGET() {
         return this.getToken(328, 0);
      }

      public TerminalNode TBLPROPERTIES() {
         return this.getToken(329, 0);
      }

      public TerminalNode TEMPORARY() {
         return this.getToken(330, 0);
      }

      public TerminalNode TERMINATED() {
         return this.getToken(331, 0);
      }

      public TerminalNode THEN() {
         return this.getToken(332, 0);
      }

      public TerminalNode TIME() {
         return this.getToken(333, 0);
      }

      public TerminalNode TIMEDIFF() {
         return this.getToken(334, 0);
      }

      public TerminalNode TIMESTAMP() {
         return this.getToken(335, 0);
      }

      public TerminalNode TIMESTAMP_LTZ() {
         return this.getToken(336, 0);
      }

      public TerminalNode TIMESTAMP_NTZ() {
         return this.getToken(337, 0);
      }

      public TerminalNode TIMESTAMPADD() {
         return this.getToken(338, 0);
      }

      public TerminalNode TIMESTAMPDIFF() {
         return this.getToken(339, 0);
      }

      public TerminalNode TINYINT() {
         return this.getToken(340, 0);
      }

      public TerminalNode TO() {
         return this.getToken(341, 0);
      }

      public TerminalNode TOUCH() {
         return this.getToken(343, 0);
      }

      public TerminalNode TRAILING() {
         return this.getToken(344, 0);
      }

      public TerminalNode TRANSACTION() {
         return this.getToken(345, 0);
      }

      public TerminalNode TRANSACTIONS() {
         return this.getToken(346, 0);
      }

      public TerminalNode TRANSFORM() {
         return this.getToken(347, 0);
      }

      public TerminalNode TRIM() {
         return this.getToken(348, 0);
      }

      public TerminalNode TRUE() {
         return this.getToken(349, 0);
      }

      public TerminalNode TRUNCATE() {
         return this.getToken(350, 0);
      }

      public TerminalNode TRY_CAST() {
         return this.getToken(351, 0);
      }

      public TerminalNode TYPE() {
         return this.getToken(352, 0);
      }

      public TerminalNode UNARCHIVE() {
         return this.getToken(353, 0);
      }

      public TerminalNode UNBOUNDED() {
         return this.getToken(354, 0);
      }

      public TerminalNode UNCACHE() {
         return this.getToken(355, 0);
      }

      public TerminalNode UNIQUE() {
         return this.getToken(357, 0);
      }

      public TerminalNode UNKNOWN() {
         return this.getToken(358, 0);
      }

      public TerminalNode UNLOCK() {
         return this.getToken(359, 0);
      }

      public TerminalNode UNPIVOT() {
         return this.getToken(360, 0);
      }

      public TerminalNode UNSET() {
         return this.getToken(361, 0);
      }

      public TerminalNode UNTIL() {
         return this.getToken(362, 0);
      }

      public TerminalNode UPDATE() {
         return this.getToken(363, 0);
      }

      public TerminalNode USE() {
         return this.getToken(364, 0);
      }

      public TerminalNode USER() {
         return this.getToken(365, 0);
      }

      public TerminalNode VALUE() {
         return this.getToken(367, 0);
      }

      public TerminalNode VALUES() {
         return this.getToken(368, 0);
      }

      public TerminalNode VARCHAR() {
         return this.getToken(369, 0);
      }

      public TerminalNode VAR() {
         return this.getToken(370, 0);
      }

      public TerminalNode VARIABLE() {
         return this.getToken(371, 0);
      }

      public TerminalNode VARIANT() {
         return this.getToken(372, 0);
      }

      public TerminalNode VERSION() {
         return this.getToken(373, 0);
      }

      public TerminalNode VIEW() {
         return this.getToken(374, 0);
      }

      public TerminalNode VIEWS() {
         return this.getToken(375, 0);
      }

      public TerminalNode VOID() {
         return this.getToken(376, 0);
      }

      public TerminalNode WEEK() {
         return this.getToken(377, 0);
      }

      public TerminalNode WEEKS() {
         return this.getToken(378, 0);
      }

      public TerminalNode WHILE() {
         return this.getToken(381, 0);
      }

      public TerminalNode WHEN() {
         return this.getToken(379, 0);
      }

      public TerminalNode WHERE() {
         return this.getToken(380, 0);
      }

      public TerminalNode WINDOW() {
         return this.getToken(382, 0);
      }

      public TerminalNode WITH() {
         return this.getToken(383, 0);
      }

      public TerminalNode WITHIN() {
         return this.getToken(384, 0);
      }

      public TerminalNode YEAR() {
         return this.getToken(385, 0);
      }

      public TerminalNode YEARS() {
         return this.getToken(386, 0);
      }

      public TerminalNode ZONE() {
         return this.getToken(387, 0);
      }

      public NonReservedContext(ParserRuleContext parent, int invokingState) {
         super(parent, invokingState);
      }

      public int getRuleIndex() {
         return 240;
      }

      public void enterRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).enterNonReserved(this);
         }

      }

      public void exitRule(ParseTreeListener listener) {
         if (listener instanceof SqlBaseParserListener) {
            ((SqlBaseParserListener)listener).exitNonReserved(this);
         }

      }

      public Object accept(ParseTreeVisitor visitor) {
         return visitor instanceof SqlBaseParserVisitor ? ((SqlBaseParserVisitor)visitor).visitNonReserved(this) : visitor.visitChildren(this);
      }
   }
}
