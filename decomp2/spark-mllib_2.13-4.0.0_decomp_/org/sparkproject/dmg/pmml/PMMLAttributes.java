package org.sparkproject.dmg.pmml;

import org.sparkproject.jpmml.model.ReflectionUtil;

public interface PMMLAttributes {
   java.lang.reflect.Field AGGREGATE_FIELD = ReflectionUtil.getField(Aggregate.class, "field");
   java.lang.reflect.Field AGGREGATE_FUNCTION = ReflectionUtil.getField(Aggregate.class, "function");
   java.lang.reflect.Field AGGREGATE_GROUPFIELD = ReflectionUtil.getField(Aggregate.class, "groupField");
   java.lang.reflect.Field AGGREGATE_SQLWHERE = ReflectionUtil.getField(Aggregate.class, "sqlWhere");
   java.lang.reflect.Field ANOVA_TARGETFIELD = ReflectionUtil.getField(Anova.class, "targetField");
   java.lang.reflect.Field ANOVAROW_TYPE = ReflectionUtil.getField(AnovaRow.class, "type");
   java.lang.reflect.Field ANOVAROW_SUMOFSQUARES = ReflectionUtil.getField(AnovaRow.class, "sumOfSquares");
   java.lang.reflect.Field ANOVAROW_DEGREESOFFREEDOM = ReflectionUtil.getField(AnovaRow.class, "degreesOfFreedom");
   java.lang.reflect.Field ANOVAROW_MEANOFSQUARES = ReflectionUtil.getField(AnovaRow.class, "meanOfSquares");
   java.lang.reflect.Field ANOVAROW_FVALUE = ReflectionUtil.getField(AnovaRow.class, "fValue");
   java.lang.reflect.Field ANOVAROW_PVALUE = ReflectionUtil.getField(AnovaRow.class, "pValue");
   java.lang.reflect.Field ANYDISTRIBUTION_MEAN = ReflectionUtil.getField(AnyDistribution.class, "mean");
   java.lang.reflect.Field ANYDISTRIBUTION_VARIANCE = ReflectionUtil.getField(AnyDistribution.class, "variance");
   java.lang.reflect.Field APPLICATION_NAME = ReflectionUtil.getField(Application.class, "name");
   java.lang.reflect.Field APPLICATION_VERSION = ReflectionUtil.getField(Application.class, "version");
   java.lang.reflect.Field APPLY_FUNCTION = ReflectionUtil.getField(Apply.class, "function");
   java.lang.reflect.Field APPLY_MAPMISSINGTO = ReflectionUtil.getField(Apply.class, "mapMissingTo");
   java.lang.reflect.Field APPLY_DEFAULTVALUE = ReflectionUtil.getField(Apply.class, "defaultValue");
   java.lang.reflect.Field APPLY_INVALIDVALUETREATMENT = ReflectionUtil.getField(Apply.class, "invalidValueTreatment");
   java.lang.reflect.Field ARRAY_N = ReflectionUtil.getField(Array.class, "n");
   java.lang.reflect.Field ARRAY_TYPE = ReflectionUtil.getField(Array.class, "type");
   java.lang.reflect.Field BINARYSIMILARITY_C00PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "c00Parameter");
   java.lang.reflect.Field BINARYSIMILARITY_C01PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "c01Parameter");
   java.lang.reflect.Field BINARYSIMILARITY_C10PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "c10Parameter");
   java.lang.reflect.Field BINARYSIMILARITY_C11PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "c11Parameter");
   java.lang.reflect.Field BINARYSIMILARITY_D00PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "d00Parameter");
   java.lang.reflect.Field BINARYSIMILARITY_D01PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "d01Parameter");
   java.lang.reflect.Field BINARYSIMILARITY_D10PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "d10Parameter");
   java.lang.reflect.Field BINARYSIMILARITY_D11PARAMETER = ReflectionUtil.getField(BinarySimilarity.class, "d11Parameter");
   java.lang.reflect.Field BLOCKINDICATOR_FIELD = ReflectionUtil.getField(BlockIndicator.class, "field");
   java.lang.reflect.Field CHILDPARENT_CHILDFIELD = ReflectionUtil.getField(ChildParent.class, "childField");
   java.lang.reflect.Field CHILDPARENT_PARENTFIELD = ReflectionUtil.getField(ChildParent.class, "parentField");
   java.lang.reflect.Field CHILDPARENT_PARENTLEVELFIELD = ReflectionUtil.getField(ChildParent.class, "parentLevelField");
   java.lang.reflect.Field CHILDPARENT_RECURSIVE = ReflectionUtil.getField(ChildParent.class, "recursive");
   java.lang.reflect.Field CLUSTERINGMODELQUALITY_DATANAME = ReflectionUtil.getField(ClusteringModelQuality.class, "dataName");
   java.lang.reflect.Field CLUSTERINGMODELQUALITY_SSE = ReflectionUtil.getField(ClusteringModelQuality.class, "sse");
   java.lang.reflect.Field CLUSTERINGMODELQUALITY_SSB = ReflectionUtil.getField(ClusteringModelQuality.class, "ssb");
   java.lang.reflect.Field COMPARISONMEASURE_KIND = ReflectionUtil.getField(ComparisonMeasure.class, "kind");
   java.lang.reflect.Field COMPARISONMEASURE_COMPAREFUNCTION = ReflectionUtil.getField(ComparisonMeasure.class, "compareFunction");
   java.lang.reflect.Field COMPARISONMEASURE_MINIMUM = ReflectionUtil.getField(ComparisonMeasure.class, "minimum");
   java.lang.reflect.Field COMPARISONMEASURE_MAXIMUM = ReflectionUtil.getField(ComparisonMeasure.class, "maximum");
   java.lang.reflect.Field COMPLEXSCOREDISTRIBUTION_VALUE = ReflectionUtil.getField(ComplexScoreDistribution.class, "value");
   java.lang.reflect.Field COMPLEXSCOREDISTRIBUTION_RECORDCOUNT = ReflectionUtil.getField(ComplexScoreDistribution.class, "recordCount");
   java.lang.reflect.Field COMPLEXSCOREDISTRIBUTION_CONFIDENCE = ReflectionUtil.getField(ComplexScoreDistribution.class, "confidence");
   java.lang.reflect.Field COMPLEXSCOREDISTRIBUTION_PROBABILITY = ReflectionUtil.getField(ComplexScoreDistribution.class, "probability");
   java.lang.reflect.Field COMPOUNDPREDICATE_BOOLEANOPERATOR = ReflectionUtil.getField(CompoundPredicate.class, "booleanOperator");
   java.lang.reflect.Field CONSTANT_DATATYPE = ReflectionUtil.getField(Constant.class, "dataType");
   java.lang.reflect.Field CONSTANT_MISSING = ReflectionUtil.getField(Constant.class, "missing");
   java.lang.reflect.Field CONTSTATS_TOTALVALUESSUM = ReflectionUtil.getField(ContStats.class, "totalValuesSum");
   java.lang.reflect.Field CONTSTATS_TOTALSQUARESSUM = ReflectionUtil.getField(ContStats.class, "totalSquaresSum");
   java.lang.reflect.Field COUNTS_TOTALFREQ = ReflectionUtil.getField(Counts.class, "totalFreq");
   java.lang.reflect.Field COUNTS_MISSINGFREQ = ReflectionUtil.getField(Counts.class, "missingFreq");
   java.lang.reflect.Field COUNTS_INVALIDFREQ = ReflectionUtil.getField(Counts.class, "invalidFreq");
   java.lang.reflect.Field COUNTS_CARDINALITY = ReflectionUtil.getField(Counts.class, "cardinality");
   java.lang.reflect.Field DATADICTIONARY_NUMBEROFFIELDS = ReflectionUtil.getField(DataDictionary.class, "numberOfFields");
   java.lang.reflect.Field DATAFIELD_NAME = ReflectionUtil.getField(DataField.class, "name");
   java.lang.reflect.Field DATAFIELD_DISPLAYNAME = ReflectionUtil.getField(DataField.class, "displayName");
   java.lang.reflect.Field DATAFIELD_OPTYPE = ReflectionUtil.getField(DataField.class, "opType");
   java.lang.reflect.Field DATAFIELD_DATATYPE = ReflectionUtil.getField(DataField.class, "dataType");
   java.lang.reflect.Field DATAFIELD_TAXONOMY = ReflectionUtil.getField(DataField.class, "taxonomy");
   java.lang.reflect.Field DATAFIELD_CYCLIC = ReflectionUtil.getField(DataField.class, "cyclic");
   java.lang.reflect.Field DECISION_VALUE = ReflectionUtil.getField(Decision.class, "value");
   java.lang.reflect.Field DECISION_DISPLAYVALUE = ReflectionUtil.getField(Decision.class, "displayValue");
   java.lang.reflect.Field DECISION_DESCRIPTION = ReflectionUtil.getField(Decision.class, "description");
   java.lang.reflect.Field DECISIONS_BUSINESSPROBLEM = ReflectionUtil.getField(Decisions.class, "businessProblem");
   java.lang.reflect.Field DECISIONS_DESCRIPTION = ReflectionUtil.getField(Decisions.class, "description");
   java.lang.reflect.Field DEFINEFUNCTION_NAME = ReflectionUtil.getField(DefineFunction.class, "name");
   java.lang.reflect.Field DEFINEFUNCTION_OPTYPE = ReflectionUtil.getField(DefineFunction.class, "opType");
   java.lang.reflect.Field DEFINEFUNCTION_DATATYPE = ReflectionUtil.getField(DefineFunction.class, "dataType");
   java.lang.reflect.Field DERIVEDFIELD_NAME = ReflectionUtil.getField(DerivedField.class, "name");
   java.lang.reflect.Field DERIVEDFIELD_DISPLAYNAME = ReflectionUtil.getField(DerivedField.class, "displayName");
   java.lang.reflect.Field DERIVEDFIELD_OPTYPE = ReflectionUtil.getField(DerivedField.class, "opType");
   java.lang.reflect.Field DERIVEDFIELD_DATATYPE = ReflectionUtil.getField(DerivedField.class, "dataType");
   java.lang.reflect.Field DISCRETIZE_FIELD = ReflectionUtil.getField(Discretize.class, "field");
   java.lang.reflect.Field DISCRETIZE_MAPMISSINGTO = ReflectionUtil.getField(Discretize.class, "mapMissingTo");
   java.lang.reflect.Field DISCRETIZE_DEFAULTVALUE = ReflectionUtil.getField(Discretize.class, "defaultValue");
   java.lang.reflect.Field DISCRETIZE_DATATYPE = ReflectionUtil.getField(Discretize.class, "dataType");
   java.lang.reflect.Field DISCRETIZEBIN_BINVALUE = ReflectionUtil.getField(DiscretizeBin.class, "binValue");
   java.lang.reflect.Field DISCRSTATS_MODALVALUE = ReflectionUtil.getField(DiscrStats.class, "modalValue");
   java.lang.reflect.Field EXTENSION_EXTENDER = ReflectionUtil.getField(Extension.class, "extender");
   java.lang.reflect.Field EXTENSION_NAME = ReflectionUtil.getField(Extension.class, "name");
   java.lang.reflect.Field EXTENSION_VALUE = ReflectionUtil.getField(Extension.class, "value");
   java.lang.reflect.Field FIELDCOLUMNPAIR_FIELD = ReflectionUtil.getField(FieldColumnPair.class, "field");
   java.lang.reflect.Field FIELDCOLUMNPAIR_COLUMN = ReflectionUtil.getField(FieldColumnPair.class, "column");
   java.lang.reflect.Field FIELDREF_FIELD = ReflectionUtil.getField(FieldRef.class, "field");
   java.lang.reflect.Field FIELDREF_MAPMISSINGTO = ReflectionUtil.getField(FieldRef.class, "mapMissingTo");
   java.lang.reflect.Field GAUSSIANDISTRIBUTION_MEAN = ReflectionUtil.getField(GaussianDistribution.class, "mean");
   java.lang.reflect.Field GAUSSIANDISTRIBUTION_VARIANCE = ReflectionUtil.getField(GaussianDistribution.class, "variance");
   java.lang.reflect.Field HEADER_COPYRIGHT = ReflectionUtil.getField(Header.class, "copyright");
   java.lang.reflect.Field HEADER_DESCRIPTION = ReflectionUtil.getField(Header.class, "description");
   java.lang.reflect.Field HEADER_MODELVERSION = ReflectionUtil.getField(Header.class, "modelVersion");
   java.lang.reflect.Field INTERVAL_CLOSURE = ReflectionUtil.getField(Interval.class, "closure");
   java.lang.reflect.Field INTERVAL_LEFTMARGIN = ReflectionUtil.getField(Interval.class, "leftMargin");
   java.lang.reflect.Field INTERVAL_RIGHTMARGIN = ReflectionUtil.getField(Interval.class, "rightMargin");
   java.lang.reflect.Field INTSPARSEARRAY_N = ReflectionUtil.getField(IntSparseArray.class, "n");
   java.lang.reflect.Field INTSPARSEARRAY_DEFAULTVALUE = ReflectionUtil.getField(IntSparseArray.class, "defaultValue");
   java.lang.reflect.Field LAG_FIELD = ReflectionUtil.getField(Lag.class, "field");
   java.lang.reflect.Field LAG_N = ReflectionUtil.getField(Lag.class, "n");
   java.lang.reflect.Field LAG_AGGREGATE = ReflectionUtil.getField(Lag.class, "aggregate");
   java.lang.reflect.Field LIFTDATA_TARGETFIELDVALUE = ReflectionUtil.getField(LiftData.class, "targetFieldValue");
   java.lang.reflect.Field LIFTDATA_TARGETFIELDDISPLAYVALUE = ReflectionUtil.getField(LiftData.class, "targetFieldDisplayValue");
   java.lang.reflect.Field LIFTDATA_RANKINGQUALITY = ReflectionUtil.getField(LiftData.class, "rankingQuality");
   java.lang.reflect.Field LINEARNORM_ORIG = ReflectionUtil.getField(LinearNorm.class, "orig");
   java.lang.reflect.Field LINEARNORM_NORM = ReflectionUtil.getField(LinearNorm.class, "norm");
   java.lang.reflect.Field MAPVALUES_MAPMISSINGTO = ReflectionUtil.getField(MapValues.class, "mapMissingTo");
   java.lang.reflect.Field MAPVALUES_DEFAULTVALUE = ReflectionUtil.getField(MapValues.class, "defaultValue");
   java.lang.reflect.Field MAPVALUES_OUTPUTCOLUMN = ReflectionUtil.getField(MapValues.class, "outputColumn");
   java.lang.reflect.Field MAPVALUES_DATATYPE = ReflectionUtil.getField(MapValues.class, "dataType");
   java.lang.reflect.Field MATCELL_ROW = ReflectionUtil.getField(MatCell.class, "row");
   java.lang.reflect.Field MATCELL_COL = ReflectionUtil.getField(MatCell.class, "col");
   java.lang.reflect.Field MATRIX_KIND = ReflectionUtil.getField(Matrix.class, "kind");
   java.lang.reflect.Field MATRIX_NBROWS = ReflectionUtil.getField(Matrix.class, "nbRows");
   java.lang.reflect.Field MATRIX_NBCOLS = ReflectionUtil.getField(Matrix.class, "nbCols");
   java.lang.reflect.Field MATRIX_DIAGDEFAULT = ReflectionUtil.getField(Matrix.class, "diagDefault");
   java.lang.reflect.Field MATRIX_OFFDIAGDEFAULT = ReflectionUtil.getField(Matrix.class, "offDiagDefault");
   java.lang.reflect.Field MININGFIELD_NAME = ReflectionUtil.getField(MiningField.class, "name");
   java.lang.reflect.Field MININGFIELD_USAGETYPE = ReflectionUtil.getField(MiningField.class, "usageType");
   java.lang.reflect.Field MININGFIELD_OPTYPE = ReflectionUtil.getField(MiningField.class, "opType");
   java.lang.reflect.Field MININGFIELD_IMPORTANCE = ReflectionUtil.getField(MiningField.class, "importance");
   java.lang.reflect.Field MININGFIELD_OUTLIERTREATMENT = ReflectionUtil.getField(MiningField.class, "outlierTreatment");
   java.lang.reflect.Field MININGFIELD_LOWVALUE = ReflectionUtil.getField(MiningField.class, "lowValue");
   java.lang.reflect.Field MININGFIELD_HIGHVALUE = ReflectionUtil.getField(MiningField.class, "highValue");
   java.lang.reflect.Field MININGFIELD_MISSINGVALUEREPLACEMENT = ReflectionUtil.getField(MiningField.class, "missingValueReplacement");
   java.lang.reflect.Field MININGFIELD_MISSINGVALUETREATMENT = ReflectionUtil.getField(MiningField.class, "missingValueTreatment");
   java.lang.reflect.Field MININGFIELD_INVALIDVALUETREATMENT = ReflectionUtil.getField(MiningField.class, "invalidValueTreatment");
   java.lang.reflect.Field MININGFIELD_INVALIDVALUEREPLACEMENT = ReflectionUtil.getField(MiningField.class, "invalidValueReplacement");
   java.lang.reflect.Field MINKOWSKI_PPARAMETER = ReflectionUtil.getField(Minkowski.class, "pParameter");
   java.lang.reflect.Field MODELVERIFICATION_RECORDCOUNT = ReflectionUtil.getField(ModelVerification.class, "recordCount");
   java.lang.reflect.Field MODELVERIFICATION_FIELDCOUNT = ReflectionUtil.getField(ModelVerification.class, "fieldCount");
   java.lang.reflect.Field MULTIVARIATESTAT_NAME = ReflectionUtil.getField(MultivariateStat.class, "name");
   java.lang.reflect.Field MULTIVARIATESTAT_CATEGORY = ReflectionUtil.getField(MultivariateStat.class, "category");
   java.lang.reflect.Field MULTIVARIATESTAT_EXPONENT = ReflectionUtil.getField(MultivariateStat.class, "exponent");
   java.lang.reflect.Field MULTIVARIATESTAT_INTERCEPT = ReflectionUtil.getField(MultivariateStat.class, "intercept");
   java.lang.reflect.Field MULTIVARIATESTAT_IMPORTANCE = ReflectionUtil.getField(MultivariateStat.class, "importance");
   java.lang.reflect.Field MULTIVARIATESTAT_STDERROR = ReflectionUtil.getField(MultivariateStat.class, "stdError");
   java.lang.reflect.Field MULTIVARIATESTAT_TVALUE = ReflectionUtil.getField(MultivariateStat.class, "tValue");
   java.lang.reflect.Field MULTIVARIATESTAT_CHISQUAREVALUE = ReflectionUtil.getField(MultivariateStat.class, "chiSquareValue");
   java.lang.reflect.Field MULTIVARIATESTAT_FSTATISTIC = ReflectionUtil.getField(MultivariateStat.class, "fStatistic");
   java.lang.reflect.Field MULTIVARIATESTAT_DF = ReflectionUtil.getField(MultivariateStat.class, "df");
   java.lang.reflect.Field MULTIVARIATESTAT_PVALUEALPHA = ReflectionUtil.getField(MultivariateStat.class, "pValueAlpha");
   java.lang.reflect.Field MULTIVARIATESTAT_PVALUEINITIAL = ReflectionUtil.getField(MultivariateStat.class, "pValueInitial");
   java.lang.reflect.Field MULTIVARIATESTAT_PVALUEFINAL = ReflectionUtil.getField(MultivariateStat.class, "pValueFinal");
   java.lang.reflect.Field MULTIVARIATESTAT_CONFIDENCELEVEL = ReflectionUtil.getField(MultivariateStat.class, "confidenceLevel");
   java.lang.reflect.Field MULTIVARIATESTAT_CONFIDENCELOWERBOUND = ReflectionUtil.getField(MultivariateStat.class, "confidenceLowerBound");
   java.lang.reflect.Field MULTIVARIATESTAT_CONFIDENCEUPPERBOUND = ReflectionUtil.getField(MultivariateStat.class, "confidenceUpperBound");
   java.lang.reflect.Field MULTIVARIATESTATS_TARGETCATEGORY = ReflectionUtil.getField(MultivariateStats.class, "targetCategory");
   java.lang.reflect.Field NORMCONTINUOUS_MAPMISSINGTO = ReflectionUtil.getField(NormContinuous.class, "mapMissingTo");
   java.lang.reflect.Field NORMCONTINUOUS_FIELD = ReflectionUtil.getField(NormContinuous.class, "field");
   java.lang.reflect.Field NORMCONTINUOUS_OUTLIERS = ReflectionUtil.getField(NormContinuous.class, "outliers");
   java.lang.reflect.Field NORMDISCRETE_FIELD = ReflectionUtil.getField(NormDiscrete.class, "field");
   java.lang.reflect.Field NORMDISCRETE_METHOD = ReflectionUtil.getField(NormDiscrete.class, "method");
   java.lang.reflect.Field NORMDISCRETE_VALUE = ReflectionUtil.getField(NormDiscrete.class, "value");
   java.lang.reflect.Field NORMDISCRETE_MAPMISSINGTO = ReflectionUtil.getField(NormDiscrete.class, "mapMissingTo");
   java.lang.reflect.Field NUMERICINFO_MINIMUM = ReflectionUtil.getField(NumericInfo.class, "minimum");
   java.lang.reflect.Field NUMERICINFO_MAXIMUM = ReflectionUtil.getField(NumericInfo.class, "maximum");
   java.lang.reflect.Field NUMERICINFO_MEAN = ReflectionUtil.getField(NumericInfo.class, "mean");
   java.lang.reflect.Field NUMERICINFO_STANDARDDEVIATION = ReflectionUtil.getField(NumericInfo.class, "standardDeviation");
   java.lang.reflect.Field NUMERICINFO_MEDIAN = ReflectionUtil.getField(NumericInfo.class, "median");
   java.lang.reflect.Field NUMERICINFO_INTERQUARTILERANGE = ReflectionUtil.getField(NumericInfo.class, "interQuartileRange");
   java.lang.reflect.Field OUTPUTFIELD_NAME = ReflectionUtil.getField(OutputField.class, "name");
   java.lang.reflect.Field OUTPUTFIELD_DISPLAYNAME = ReflectionUtil.getField(OutputField.class, "displayName");
   java.lang.reflect.Field OUTPUTFIELD_OPTYPE = ReflectionUtil.getField(OutputField.class, "opType");
   java.lang.reflect.Field OUTPUTFIELD_DATATYPE = ReflectionUtil.getField(OutputField.class, "dataType");
   java.lang.reflect.Field OUTPUTFIELD_TARGETFIELD = ReflectionUtil.getField(OutputField.class, "targetField");
   java.lang.reflect.Field OUTPUTFIELD_REPORTFIELD = ReflectionUtil.getField(OutputField.class, "reportField");
   java.lang.reflect.Field OUTPUTFIELD_RESULTFEATURE = ReflectionUtil.getField(OutputField.class, "resultFeature");
   java.lang.reflect.Field OUTPUTFIELD_VALUE = ReflectionUtil.getField(OutputField.class, "value");
   java.lang.reflect.Field OUTPUTFIELD_RULEFEATURE = ReflectionUtil.getField(OutputField.class, "ruleFeature");
   java.lang.reflect.Field OUTPUTFIELD_ALGORITHM = ReflectionUtil.getField(OutputField.class, "algorithm");
   java.lang.reflect.Field OUTPUTFIELD_RANK = ReflectionUtil.getField(OutputField.class, "rank");
   java.lang.reflect.Field OUTPUTFIELD_RANKBASIS = ReflectionUtil.getField(OutputField.class, "rankBasis");
   java.lang.reflect.Field OUTPUTFIELD_RANKORDER = ReflectionUtil.getField(OutputField.class, "rankOrder");
   java.lang.reflect.Field OUTPUTFIELD_MULTIVALUED = ReflectionUtil.getField(OutputField.class, "multiValued");
   java.lang.reflect.Field OUTPUTFIELD_SEGMENTID = ReflectionUtil.getField(OutputField.class, "segmentId");
   java.lang.reflect.Field OUTPUTFIELD_FINALRESULT = ReflectionUtil.getField(OutputField.class, "finalResult");
   java.lang.reflect.Field PARAMETERFIELD_NAME = ReflectionUtil.getField(ParameterField.class, "name");
   java.lang.reflect.Field PARAMETERFIELD_OPTYPE = ReflectionUtil.getField(ParameterField.class, "opType");
   java.lang.reflect.Field PARAMETERFIELD_DATATYPE = ReflectionUtil.getField(ParameterField.class, "dataType");
   java.lang.reflect.Field PARAMETERFIELD_DISPLAYNAME = ReflectionUtil.getField(ParameterField.class, "displayName");
   java.lang.reflect.Field PARTITION_NAME = ReflectionUtil.getField(Partition.class, "name");
   java.lang.reflect.Field PARTITION_SIZE = ReflectionUtil.getField(Partition.class, "size");
   java.lang.reflect.Field PARTITIONFIELDSTATS_FIELD = ReflectionUtil.getField(PartitionFieldStats.class, "field");
   java.lang.reflect.Field PARTITIONFIELDSTATS_WEIGHTED = ReflectionUtil.getField(PartitionFieldStats.class, "weighted");
   java.lang.reflect.Field PMML_VERSION = ReflectionUtil.getField(PMML.class, "version");
   java.lang.reflect.Field PMML_BASEVERSION = ReflectionUtil.getField(PMML.class, "baseVersion");
   java.lang.reflect.Field POISSONDISTRIBUTION_MEAN = ReflectionUtil.getField(PoissonDistribution.class, "mean");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_TARGETFIELD = ReflectionUtil.getField(PredictiveModelQuality.class, "targetField");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_DATANAME = ReflectionUtil.getField(PredictiveModelQuality.class, "dataName");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_DATAUSAGE = ReflectionUtil.getField(PredictiveModelQuality.class, "dataUsage");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_MEANERROR = ReflectionUtil.getField(PredictiveModelQuality.class, "meanError");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_MEANABSOLUTEERROR = ReflectionUtil.getField(PredictiveModelQuality.class, "meanAbsoluteError");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_MEANSQUAREDERROR = ReflectionUtil.getField(PredictiveModelQuality.class, "meanSquaredError");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_ROOTMEANSQUAREDERROR = ReflectionUtil.getField(PredictiveModelQuality.class, "rootMeanSquaredError");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_RSQUARED = ReflectionUtil.getField(PredictiveModelQuality.class, "rSquared");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_ADJRSQUARED = ReflectionUtil.getField(PredictiveModelQuality.class, "adjRSquared");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_SUMSQUAREDERROR = ReflectionUtil.getField(PredictiveModelQuality.class, "sumSquaredError");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_SUMSQUAREDREGRESSION = ReflectionUtil.getField(PredictiveModelQuality.class, "sumSquaredRegression");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_NUMOFRECORDS = ReflectionUtil.getField(PredictiveModelQuality.class, "numOfRecords");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_NUMOFRECORDSWEIGHTED = ReflectionUtil.getField(PredictiveModelQuality.class, "numOfRecordsWeighted");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_NUMOFPREDICTORS = ReflectionUtil.getField(PredictiveModelQuality.class, "numOfPredictors");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_DEGREESOFFREEDOM = ReflectionUtil.getField(PredictiveModelQuality.class, "degreesOfFreedom");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_FSTATISTIC = ReflectionUtil.getField(PredictiveModelQuality.class, "fStatistic");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_AIC = ReflectionUtil.getField(PredictiveModelQuality.class, "aic");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_BIC = ReflectionUtil.getField(PredictiveModelQuality.class, "bic");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_AICC = ReflectionUtil.getField(PredictiveModelQuality.class, "aiCc");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_ACCURACY = ReflectionUtil.getField(PredictiveModelQuality.class, "accuracy");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_AUC = ReflectionUtil.getField(PredictiveModelQuality.class, "auc");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_PRECISION = ReflectionUtil.getField(PredictiveModelQuality.class, "precision");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_RECALL = ReflectionUtil.getField(PredictiveModelQuality.class, "recall");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_SPECIFICITY = ReflectionUtil.getField(PredictiveModelQuality.class, "specificity");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_F1 = ReflectionUtil.getField(PredictiveModelQuality.class, "f1");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_F2 = ReflectionUtil.getField(PredictiveModelQuality.class, "f2");
   java.lang.reflect.Field PREDICTIVEMODELQUALITY_FHALF = ReflectionUtil.getField(PredictiveModelQuality.class, "fhalf");
   java.lang.reflect.Field QUANTILE_QUANTILELIMIT = ReflectionUtil.getField(Quantile.class, "quantileLimit");
   java.lang.reflect.Field QUANTILE_QUANTILEVALUE = ReflectionUtil.getField(Quantile.class, "quantileValue");
   java.lang.reflect.Field REALSPARSEARRAY_N = ReflectionUtil.getField(RealSparseArray.class, "n");
   java.lang.reflect.Field REALSPARSEARRAY_DEFAULTVALUE = ReflectionUtil.getField(RealSparseArray.class, "defaultValue");
   java.lang.reflect.Field RESULTFIELD_NAME = ReflectionUtil.getField(ResultField.class, "name");
   java.lang.reflect.Field RESULTFIELD_DISPLAYNAME = ReflectionUtil.getField(ResultField.class, "displayName");
   java.lang.reflect.Field RESULTFIELD_OPTYPE = ReflectionUtil.getField(ResultField.class, "opType");
   java.lang.reflect.Field RESULTFIELD_DATATYPE = ReflectionUtil.getField(ResultField.class, "dataType");
   java.lang.reflect.Field RESULTFIELD_RESULTFEATURE = ReflectionUtil.getField(ResultField.class, "resultFeature");
   java.lang.reflect.Field RESULTFIELD_VALUE = ReflectionUtil.getField(ResultField.class, "value");
   java.lang.reflect.Field ROC_POSITIVETARGETFIELDVALUE = ReflectionUtil.getField(ROC.class, "positiveTargetFieldValue");
   java.lang.reflect.Field ROC_POSITIVETARGETFIELDDISPLAYVALUE = ReflectionUtil.getField(ROC.class, "positiveTargetFieldDisplayValue");
   java.lang.reflect.Field ROC_NEGATIVETARGETFIELDVALUE = ReflectionUtil.getField(ROC.class, "negativeTargetFieldValue");
   java.lang.reflect.Field ROC_NEGATIVETARGETFIELDDISPLAYVALUE = ReflectionUtil.getField(ROC.class, "negativeTargetFieldDisplayValue");
   java.lang.reflect.Field SIMPLEPREDICATE_FIELD = ReflectionUtil.getField(SimplePredicate.class, "field");
   java.lang.reflect.Field SIMPLEPREDICATE_OPERATOR = ReflectionUtil.getField(SimplePredicate.class, "operator");
   java.lang.reflect.Field SIMPLEPREDICATE_VALUE = ReflectionUtil.getField(SimplePredicate.class, "value");
   java.lang.reflect.Field SIMPLESETPREDICATE_FIELD = ReflectionUtil.getField(SimpleSetPredicate.class, "field");
   java.lang.reflect.Field SIMPLESETPREDICATE_BOOLEANOPERATOR = ReflectionUtil.getField(SimpleSetPredicate.class, "booleanOperator");
   java.lang.reflect.Field TARGET_FIELD = ReflectionUtil.getField(Target.class, "field");
   java.lang.reflect.Field TARGET_OPTYPE = ReflectionUtil.getField(Target.class, "opType");
   java.lang.reflect.Field TARGET_CASTINTEGER = ReflectionUtil.getField(Target.class, "castInteger");
   java.lang.reflect.Field TARGET_MIN = ReflectionUtil.getField(Target.class, "min");
   java.lang.reflect.Field TARGET_MAX = ReflectionUtil.getField(Target.class, "max");
   java.lang.reflect.Field TARGET_RESCALECONSTANT = ReflectionUtil.getField(Target.class, "rescaleConstant");
   java.lang.reflect.Field TARGET_RESCALEFACTOR = ReflectionUtil.getField(Target.class, "rescaleFactor");
   java.lang.reflect.Field TARGETVALUE_VALUE = ReflectionUtil.getField(TargetValue.class, "value");
   java.lang.reflect.Field TARGETVALUE_DISPLAYVALUE = ReflectionUtil.getField(TargetValue.class, "displayValue");
   java.lang.reflect.Field TARGETVALUE_PRIORPROBABILITY = ReflectionUtil.getField(TargetValue.class, "priorProbability");
   java.lang.reflect.Field TARGETVALUE_DEFAULTVALUE = ReflectionUtil.getField(TargetValue.class, "defaultValue");
   java.lang.reflect.Field TAXONOMY_NAME = ReflectionUtil.getField(Taxonomy.class, "name");
   java.lang.reflect.Field TEXTINDEX_TEXTFIELD = ReflectionUtil.getField(TextIndex.class, "textField");
   java.lang.reflect.Field TEXTINDEX_LOCALTERMWEIGHTS = ReflectionUtil.getField(TextIndex.class, "localTermWeights");
   java.lang.reflect.Field TEXTINDEX_CASESENSITIVE = ReflectionUtil.getField(TextIndex.class, "caseSensitive");
   java.lang.reflect.Field TEXTINDEX_MAXLEVENSHTEINDISTANCE = ReflectionUtil.getField(TextIndex.class, "maxLevenshteinDistance");
   java.lang.reflect.Field TEXTINDEX_COUNTHITS = ReflectionUtil.getField(TextIndex.class, "countHits");
   java.lang.reflect.Field TEXTINDEX_WORDSEPARATORCHARACTERRE = ReflectionUtil.getField(TextIndex.class, "wordSeparatorCharacterRE");
   java.lang.reflect.Field TEXTINDEX_WORDRE = ReflectionUtil.getField(TextIndex.class, "wordRE");
   java.lang.reflect.Field TEXTINDEX_TOKENIZE = ReflectionUtil.getField(TextIndex.class, "tokenize");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_INFIELD = ReflectionUtil.getField(TextIndexNormalization.class, "inField");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_OUTFIELD = ReflectionUtil.getField(TextIndexNormalization.class, "outField");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_REGEXFIELD = ReflectionUtil.getField(TextIndexNormalization.class, "regexField");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_RECURSIVE = ReflectionUtil.getField(TextIndexNormalization.class, "recursive");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_CASESENSITIVE = ReflectionUtil.getField(TextIndexNormalization.class, "caseSensitive");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_MAXLEVENSHTEINDISTANCE = ReflectionUtil.getField(TextIndexNormalization.class, "maxLevenshteinDistance");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_WORDSEPARATORCHARACTERRE = ReflectionUtil.getField(TextIndexNormalization.class, "wordSeparatorCharacterRE");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_WORDRE = ReflectionUtil.getField(TextIndexNormalization.class, "wordRE");
   java.lang.reflect.Field TEXTINDEXNORMALIZATION_TOKENIZE = ReflectionUtil.getField(TextIndexNormalization.class, "tokenize");
   java.lang.reflect.Field UNIFORMDISTRIBUTION_LOWER = ReflectionUtil.getField(UniformDistribution.class, "lower");
   java.lang.reflect.Field UNIFORMDISTRIBUTION_UPPER = ReflectionUtil.getField(UniformDistribution.class, "upper");
   java.lang.reflect.Field UNIVARIATESTATS_FIELD = ReflectionUtil.getField(UnivariateStats.class, "field");
   java.lang.reflect.Field UNIVARIATESTATS_WEIGHTED = ReflectionUtil.getField(UnivariateStats.class, "weighted");
   java.lang.reflect.Field VALUE_VALUE = ReflectionUtil.getField(Value.class, "value");
   java.lang.reflect.Field VALUE_DISPLAYVALUE = ReflectionUtil.getField(Value.class, "displayValue");
   java.lang.reflect.Field VALUE_PROPERTY = ReflectionUtil.getField(Value.class, "property");
   java.lang.reflect.Field VERIFICATIONFIELD_FIELD = ReflectionUtil.getField(VerificationField.class, "field");
   java.lang.reflect.Field VERIFICATIONFIELD_COLUMN = ReflectionUtil.getField(VerificationField.class, "column");
   java.lang.reflect.Field VERIFICATIONFIELD_PRECISION = ReflectionUtil.getField(VerificationField.class, "precision");
   java.lang.reflect.Field VERIFICATIONFIELD_ZEROTHRESHOLD = ReflectionUtil.getField(VerificationField.class, "zeroThreshold");
}
