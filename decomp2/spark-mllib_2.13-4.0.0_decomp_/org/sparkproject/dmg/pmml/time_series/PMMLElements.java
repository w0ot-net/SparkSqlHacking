package org.sparkproject.dmg.pmml.time_series;

import java.lang.reflect.Field;
import org.sparkproject.jpmml.model.ReflectionUtil;

public interface PMMLElements {
   Field AR_EXTENSIONS = ReflectionUtil.getField(AR.class, "extensions");
   Field AR_ARRAY = ReflectionUtil.getField(AR.class, "array");
   Field ARIMA_EXTENSIONS = ReflectionUtil.getField(ARIMA.class, "extensions");
   Field ARIMA_NONSEASONALCOMPONENT = ReflectionUtil.getField(ARIMA.class, "nonseasonalComponent");
   Field ARIMA_SEASONALCOMPONENT = ReflectionUtil.getField(ARIMA.class, "seasonalComponent");
   Field ARIMA_DYNAMICREGRESSORS = ReflectionUtil.getField(ARIMA.class, "dynamicRegressors");
   Field ARIMA_MAXIMUMLIKELIHOODSTAT = ReflectionUtil.getField(ARIMA.class, "maximumLikelihoodStat");
   Field ARIMA_OUTLIEREFFECTS = ReflectionUtil.getField(ARIMA.class, "outlierEffects");
   Field ARMAPART_EXTENSIONS = ReflectionUtil.getField(ARMAPart.class, "extensions");
   Field ARMAPART_AR = ReflectionUtil.getField(ARMAPart.class, "ar");
   Field ARMAPART_MA = ReflectionUtil.getField(ARMAPart.class, "ma");
   Field DENOMINATOR_EXTENSIONS = ReflectionUtil.getField(Denominator.class, "extensions");
   Field DENOMINATOR_NONSEASONALFACTOR = ReflectionUtil.getField(Denominator.class, "nonseasonalFactor");
   Field DENOMINATOR_SEASONALFACTOR = ReflectionUtil.getField(Denominator.class, "seasonalFactor");
   Field DYNAMICREGRESSOR_EXTENSIONS = ReflectionUtil.getField(DynamicRegressor.class, "extensions");
   Field DYNAMICREGRESSOR_NUMERATOR = ReflectionUtil.getField(DynamicRegressor.class, "numerator");
   Field DYNAMICREGRESSOR_DENOMINATOR = ReflectionUtil.getField(DynamicRegressor.class, "denominator");
   Field DYNAMICREGRESSOR_REGRESSORVALUES = ReflectionUtil.getField(DynamicRegressor.class, "regressorValues");
   Field EXPONENTIALSMOOTHING_LEVEL = ReflectionUtil.getField(ExponentialSmoothing.class, "level");
   Field EXPONENTIALSMOOTHING_TRENDEXPOSMOOTH = ReflectionUtil.getField(ExponentialSmoothing.class, "trendExpoSmooth");
   Field EXPONENTIALSMOOTHING_SEASONALITYEXPOSMOOTH = ReflectionUtil.getField(ExponentialSmoothing.class, "seasonalityExpoSmooth");
   Field EXPONENTIALSMOOTHING_TIMEVALUES = ReflectionUtil.getField(ExponentialSmoothing.class, "timeValues");
   Field FINALNOISE_ARRAY = ReflectionUtil.getField(FinalNoise.class, "array");
   Field FINALNU_ARRAY = ReflectionUtil.getField(FinalNu.class, "array");
   Field FINALOMEGA_MATRIX = ReflectionUtil.getField(FinalOmega.class, "matrix");
   Field FINALPREDICTEDNOISE_ARRAY = ReflectionUtil.getField(FinalPredictedNoise.class, "array");
   Field FINALSTATEVECTOR_ARRAY = ReflectionUtil.getField(FinalStateVector.class, "array");
   Field FINALTHETA_THETAS = ReflectionUtil.getField(FinalTheta.class, "thetas");
   Field GARCH_EXTENSIONS = ReflectionUtil.getField(GARCH.class, "extensions");
   Field GARCH_ARMAPART = ReflectionUtil.getField(GARCH.class, "armaPart");
   Field GARCH_GARCHPART = ReflectionUtil.getField(GARCH.class, "garchPart");
   Field GARCHPART_EXTENSIONS = ReflectionUtil.getField(GARCHPart.class, "extensions");
   Field GARCHPART_RESIDUALSQUARECOEFFICIENTS = ReflectionUtil.getField(GARCHPart.class, "residualSquareCoefficients");
   Field GARCHPART_VARIANCECOEFFICIENTS = ReflectionUtil.getField(GARCHPart.class, "varianceCoefficients");
   Field HVECTOR_ARRAY = ReflectionUtil.getField(HVector.class, "array");
   Field INTERCEPTVECTOR_EXTENSIONS = ReflectionUtil.getField(InterceptVector.class, "extensions");
   Field INTERCEPTVECTOR_ARRAY = ReflectionUtil.getField(InterceptVector.class, "array");
   Field KALMANSTATE_FINALOMEGA = ReflectionUtil.getField(KalmanState.class, "finalOmega");
   Field KALMANSTATE_FINALSTATEVECTOR = ReflectionUtil.getField(KalmanState.class, "finalStateVector");
   Field KALMANSTATE_HVECTOR = ReflectionUtil.getField(KalmanState.class, "hVector");
   Field MA_EXTENSIONS = ReflectionUtil.getField(MA.class, "extensions");
   Field MA_MACOEFFICIENTS = ReflectionUtil.getField(MA.class, "maCoefficients");
   Field MA_RESIDUALS = ReflectionUtil.getField(MA.class, "residuals");
   Field MACOEFFICIENTS_EXTENSIONS = ReflectionUtil.getField(MACoefficients.class, "extensions");
   Field MACOEFFICIENTS_ARRAY = ReflectionUtil.getField(MACoefficients.class, "array");
   Field MAXIMUMLIKELIHOODSTAT_KALMANSTATE = ReflectionUtil.getField(MaximumLikelihoodStat.class, "kalmanState");
   Field MAXIMUMLIKELIHOODSTAT_THETARECURSIONSTATE = ReflectionUtil.getField(MaximumLikelihoodStat.class, "thetaRecursionState");
   Field MEASUREMENTMATRIX_EXTENSIONS = ReflectionUtil.getField(MeasurementMatrix.class, "extensions");
   Field MEASUREMENTMATRIX_MATRIX = ReflectionUtil.getField(MeasurementMatrix.class, "matrix");
   Field NONSEASONALCOMPONENT_EXTENSIONS = ReflectionUtil.getField(NonseasonalComponent.class, "extensions");
   Field NONSEASONALCOMPONENT_AR = ReflectionUtil.getField(NonseasonalComponent.class, "ar");
   Field NONSEASONALCOMPONENT_MA = ReflectionUtil.getField(NonseasonalComponent.class, "ma");
   Field NONSEASONALFACTOR_EXTENSIONS = ReflectionUtil.getField(NonseasonalFactor.class, "extensions");
   Field NONSEASONALFACTOR_ARRAY = ReflectionUtil.getField(NonseasonalFactor.class, "array");
   Field NUMERATOR_EXTENSIONS = ReflectionUtil.getField(Numerator.class, "extensions");
   Field NUMERATOR_NONSEASONALFACTOR = ReflectionUtil.getField(Numerator.class, "nonseasonalFactor");
   Field NUMERATOR_SEASONALFACTOR = ReflectionUtil.getField(Numerator.class, "seasonalFactor");
   Field OBSERVATIONVARIANCEMATRIX_EXTENSIONS = ReflectionUtil.getField(ObservationVarianceMatrix.class, "extensions");
   Field OBSERVATIONVARIANCEMATRIX_MATRIX = ReflectionUtil.getField(ObservationVarianceMatrix.class, "matrix");
   Field OUTLIEREFFECT_EXTENSIONS = ReflectionUtil.getField(OutlierEffect.class, "extensions");
   Field PASTVARIANCES_EXTENSIONS = ReflectionUtil.getField(PastVariances.class, "extensions");
   Field PASTVARIANCES_ARRAY = ReflectionUtil.getField(PastVariances.class, "array");
   Field PREDICTEDSTATECOVARIANCEMATRIX_EXTENSIONS = ReflectionUtil.getField(PredictedStateCovarianceMatrix.class, "extensions");
   Field PREDICTEDSTATECOVARIANCEMATRIX_MATRIX = ReflectionUtil.getField(PredictedStateCovarianceMatrix.class, "matrix");
   Field PSIVECTOR_EXTENSIONS = ReflectionUtil.getField(PsiVector.class, "extensions");
   Field PSIVECTOR_ARRAY = ReflectionUtil.getField(PsiVector.class, "array");
   Field REGRESSORVALUES_EXTENSIONS = ReflectionUtil.getField(RegressorValues.class, "extensions");
   Field REGRESSORVALUES_TIMESERIES = ReflectionUtil.getField(RegressorValues.class, "timeSeries");
   Field REGRESSORVALUES_TRENDCOEFFICIENTS = ReflectionUtil.getField(RegressorValues.class, "trendCoefficients");
   Field REGRESSORVALUES_TRANSFERFUNCTIONVALUES = ReflectionUtil.getField(RegressorValues.class, "transferFunctionValues");
   Field RESIDUALS_EXTENSIONS = ReflectionUtil.getField(Residuals.class, "extensions");
   Field RESIDUALS_ARRAY = ReflectionUtil.getField(Residuals.class, "array");
   Field RESIDUALSQUARECOEFFICIENTS_EXTENSIONS = ReflectionUtil.getField(ResidualSquareCoefficients.class, "extensions");
   Field RESIDUALSQUARECOEFFICIENTS_RESIDUALS = ReflectionUtil.getField(ResidualSquareCoefficients.class, "residuals");
   Field RESIDUALSQUARECOEFFICIENTS_MACOEFFICIENTS = ReflectionUtil.getField(ResidualSquareCoefficients.class, "maCoefficients");
   Field SEASONALCOMPONENT_EXTENSIONS = ReflectionUtil.getField(SeasonalComponent.class, "extensions");
   Field SEASONALCOMPONENT_AR = ReflectionUtil.getField(SeasonalComponent.class, "ar");
   Field SEASONALCOMPONENT_MA = ReflectionUtil.getField(SeasonalComponent.class, "ma");
   Field SEASONALFACTOR_EXTENSIONS = ReflectionUtil.getField(SeasonalFactor.class, "extensions");
   Field SEASONALFACTOR_ARRAY = ReflectionUtil.getField(SeasonalFactor.class, "array");
   Field SEASONALITYEXPOSMOOTH_ARRAY = ReflectionUtil.getField(SeasonalityExpoSmooth.class, "array");
   Field SEASONALTRENDDECOMPOSITION_EXTENSIONS = ReflectionUtil.getField(SeasonalTrendDecomposition.class, "extensions");
   Field SELECTEDSTATECOVARIANCEMATRIX_EXTENSIONS = ReflectionUtil.getField(SelectedStateCovarianceMatrix.class, "extensions");
   Field SELECTEDSTATECOVARIANCEMATRIX_MATRIX = ReflectionUtil.getField(SelectedStateCovarianceMatrix.class, "matrix");
   Field SPECTRALANALYSIS_EXTENSIONS = ReflectionUtil.getField(SpectralAnalysis.class, "extensions");
   Field STATESPACEMODEL_EXTENSIONS = ReflectionUtil.getField(StateSpaceModel.class, "extensions");
   Field STATESPACEMODEL_STATEVECTOR = ReflectionUtil.getField(StateSpaceModel.class, "stateVector");
   Field STATESPACEMODEL_TRANSITIONMATRIX = ReflectionUtil.getField(StateSpaceModel.class, "transitionMatrix");
   Field STATESPACEMODEL_MEASUREMENTMATRIX = ReflectionUtil.getField(StateSpaceModel.class, "measurementMatrix");
   Field STATESPACEMODEL_INTERCEPTVECTOR = ReflectionUtil.getField(StateSpaceModel.class, "interceptVector");
   Field STATESPACEMODEL_PREDICTEDSTATECOVARIANCEMATRIX = ReflectionUtil.getField(StateSpaceModel.class, "predictedStateCovarianceMatrix");
   Field STATESPACEMODEL_SELECTEDSTATECOVARIANCEMATRIX = ReflectionUtil.getField(StateSpaceModel.class, "selectedStateCovarianceMatrix");
   Field STATESPACEMODEL_OBSERVATIONVARIANCEMATRIX = ReflectionUtil.getField(StateSpaceModel.class, "observationVarianceMatrix");
   Field STATESPACEMODEL_PSIVECTOR = ReflectionUtil.getField(StateSpaceModel.class, "psiVector");
   Field STATESPACEMODEL_DYNAMICREGRESSORS = ReflectionUtil.getField(StateSpaceModel.class, "dynamicRegressors");
   Field STATEVECTOR_EXTENSIONS = ReflectionUtil.getField(StateVector.class, "extensions");
   Field STATEVECTOR_ARRAY = ReflectionUtil.getField(StateVector.class, "array");
   Field THETARECURSIONSTATE_FINALNOISE = ReflectionUtil.getField(ThetaRecursionState.class, "finalNoise");
   Field THETARECURSIONSTATE_FINALPREDICTEDNOISE = ReflectionUtil.getField(ThetaRecursionState.class, "finalPredictedNoise");
   Field THETARECURSIONSTATE_FINALTHETA = ReflectionUtil.getField(ThetaRecursionState.class, "finalTheta");
   Field THETARECURSIONSTATE_FINALNU = ReflectionUtil.getField(ThetaRecursionState.class, "finalNu");
   Field TIMEANCHOR_TIMECYCLES = ReflectionUtil.getField(TimeAnchor.class, "timeCycles");
   Field TIMEANCHOR_TIMEEXCEPTIONS = ReflectionUtil.getField(TimeAnchor.class, "timeExceptions");
   Field TIMECYCLE_ARRAY = ReflectionUtil.getField(TimeCycle.class, "array");
   Field TIMEEXCEPTION_ARRAY = ReflectionUtil.getField(TimeException.class, "array");
   Field TIMESERIES_TIMEANCHOR = ReflectionUtil.getField(TimeSeries.class, "timeAnchor");
   Field TIMESERIES_TIMEEXCEPTIONS = ReflectionUtil.getField(TimeSeries.class, "timeExceptions");
   Field TIMESERIES_TIMEVALUES = ReflectionUtil.getField(TimeSeries.class, "timeValues");
   Field TIMESERIESMODEL_EXTENSIONS = ReflectionUtil.getField(TimeSeriesModel.class, "extensions");
   Field TIMESERIESMODEL_MININGSCHEMA = ReflectionUtil.getField(TimeSeriesModel.class, "miningSchema");
   Field TIMESERIESMODEL_OUTPUT = ReflectionUtil.getField(TimeSeriesModel.class, "output");
   Field TIMESERIESMODEL_MODELSTATS = ReflectionUtil.getField(TimeSeriesModel.class, "modelStats");
   Field TIMESERIESMODEL_MODELEXPLANATION = ReflectionUtil.getField(TimeSeriesModel.class, "modelExplanation");
   Field TIMESERIESMODEL_LOCALTRANSFORMATIONS = ReflectionUtil.getField(TimeSeriesModel.class, "localTransformations");
   Field TIMESERIESMODEL_TIMESERIES = ReflectionUtil.getField(TimeSeriesModel.class, "timeSeries");
   Field TIMESERIESMODEL_SPECTRALANALYSIS = ReflectionUtil.getField(TimeSeriesModel.class, "spectralAnalysis");
   Field TIMESERIESMODEL_ARIMA = ReflectionUtil.getField(TimeSeriesModel.class, "arima");
   Field TIMESERIESMODEL_EXPONENTIALSMOOTHING = ReflectionUtil.getField(TimeSeriesModel.class, "exponentialSmoothing");
   Field TIMESERIESMODEL_SEASONALTRENDDECOMPOSITION = ReflectionUtil.getField(TimeSeriesModel.class, "seasonalTrendDecomposition");
   Field TIMESERIESMODEL_STATESPACEMODEL = ReflectionUtil.getField(TimeSeriesModel.class, "stateSpaceModel");
   Field TIMESERIESMODEL_GARCH = ReflectionUtil.getField(TimeSeriesModel.class, "garch");
   Field TIMESERIESMODEL_MODELVERIFICATION = ReflectionUtil.getField(TimeSeriesModel.class, "modelVerification");
   Field TIMEVALUE_TIMESTAMP = ReflectionUtil.getField(TimeValue.class, "timestamp");
   Field TRANSFERFUNCTIONVALUES_ARRAY = ReflectionUtil.getField(TransferFunctionValues.class, "array");
   Field TRANSITIONMATRIX_EXTENSIONS = ReflectionUtil.getField(TransitionMatrix.class, "extensions");
   Field TRANSITIONMATRIX_MATRIX = ReflectionUtil.getField(TransitionMatrix.class, "matrix");
   Field TRENDCOEFFICIENTS_EXTENSIONS = ReflectionUtil.getField(TrendCoefficients.class, "extensions");
   Field TRENDCOEFFICIENTS_REALSPARSEARRAY = ReflectionUtil.getField(TrendCoefficients.class, "realSparseArray");
   Field TRENDEXPOSMOOTH_ARRAY = ReflectionUtil.getField(TrendExpoSmooth.class, "array");
   Field VARIANCECOEFFICIENTS_EXTENSIONS = ReflectionUtil.getField(VarianceCoefficients.class, "extensions");
   Field VARIANCECOEFFICIENTS_PASTVARIANCES = ReflectionUtil.getField(VarianceCoefficients.class, "pastVariances");
   Field VARIANCECOEFFICIENTS_MACOEFFICIENTS = ReflectionUtil.getField(VarianceCoefficients.class, "maCoefficients");
}
