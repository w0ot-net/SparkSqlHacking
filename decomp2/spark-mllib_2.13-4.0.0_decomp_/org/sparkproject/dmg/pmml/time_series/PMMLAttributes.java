package org.sparkproject.dmg.pmml.time_series;

import java.lang.reflect.Field;
import org.sparkproject.jpmml.model.ReflectionUtil;

public interface PMMLAttributes {
   Field ARIMA_RMSE = ReflectionUtil.getField(ARIMA.class, "rmse");
   Field ARIMA_TRANSFORMATION = ReflectionUtil.getField(ARIMA.class, "transformation");
   Field ARIMA_CONSTANTTERM = ReflectionUtil.getField(ARIMA.class, "constantTerm");
   Field ARIMA_PREDICTIONMETHOD = ReflectionUtil.getField(ARIMA.class, "predictionMethod");
   Field ARMAPART_CONSTANT = ReflectionUtil.getField(ARMAPart.class, "constant");
   Field ARMAPART_P = ReflectionUtil.getField(ARMAPart.class, "p");
   Field ARMAPART_Q = ReflectionUtil.getField(ARMAPart.class, "q");
   Field DYNAMICREGRESSOR_FIELD = ReflectionUtil.getField(DynamicRegressor.class, "field");
   Field DYNAMICREGRESSOR_TRANSFORMATION = ReflectionUtil.getField(DynamicRegressor.class, "transformation");
   Field DYNAMICREGRESSOR_DELAY = ReflectionUtil.getField(DynamicRegressor.class, "delay");
   Field DYNAMICREGRESSOR_FUTUREVALUESMETHOD = ReflectionUtil.getField(DynamicRegressor.class, "futureValuesMethod");
   Field DYNAMICREGRESSOR_TARGETFIELD = ReflectionUtil.getField(DynamicRegressor.class, "targetField");
   Field EXPONENTIALSMOOTHING_RMSE = ReflectionUtil.getField(ExponentialSmoothing.class, "rmse");
   Field EXPONENTIALSMOOTHING_TRANSFORMATION = ReflectionUtil.getField(ExponentialSmoothing.class, "transformation");
   Field GARCHPART_CONSTANT = ReflectionUtil.getField(GARCHPart.class, "constant");
   Field GARCHPART_GP = ReflectionUtil.getField(GARCHPart.class, "gp");
   Field GARCHPART_GQ = ReflectionUtil.getField(GARCHPart.class, "gq");
   Field INTERCEPTVECTOR_TYPE = ReflectionUtil.getField(InterceptVector.class, "type");
   Field LEVEL_ALPHA = ReflectionUtil.getField(Level.class, "alpha");
   Field LEVEL_QUADRATICSMOOTHEDVALUE = ReflectionUtil.getField(Level.class, "quadraticSmoothedValue");
   Field LEVEL_CUBICSMOOTHEDVALUE = ReflectionUtil.getField(Level.class, "cubicSmoothedValue");
   Field LEVEL_SMOOTHEDVALUE = ReflectionUtil.getField(Level.class, "smoothedValue");
   Field MAXIMUMLIKELIHOODSTAT_METHOD = ReflectionUtil.getField(MaximumLikelihoodStat.class, "method");
   Field MAXIMUMLIKELIHOODSTAT_PERIODDEFICIT = ReflectionUtil.getField(MaximumLikelihoodStat.class, "periodDeficit");
   Field NONSEASONALCOMPONENT_P = ReflectionUtil.getField(NonseasonalComponent.class, "p");
   Field NONSEASONALCOMPONENT_D = ReflectionUtil.getField(NonseasonalComponent.class, "d");
   Field NONSEASONALCOMPONENT_Q = ReflectionUtil.getField(NonseasonalComponent.class, "q");
   Field NONSEASONALFACTOR_DIFFERENCE = ReflectionUtil.getField(NonseasonalFactor.class, "difference");
   Field NONSEASONALFACTOR_MAXIMUMORDER = ReflectionUtil.getField(NonseasonalFactor.class, "maximumOrder");
   Field OUTLIEREFFECT_TYPE = ReflectionUtil.getField(OutlierEffect.class, "type");
   Field OUTLIEREFFECT_STARTTIME = ReflectionUtil.getField(OutlierEffect.class, "startTime");
   Field OUTLIEREFFECT_MAGNITUDE = ReflectionUtil.getField(OutlierEffect.class, "magnitude");
   Field OUTLIEREFFECT_DAMPINGCOEFFICIENT = ReflectionUtil.getField(OutlierEffect.class, "dampingCoefficient");
   Field PSIVECTOR_TARGETFIELD = ReflectionUtil.getField(PsiVector.class, "targetField");
   Field PSIVECTOR_VARIANCE = ReflectionUtil.getField(PsiVector.class, "variance");
   Field SEASONALCOMPONENT_P = ReflectionUtil.getField(SeasonalComponent.class, "p");
   Field SEASONALCOMPONENT_D = ReflectionUtil.getField(SeasonalComponent.class, "d");
   Field SEASONALCOMPONENT_Q = ReflectionUtil.getField(SeasonalComponent.class, "q");
   Field SEASONALCOMPONENT_PERIOD = ReflectionUtil.getField(SeasonalComponent.class, "period");
   Field SEASONALFACTOR_DIFFERENCE = ReflectionUtil.getField(SeasonalFactor.class, "difference");
   Field SEASONALFACTOR_MAXIMUMORDER = ReflectionUtil.getField(SeasonalFactor.class, "maximumOrder");
   Field SEASONALITYEXPOSMOOTH_TYPE = ReflectionUtil.getField(SeasonalityExpoSmooth.class, "type");
   Field SEASONALITYEXPOSMOOTH_PERIOD = ReflectionUtil.getField(SeasonalityExpoSmooth.class, "period");
   Field SEASONALITYEXPOSMOOTH_UNIT = ReflectionUtil.getField(SeasonalityExpoSmooth.class, "unit");
   Field SEASONALITYEXPOSMOOTH_PHASE = ReflectionUtil.getField(SeasonalityExpoSmooth.class, "phase");
   Field SEASONALITYEXPOSMOOTH_DELTA = ReflectionUtil.getField(SeasonalityExpoSmooth.class, "delta");
   Field STATESPACEMODEL_VARIANCE = ReflectionUtil.getField(StateSpaceModel.class, "variance");
   Field STATESPACEMODEL_PERIOD = ReflectionUtil.getField(StateSpaceModel.class, "period");
   Field STATESPACEMODEL_INTERCEPT = ReflectionUtil.getField(StateSpaceModel.class, "intercept");
   Field THETA_I = ReflectionUtil.getField(Theta.class, "i");
   Field THETA_J = ReflectionUtil.getField(Theta.class, "j");
   Field THETA_THETA = ReflectionUtil.getField(Theta.class, "theta");
   Field TIMEANCHOR_TYPE = ReflectionUtil.getField(TimeAnchor.class, "type");
   Field TIMEANCHOR_OFFSET = ReflectionUtil.getField(TimeAnchor.class, "offset");
   Field TIMEANCHOR_STEPSIZE = ReflectionUtil.getField(TimeAnchor.class, "stepsize");
   Field TIMEANCHOR_DISPLAYNAME = ReflectionUtil.getField(TimeAnchor.class, "displayName");
   Field TIMECYCLE_LENGTH = ReflectionUtil.getField(TimeCycle.class, "length");
   Field TIMECYCLE_TYPE = ReflectionUtil.getField(TimeCycle.class, "type");
   Field TIMECYCLE_DISPLAYNAME = ReflectionUtil.getField(TimeCycle.class, "displayName");
   Field TIMEEXCEPTION_TYPE = ReflectionUtil.getField(TimeException.class, "type");
   Field TIMEEXCEPTION_COUNT = ReflectionUtil.getField(TimeException.class, "count");
   Field TIMESERIES_USAGE = ReflectionUtil.getField(TimeSeries.class, "usage");
   Field TIMESERIES_STARTTIME = ReflectionUtil.getField(TimeSeries.class, "startTime");
   Field TIMESERIES_ENDTIME = ReflectionUtil.getField(TimeSeries.class, "endTime");
   Field TIMESERIES_INTERPOLATIONMETHOD = ReflectionUtil.getField(TimeSeries.class, "interpolationMethod");
   Field TIMESERIES_FIELD = ReflectionUtil.getField(TimeSeries.class, "field");
   Field TIMESERIESMODEL_MODELNAME = ReflectionUtil.getField(TimeSeriesModel.class, "modelName");
   Field TIMESERIESMODEL_MININGFUNCTION = ReflectionUtil.getField(TimeSeriesModel.class, "miningFunction");
   Field TIMESERIESMODEL_ALGORITHMNAME = ReflectionUtil.getField(TimeSeriesModel.class, "algorithmName");
   Field TIMESERIESMODEL_BESTFIT = ReflectionUtil.getField(TimeSeriesModel.class, "bestFit");
   Field TIMESERIESMODEL_SCORABLE = ReflectionUtil.getField(TimeSeriesModel.class, "scorable");
   Field TIMESERIESMODEL_MATHCONTEXT = ReflectionUtil.getField(TimeSeriesModel.class, "mathContext");
   Field TIMEVALUE_INDEX = ReflectionUtil.getField(TimeValue.class, "index");
   Field TIMEVALUE_TIME = ReflectionUtil.getField(TimeValue.class, "time");
   Field TIMEVALUE_VALUE = ReflectionUtil.getField(TimeValue.class, "value");
   Field TIMEVALUE_STANDARDERROR = ReflectionUtil.getField(TimeValue.class, "standardError");
   Field TRENDEXPOSMOOTH_TREND = ReflectionUtil.getField(TrendExpoSmooth.class, "trend");
   Field TRENDEXPOSMOOTH_GAMMA = ReflectionUtil.getField(TrendExpoSmooth.class, "gamma");
   Field TRENDEXPOSMOOTH_PHI = ReflectionUtil.getField(TrendExpoSmooth.class, "phi");
   Field TRENDEXPOSMOOTH_SMOOTHEDVALUE = ReflectionUtil.getField(TrendExpoSmooth.class, "smoothedValue");
}
