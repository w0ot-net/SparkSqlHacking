package org.sparkproject.dmg.pmml.sequence;

import java.lang.reflect.Field;
import org.sparkproject.jpmml.model.ReflectionUtil;

public interface PMMLAttributes {
   Field CONSTRAINTS_MINIMUMNUMBEROFITEMS = ReflectionUtil.getField(Constraints.class, "minimumNumberOfItems");
   Field CONSTRAINTS_MAXIMUMNUMBEROFITEMS = ReflectionUtil.getField(Constraints.class, "maximumNumberOfItems");
   Field CONSTRAINTS_MINIMUMNUMBEROFANTECEDENTITEMS = ReflectionUtil.getField(Constraints.class, "minimumNumberOfAntecedentItems");
   Field CONSTRAINTS_MAXIMUMNUMBEROFANTECEDENTITEMS = ReflectionUtil.getField(Constraints.class, "maximumNumberOfAntecedentItems");
   Field CONSTRAINTS_MINIMUMNUMBEROFCONSEQUENTITEMS = ReflectionUtil.getField(Constraints.class, "minimumNumberOfConsequentItems");
   Field CONSTRAINTS_MAXIMUMNUMBEROFCONSEQUENTITEMS = ReflectionUtil.getField(Constraints.class, "maximumNumberOfConsequentItems");
   Field CONSTRAINTS_MINIMUMSUPPORT = ReflectionUtil.getField(Constraints.class, "minimumSupport");
   Field CONSTRAINTS_MINIMUMCONFIDENCE = ReflectionUtil.getField(Constraints.class, "minimumConfidence");
   Field CONSTRAINTS_MINIMUMLIFT = ReflectionUtil.getField(Constraints.class, "minimumLift");
   Field CONSTRAINTS_MINIMUMTOTALSEQUENCETIME = ReflectionUtil.getField(Constraints.class, "minimumTotalSequenceTime");
   Field CONSTRAINTS_MAXIMUMTOTALSEQUENCETIME = ReflectionUtil.getField(Constraints.class, "maximumTotalSequenceTime");
   Field CONSTRAINTS_MINIMUMITEMSETSEPARATIONTIME = ReflectionUtil.getField(Constraints.class, "minimumItemsetSeparationTime");
   Field CONSTRAINTS_MAXIMUMITEMSETSEPARATIONTIME = ReflectionUtil.getField(Constraints.class, "maximumItemsetSeparationTime");
   Field CONSTRAINTS_MINIMUMANTCONSSEPARATIONTIME = ReflectionUtil.getField(Constraints.class, "minimumAntConsSeparationTime");
   Field CONSTRAINTS_MAXIMUMANTCONSSEPARATIONTIME = ReflectionUtil.getField(Constraints.class, "maximumAntConsSeparationTime");
   Field DELIMITER_DELIMITER = ReflectionUtil.getField(Delimiter.class, "delimiter");
   Field DELIMITER_GAP = ReflectionUtil.getField(Delimiter.class, "gap");
   Field SEQUENCE_ID = ReflectionUtil.getField(Sequence.class, "id");
   Field SEQUENCE_NUMBEROFSETS = ReflectionUtil.getField(Sequence.class, "numberOfSets");
   Field SEQUENCE_OCCURRENCE = ReflectionUtil.getField(Sequence.class, "occurrence");
   Field SEQUENCE_SUPPORT = ReflectionUtil.getField(Sequence.class, "support");
   Field SEQUENCEMODEL_MODELNAME = ReflectionUtil.getField(SequenceModel.class, "modelName");
   Field SEQUENCEMODEL_MININGFUNCTION = ReflectionUtil.getField(SequenceModel.class, "miningFunction");
   Field SEQUENCEMODEL_ALGORITHMNAME = ReflectionUtil.getField(SequenceModel.class, "algorithmName");
   Field SEQUENCEMODEL_NUMBEROFTRANSACTIONS = ReflectionUtil.getField(SequenceModel.class, "numberOfTransactions");
   Field SEQUENCEMODEL_MAXNUMBEROFITEMSPERTRANSACTION = ReflectionUtil.getField(SequenceModel.class, "maxNumberOfItemsPerTransaction");
   Field SEQUENCEMODEL_AVGNUMBEROFITEMSPERTRANSACTION = ReflectionUtil.getField(SequenceModel.class, "avgNumberOfItemsPerTransaction");
   Field SEQUENCEMODEL_NUMBEROFTRANSACTIONGROUPS = ReflectionUtil.getField(SequenceModel.class, "numberOfTransactionGroups");
   Field SEQUENCEMODEL_MAXNUMBEROFTASPERTAGROUP = ReflectionUtil.getField(SequenceModel.class, "maxNumberOfTAsPerTAGroup");
   Field SEQUENCEMODEL_AVGNUMBEROFTASPERTAGROUP = ReflectionUtil.getField(SequenceModel.class, "avgNumberOfTAsPerTAGroup");
   Field SEQUENCEMODEL_MINIMUMSUPPORT = ReflectionUtil.getField(SequenceModel.class, "minimumSupport");
   Field SEQUENCEMODEL_MINIMUMCONFIDENCE = ReflectionUtil.getField(SequenceModel.class, "minimumConfidence");
   Field SEQUENCEMODEL_LENGTHLIMIT = ReflectionUtil.getField(SequenceModel.class, "lengthLimit");
   Field SEQUENCEMODEL_NUMBEROFITEMS = ReflectionUtil.getField(SequenceModel.class, "numberOfItems");
   Field SEQUENCEMODEL_NUMBEROFSETS = ReflectionUtil.getField(SequenceModel.class, "numberOfSets");
   Field SEQUENCEMODEL_NUMBEROFSEQUENCES = ReflectionUtil.getField(SequenceModel.class, "numberOfSequences");
   Field SEQUENCEMODEL_NUMBEROFRULES = ReflectionUtil.getField(SequenceModel.class, "numberOfRules");
   Field SEQUENCEMODEL_TIMEWINDOWWIDTH = ReflectionUtil.getField(SequenceModel.class, "timeWindowWidth");
   Field SEQUENCEMODEL_MINIMUMTIME = ReflectionUtil.getField(SequenceModel.class, "minimumTime");
   Field SEQUENCEMODEL_MAXIMUMTIME = ReflectionUtil.getField(SequenceModel.class, "maximumTime");
   Field SEQUENCEMODEL_SCORABLE = ReflectionUtil.getField(SequenceModel.class, "scorable");
   Field SEQUENCEMODEL_MATHCONTEXT = ReflectionUtil.getField(SequenceModel.class, "mathContext");
   Field SEQUENCEREFERENCE_SEQID = ReflectionUtil.getField(SequenceReference.class, "seqId");
   Field SEQUENCERULE_ID = ReflectionUtil.getField(SequenceRule.class, "id");
   Field SEQUENCERULE_NUMBEROFSETS = ReflectionUtil.getField(SequenceRule.class, "numberOfSets");
   Field SEQUENCERULE_OCCURRENCE = ReflectionUtil.getField(SequenceRule.class, "occurrence");
   Field SEQUENCERULE_SUPPORT = ReflectionUtil.getField(SequenceRule.class, "support");
   Field SEQUENCERULE_CONFIDENCE = ReflectionUtil.getField(SequenceRule.class, "confidence");
   Field SEQUENCERULE_LIFT = ReflectionUtil.getField(SequenceRule.class, "lift");
   Field SETPREDICATE_ID = ReflectionUtil.getField(SetPredicate.class, "id");
   Field SETPREDICATE_FIELD = ReflectionUtil.getField(SetPredicate.class, "field");
   Field SETPREDICATE_OPERATOR = ReflectionUtil.getField(SetPredicate.class, "operator");
   Field SETREFERENCE_SETID = ReflectionUtil.getField(SetReference.class, "setId");
   Field TIME_MIN = ReflectionUtil.getField(Time.class, "min");
   Field TIME_MAX = ReflectionUtil.getField(Time.class, "max");
   Field TIME_MEAN = ReflectionUtil.getField(Time.class, "mean");
   Field TIME_STANDARDDEVIATION = ReflectionUtil.getField(Time.class, "standardDeviation");
}
